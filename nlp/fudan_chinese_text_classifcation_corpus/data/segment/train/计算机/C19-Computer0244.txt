软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 1 期   No.1   1999 
 
 
 
 Intranet 上 数据库 中间件 原型 的 研究 与 构造 *   
 马 　 松 1 　 盛浩林 2   
 　 　 摘要 　 研究 和 分析 了 Intranet 上 常用 的 数据库 接口 方法 , 在 此基础 上 , 提出 了 一种 以 DB ( database ) 中间件 形式 在 Intranet 中 应用 的 新 方法 . 通过 对 数据库 连接 和 访问 机制 的 管理 , 改善 网络 上 多用户 访问 数据库 的 性能 , 优化 网络 传输 , 并 支持 与 多种 数据库 的 接口 . 详细 地 给出 了 基于 该 方法 而 开发 的 DB 中间件 的 设计 思想 、 实现 方法 和 采用 的 关键技术 . 
 　 　 关键词 　 Intranet , 数据库 接口 , 中间件 , Java , JDBC ( Java   database   connectivity ) . 
 　 　 中图法 分类号 　 TP393 
 Research   and   Construction   of   a   Database   Middleware   Prototype   on   Intranet   
 MA   Song1 　 SHENG   Hao - lin2   
 　 　 Abstract 　 In   this   paper ,   the   common   database   interface   methods   on   Intranet   are   studied   and   analyzed .   Based   on   that ,   a   new   method   using   DB   middleware   under   the   Intranet   environment   is   posed .   The   key   point   is   to   provide   an   efficient   and   powerful   mechanism   to   manage   database   connection   and   data   access   to   meet   the   needs   of   application   requirements .   It   will   improve   the   network   performance   for   multi - user   accessing   database   and   optimize   network   transmission .   It   can   provide   the   interface   with   the   various   RDBMSs   ( relational   database   management   systems ) .   The   design   considerations ,   the   implementing   and   the   critical   techniques   used   are   given   and   explained   in   detail   in   this   paper . 
 　 　 Key   words 　 Intranet ,   database   interface ,   middleware ,   Java ,   JDBC   ( Java   database   connectivity ) . 
 　 　 今日 企业 所 拥有 的 网络 大都 处在 异构 环境 之中 , 由以 台式 系统 为 中心 的 客户机 和 不同 类型 的 服务器 构成 . 系统 复杂 , 软件 兼容性 和 互操作性 差 , 系统升级 困难 , 由此 导致 企业 计算 的 可靠性 和 安全性 得不到 保证 , 使用 不便 , 系统 支持 和 维护费用 居高不下 . Internet / Intranet 技术 的 兴起 和 应用 孕育 着 一场 新 的 企业 信息管理 的 革命 . 它 彻底 地 改变 了 企业 的 原有 工作 模式 和 各 企业 之间 及 企业 与 社会 之间 的 联系方式 , 使 企业 在 其 自身 发展 和 社会活动 中 发挥 最大 的 功效 . Intranet 由 Internet 发展 而 来 , 它 不仅 具有 传统 企业 内部网 的 运作 功能 和 安全性 , 而且 又 具有 Internet 的 开放性 、 灵活性 , 使 企业 与 社会 更 紧密 地 连为一体 . 它 的 出现 为 企业 摆脱 上述 困境 提供 了 一条 切实可行 的 途径 . 
 　 　 Intranet 主要 表现 为 3 个 应用 层次 ： 信息 共享 与 发布 、 应用 交互 与 信息 存取 以及 企业 业务 处理 . 这 三者 均 与 数据库 的 支持 有着 密切 的 联系 . 随着 应用 的 深入 和 趋于 复杂 , 对 数据库 访问 时 的 功能 和 性能 要求 就 越 高 , 尤其 是 对 上述 的 第 3 类 应用 . 当前 , Web 应用 中 所 采用 的 方法 已 不能 很 好 地 满足 应用 的 要求 . 为此 , 本文 提出 了 一种 以 DB ( database ) 中间件 形式 在 Intranet 中 应用 的 新 方法 , 并 开发 了 一个 DB 中间件 原型 DBCM ( database   connection   manager ) . 通过 对 数据库 连接 和 访问 机制 的 管理 , 改善 网络 上 多用户 访问 数据库 的 性能 , 优化 网络 传输 , 并 支持 与 多种 数据库 的 连接 . 本文 第 2 、 3 节将 给出 DBCM 的 设计 思想 、 实现 方法 和 采用 的 关键技术 . 
 　 　 目前 , 实现 Intranet 上 对 数据库 访问 的 接口 大致 可以 分为 以下 3 种 ： ［ 1 ］ 
 　 　 ( 1 )   通用 网关 接口 CGI ( common   gateway   interface ) 
 　 　 通用 网关 接口 是 一组 关于 如何 在 客户端 Web 浏览器 、 Web 服务器 与 CGI 应用程序 之间 传递信息 的 规范 , 是 HTTP ( hyper   text   transfer   protocol ) 服务器 与 程序 进行 “ 交谈 ” 的 一种 方式 . 
 　 　 CGI 接口 为 从 HTTP 服务器 内 执行程序 提供 了 一种 简单 易用 的 方法 , 可以 使用 这种 机制 来 创建 动态 文档 以及 作为 与 HTTP 服务器 之外 的 服务程序 之间 的 接口 . CGI 接口 有 许多 好处 , 包括 服务器软件 之间 的 可移植性 , 以及 大量 的 公用 领域 程序 ( 免费 程序 ) 和 为 它 设计 的 开发工具 . 最大 的 优势 就 在于 , 几乎 所有 的 Web 服务器 都 支持 CGI 程序 . 但是 , CGI 接口 也 存在 着 一些 不足 , 其中 最 主要 的 就是 性能 问题 , 特别 是 在 需要 多个 数据库 连接 的 多用户 应用程序 中 尤其 明显 . CGI 程序 不能 被 多个 客户 请求 共享 , 当 一个 新 的 请求 到达 时 , 即使 CGI 程序 有 一个 实例 在 运行 , 也 必须 再启动 一个 新 的 实例 . 并发 请求 越 多 , 服务器 上 创建 的 并发 进程 也 越 多 . 为 每个 请求 创建 一个 应用 进程 会 消耗 较 多 时间 且 需要 大量 内存 , 同时 限制 了 应用程序 自身 可用 的 资源 , 最终 导致 性能 降低 , 增加 等待时间 . 
 　 　 ( 2 )   专用 API ( application   programming   interface ) 
 　 　 针对 CGI 程序 的 上述 不足之处 , 为了 提高 Web 服务器 与 数据库 服务器之间 的 通信 效率 和 性能 , 各大 Web 服务器 厂商 和 数据库 厂商 纷纷 推出 各自 的 专用 API . 
 　 　 在 Web 服务器 与 数据库 服务器 的 连接 方案 中 , Netscape 和 Microsoft 作为 Web 服务器 厂商 分别 推出 了 适用 于 各自 Web 服务器 的 NSAPI ( Netscape   server   application   programming   interface ) 和 ISAPI ( Internet   server   application   programming   interface ) . 与 CGI 程序 是 作为 独立 的 进程 运行 不同 , NASPI 和 ISAPI 都 是 以 动态链接库 的 形式 存在 的 , NSAPI 和 ISAPI 应用程序 的 效率 和 性能 较之 CGI 程序 有 大幅度 的 提高 . 当然 , 采用 这种 类型 的 API 也 存在 一些 缺陷 , 例如 , NSAPI 与 ISAPI 相互之间 不 兼容 ； 它们 只能 在 特定 的 服务器 和 操作系统 上 运行 ； 由于 采用 了 动态链接库 的 形式 , 一旦 代码 质量 较差 就 比较 容易 造成 服务器 系统 的 崩溃 ； 并且 进行 程序设计 时会 更 复杂 . 
 　 　 三大 数据库 厂商 Oracle , Sybase 和 Informix 提供 的 Web 服务器 与 数据库 服务器 的 接口 方案 都 与 各自 的 数据库 产品 紧密 集成 , 因而 无论是 在 效率 、 性能 还是 安全性 方面 都 达到 了 较为理想 的 水平 . 但 也 正是 由于 这种 紧密 集成 , 导致 了 它们 只能 局限于 各自 的 数据库 产品 之上 , 所以 兼容性 和 可移植性 差 . 
 　 　 ( 3 )   Java 数据库 互连 JDBC ( Java   database   connectivity ) 
 　 　 为了 克服 CGI 程序 访问 数据库 效率 低 和 专用 API 可移植性 差 的 缺陷 , 新近 出现 的 JDBC 是 一种 较为理想 的 接口 方案 . JDBC 是 用来 执行 SQL ( structured   query   language ) 语句 的 Java 应用 程序接口 . 它 由 一组 用 Java 程序设计 语言 写成 的 类 和 接口 组成 , 易于 向 任何 关系数据库 发送 SQL 语句 , 支持 对 多种 数据库 的 访问 . 运用 JDBC   API , 只 需 写出 单独 一个 程序 就 能够 发送 JDBC   API 给 相应 的 数据库 . Java 语言 的 中性 结构 和 JDBC 的 开放性 使得 程序员 只 需写 一次 程序 就 能 让 它 到处 运行 . JDBC 是 一个 低层次 的 API , 它 是 更 高层次 API 的 基础 . 开发人员 可以 在 JDBC 的 基础 上 , 设计 出 用户 更 容易 理解 、 便于 使用 的 更 高层次 的 接口 和 工具 . 
 1 　 数据库 中间件 方法 的 提出 
 　 　 按照 通常 的 方式 , 在 访问 RDBMS ( relational   database   management   system ) 时 需要 先 建立 用户 连接 , 然后 通过 用户 连接 对 数据库 进行 操作 . 但是 , 这种 连接 方式 会 受到 数据库 用户数 的 限制 , 即 通常 的 DBMS 服务器 都 定义 了 一个 用户数 , 通过 这个 用户数 限制 了 同时 连接 到 DB 服务器 的 用户数量 . 当 与 DB 连接 的 用户数量 达到 这个 上限 时 , 新 的 用户 连接 请求 就 会 失败 . 在 Intranet 应用 中 , 网络 上 会 出现 大量 用户 同时 访问 一个 数据库 服务器 的 情况 , 并且 每个 用户 在 一段时间 内会 保持 这种 服务 连接 , 从而 限制 了 可用 的 连接数 . 但是 , 当 用户 在 进行 客户端 的 处理 时 , 与 DB 的 连接 通常 是 空闲 的 , 如果 能够 充分利用 这些 时间 , 使得 这些 连接 能够 为 其他 用户 提供 服务 , 那么 , 就 能 大大提高 同时 服务 的 用户数 . 如果 在 用户 不 使用 这些 数据库 连接 时 就 断开 DB 连接 , 虽然 可以 提高 DB 服务器 的 多用户 服务 能力 , 但是 建立 DB 连接 通常 都 是 相当 费时 的 操作 ( 可能 包括 建立 某种 通信 连接 、 启动 服务 进程 、 权限 检查 等等 ) , 这样 会 降低 数据库 服务器 的 服务 响应速度 , 在 实际 使用 时 效率 较 低 . 我们 的 设计 思想 是 使用 独立 的 DB 连接 管理 进程 提供 连接 管理 的 服务 , 客户 不是 直接 与 DB 服务器 建立 连接 , 而是 通过 DB 连接 管理 进程 建立 连接 , 各种 DB 操作 也 是 通过 该 DB 连接 管理 进程 完成 的 . 实际上 就是 在 客户 应用 与 DB 服务器之间 再 增加 一层 中间件 , 也 就是 所谓 的 数据库 中间件 . ［ 2 ］ 
 2 　 数据库 中间件 原型 DBCM 的 设计 思想 
 　 　 我们 所 设计 和 实现 的 数据库 中间件 的 基本 结构 如图 1 所示 . 其中 数据库 连接 管理器 DBCM ( database   connection   manager ) 是 一个 服务 进程 , 是 前端 的 客户 与 后 端的 数据库 之间 进行 通信 的 桥梁 . 当 客户 向 DBCM 发出 对 某个 数据库 的 SQL 请求 时 , DBCM 搜索 当前 可用 的 与 该 数据库 的 连接 ( DB   Connection ) , 通过 DB   Connection 将 SQL 请求 转发给 对应 的 数据库 服务器 . 数据库 服务器 执行 SQL 语句 后 , 将 结果 通过 DB   Connection 返回 给 DBCM , 再 由 它 返回 给 客户 . 整个 数据库 中间件 的 体系结构 采用 的 是 三层 ( Three - tier ) 客户机 / 服务器 模型 . 中间件 与 各个 客户 的 数据通信 采用 流套 接字 ( Stream   Socket ) 机制 实现 , 并且 利用 了 多线程 的 优点 , 使得 中间件 与 各个 客户 的 套 接字 通信 能够 并发 地 进行 . 中间件 与 后 端 数据库 的 接口 使用 了 JDBC , 并且 根据 Internet / Intranet 上 用户 对 数据库 访问 方式 的 特殊性 , 采用 多 客户 共享 同一个 DB   Connection 的 机制 , 提高 了 数据库 访问 的 效率 . 数据库 中间件 与 数据库 之间 是 通过 使用 SQL 语言 而 进行 通信 的 . 
 
 图 1 　 数据库 中间件 的 基本 结构 
 3 　 数据库 中间件 原型 DBCM 的 实现 　 　 
 　 　 根据 这个 数据库 中间件 的 设计 思想 , 在 实现 过程 中 主要 运用 了 下面 的 关键技术 . 
 3.1 　 JDBC 
 　 　 JDBC 是 一个 独立 于 DBMS 的 接口 , 即 “ 一个 通用 SQL 数据库 访问 框架 ” , 它 对于 不同 的 数据库 使用 了 统一 的 接口 . 使用 JDBC , 程序员 只 需写 一个 数据库 接口 , 不需 重新 编码 就 能够 访问 任何 数据源 . 由于 JDBC 已经 逐步 得到 了 各大 厂商 的 认可 与 支持 , 也 为 开发者 和 用户 提供 了 一条 从 Web 服务器 访问 数据库 的 捷径 , 因而 可以 相信 , JDBC 将 进一步 得以 推广 而 最终 成为 Web 服务器 访问 数据库 的 事实标准 . ［ 3 ］ 因此 , 我们 研究 和 构造 的 数据库 中间件 原型 就是 建立 在 JDBC 的 基础 之上 的 . 
 3.2 　 流套 接字 
 　 　 传输控制协议 TCP ( transfer   control   protocol ) 提供 了 一种 可靠 的 端 对 端 通信 通道 , Internet / Intranet 上 的 客户机 / 服务器应用程序 可以 用 它 来 进行 通信 . 套 接字 是 在 网络 上 运行 的 两个 程序 之间 的 双向通信 链路 的 一个 端点 . 对应 于 TCP 的 套 接字 称为 流套 接字 , 它 是 面向 连接 的 . 服务器应用程序 侦听 特定 端口 , 等待 来自 客户 的 连接 请求 . 当 一个 连接 请求 到达 时 , 客户 与 服务器之间 建立 一条 专用 连接 , 它们 就 在 这条 连接 上 通信 . 在 连接 过程 中 , 客户 被 分配 一个 本地 端口号 , 并 将 一个套 接字 绑定 到 这个 端口 . 客户 通过 向套 接字 写入 信息 以及 从套 接字 中 读出 来自 服务器 的 信息 的 方式 与 服务器 通信 . 与 此 相似 , 服务器 也 获得 一个 新 的 本地 端口号 ( 需要 新 的 端口号 是因为 , 这样 , 服务器 就 能够 在 原来 的 端口 上 继续 侦听 连接 请求 ) . 服务器 也 将 一个套 接字 绑定 到 它 的 本地 端口 , 并 通过 读写 这个 套 接字 与 客户 通信 . 客户 和 服务器 必须 使用 相同 的 协议 , 也就是说 , 它们 通过 套 接字 来回 传输 信息 时 必须 使用 相同 的 语言 . 图 2 显示 了 流套 接字 的 工作 流程 . 
 
 图 2 　 流套 接字 的 工作 流程 
 3.3 　 多线程 
 　 　 线程 是 一个 程序 之中 单独 的 顺序 化 控制流 . 多线程 程序设计 是 指 在 单个 程序 中 使用 多个 线程 , 这些 线程 在 同一时间 并发 运行 , 执行 不同 的 任务 . 在 多线程 程序 中 , 各个 线程 通常 需要 共享 数据 . 例如 , 一个 线程 向 文件 写入 数据 , 而 同时 另 一个 线程 要 从 这个 文件 中 读数据 . 当 多个 线程 共享 数据 时 , 需要 将 线程 同步 , 以 达到 预期 的 结果 . 如果 一个 程序 中有 几个 并发 线程 在 竞争 资源 , 就 必须 运用 适当 的 同步 机制 来 保证 公平竞争 . 如果 每个 线程 对于 有限 的 资源 能够 有 足够 的 访问 时间 来 保证 合理 的 进度 , 这个 系统 就是 公平 的 . 
 　 　 在 数据库 中间件 中 , 采用 为 每个 客户 提供 一个 服务 线程 的 方式 实现 . 在 数据库 中间件 中 , 主要 包括 4 类 线程 ： ( 1 )   监听 线程 , ( 2 )   服务 线程 , ( 3 )   空闲 管理 线程 , ( 4 )   状态 监控 线程 . 其中 监听 线程 、 空闲 管理 线程 以及 状态 监控 线程 是 服务器 中 始终 存在 的 3 个 线程 , 服务 线程 是 根据 客户 的 请求 而 产生 和 消亡 的 , 其 数量 不定 . 图 3 显示 了 服务 线程 的 工作 流程 . 
 
 图 3 　 服务 线程 的 工作 流程 
 　 　 在 编程 实现 数据库 中间件 的 过程 中 , 特别 注意 了 下面 的 问题 . 由于 网络 是 不 可靠 的 , 客户程序 同样 不 可靠 , 所以 加入 了 充分 的 出错 处理 ( Exception   Handling ) 机制 . 在 出错 后 , 可以 恢复 到 某个 状态 , 并 释放 占用 的 资源 . 失败 的 客户 不会 影响 服务 线程 对 其他 客户 的 响应 . 在 多线程 程序设计 中 , 服务程序 在 不 工作 时 应当 进入 睡眠 状态 , 以 释放 不必要 占用 的 资源 . 另外 , 尤其 要 注意 临界 区 冲突 的 情况 . 在 Java 中 提供 了 监视器 ( Monitors ) 和 notify ( ) 、 wait ( ) 方法 以及 synchronize 关键字 等 机制 来 实施 线程 的 同步 . 
 3.4 　 多 客户 共享 同一个 数据库 连接 
 　 　 这种 连接 方式 可以 使 多个 客户 共享 一个 DB 连接 , 极大 地 缓解 了 客户 数量 受到 DB 用户数 限制 造成 的 问题 . 数据库 中间件 以 缓冲 池 方式 管理 DB 连接 , 减轻 了 建立 和 断开 DB 连接 时 的 开销 . 将 与 RDBMS 接口 有关 的 部分 限制 在 DB 连接 管理 中 , 使得 支持 异种 DB 更加 方便 . 
 　 　 这种 DB 连接 方案 采用 在 中间件 环境 中 命名 DB 连接 的 方式 定义 可用 的 DB 连接 ( 逻辑 连接 ) , 每个 连接 指定 了 ( RDBMS , DB , USER , PASSWD ) . 图 1 中 客户 与 DBCM 之间 的 连接 就是 逻辑 连接 . 在 使用 这些 连接 时 , 只 需 使用 连接 的 名字 而 不再 提供 其他 内部 的 细节 . 这种 方式 有助于 减少 用户程序 对 具体 环境 的 依赖性 , 在 RDBMS 调整 时 , 通过 修改 中间件 环境 的 定义 可以 避免 不必要 的 程序修改 . 
 　 　 要 使 多个 用户 可以 共享 对 一个 数据库 的 物理 连接 , 就 要求 这些 用户 与 数据库 连接 时 采用 的 参数 ( RDBMS , DB , USER , PASSWD ) 一致 , 只有 连接 参数 完全一致 的 两个 数据库 连接 ( 逻辑 连接 ) 才 能够 共享 一个 物理 的 数据库 连接 . 图 2 中 DBCM 与 后 端 数据库 服务器之间 的 连接 就是 物理 连接 . 
 　 　 数据库 中间件 对外 提供 的 连接 名 , 都 是 在 其 自身 的 环境 中 定义 的 , 而 不是 相应 DB 的 真实 名字 . 这些 名字 称为 数据库 中间件 的 逻辑 数据库 名 . 数据库 中间件 需要 管理 这些 逻辑 数据库 . 在 数据库 中间件 中 , 各个 逻辑 数据库 的 名字 是 唯一 的 , 并且 对应 于 某个 物理 数据库 . 每个 逻辑 数据库 包含 一组 定义 信息 , 包括 ： 物理 数据库 名 、 DB 连接 用户名 、 DB 连接 用户 口令 等 , 可以 实现 逻辑 数据库 的 访问控制 功能 , 即 定义 逻辑 数据库 的 访问 用户 、 口令 , 在 客户机 创建 连接 时 检查 访问控制 , 避免 非法 访问 . 
 　 　 数据库 中间件 的 客户 创建 的 DB 连接 都 是 逻辑 连接 , 这些 连接 在 实际操作 数据库 时 映射 到 数据库 中间件 与 DB 的 物理 连接 上去 , 并 通过 这些 连接 实际 地 操作 数据库 . 这种 多个 客户 共享 物理 数据库 连接 的 原则 是 ： ( 1 )   能够 共享 物理 连接 的 用户 的 DB 连接 在 逻辑 上 是 完全相同 的 , 也就是说 , 以 同样 的 DB 用户 连接 到 同样 的 DB 中去 , 只有 完全相同 的 连接 才能 相互 替代 而 不 产生 逻辑 上 的 问题 . 数据库 中间件 对外 提供 逻辑 数据库 服务 , 只要 是 连接 到 同样 的 逻辑 数据库 中 的 用户 , 其 DB 连接 方式 就是 完全相同 的 , 也 就 可以 共享 物理 连接 . ( 2 )   基于 事务处理 . 事务 是 DB 对外 服务 的 基本 单位 . 一个 客户 在 单个 事务 内 必须 完全 独占 一个 物理 连接 , 此时 不能 与 其他 用户 共享 物理 连接 . 在 事务 结束 时 , 如果 没有 活动 的 SQL 语句 , 则 该 客户 在 该 物理 连接 上 已经 没有 特殊 的 状态 资源 了 . 处于 这种 状态 下 的 客户 相互之间 可以 共享 物理 连接 . 
 　 　 基于 事务处理 的 特点 , 对 DB 物理 连接 的 管理 就 在 事务 的 开始 、 终止 阶段 进行 . 在 事务 开始 时 , 需要 分配 物理 数据库 连接 ； 在 事务 终止 时 , 则 释放 物理 数据库 连接 . 
 　 　 整个 数据库 中间件 的 物理 数据库 连接 通过 一个 缓冲 池 管理 , 当 需要 分配 连接 时 从 缓冲 池中 分配 一个 连接 , 当 释放 连接 时则 将 连接 释放 到 缓冲 池中 去 . 其中 基本 的 数据结构 如下 ： 
 　 　 ∥   物理 数据库 连接 信息 
 　 　 class   ConnectionInfo   { 
 　 　 　 　 　 Info 　 　 　 　 　 　 dbInfo = null ; 
 　 　 　 　 　 Connectioncon = null ; 
 　 　 　 　 　 booleanisIdle   =   true ; 
 　 　 　 　 　 java . util . Date   idleStartTime = null ; 
 　 　 　 　 　 public   ConnectionInfo ( ) 　 ∥   构造函数 
 　 　 } 
 　 　 ∥   管理 物理 数据库 连接 的 缓冲 池 
 　 　 class   ConnectionTable   { 
 　 　 　 　 　 static   final   int   MAX － SERVICE = 100 ; 
 　 　 　 　 　 short   serviceCounter = 0 ; 
 　 　 　 　 　 Service ［ ］   serviceArray ; 
 　 　 　 　 　 Vector   connectionInformation ; 
 　 　 　 　 　 public   ConnectionTable ( ) 　 ∥   构造函数 , 初始化 服务 数组 等 
 　 　 　 　 　 public   Info   findDBInfo ( Info   serviceInfo ) 　 ∥   根据 逻辑 服务 名 检索 对应 的 物理 连接 
 　 　 　 　 　 synchronized   public   ConnectionInfo   findConnectionInfo ( Info   dbInfo ) 　 ∥   为 逻辑 服务 分配 物理 数据库 连接 
 　 　 　 　 　 synchronized   public   void   deleteIdleConnection ( ) 　 ∥   释放 已 超时 的 物理 数据库 连接 
 　 　 } 
 　 　 客户 通过 数据库 中间件 提供 的 逻辑 数据库 名 建立 连接 , 当 客户 在 这个 逻辑 连接 上 发送 SQL 请求 时 , DBCM 为 这个 逻辑 连接 分配 对应 的 可用 的 物理 连接 ( 若 当前 不 存在 符合条件 的 物理 连接 就 新建 一个 ) , 通过 分配 的 物理 连接 与 数据库 服务器 通信 . 空闲 管理 线程 定期 在 后台 运行 , 检查 物理 连接 的 使用 状态 , 若 某个 物理 连接 已 长时间 未 用 ( 超时 ) , 则 断开连接 以 释放 资源 . 
 　 　 在 具体 编程 实现 这个 数据库 中间件 时 , 我们 选择 了 Java 语言 . Java 语言 是 近两年来 兴起 的 一种 适用 于 网络 编程 的 面向对象 的 程序设计 语言 . 现在 , 人们 已 不仅仅 将 Java 语言 单纯 看作 是 一种 程序设计 语言 , Java 已 在 引发 一场 软件 革命 , 正在 逐步形成 一种 新 的 计算 模式 — — Java 计算环境 . Java 语言 的 设计 目标 及 特点 是 ： 简单 性 、 面向对象 、 分布 性 、 健壮性 、 安全性 、 体系结构 中立 、 可移植性 、 解释 执行 、 高性能 、 多线程 、 动态性 . 虽然 Java 语言 的 风格 与 C++ 在 很大 程度 上 都 具有 相似性 , 但是 从 复杂性 来看 , Java 语言 去 除了 C++ 中 那些 较 少 使用 、 难以 理解 、 容易 出错 的 语法 元素 , 而 对于 内存 管理 、 数据类型 的 支持 、 类型转换 等 各 方面 却 有所 增强 , 所以 更加 精炼 , 也 比较 容易 掌握 . 尤其 是 Java 中 不再 使用 指针 , 使得 系统 的 安全性 加强 了 . ［ 4 ］ 正是 因为 Java 语言 具有 特别 适合 于 网络 编程 的 特性 以及 它 较之 C++ 语言 的 优越性 , 所以 选用 了 Java 语言 来 实现 这个 数据库 中间件 . 
 　 　 综上所述 , 在 设计 与 实现 这个 数据库 中间件 的 过程 中 , 运用 了 以下 关键技术 ： ① 三层 客户机 / 服务器 模型 , ② Java , ③ SQL , ④ JDBC , ⑤ 流套 接字 , ⑥ 多线程 , ⑦ 多 客户 共享 同一个 数据库 连接 . 
 4 　 小 　 结 
 　 　 我们 所 设计 和 开发 的 数据库 中间件 原型 针对 用户 在 Intranet 上 进行 数据库 访问 的 特点 , 采用 了 多个 客户 共享 同一个 数据库 连接 的 机制 , 减少 了 与 数据库 进行 频繁 连接 和 断开 的 开销 , 在 充分利用 资源 的 基础 上 提高 了 效率 . 由于 系统 采用 Java 语言 实现 , 并且 利用 了 JDBC 来 进行 数据库 访问 , 使得 系统 的 健壮性 和 可移植性 得到 了 保障 , 可以 在 多个 平台 上 访问 各种 关系 数据库系统 , 增强 了 系统 的 适应能力 . 
 　 　 为了 测试 该 数据库 中间件 原型 的 实际 运行 效果 , 我们 又 用 Java 语言 编写 了 一个 客户端 应用程序 . 该 程序 接收 用户 输入 的 各种 SQL 命令 和 一些 自定义 的 特定 格式 的 数据库 连接 与 断开 指令 , 将 这些 请求 提交 给 DBCM 执行 , 然后 接收 DBCM 的 运行 结果 并 显示 出来 . 我们 采用 在 联网 的 机器 上 同时 运行 该 客户端程序 以及 在 同一 台 机器 上 运行 该 程序 的 多个 实例 的 方式 来 增加 DBCM 的 客户 数量 . 客户端程序 的 操作系统 平台 采用 了 Windows   95 , Windows   NT   Workstation , OS / 2 等 , 后 端的 DBMS 采用 了 Windows   NT   Server 上 的 Microsoft   SQL   Server , Sybase   SQL   Server , SCO   UNIX 平台 上 的 Informix , OS / 2   Warp   Server 平台 上 的 DB2 等 . 通过 测试 客户端 应用程序 对 SQL 命令 的 响应速度 , 我们 发现 当 客户 数量 较 少时 , 采用 DBCM 情况 下 的 响应速度 与 不 采用 DBCM 情况 下 的 响应速度 相差无几 , 有时 甚至 更慢 一些 . 这 是因为 DBCM 管理 逻辑 连接 与 物理 连接 需要 花费 时间 , 而 各 客户 逻辑 连接 之间 几乎 没有 可以 共享 的 物理 连接 . 但 随着 客户 数量 的 增多 , 采用 DBCM 所 带来 的 性能 上 的 优势 逐渐 显示 出来 . 在 我们 的 测试 中 , 当 客户 数 达到 20 个 时 , 采用 DBCM 对 SQL 命令 的 平均 响应 时间 比 不 采用 DBCM 时 缩短 约 7% , 当 客户 数 达到 50 个 时 , 平均 响应 时间 缩短 了 约 16% . 由此可见 , 客户 数量 越 多 , 采用 DBCM 所 带来 的 性能 提高 就 越 明显 . 
 　 　 概括 起来 , 该 数据库 中间件 的 原型 完成 了 下列 功能 ： ( 1 )   有效 改善 Intranet 上 多用户 对 数据库 的 访问 性能 ； ( 2 )   减少 网上 信息 的 传输 ； ( 3 )   优化 了 网络 传输 性能 ； ( 4 )   支持 与 多种 关系数据库 的 连接 ； ( 5 )   既 支持 类似 Web 中 的 无 状态 和 一次 连接 , 也 支持 应用 有 状态 和 持续性 的 连接 ； ( 6 )   为 Intranet 应用 中 与 数据库 的 连接 提供 一条 功能强大 而 又 灵活 高效 的 途径 . 
 作者 介绍 ： 马松 , 1973 年生 , 硕士 , 主要 研究 领域 为 数据库 , Internet / Intranet . 
 　 　 　 　 　 盛浩林 , 1960 年生 , 副教授 , 主要 研究 领域 为 软件工程 , 工具 与 环境 , 微机 应用 . 
 本文 通讯联系 人 ： 马松 , 上海   200233 , 桂平路 471 号 10 号楼 5 层 上海 亚士帝 信息工程 有限公司 
 作者 单位 ： 马 　 松 　 中国建设银行 上海市分行 科技部 　 上海 　 200021 
 　 　 　 　 　 　 盛浩林 　 上海 亚士帝 信息工程 有限公司 　 上海 　 200233 
 E - mail :   masong @ hotmail . com 
 参考文献 
 　 ［ 1 ］ 马松 . Internet 上 的 数据库 接口 . 见 : Intranet 国际 研讨会 论文集 . 上海 , 1997.24 ～ 36 ( Ma   Song .   Database   interface   on   Internet .   In :   Proceedings   of   the   International   Seminar   on   Intranet .   Shanghai ,   1997 .   24 ～ 36 ) 
 　 ［ 2 ］ 马松 . Internet / Intranet 上 数据库 接口 及 数据库 中间件 原型 的 研究 与 构造 ［ 硕士学位 论文 ］ . 华东理工大学 , 1997 ( Ma   Song .   Internet / Intranet   DB   interface   &   the   research   and   construction   of   DB   middleware   ［ M . S .   Dissertation ］ .   East   China   University   of   Science   and   Technology ,   1997 ) 
 　 ［ 3 ］ Patel   P ,   Moss   K .   Java   Database   Programming   with   JDBC .   Scottsdale :   Coriolis   Group ,   1996 
 　 ［ 4 ］ Cornell   G ,   Horstmann   C   S .   Core   Java .   Palo   Alto ,   California :   SunSoft   Press ,   1996 
 本文 1997 - 09 - 29 收到 原稿 , 1998 - 01 - 23 收到 修改稿   
