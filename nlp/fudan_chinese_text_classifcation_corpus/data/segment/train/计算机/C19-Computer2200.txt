计算机 应用 研究 
 APPLICATION   RESEARCH   OF   COMPUTERS 
 2000 　 Vol.17 　 No.2 　 P.79 - 81 
 
 
 
 一个 支持 进化 式 软件开发 的 集成 环境 ： MHSC / IDE 
 吴明晖 　 应晶 　 何志均 
 摘   要   简要地 介绍 了 MHSC 方法论 ( Methodology   of   High - level   SpecificationConstruction ) ， 并 提出 了 它 的 集成 开发 环境 MHSC / IDE 。 文中 详细 介绍 了 MHSC / IDE 的 组成部分 及其 相互间 的 关系 ， 利用 该 环境 ， 进化 式 原型 系统 的 开发 得到 了 有效 地 支持 。 
 关键词   IDE   可 执行 定义   变换 方法   进化 
 1   引言 
 　 　 由于 软件 本身 固有 的 复杂性 ( 不仅仅 是 偶发 的 复杂性 ) ， 使得 软件开发 ， 特别 是 大型 复杂 软件系统 的 开发 陷入 一种 失控 状态 。 研究 表明 ： 软件工程 领域 存在 着 需求 分析 的 瓶颈 问题 [ 1 ] 。 传统 的 瀑布 式 开发方法 因 其 假设 需求 的 不变性 使 其 难以 满足用户要求 ， 在 不 明白 需求 工程 的 原理 时 盲目 采用 面向对象 技术 和 CASE 工具 都 使 问题 得不到 合理 的 解决 。 事实上 软件系统 只有 到 可 执行 状态 才能 被 证实 ， 而 在 开发 后期 的 变更 ， 特别 是 需求 变更 将 因 其 影响 范围 过大而 导致 项目 失控 ， 可见 在 需求 阶段 的 早期 能够 检测 出 错误 是 很 重要 的 。 作者 提出 以 一种 可 执行 定义语言 为 需求 分析 的 中间 语言 ， 为 它 提供 一个 集成 开发 环境 ， 通过 基于 知识 的 变换 和 求 精 ， 可以 形成 一个 可 执行 的 软件 原型 ， 通过 原型 系统 的 演示 ， 就 能够 实现 对 需求 定义 的 验证 ， 从而 实现 在 定义 层 和 实现 层上 的 一致性 。 通过 原型 的 不断 进化 ， 最终 满足用户 的 实际 需求 。 
 2   背景 
 　 　 为 实现 软件 需求 的 早期 验证 和 定义 层 与 实现 层间 的 一致性 ， 作者 根据 多年 来 知识 处理 技术 与 软件工程 相互 结合 的 研究 工作 ， 提出 了 一种 支持软件 定义 高层 构造 的 方法论 MHSC [ 2 ～ 4 ] ， 方法论 从 软件开发 的 需求 分析 和 定义 层 入手 ， 提出 一种 宽谱 的 支持 多维 语义 描述 的 软件 定义语言 ， 运用 语言 来 构造 实际 领域 的 合一 化 功能 模型 ， 以此 为 需求 分析 的 中间 结果 通过 进化 方法 ( 基于 知识 的 变换 方法 、 基于 可视 技术 的 求 精 、 基于 模拟 机制 的 软件 定义 和 系统 功能 验证 ) ， 逐步 过渡 到 设计阶段 的 软件 实现 ， 以 支持软件 的 自动 开发 过程 ， 从 本质 上 改变 现有 软件 生产 过程 ， 达到 需求 定义 层到 设计 层 的 平滑 过渡 。 整个 开发 流程 可由图 1 来 说明 。 
 
 图 1 　 支持 MHBC 方法 的 开发 流程 
 　 　 根据 MHSC 方法论 ， 目前 ， 主要 针对 实时 系统 领域 ， 通过 对 PSDL 语言 [ 5 ～ 8 ] 的 扩展 和 运用 ， 我们 建立 了 一个 支持 原型 进化 的 集成 开发 环境 MHSC / IDE 。 
 3   MHSC / IDE 
 　 　 作为 一个 集成 开发 环境 ， MHSC / IDE 为 一个 软件系统 的 需求 获取 、 设计 和 实现 提供 了 良好 的 支持 ， 尤其 因为 MHSC 方法论 自身 的 特点 ， 使得 系统 需求 的 变更 和 维护 处于 一种 有序 状态 ， 减小 了 项目 失控 的 可能 。 整个 环境 如图 2 所示 ， 可 分为 六个 部分 ， 但 它们 之间 并 不 完全 独立 ， 而是 相互作用 的 。 下面 加以 讨论 。 
 
 图 2 　 MHSC / IDE 
 3.1   协同 支持 环境 
 　 　 大型 复杂 软件系统 的 需求 分析 和 设计 实现 过程 不是 个人 在短期内 能够 完成 的 ， 它 必然 是 多 个人 协同工作 的 结果 ， 其 设计 过程 就是 参与者 们 共同 讨论 并 解决问题 的 一系列 过程 。 基于 此 ， H . Rittel 提出 了 IBIS ( Issue - Based   Information   System ) 模型 [ 9 ] 且 有 许多 研究 人员 对 它 进行 了 扩展 和 运用 ， 如 gIBIS 模型 等 。 根据 MHSC 方法论 及其 开发 流程 ， 我们 对 IBIS 模型 进行 了 如下 扩展 ： 
 　 　 ● 基于 网络 、 分布式 环境 ， 支持 多人 协同 并行 工作 。 
 　 　 ● 多 重视 图 的 表示 形式 ( 图形 、 描述 文本 、 可 执行 定义语言 ) 。 
 　 　 ● 引入 基于 知识 的 推理 系统 ， 提供 参照 机制 ， 实现 节点 冲突检测 、 归并 能力 。 
 　 　 ● 多级 权限 、 版本控制 机制 。 
 　 　 整个 协同 开发 环境 不仅 包含 传统 的 Email 、 文档 共享 、 多媒体信息 等 电子 会议 方式 的 信息 协同 ， 最 主要 的 是 为 项目 的 并行 开发 提供 了 支持 。 在 我们 的 开发 环境 中 ， 系统 的 生成 实际上 就是 组成 系统 的 各个 角色 ( 或 称为 构件 ， 有着 原子 和 组合 两类 ) 的 产生 及其 间 相互 关系 的 建立 。 我们 采用 如图 3 所示 的 层次化 网状结构 作为 系统 的 体系结构 ， 构成 图 的 角色 根据 其 属性 通过 接口 程序 转化成 相应 数据 存储 在 数据库 中 ， 以 Client / Server 模式 支持 分布式计算 ， 数据 的 并发 、 共享 和 一致性 和 安全性 经 规则 约束 由 DBMS 控制 。 
 
 图 3 　 体系结构 示意图 
 3.2   重用 库 管理系统 
 　 　 软件 重用 思想 自 1968 年 Mcllroy 在 NATO 软件工程 会议 上 提出 后 就 成为 一个 研究 热点 。 软件 重用 技术 能够 利用 以前 开发 软件系统 的 各种 资源 和 成果 ， 避免 了 不必要 的 重复劳动 ， 提高 了 软件 的 开发 效率 和 质量 ， 这 也 使得 它 成为 快速 原型 系统 开发 中 不可或缺 的 手段 。 
 　 　 重用 是 MHSC 方法论 的 重要 组成 ， 当为 重用 提供 了 相对 完备 的 环境 时 ， 某个 特定 领域 的 软件 生产 将 可能 实现 自动化 。 在 MHSC 中 重用 的 对象 不仅 包括 了 传统 的 库函数 ， 还有 PSDL 描述 模块 、 基于 CORBA 或 COM 标准 的 组件 和 设计模式 、 体系结构 等 。 为 有效 地 支持 重用 ， 主要 针对 PSDL 描述 模块 ， 我们 开发 了 重用 库 管理系统 ， 该 系统 为 构件 的 获取 、 加入 、 分类 、 检索 及 组装 提供 了 支持 。 在 MHSC / IDE 中 ， 重用 库 分为 两类 ： 公共 库 和 私有 库 ， 公共 库中 存放 的 是 经过 严格 测试 的 成熟 产品 ， 为 所有 开发人员 只读 共享 ， 完全 控制权 由 系统管理员 掌握 。 私有 库则 由 每个 开发人员 独立 控制 。 一般 当 开发人员 认为 某个 部件 有 重用 价值 时 ， 他 就 可以 将 其 加入 私有 库 并 可 向 公共 库 管理 小组 推荐 ， 经 测试 完善 后 可 加入 公共 库 。 构件 的 分类 以 刻面 分类法 [ 10 ] 为主 ， 主要 包括 应用领域 、 应用 平台 、 生成 语言 、 功能 描述 和 关键字 等 。 检索 时 把 检索 条件 按 刻面 填入 并 设置 刻面 的 优先权 值 ， 选择 检索 模式 ( 完全 或是 模糊 ) ， 结果 将 按 匹配 程度 列出 。 根据 构件 间 的 相互 关系 ， 本 系统 还 支持 导航 式 查询 。 构件 的 组装 、 进化 和 版本控制 由 进化 控制系统 和 装配 系统 实现 。 
 3.3   知识库 管理系统 
 　 　 系统 的 进化 过程 是 通过 基于 知识 的 变换 和求 精来 实现 的 ， 只有 在 领域 知识 相对 完备 的 情况 下 软件 自动化 才 成为 可能 。 领域 知识 和 推理 公式 存放 在 推理 数据库 ( DDB - Deductive   Data   Base ) 中 。 领域 知识 的 获取 主要 由 领域专家 和 以前 系统 的 开发 设计 人员 实现 ， 随着 领域 知识 的 积累 ， 为 原型 系统 的 开发 所 提供 的 决策 支持 和 自动化 程度 也 就 越 高 。 
 3.4   过程 控制系统 
 　 　 由 进化 控制系统 和 装配 系统 组成 。 
 　 　 系统 的 生成 过程 是 一个 进化 过程 。 每个 开发人员 可以 负责 一个 或 多个 构件 的 生成 ， 但 由于 构件 间 的 相互作用 ( 组合 、 引用 、 进化 ) ， 使得 一个 构件 的 变动 可能 会 影响 到 其它 构件 ， 导致 了 相关 构件 的 相应 变换 ， 这 就是 变动 相关性 的 级联 问题 。 为 解决 该 问题 ， 我们 提出 了 一个 进化 式 的 开发 模型 MHSC / DM ， 根据 变换 的 类型 确立 了 构件 的 状态 转移 和 版本控制 规则 [ 11 ] 。 该 模型 从 需求 分析 开始 ， 以 数据 图 的 模式 记录 了 软件 进化 过程 中 的 各 环节 、 实例 间 的 相互依赖 关系 ， 通过 AffectedBy 、 Scope 、 Induce 等 规则 的 建立 和 应用 ， 能 自动 追踪 因 需求 变动 而 诱发 的 变动 构件 集合 ， 根据 领域 知识 和 推理 机制 ， 为 变动 方案 的 选择 提供 了 决策 支持 并 实现 了 级联 变动 的 自动 或 半自动 的 完成 ， 同时 ， 对 项目 的 计划 、 调度 、 构造 管理 等 方面 提供 了 自动 支持 。 
 　 　 装配 系统 提供 了 原型 系统 的 变换 归并 。 由于 分布式 团队 开发 ， 可能 有 多个 开发 小组 对 同一 版本 的 构件 同时 进行 变换 以 满足 各自 的 需求 。 但 最终 系统 装配 时 这些 变换 需 组合 起来 ， 形成 一个 新 版本 的 构件 ， 这样 就 必须 对 每个 小组 的 变换 进行 检测 分析 ， 消除矛盾 冲突 ， 归并 冗余 。 最终目标 系统 可 视为 这些 归并 后 构件 的 组合 ， 为 系统 分解 的 逆 过程 。 
 3.5   多维 视图 编辑 系统 
 　 　 系统 提供 多种形式 的 编辑 工具 ， 包括 用户界面 编辑器 、 PSDL 编辑器 和 C++ 编辑器 。 用户 通过 编辑 系统 输入 ， 最终 通过 执行 支持系统 来 生成 可 执行 原型 。 用户 可以 通过 图形 或是 文本 两种 方式 来 完成 对 目标 系统 的 PSDL 描述 ， 并 可以 自由 地 在 这 两种 方式 之间 切换 。 下面 我们 以 PSDL 图 模式 编辑器 为例 加以 讨论 。 如图 4 所示 ， PSDL 图 模式 编辑器 以图 元来 表示 PSDL 语言 中 的 类型 ， 主要 有 ： 操作 ( Operator ) 、 入口 ( Entry ) 、 出口 ( Exit ) 、 流 ( Stream ) 、 定时器 ( Timer ) 等 。 通过 对 图元 的 拖放 操作 ， 设置 它们 间 的 关系 、 属性 和 约束 ， 将 其实 例化 ， 经过 翻译器 就 可以 生成 符合 PSDL 语法 的 定义 框架 。 组成 PSDL 描述 框架 的 构件 一般 有 两种 来源 ： 直接 由 用户 设计 产生 或 通过 对 构件 库 的 检索 引入 符合要求 的 可 重用 构件 。 在 系统 开发 初期 前者 居多 ， 但 随着 重用 库 的 充实 ， 后者 所 占 比例 将 逐步 增大 。 
 
 图 4 　 PSDL 图 模式 编辑器 
 3.6   执行 支持系统 
 　 　 执行 支持系统 包括 两级 翻译 系统 ( PSDL 图 模式 和 PSDL 文本 模型 间 的 转换 、 PSDL 语言 到 C++ 语言 的 转换 ) 、 C++ 的 编译系统 及 模拟 调度 系统 。 由 用户 定义 生成 的 PSDL 语言 定义 可能 是 不 完备 的 ， 甚至 是 有 矛盾 的 ， 这 就 需要 根据 领域 知识 自动 或 半自动 的 进行 处理 。 通过 PSDL 到 C++ 的 转换器 ， 可以 生成 C++ 的 代码 框架 ， 当所 描述 的 细节 充分 时 ， 产生 的 C++ 代码 经过 编译 后 将 形成 可 执行 系统 。 
 　 　 模拟 调度 系统 在 MHSC 中起 着 重要 的 作用 ， 尤其 在 实时 系统 中 ， 当 用户 完成 对 目标 系统 PSDL 描述 时 ， 一般 不会 对 具体 细节 加以 填充 ， 只是 一个 高层 的 设计 。 这时 确定 系统 间 的 资源分配 和 时序 关系 能否 满足 假定 约束 是 很 关键 的 。 我们 实现 了 一个 基于 扩展 Petri 网 的 定义 模拟 调度 系统 ， 利用 网图 对 各 组成 构件 进行 冲突检测 并 提供 相应 的 报告 ， 指出 关键问题 所在 ， 为 解决问题 提供 参考 方案 。 当 这个 高层 设计 通过 检测 后 ， 就 可以 进一步 求精 ， 直至 用户 满意 的 目标 系统生成 。 
 4   小结 
 　 　 针对 支持 可 执行 定义 的 进化 式 软件系统 开发 ， 根据 MHSC 方法论 ， 本文 给出 了 相应 的 集成 开发 环境 MHSC / IDE 。 该 环境 为 大型 复杂 软件系统 的 开发 提供 了 良好 的 支持 ， 实现 了 软件 需求 的 高层 构造 和 早期 验证 ， 较 好 地 实现 了 需求 定义 层到 实现 层 的 平滑 过渡 。 
 本 项目 获 国家自然科学基金 ( No .   69703005 ) 资助 
 本 项目 获 浙江省 自然科学 基金 ( No .   697006 ) 资助 
 吴明晖 （ 浙江大学 计算机系   杭州   310027 ） 
 应晶 （ 浙江大学 计算机系   杭州   310027 ） 
 何志均 （ 浙江大学 计算机系   杭州   310027 ） 
 参考文献 
 1 ， Pei   Hsia ,   et   al .   Status   Report :   Requirement   Engineering ,   IEEE   Software ,   Vol.10 ,   No.6 ,   Nov.1993 
 2 ， Ying   Jing ,   He   Zhijun ,   Wu   Zhaohui   et   al .   A   Methodogy   for   High - level   Software   Specification   Construction .   ACM   Software   Engineering   Notes ,   April   1995 ,   20 ( 2 ) : 48 ～ 54 
 3 ， 应   晶 .   一种 新 的 软件系统 开发 方法论 研究 [ 博士论文 ] .   浙江大学 ,   1995 
 4 ， 应   晶 ,   何志均 ,   吴 朝晖 .   支持软件 开发 的 可 执行 定义方法 .   软件 学报 ,   l997 ( 5 ) ,   350 ～ 359 
 5 ， Luqi .   A   Graph   Model   for   Software   Evolution .   IEEE   Trans .   Software   Engineering ,   Aug ,   1990 ,   917 ～ 927 
 6 ， Luqi ,   et   al .   Software   Evolution   Through   Rapid   Prototyping .   IEEE   Software ,   May ,   1995 
 7 ， V . Berzins ,   Luqi .   Using   Transformations   in   Specification - based   Prototyping .   IEEE   Trans .   Software   Engineering ,   May , 1993 
 8 ， Luqi , et   al .   A   Prototyping   Language   for   Real - time   Software .   IEEE   Software ,   Oct ,   1988 
 9 ， J . Conklin   and   M . Begeman .   gIBIS :   a   Hypertext   Tool   for   Exploratory   Policy   Discussion .   ACM   Trans .   Office   Inform .   Syst . ,   Vol.6 ,   Oct ,   1988 , 303 ～ 331 
 10 ， 吴明晖 ,   应   晶 ,   何志均 .   支持 可 执行 定义 的 进化 式 软件开发 模型 .   http : \ \ www . ise . zju . edu . cn \ papers 
 11 ， 杨芙清 ,   梅   宏 ,   李克勤 等 .   支持 构件 复用 的 青鸟 Ⅲ 型 系统 概述 .   计算机科学 ,   1999 ( 5 ) 
 收稿 日期 ： 1999 年 6 月 20 日 
