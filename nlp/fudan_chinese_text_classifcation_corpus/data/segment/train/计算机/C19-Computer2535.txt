软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 2 期   No.2   1999 
 
 
 
 实时 环境 问题 求解 框架 
 陈 　 正 　 张 　 钹 
 　 　 摘要 　 实时 环境 下 的 问题 求解 是 近年来 规划 问题 研究 感兴趣 的 话题 . 在 讨论 了 实时 规划 算法 同 传统 离线 规划 算法 之间 的 不同 之后 , 提出 了 一个 实现 实时 规划 的 统一 框架 , 同时 具体 阐述 了 框架 中 的 各个 模块 . 通过 框架 构造 出 的 调度 系统 可以 适应 实际 环境 的 需要 , 在 规定 时间 内 解决 系统 提出 的 要求 , 并 能 较 好地解决 不确定性 . 此外 , 在 框架 模型 指导 下 构造 了 智能 装配 机器人 实时 调度 系统 , 并 给出 了 实验 结果 . 最后 , 给出 结论 , 并且 简单 地 讨论 了 实时 规划 算法 求解 问题 的 策略 以及 今后 的 发展 方向 . 
 　 　 关键词 　 规划 , 任意 时间 算法 , 实时 调度 , 不确定性 , 成组技术 , 实时 监控 . 
 　 　 中图法 分类号 　 TP18 
 Real - time   Problem   Solving   Framework 
 CHEN   Zheng   ZHANG   Bo 
 　 　 Abstract 　   Real - time   problem   solving   is   an   interesting   topic   in   planning   in   the   recent   years .   Besides   discussing   the   differences   between   real - time   scheduling   and   off - line   scheduling ,   a   real - time   scheduling   framework   is   proposed   and   some   pivotal   technologies   are   discussed   in   this   paper .   This   framework   can   deal   with   uncertainty   in   real - time   environment   and   output   approximate   solution   in   given   time .   Based   on   this   framework ,   an   intelligent   assembly   robot   system   is   built ,   and   through   some   experiments   this   framework   is   proved   to   do   well   in   real - time   environment .   After   all ,   the   conclusion   is   given   out ,   and   the   policy   of   real - time   planning   problem   solving   algorithm   simply   and   the   possible   developments   in   the   future   are   discussed   in   this   paper . 
 　 　 Key   words 　 Planning ,   anytime   algorithm ,   real - time   scheduling ,   uncertainty ,   group   technology ,   real - time   monitoring .   
 1   实时 规划 与 离线 规划 的 区别 
 　 　 求解 规划 问题 的 时间 、 空间 复杂度 都 比较 大 , 因此 , 传统 规划 算法 对 规划 问题 做 了 一系列 的 假设 , 其中 最为 关键 的 一条 就是 认为 外界 环境 是 不变 的 , 即使 考虑 到 外界 环境 的 变化 , 也 认为 变化 是 可以 预知 的 . 因此 , 规划 算法 可以 在 给定 的 外界 环境 条件 下 对 规划 空间 进行 搜索 , 得到 系统 的 最优 输出 . 但是 , 一旦 进入 现实 环境 , 我们 就 会 发现 单纯 的 传统 规划 算法 并 不能 很 好地解决 实际 环境 中 的 规划 , 因为 我们 所处 的 实际 环境 是 一个 易变 的 环境 , 是 一个 不可 预知 的 世界 ; 而 传统 的 规划 算法 认为 外界 环境 是 一个 可 预知 的 模型 , 这个 较大 的 区别 导致 传统 的 规划 算法 在 易变 的 环境 中 就 显得 无法 自如 运转 . 因此 , 构造 一个 实时 环境 下 的 规划 算法 就 成为 近年来 大家 关注 的 问题 . 如何 合理 利用 给定 的 资源 , 构造 有效 可行 的 实时 算法 成为 问题 研究 的 关键 . 
 　 　 简单 地说 , 实时 规划 算法 与 传统 规划 算法 在 数据 输入 方面 最大 的 区别 在于 以下 两个 方面 : 
 　 　 ( 1 )   有限 的 资源 ; 
 　 　 ( 2 )   不确定性 : ①   资源 不确定性 ; ②   任务 不确定性 : ( a )   任务 所 需 资源 改变 , ( b )   任务 约束 情况 改变 , ( c )   任务 执行 过程 改变 ; ③   环境 不确定性 : ( a )   环境 意外 , ( b )   环境 精度 改变 . 
 　 　 在 人工智能 领域 , 不确定性 、 可能性 是 人们 感兴趣 的 话题 . 不确定性 分为 客观 不确定性 和 主观 不确定性 . 客观 不确定性 是 对 事件 发生 的 频度 进行 统计 计算 后 得出 的 , 不受 人 的 主观 思想 的 影响 ; 而 主观 不确定性 则 是 人们 对于 事件 发生 频度 的 一个 估计 , 这个 估计 本身 就 存在 很大 的 误差 . 因此 , 引入 高阶 不确定性 来 对 这种 误差 进行 数值 化 , p ( p ( A ) = x ｜ K ) = y . 
 　 　 由于 实时 算法 和 离线 算法 求解 问题 策略 存在 很大 的 差别 , 因此 也 决定 了 所 采用 的 算法 的 特点 也 存在 很大 的 差别 , 主要 表现 为 以下 几个 方面 ［ 1 ］ : ①   算法 的 输出 性能 上 的 区别 — — 完全 精确 解 ( 离线 ) 与 大致 精确 解 ( 在线 ) ; ②   可 中断 性 的 区别 — — 不可 中断 ( 离线 ) 与 可 中断 ( 在线 ) ; ③   性能 与 时间 关系 — — 性能 不变 ( 离线 ) 与 性能 随 时间 增长 ( 在线 ) . 
 2   实时 环境 问题 求解 框架 
 　 　 针对 上面 提出 的 实时 环境 下 问题 求解 的 特殊性 , 传统 的 离线 规划 算法 已经 不能 适应 它 的 要求 . 它 要求 提出 一个 新 的 解决方案 来 适应 实时 环境 的 需要 . 下面 , 我们 分别 根据 上面 提出 的 特殊性 给出 相应 的 解决方案 . 
 　 　 因为 实时 环境 下 的 规划 受到 资源 的 限制 , 所以 不能 再 像 原先 那样 对系统 的 全局 进行 规划 , 对于 规划 的 算法 我们 进行 了 相应 的 改变 , 具体 可 分为 以下 几种 方法 . 
 　 　 ( 1 )   处理 资源 约束 
 　 　 不再 采用 离线 规划 算法 （ 如 深度 优先 或者 是 宽度 优先 等 算法 ） , 取而代之 的 是 “ 实时 环境 下 的 规划 算法 ” （ 如 任意 时间 算法 等 ） . 实时 环境 下 的 规划 算法 具有 以下 特点 : ①   可以 在 任意 时刻 中断 并 输出 当时 的 较优 解 ; ②   能够 利用 有限 的 资源 进行 规划 , 而且 可以 在 有限 资源 内 给出 解 ; ③   随着 资源 的 增加 , 系统 输出 性能 在 逐渐 改进 ; ④   能够 处理 各种 不确定性 , 保证系统 的 正常 运转 . 
 　 　 ( 2 )   处理 不确定性 
 　 　 在 实时 规划 中 , 另外 一个 较大 的 问题 就 在于 “ 不确定性 ” . 由于 系统 要 处于 易变 的 外界 环境 中 , 因此 需要 系统 能够 处理 各种 意外 的 突发事件 . 传统 的 规划 认为 外界 环境 是 可以 预知 的 , 但是 这 并 不 符合 实时 规划 的 实际 需要 , 因此 需要 对系统 进行 相应 改变 : ①   构造 实时 监控 系统 ; ②   分层 规划 与 系统 再 利用 : ( a )   对系统 进行 划分 , 构造 系统 拓扑图 , ( b )   分层 规划 : 从 较 粗 的 粒度 空间 上 进行 规划 , 到 较 细 的 粒度 空间 上 进行 再次 规划 , ( c )   可 再 用性 的 利用 : 系统 中 可 再 利用 部分 的 使用 . 
 　 　 在 实时 规划 中 我们 将 使用 以下 技术 . 
 2.1   成组技术 （ Group   Technology ） 
 　 　 成组技术 的 基本 出发点 就是 在 规划 中 把 规划系统 分解 为 若干个 子系统 . 从 上面 的 描述 中 我们 可以 看出 , 使用 分组 技术 后 , 可以 对 每个 子系统 分别 采用 “ 任意 时间 算法 ” 进行 规划 , 使得 系统 更加 适用 于 实时 环境 . 它 缩小 了 问题 求解 空间 , 而且 可以 减少 不必要 的 重复 再 规划 , 同时 可以 使 规划系统 具有 再 利用 性 . 
 2.2   组织 技术 
 　 　 实时 环境 中 的 规划系统 大都 由 多个 子系统 组成 , 而且 出于 对 有限 时间 、 空间 资源 的 考虑 , 我们 对 每个 子系统 利用 任意 时间 算法 对 其 进行 规划 , 使得 每个 子系统 的 性能 都 随着 资源 的 增加 而 增加 . 但是 , 另外 一个 问题 随之 而 出现 , 即 如何 合理 地 在 各个 子系统 之间 分配资源 , 以 求得 最优 系统 输出 , 我们 称之为 任意 时间 算法 的 组织 问题 . 我们 提到 的 很多 调度 问题 属于 NP 问题 , 同样 不难看出 , 任意 时间 算法 的 组织 问题 同样 也 是 一个 NP 问题 , 如何 合理 地 分配 系统资源 , 得到 最优 的 输出 性能 成为 另外 一个 难题 . 在 离线 环境 下 可以 利用 传统 的 方法 进行 组织 问题 求解 , 但 一旦 应用 于 实时 环境 , “ 大致 精确 解 ” 就 占据 了 主要 位置 . 
 2.3   任意 时间 算法 的 监控 
 　 　 利用 成组技术 对系统 进行 同类 划分 , 同时 对 各个 部分 合理 分配 系统资源 , 这些 都 可以 在 离线 环境 下 完成 , 然后 就 需要 把 离线 规划 的 结果 应用 于 实际 环境 中 , 由于 在 实际 环境 中 存在 着 许多 的 不确定性 , 因此 需要 对系统 的 执行 进行 监控 , 以 求得 系统 的 最佳 执行 结果 . 
 　 　 在 系统监控 中 , 如何 决定 监控 的 频度 以及 如何 决定 是否 采用 监控 等 策略 在 文献 ［ 2 ］ 中 已有 详细 的 叙述 , 此处 不再 赘述 . 
 2.4   实时 环境 问题 求解 框架 
 　 　 根据 上面 提出 的 各种 实时 环境 问题 求解 的 方法 , 我们 提出 一个 在 实时 环境 下 问题 求解 的 一般 框架 , 它 适用 于 各种 实时 环境 问题 求解 , 利用 这个 框架 可以 比较 容易 地 构造 出 实时 调度 算法 , 可以 较 好地解决 问题 . 在 现实生活 中 , 许多 规划 / 调度 问题 都 可以 看成 是 一个 实时 环境 下 的 问题 求解 , 因此 , 我们 可以 采用 下面 提出 的 这个 框架 / 工具 构造 问题 求解 系统 , 并 进行 求解 . 从图 1 中 可以 看出 框架 主要 分为 4 大 模块 : 离线 规划 模块 、 在线 调度 模块 、 监控 模块 和 故障 恢复 模块 . 具体 的 数据流 关系 可以 从图 1 中 得到 . 
 
 图 1 　 实时 问题 求解 框架 
 　 　 对于 不同 的 规划 / 调度 问题 , 我们 将 利用 上面 提出 的 实时 问题 求解 框架 进行 构造 实时 算法 , 同时 利用 实时 算法 数据库 以及 具体 规划 / 调度 的 经验 知识 , 对 实时 算法 进行 监控 , 处理 各种 不确定性 问题 , 以 求得 系统 的 最优 输出 . 
 　 　 下面 我们 利用 实时 问题 求解 框架 构造 机器人 智能 装配 系统 , 分析 系统 具体 的 运作 过程 . 
 3   具体 问题 求解 
 　 　 我们 利用 上面 提到 的 “ 实时 环境 下 问题 求解 的 框架 ” , 结合 装配 过程 的 特性 , 设计 并 实现 了 一个 装配 操作 调度 系统 , 同时 对 一些 装配 例子 进行 了 相应 的 测试 . 
 　 　 在 机器人 智能 装配 中 , 我们 根据 装配 的 特点 , 设计 了 快速 调度 算法 , 以 满足 灵活处理 各种 不 确定 的 发生 . 机器人 装配 要 解决 的 问题 是 : 给定 m 台 可用 的 机器 M = { M1 , ... , Mm } , 同时 给定 需要 调度 的 n 个 任务 T = { T1 , ... , Tn } , 同时 给出 这 n 个 任务 之间 的 约束 关系 （ 以 DAG 图 或者 关联矩阵 表示 ） , 需要 求解 的 是 如何 以较 少 的 时间 在 这 m 台 机器 上 调度 执行 完 这 n 个 任务 . 
 　 　 装配 调度 要 解决 的 就是 如何 在 给定 的 时间 内 给出 系统 较优 的 规划 , 同时 能够 处理 在 实时 调度 执行 中 发生 的 各种 不确定性 . 我们 对 装配 过程 中有 可能 出现 的 不确定性 进行 估计 , 主要 有 以下 几种 : ( 1 )   任务 加工 时间 的 变化 : 主要 指 当前 正在 执行 的 加工 任务 时间 的 推延 或者 提前 ; ( 2 )   工件 不 到位 : 指 原先 应该 可以 就绪 的 任务 现在 就绪 时间 推延 ; ( 3 )   机器 故障 : 在 某个 时刻 机器 发生 故障 , 任务 需要 更换 机器 执行 . 
 　 　 在 实际 调度 中 , 我们 根据 装配 调度 的 特性 , 给出 了 以下 调度 策略 : ( 1 )   执行 时间 越长 的 任务 首先 被 优先 执行 的 可能性 越大 ; ( 2 )   深度 优先 长度 较大 的 任务 被 优先 执行 的 可能性 较大 ; ( 3 )   直接 后继 或者 是 后继 多 的 任务 被 优先 执行 的 可能性 大 . 
 　 　 以上 3 条是 我们 的 快速 调度 的 基本 策略 , 但是 基本 策略 的 适用范围 是 随着 调度 过程 而 改变 的 . 在 调度 中 , 我们 根据 实时 环境 改变 每个 任务 的 优先级 , 对 那些 已经 就绪 的 任务 就 根据 其 优先级 来 决定 调度 哪个 任务 , 力求 在 较 短 的 时间 内 对 所有 任务 进行 调度 . 之所以 采用 动态 优先级 来 调度 ［ 3 ］ , 是因为 这样 可以 不断 调整 任务 的 优先级 来 适应 易变 的 外界 环境 . 环境 改变 , 任务 的 优先级 也 随之 改变 , 以 达到最佳 的 调度 结果 . 同时 , 我们 在 调度 中 还 对 未来 的 调度 做 了 一定 的 预测 , 以 保证 调度 的 精度 . 在 介绍 调度 算法 前 , 我们 先 给出 以下 几个 基本 定义 . 
 　 　 ( 1 )   就绪 任务 : 如果 在 t 时刻 任务 i 的 所有 前驱 约束 都 已经 调度 结束 , 那么 , 称 任务 i 为 就绪 任务 , 只要 有 空闲 的 机器 就 有 可能 被 调度 . 记为 RT ( t ) ［ 3 ］ ; 
 　 　 ( 2 )   空闲 机器 : 如果 在 t 时刻 机器 j 不 在 调度 任何 任务 , 我们 称 机器 j 为 空闲 机器 ; 在 调度 过程 中应 尽量减少 机器 的 空闲 程度 , 那样 才 有 希望 在 最 短时间 内 调度 结束 . 记为 RM ( t ) ［ 3 ］ ; 
 　 　 ( 3 )   任务 执行 时间 : ExecTi ; 
 　 　 ( 4 )   任务 执行 需要 机器 数目 : UMi ; 
 　 　 ( 5 )   任务 的 深度 优先 长度 : Depth ( Taski ) ; 
 　 　 ( 6 )   任务 的 后继 深度 优先 长度 : Depth ( Taski ) . 
 　 　 为了 降低 调度 过程 中 整个 状态 空间 的 大小 , 我们 把 规划 时间 划分 成 若干个 离散 的 时间 片 , 假设 每个 任务 将 占用 1 个 或 多个 时间 片 . 因此 , 我们 在 调度 过程 对 每个 时间 片 都 动态 地 计算 各个 任务 的 优先级 , 对 优先级 最高 的 任务 优先 分配 执行 ; 优先级 计算 按照 上面 提出 的 策略 对 深度 优先 长度 以及 任务 执行 时间 进行 相应 加权 计算 而 得到 . 
 　 　 由 上面 的 策略 我们 可以 得出 在 t 时刻 任务 i 的 优先级 为 
 
 　 　 上面 提到 的 算法 都 不 存在 对 将来 发生 情况 的 预测 , 可以 对 算法 进行 相应 的 改变 , 在 t 时刻 计算 任务 优先级 时 可以 往前 预测 一段时间 Δ t , 同时 假设 在 Δ t 时间 内 不 在 调度 其他 任务 , 则 计算 出 t + Δ it 时刻 任务 之间 的 优先级 , 根据 这些 优先级 进行 任务调度 . 同时 , 可以 利用 任意 时间 算法 来 不断 改变 Δ t , 力求 找到 此 时刻 最佳 的 调度 . 
 3.1   智能 机器人 任务调度 算法 
 　 　 t = 0 ; 
 　 　 LeftTask = n ; 
 　 　 while   ( LeftTask ＞ 0 )   { 
 　 　 　 　 计算 在 t 时刻 的 就绪 任务 集合 
 　 　 　 　 Δ t = 0 
 　 　 　 　 BestAlloc = 
 　 　 　 　 while   ( Δ t ＜ Max   PredictTime ）   { 
 　 　 　 　 　 if 就绪 任务 集合 为空 , 则 分配 一个 等待 任务 
 　 　 　 　 　 else   { 
 　 　 　 　 　 　 计算 t + Δ t 时刻 的 就绪 任务 集合 、 空闲 机器 集合 , 对于 就绪 任务 集合 中 的 所有 任务 计算 其 相应 的 动态 优先级 Prior ( Taski ) 
 　 　 　 　 　 　 　 　 　 　 　 选择 优先 值 最高 的 任务分配 执行 
 　 　 　 　 　 　 　 　 　 　 　 把 分配 的 任务 加入 到 BestAlloc 
 　 　 　 　 　 　 　 　 　 　 　 LeftTask - - ; 
 　 　 　 　 　 } 
 　 　 　 　 　 求 出 最优 的 BestAlloc ( t 时刻 继续 任务分配 集合 ) 
 　 　 　 　 　 Δ t = Δ t + step   / /   优化 过程 
 　 　 } 
 　 　 按照 BestAlloc 集合 调度 其中 的 任务 
 　 　 t ++ ; 
 } 
 3.2   复杂度 分析 
 　 　 上述 的 算法 在 特殊 情况 下 的 分析 , 假设 在 调度 中 任务 都 只 需要 一台 机器 完成 , 同时 不 存在 工具 切换 问题 , 则 上述 的 近似算法 的 精确度 如下 . 
 　 　 对 近似算法 的 评价 : 近似算法 的 完成 时间 记为 Tn , 最佳 任务 安排 的 时间 记为 T * n ; 定义 近似算法 的 绝对 偏差 Δ = Tn - T * n , 相对偏差 . 
 　 　 可以 证明 , 近似算法 在 任务 之间 无 任何 约束 的 情况 下 , 相对偏差 满足 （ 其中 l 为 机器 数目 ） ［ 4 ］ . 而且 从 算法 分析 上 可以 看出 , 在 两台 机器人 工作 时 , 算法 输出 的 是 系统 的 最优 调度 , 和 Johnson 的 两台 机器人 调度 得到 同样 的 系统 输出 . 
 3.3   不确定性 处理 分析 
 　 　 根据 上面 提出 的 优先级 计算 调度 法 , 我们 通过 实验 发现 , 它 在 离线 情况 下能 较 好 地 对 装配 任务 进行 调度 . 把 这个 方法 应用 于 实时 环境 中 , 发生 的 不确定性 按照 我们 上面 提出 的 假设 来 进行 , 可以 发现 当 不确定性 发生 后 , 系统 可以 根据 当时 的 状况 对 当时 的 就绪 任务 进行 重新 计算 和 分配 , 同时 还 可以 根据 给定 的 时间 不断 对 任务分配 进行 优化 , 力求 得到 较优 的 系统 输出 ; 而且 处理 不确定性 所 引起 的 系统 开销 也 不大 , 可以 在 p 时间 内 完成 . 
 3.4   实验 结果 
 　 　 下面 我们 以 几个 特殊 的 任务调度 为例 来看 算法 的 输出 性能 . 算法 在 P133 + Win95 + Vc4.2 下 开发 完成 . 
 　 　 系统 输入 任务 约束 关系 如图 2 ～ 4 所示 . 系统调度 输出 Gantt 如图 5 ～ 12 所示 . 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 
 　 　 图 2 　 　 　 　 　 　 　 　 　 　 　 　 图 3 　 　 　 　 　 　 　 　 　 　 　 　 　 图 4 
 　 　 　 　 
 任务 关联 图 ： 图 1 ； 调度 策略 ： 动态 优先级 ； ExecTime ( T8 ) = 2 
 　 　 　 　 图 5 　 调度 实验 1 任务 关联 图 ： 图 2 ； 调度 约束 ； 工具 约束 ； 工具 约束条件 ： 每个 任务 最 多 使用 一个 工具 ； 工具 切换 时间 均 为 1 ； 工具 个数 为 5 ； 图中 * 代表 在 调度 此 任务 时 需要 进行 工具 切换 
 　 　 　 　 　 图 6 　 调度 实验 2 
 
 
 任务 关联 图 ： 调度 约束 ： 机器 约束 ； 机器 约束条件 ： 机器 总 数目 为 3 ； 任务 在 执行 时 需要 1 ～ 3 台 机器 同时 完成 
 　 　 　 　 图 7 　 调度 实验 3 任务 关联 图 ： 图 3 ； 输入 数据类型 ： 装配 前趋 约束 关系 图 ， 其中 方块 代表 装配 部件 ， 圆圈 代表 装配 零件 ； 横向 的 链接 代表 出于 同一 层次 的 节点 ， 纵向 的 链 代表 不同 层次 上 的 关系 ． 调度 方法 ： 分层 规划 
 　 　 　 　 　 图 8 　 调度 实验 4 
 
 　 　 　 　 
 任务 关联 图 ： 图 2 ； 没有 任何 不确定性 
 　 　 　 图 9 　 调度 实验 5 任务 关联 ： 图 2 ； 不确定性 ： t = 4 时刻 机器 2 发生 故障 ， 故障 到 t = 5 时刻 解除 
 　 　 　 　 　 图 10 　 调度 实验 6 
 
 　 　 　 
 任务 关联 图 ： 图 2 ； 不确定性 t = 6 时刻 任务 p5 的 执行 时间 需要 延长 一个 时间 
 　 　 　 图 11 　 调度 实验 7 任务 关联 图 ： 图 2 ； 不确定性 ； 工件 p5 的 到位 时间 延长 到 t = 9 才能 到位 
 　 　 　 　 图 12 　 调度 实验 8 
 
 　 　 对于 在线 调度 方法 , 除了 采用 上面 提到 的 “ 大致 精确 解 ” 的 方法 以外 , “ 分层 规划 ” 也 是 较 好 的 一种 解决方案 , 它 可以 把 复杂 问题 简单化 , 同时 也 能 得到 较 好 的 解答 . 
 3.5   分层 规划 方法 
 　 　 为了 在 装配 中 减少 工具 切换 所 引起 的 系统 开销 和 满足 装配 的 层次性 问题 , 我们 提出 分层 规划 的 方法 , 具体 实现 方法 如下 （ 对于 装配 序列 中 的 每层 进行 单独 规划 ） : 
 　 　 ( 1 )   求出 本层 就绪 任务 和 空闲 机器 ; 
 　 　 ( 2 )   对于 零件 节点 , 按照 原有 的 策略 分配 机器 执行 . 对于 部件 节点 , 则 先 估计 其 执行 时间 以及 需要 的 执行 机器 数目 , 然后 分配 执行 ; 
 　 　 ( 3 )   对于 部件 节点 分配 进行 细化 , 调用 算法 继续 深入 调度 . 
 　 　 与 上面 提到 的 算法 相比 , 分层 规划 算法 主要 在 以下 几个 部分 有所 改变 : 
 　 　 ( 1 )   在 计算 每个 任务 的 执行 时间 时 算法 需要 改变 , 对于 零件 的 执行 时间 则 直接 得到 ; 而 对于 部件 的 执行 时间 则 需要 进行 估计 . 如果 在 一个 机器 上 完成 则 需要 ti 的 时间 , 然后 估计 执行 需要 的 机器 数目 n , 则 对于 不同 的 执行 机器 数目 , 存在 不同 的 时间 估计 ExecT = 
 　 　 ( 2 )   根据 上面 的 估算 , 求 出 就绪 任务 集合 以及 空闲 机器 集合 . 
 　 　 ( 3 )   计算 优先级 . 计算 优先级 时 需要 考虑 到 因 对 部件 的 执行 机器 的 数目 有 不同 的 估计 而 产生 的 影响 . 
 　 　 ( 4 )   对于 优先级 较 高 的 任务调度 执行 . 
 　 　 ( 5 )   需要 不断 地 对 部件 的 调度 进行 细化 调度 . 
 　 　 分层 规划 算法 在 处理 不确定性 方面 的 优点 : ①   把 原有 的 一个 大 系统 分成 许多 相对 独立 的 小 系统 . ②   在 不同 层次 上 对 任务调度 进行 处理 . ③   如果 时间 允许 , 可以 对 每个 部件 局部 最优 求解 ; 降低 了 算法 的 复杂度 . ④   如果 发生 不确定性 , 可以 对 不确定性 发生 定性 、 定位 , 仅仅 重 规划 不确定性 发生 的 层次 , 而 不 影响 其他 层次 的 规划 ; 同时 , 使得 规划 具有 再 利用 的 价值 . 
 　 　 此外 , 除了 上面 提到 的 利用 装配 过程 操作方法 对系统 进行 分层 外 , 我们 还 可以 利用 装配 中 常用 的 一些 经验 知识 对系统 进行 分层 规划 , 例如 在 调度 中 , 我们 可以 把 一些 操作 合并 成 一组 操作 , 然后 在 较 高 的 层次 进行 调度 , 当 调度 到 这组 任务 时 , 再 调度 较 低层次 的 调度 进行 规划 . 
 4   总   结 
 　 　 随着 现代化 工业 的 发展 , 实时 规划 在 现实 中 的 应用 也 越来越 广泛 , 传统 的 离线 规划 已 渐渐 不能 适应 实际 的 需求 , 新 的 规划 模式 逐渐 占 主导地位 . 实时 规划 算法 可以 获得 系统 输出 性能 与 给定 资源 之间 的 动态平衡 . 随着 应用 的 推广 , 合理 地 构造 实时 规划 算法 , 有效 地 利用 规划 中 每步 得到 的 结果 , 不断 优化 系统 的 输出 性能 , 最优 地 监控 系统 的 执行 , 这些 都 成为 研究 实时 规划 问题 的 关键 . 
 本文 研究 得到 国家 863 高科技 项目 基金 资助 . 
 作者 介绍 ： 陈正 , 1972 年生 , 博士 , 主要 研究 领域 为 人工智能 , 计算机 应用 . 
 　 　 　 　 　 张钹 , 1935 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 人工智能 , 计算机 应用 . 
 本文 通讯联系 人 : 陈正 , 北京   100084 , 清华大学 计算机科学 与 技术 系 
 作者 单位 ： 陈 　 正 　 清华大学 计算机科学 与 技术 系   北京   100084 
 　 　 　 　 　 张 　 钹 　 清华大学 智能 技术 与 系统 国家 重点 实验室   北京   100084 
 参考文献 
 　 ［ 1 ］ Joshua   Grass ,   Shlomo   Zilberstein .   Anytime   algorithm   development   tools .   Department   of   Computer   Science ,   University   of   Masschusetts .   URL :   http ： ∥ anytime . cs . umass . edu / ～ sclomo 
 　 ［ 2 ］ Hansen   E   A ,   Zilberstein   Shlomo .   Monitoring   the   progress   of   anytime   problem - solving .   Department   of   Computer   Science ,   University   of   Massachusetts .   URL :   http :   ∥ anytime . cs . umass . edu / ～ sclomo 
 　 ［ 3 ］ 黄必清 . 关于 智能 装配 机器人 系统 的 任务调度 研究 ［ 博士学位 论文 ］ . 清华大学 , 1994 ( Huang   Bi - qing .   Research   on   task   scheduling   in   intelligent   assembly   robot   systems ［ Ph . D .   Thesis ］ .   Tsinghua   University ,   1994 ) 
 　 ［ 4 ］ 卢开 澄 . 算法 复杂度 分析 . 北京 : 清华大学出版社 , 1983 ( Lu   Kai - cheng .   Analysis   of   Algorithm   Complexity .   Beijing :   Tsinghua   University   Press ,   1983 ) 
 本文 1997 - 12 - 11 收到 原稿 , 1998 - 03 - 02 收到 修改稿 
