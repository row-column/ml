计算机 研究 与 发展 
 JOURNAL   OF   COMPUTER   RESEARCH   AND   DEVELOPMENT 
 1999 年 　 第 36 卷 　 第 10 期 　 Vol.36 　 No.10 　 1999 
 
 
 
 约束 数据库 中 的 动态 区间 索引 结构 
 汪卫 　 王宇君 　 王轶彤 　 施 伯乐 
 　 　 摘 　 要 　 区间 索引 是 随着 对 约束 数据库 的 实用化 的 研究 而 提出 的 . 文中 在 Meta _ 树 的 基础 上 提出 了 DM _ 树 和 相应 算法 ， 它 对 区间 索引 保持 了 存储 为 O ( n ) 、 查询 I / O 时间 为 O ( logn + t / B ) 的 性能 ， 在 动态 调整 操作 中 通过 采用 软性 限制 、 修改 滞后 等 策略 ， 使 插入 和 删除 时间 为 O ( logn ) ， 达到 B _ 树 水平 ， 可 用于 约束 数据库 中 数据 的 存储 和 访问 . 
 　 　 关键词 　 约束 数据库 ， 区间 索引 结构 ， Meta _ 树 
 　 　 中图法 分类号 　 TP311.13 
 DYNAMIC   INTERVAL   INDEX   IN   CONSTRAINT   DATABASE 
 WANG   Wei ,   WANG   Yu - Jun ,   WANG   Yi - Tong ,   and   SHI   Bo - Le 
 ( Department   of   Computer   Science ,   Fudan   University ，   Shanghai   200433 ) 
 　 　 Abstract 　 The   technique   of   dynamic   interval   index   is   very   important   in   the   practice   of   constraint   database .   Based   on   the   structure   of   Meta _ tree ,   DM _ tree   is   given .   Its   storage   is   O ( n )   and   query   I / O   time   is   O ( logn + t / B ) .   To   reduce   the   complex   of   insert   and   delete   operation ,   methods   of   unfixed _ constraint   and   late _ update   are   applied .   The   complex   of   the   insert   and   delete   I / O   time   are   all   O ( logn ) .   This   result   is   equal   to   that   of   B _ tree .   It   can   be   used   in   the   storage   and   query   in   constraint   database . 
 　 　 Key   words 　 constraint   database ， interval   index   structure ， Metatree 
 1 　 引言 
 　 　 约束 数据库 的 研究 是从 90 年代 初 开始 的 ［ 1 ］ ， 对 其 表达能力 、 查询语言 、 索引 及 系统 实现 的 研究 是 近年来 数据库 方向 研究 的 热点 . 约束 数据库 用 数学 表达式 和 逻辑 表达式 描述 客观 世界 中 的 数据 ， 不仅 能 描述 常规 类型 数据 ， 对 不 确定 数据 、 时间 数据 和 空间数据 也 有 很 强 的 描述 能力 ， 从而 在 空间 数据库 、 时间 数据库 及 数据库 其它 应用领域 有 广阔 的 应用 前景 . 
 　 　 约束 数据库 的 基本 思想 是 将 关系数据库 中 的 k 个 属性 的 元组 扩充 为 k 维 广义 元组 ， k 维 广义 元组 为 无 量词 的 k 维 约束 的 合取 ， 如 将 元组 ( “ 张三 ” ， 26 ) 转换 为 
 name = “ 张三 ” ∧ age = 26 . 
 　 　 在 约束 数据库系统 的 设计 和 实现 中 ， 区间 数据 的 查询 和 管理 起着 重要 的 作用 ， 主要 原因 有 
 　 　 ( 1 )   约束 数据 描述 的 不 确定 数据 、 时间 数据 和 空间数据 往往 与 区间 相对 应 . 如 某地 的 降雨量 对应 区间 为 ( 30mm ,   50mm ) ； 黄河 走 当前 河道 的 时间 对应 一个 时间 区间 . 有 的 数据 本身 就是 随 区间 变化 的 ， 如 某河 一年 中 的 流量 变化 如图 1 . 图中 a ， b 和 c 三段 的 表达式 分别 为 y = x - 1 ; y = 5 ; 2x = - 3y + 31 , 它们 对应 3 个 区间 ： ( 0 , 4 ) , ( 4 , 6 ) , ( 6 , 12 ) . 
 　 　 ( 2 )   为了 提高 约束 查询 的 效率 ， 约束 在 存储 时 也 多 记录 了 各 表达式 对应 的 区间 ， 例如 文献 ［ 2 ］ 、 ［ 3 ］ 中 提出 的 规范化 表示 — — 表形 结构 对 约束 ： A < 5 ∧ 1 < B ∧ B < 7 ∧ C = 6 ∧ A < B 的 规范化 表示 为表 1 ， 表中 1 和 u 行是 每个 变量 的 上界 和 下界 . 建立 区间 索引 后 ， 可 缩减 搜寻 的 范围 . 
 
 
 图 1 　 某河 一年 中 流量 的 变化 
 　 　 对 区间 索引 技术 的 研究 从 80 年代 开始 ， 现在 已有 了 一些 成熟 的 方法 ， 如 一维 区间 索引 结构 Interval _ 树 ［ 4 ］ ， 和 可 用于 二维 区间 索引 的 Grid 文件 、 Quad _ 树 、 KD _ B 树 、 Interval _ 树 、 Z _ Order 和 R * _ 树 ［ 4 ～ 7 ］ 等 ， 它们 都 成功 地 应用 到 空间 数据库 中 ， 它们 的 平均 查询 效率 较 好 ， 但 最坏 查询 I / O 时间 为 O ( n ) . 为了 提高 约束 数据库 的 实用性 ， 要求 对 一维 区间 索引 的 最坏 查询 I / O 时间 和 动态 调整 时间 能 达到 类似 B _ 树 的 性能 . 这里 对 性能 的 评价 是 以 I / O 的 次数 为 单位 的 ［ 1 ］ . 
 表 1 　 表形 结构 对 约束 A < 5 ∧ 1 < B ∧ B < 7 ∧ C = 6 ∧ A < B 的 规范化 
 
 tABC 
 1 - ∞ 16 
 u576 
 μ = > ? 
 　 < = ? 
 　 ? ? = 
 
 　 　 下面 首先 介绍 DM _ 树 的 数据结构 ， 然后 介绍 DM _ 树 的 查询 算法 和 动态 调整 算法 ， 最后 介绍 DM _ 树 的 计算 复杂性 和 与 其它 方法 的 比较 .   
 2 　 DM _ 树 的 数据结构 
 　 　 为了 提高 约束 查询 的 效率 ， 文献 ［ 8 ］ 对 Segment 树 ［ 5 , 6 ］ 进行 了 扩充 ， 其 存储 复杂性 为 O ( nlogBn ) ， 查询 I / O 时间 为 O ( logBn + t / B ) . 文献 ［ 9 ］ 、 ［ 10 ］ 在 Priority   Search 树 ［ 6 ， 11 ］ 的 基础 上 发展 了 Meta _ 树 , 并 对 其 内部 存储 和 查询 机制 进行 了 改进 ， 它 的 存储 为 O ( n ) ， 查询 I / O 时间 为 O ( logB 　 n + t / B ) ( t 为 查询 结果 的 个数 , B 为 外存 块 的 大小 ) . 但 上面 这些 研究 对 动态 调整 都 没有 给出 有效 的 算法 . 文中 提出 了 DM _ 树 ， DM _ 树 的 基本 思想 是 以 Meta _ 树为 基础 ， 在 保证 了 Meta _ 树 存储 ( O ( n ) ) 和 查询 I / O 时间 ( O ( logBn + t / B ) ) 的 前提 下 结合 B _ 树 的 方法 降低 其 动态 调整 的 复杂 ， 使 之 达到 了 B _ 树 的 性能 ( 插入 和 删除 的 I / O 时间 为 O ( logBn ) ) . 
 　 　 Meta _ 树 ( 图 2 ) 是 二维 空间 上点 的 索引 结构 ， 其 基本 思想 是 将 二维 空间 中 的 点 按 其 位置 存放 在 一棵树 中 ， 方法 是 将 纵坐标 最大 的 B2 ( B   为 每个 外存 块 中 区间 的 个数 ) 个点 放在 树根 结点 ， 剩余 的 点 根据 X 值以 从小到大 顺序 平均 分成 B 份 ， 对 每份 按 同样 的 方法 形成 根 结点 ， 并 作为 树根 结点 的 子 结点 ， 然后 递归 地 对 该份 其它 的 点 进行 操作 ， 直到 形成 整个 一棵树 . 从点 的 划分 方式 上 可以 看出 每个 结点 实际 对应 二维 区间 上 的 一个 矩形 ， 所有 后代 对应 的 矩形 在 该点 对应 矩形 的 正下方 . 若 对 一维 区间 数据 建立 索引 则 将 一维 区间 ( a , b ) 转化 为 二维 空间 上 的 点 ( a , b ) ， 然后 再 利用 Meta _ 树对 二维 空间 中 的 点 建立 索引 ， 文献 ［ 1 ］ 对此 做 了 详细 的 介绍 . 对 Meta _ 树 做 动态 调整 的 主要 难点 是 结点 分解 时 无法 同时 保持 每个 矩形 的 物理 关系 ( 各 矩形 的 后代 均 在 其 正下方 ) 、 每个 矩形 中点 的 个数 ( B2 个 ) 以及 每个 结点 应 对应 二维 空间 中 的 一个 矩形 ， 实际上 由于 Meta _ 树中 各 结点 对应 的 二维 空间 的 点数 及子 结点 的 个数 是 确定 的 ( 分别 为 B2 和 B ) ， 所以 可以 讲 Meta _ 树 没有 考虑 动态 调整 问题 . 
 
 
 图 2 　 Meta _ 树 ( B = 3 ) 
 　 　 DM _ 树 也 是 对 二维 空间 的 点 建立 的 索引 结构 ，   DM _ 树中 的 结点 用 一个 称为 包含 点集 的 域 指向 每个 结点 对应 的 二维 空间 中 的 点 ， 其 构造方法 与 Meta _ 树 相似 ， 先取 纵坐标 最大 的 点 放入 根 结点 的 包含 点 集中 ， 将 剩余 的 点 分为 0 到 B 份 ， 然后 对 每 一份 递归 进行 同样 的 操作 . 为了 插入 和 删除 操作 的 方便 ， 对 每个 结点 包含 的 点 的 个数 和 每个 结点 的 子 结点 的 个数 的 限制 与 Meta _ 树 不同 ， 也 不 像 Meta _ 树 那样 要求 完全 用 矩形 将 每个 结点 对应 的 点 划分 开 ( 即 允许 如图 3 那 样子 结点 Sm 的 包含 点 集中 某个 点 a 的 纵坐标 比 其父 结点 S 的 包含 点 集中 某个 点 b 的 纵坐标 大 ) . 下面 我们 将 详细 介绍 DM _ 树 构造 上 的 限制 . 当 处理 一维 区间 数据 时 ， 也 是 像 Meta _ 树 那样 将 一维 区间 ( a , b ) 转换成 二维 点 ( a , b ) ， 然后 再用 DM _ 树 进行 管理 ， 当 处理 一维 区间 时 ， 我们 将 包含 点集 改称 为 包含 区间 集 . 下面 我们 将 主要 讨论 利用 DM _ 树 存储 和 管理 一维 区间 的 方法 . 
 
 
 图 　 3 
 　 　 首先 我们 给出 一些 定义 . 
 　 　 定义 1 .   对 一个 一维 区间 ( a , b ) ， 我们 简称 b 为 区间 的 尾 . 
 　 　 定义 2 .   DM _ 树中 结点 的 包含 区间 集中 区间 的 个数 称为 结点 的 容量 . 
 　 　 定义 3 .   DM _ 树中 结点 的 包含 区间 集中 某个 子 结点 A 的 上部 的 区间 的 集合 称为 子 结点 A 的 上部 区间 集 . 图 4   中 的 阴影 部分 就是 结点 A 的 子 结点 A ′ 的 上部 包含 区间 集 . 结点 A 的 上部 区间 集中 区间 的 个数 称为 结点 A 的 上部 容量 . 某个 结点 的 上部 容量 小于 B / 2 的 子 结点 称为 上部 不满 结点 . 
 　 　 定义 4 .   对 结点 A ， 其子 结点 的 上部 容量 为 a1 , a2 , … , an , 设其 兄弟 为 B ， C ， 其子 结点 的 上部 容量 分别 为 b1 , b2 , … , bm ， c1 , c2 , … , cl 的 子 结点 数为 ， 将 a1 , a2 , … , an 和 b1 , b2 , … , bm 在 一起 排序 ， 设从 大到 小 的 第 B + 1 个 为 ab ， 将 a1 , a2 , … , an 和 c1 , c2 , … , cl 在 一起 排序 ， 设从 大到 小 的 第 B + 1 个 为 ac ， ab 和 ac 中 容量 小 的 为 A 的 临界 容量 . 
 　 　 下面 给出 DM _ 树 的 构造 的 具体 限制 ： 
 　 　 ( 1 )   最高 限制 . 若 某个 结点 共有 A 个子 结点 ， 其中 m 个子 结点 为 上部 不满 结点 ， 它们 的 上部 容量 为 ： r1 , r2 , … ,   rm , 设 其子 结点 的 临界 容量 的 最小 的 A / 2 个 为 s1 , s2 , … ,   sA / 2 , 每个 包含 点 集中 原则上 一维 区间 的 最大 个数 为 ( A - m - 1 ) × B + r1 + r2 + … + rm 和 ( A / 2 - 1 ) × B + s1 + s2 + … + sA / 2 中小 的 那个 . 通过 最高 限制 和 上部 容量 对 矩形 中 区间 的 分布 进行 控制 ， 防止 在 动态 调整 中 向上 或 向下 借点 时 发生 不 平衡 的 现象 . 
 　 　 ( 2 )   最低 限制 . DM _ 树中 结点 的 每个 区间 集中 最少 有 ( A × B ) / 2 个 一维 区间 ， 其中 A 为 该 结点 的 子 结点 的 个数 . 
 　 　 ( 3 )   结点 限制 . 每个 结点 有 0 到 B 个子 结点 ， 且 两个 相邻 结点 的 子 结点 和 大于 B . DM _ 树 的 根 结点 可以 有 不 超过 B 个子 结点 . 可见 Meta _ 树是 DM _ 树 的 特例 . 
 　 　 DM _ 树 中子 结点 对应 的 区间 在 父 结点 的 包含 区间 集 之下 ( 图 4 ) . 但 由于 包含 区间 集中 区间 分布 的 不 均匀 性 ， 动态 调整 中 构造 限制 常 被 破坏 ( 主要 是 每个 包含 区间 集中 最少 有 A × B / 2 个 一维 区间 这一 限制 ) 为了 提高 动态 调整 的 性能 ， DM _ 树中 采用 了 3 种 策略 ： 
 
 
 图 4 　 Meta _ 树 ( B = 4 ) 
 　 　 ( 1 )   软性 限制 . 即 对 包含 区间 集中 区间 的 数量 限制 可以 被 暂时 违反 ； 
 　 　 ( 2 )   调整 滞后 . 包含 区间 集中 区间 的 数量 限制 被 违反 后 ， 不 立即 进行 调整 ， 后面 的 调整 操作 将 使 之 恢复 到 满足 限制 的 状态 ； 
 　 　 ( 3 )   记录 平衡 关系 . DM _ 树中 每个 结点 中 都 存在 一个 结构 称为 平衡 关系 ， 它 记录 了 该 结点 是否 遵守 构成 限制 ， 及 不 遵守 的 情况 . 调整 算法 根据 平衡 关系 将 DM _ 树向 遵守 原则 的 方向 转化 ( 结构 的 具体 定义 见 第 4 部分 ) . 
 　 　 DM _ 树中 每个 结点 的 包含 区间 集中 区间 的 存放 方法 可 参考文献 ［ 9 ］ 中 的 横向 结构 和 纵向 结构 . 为 提高 查询 效率 ， 有 平衡 关系 的 结点 的 包含 区间 集可 存放 在 一起 . 
 3 　 查询 算法 
 　 　 有关 区间 的 查询 操作 有 3 种 ： 
 　 　 ( 1 )   包含 点 查询 . 查询 包含 某 一点 的 区间 集合 ， 其 查询 结果 对应 图 5 中 折线 Q1 左上 部分 ( Q1 的 折点 在 y = x 线上 ) ； 
 
 
 图 5 　 Meta _ 树 ( B = 3 ) 
 　 　 ( 2 )   包含 区间 查询 . 查询 包含 某一 区间 的 区间 集合 ， 其 查询 结果 对应 图 5 中 折线 Q2 左上 部分 ( 其中 Q2 的 折点 可 在 二维 区间 的 任意 地方 ) ； 
 　 　 ( 3 )   相交 查询 . 查询 与 某 一 区间 相交 的 区间 集合 . 其 查询 结果 对应 图 5 中 折线 Q3 左上 部分 . 
 　 　 查询 算法 的 主体 是 一个 广度 优先 搜索算法 ， 有 一个 候选 队列 以 存储 将要 查询 的 结点 . 
 　 　 算法 1 .   ( 查询 折线 Q 左上 部分 的 所有 点 ) 
 　 　 ①   将 根 结点 加入 候选 队列 ； 
 　 　 ②   从 候选 队列 中 取出 一个 结点 p ； 
 　 　 ③   如 p 与 Q 的 垂直线 相交 ， 则 根据 p 的 纵向 结构 ， 以 从 左向右 的 顺序 读取 ； 如 p 与 水平线 相交 ， 则 根据 p 的 横向 结构 ， 以 从上向下 的 顺序 读取 ； 否则 将 p 中 包含 区间 集中 的 区间 全部 读入 结果 ， 并 将 折线 范围 内 或 与 折线 相交 的 子 结点 加入 候选 队列 ； 
 　 　 ④   如 候选 队列 不空 则 转向 ② ， 否则 结束 . 
 4 　 动态 调整 算法 
 　 　 DM _ 树 的 动态 调整 算法 是 以 B _ 树 的 动态 调整 算法 为 基础 ， 针对 DM _ 树 的 特殊 情况 进行 了 一些 改进 . 在 介绍 动态 调整 算法 之前 我们 先 介绍 一下 在 算法 中 用到 的 有关 结构 和 标志 . 
 　 　 ( 1 )   平衡 关系 结构 . DM _ 树 结点 中有 一个 平衡 关系 结构 ［ q , n ］   ， q 为 平衡 结点 ， n 为 平衡 量 ， 其中 ： n = 0 表示 该 结点 与 其它 结点 无 平衡 关系 ； n < 0 表示 该 结点 的 包含 区间 集中 的 区间 数 小于 最低 限制 ， 少 的 结点 数在 结点 q 的 包含 区间 集中 ， 少 的 个数 为 n ； n > 0 表示 该 结点 的 包含 区间 集中 的 区间 数 大于 最高 限制 ， 多 的 结点 在 结点 q 的 包含 区间 集中 ， 多 的 个数 为 n . 
 　 　 ( 2 )   可 插入 标志 . 从 根到 被 插入 结点 的 搜索 路径 中 某 结点 的 包含 区间 集 不到 最高 限制 . 则 可 插入 标志 为 真 ， 表示 用户 插入 的 点 可 转嫁到 这里 . 
 　 　 ( 3 )   可 删除 标志 . 从 根到 被 删除 结点 的 搜索 路径 中 某 结点 的 容量 超过 最低 限制 且 路径 中该 结点 下 没有 结点 的 上部 容量 为空 ， 则 可 将 删除 标志 设为 真 ， 表示 用户 删除 的 点 可 转嫁到 这里 . 
 4.1 　 插入 算法 
 　 　 DM _ 树 的 插入 操作 由 两步 构成 ： 第一步 是 找到 被 插入 区间 所在 的 结点 ； 第二步 是 执行 具体 的 插入 操作 及 后续 的 分解 操作 . 算法 如下 . 
 　 　 算法 2 .   向 DM _ 树中 插入 区间 ( a , b ) 
 　 　 ( 1 )   从 DM _ 树 的 根 开始 向下 搜索 ， 找到 包含 点 ( a , b ) 的 结点 p ， 在 搜索 过程 中 判断 该 结点 是否 可 插入 ( 即 包含 区间 集 的 容量 小于 最高 限制 ) ， 是 则 将 可 插入 标志 设为 真 . 
 　 　 ( 2 )   如果 p 的 容量 小于 最高 限制 ， 则 对 p 的 平衡 结构 ［ q , n ］ 做 如下 处理 ： 
 　 　 ①   如 n ＞ 0 ， 则 将 区间 ( a , b ) 插入 p 的 包含 区间 集中 ， 对 q 调用 插入 平衡 算法 ， 并 调整 p 和 q 的 平衡 关系 ( 将 它们 的 平衡 量 均 减 1 ， 如减 到 0 则 撤消 两点 间 的 平衡 关系 ) . 转向 ④ ； 
 　 　 ②   如 n ＜ 0 ， 则 将 区间 ( a , b ) 插入 p 的 包含 区间 集中 ， 如 q 的 容量 大于 最高 限制 ， 则 对 q 执行 删除 平衡 算法 . 并 调整 p 和 q 的 平衡 关系 ( 将 它们 的 平衡 量 均 减 1 ， 如减 到 0 则 撤消 两点 间 的 平衡 关系 ) . 转向 ④ ； 
 　 　 ③   如 n = 0 ， 则 将 区间 ( a , b ) 插入 p 的 包含 区间 集中 ； 
 　 　 ④   如 p 的 父 结点 s 的 平衡 量 大于 0 ， 则 对 s 的 平衡点 执行 插入 平衡 算法 ， 如 s 的 容量 大于 最高 限制 ， 则 对 s 执行 删除 平衡 算法 ， 调整 它们 的 平衡 关系 ， 算法 结束 . 
 　 　 ( 3 )   如果 可 插入 标志 为 真且 p 的 容量 等于 或 大于 最高 限制 . 则 将 ( a , b ) 加入 p 的 包含 区间 集中 . 
 　 　 ①   将 p 中尾值 最大 的 区间 充入 其父 结点 ， 将父 结点 赋给 p ； 如果 p 的 容量 等于 或 大于 最高 限制 ， 则 转向 ① ； 
 　 　 ②   如 p 的 平衡 量 小于 0 ， 则 对 p 的 平衡点 调用 删除 平衡 算法 ， 调整 它们 的 平衡 关系 . 如 p 的 平衡 量 大于 0 ， 则 对 p 的 平衡点 调用 插入 平衡 算法 ， 调整 它们 的 平衡 关系 . 如 p 的 父 结点 的 平衡 量 大于 0 ， 则 对 p 的 父 结点 的 平衡点 调用 插入 平衡 算法 ， 调整 它们 的 平衡 关系 . 算法 结束 . 
 　 　 ( 4 )   如果 可 插入 标志 为 假且 p 的 容量 大于 或 等于 最高 限制 . 则 将 ( a , b ) 加入 p 的 包含 区间 集中 . 如 p 的 父 结点 的 平衡 量 大于 0 ， 则 对 p 的 父 结点 的 平衡点 调用 插入 平衡 算法 ， 调整 它们 的 平衡 关系 . 对 p 调用 删除 平衡 算法 . 算法 结束 . 
 4.2 　 删除 算法 
 　 　 DM _ 树 的 删除 操作 由 两步 构成 ： 第一步 是 找到 被 删除 的 区间 所在 的 结点 ； 第二步 是 执行 具体 的 删除 操作 及 后续 的 合并 操作 . 算法 如下 . 
 　 　 算法 3 .   从 DM _ 树中 删除 区间 ( a , b ) . 
 　 　 ( 1 )   若 DM _ 树 的 根 root 的 包含 区间 集中 包含 区间 ( a , b ) ， 则 转向 ( 3 ) ， 否则 若 root 的 容量 大于 最低 限制 ， 则 将 可 删除 标志 设为 真 ， 将 在 x 轴上 的 投影 包含 a 的 子 结点 赋给 p ， 如 p 的 上部 容量 为 0 ， 则 将 可 删除 标志 设为 假 ； 
 　 　 ( 2 )   如 p 的 包含 区间 集中 包含 区间 ( a , b ) ， 则 转向 ( 3 ) ； 否则 若 p 的 容量 大于 最低 限制 ， 则 将 可 删除 标志 设为 真 ， 将 在 x 轴上 的 投影 包含 a 的 子 结点 赋给 p ， 如 p 的 上部 容量 为 0 ， 则 将 可 删除 标志 设为 假 . 转向 ( 2 ) ； 
 　 　 ( 3 )   如 p 的 容量 大于 最低 限制 ， 则 对 p 的 平衡 结构 ［ q , n ］ ； 
 　 　 ①   如 n ＜ 0 ， 将 ( a , b ) 从 p 的 包含 区间 集中 删除 . 对 p 运行 插入 平衡 算法 . 如 p 的 父 结点 t 的 容量 大于 最高 限制 ， 则 对 t 运行 删除 平衡 算法 ， 对 t 的 平衡点 运行 插入 平衡 算法 ， 调整 它们 的 平衡 关系 . 转向 ( 6 ) ； 
 　 　 ②   如 n ＞ 0 ， 将 ( a , b ) 从 p 的 包含 区间 集中 删除 ， 对 q 运行 插入 平衡 算法 ， 调整 p 与 q 的 平衡 量 . 如 p 的 父 结点 t 的 容量 大于 最高 限制 ， 则 对 t 运行 删除 平衡 算法 ， 对 t 的 平衡点 运行 插入 平衡 算法 ， 调整 它们 的 平衡 关系 . 转向 ( 6 ) . 
 　 　 ③   如 p 的 平衡 量 等于 0 ， 将 ( a , b ) 从 p 的 包含 区间 集中 删除 ， 转向 ( 6 ) ； 
 　 　 ( 4 )   如果 可 删除 标志 为 真 ， 且 p 的 容量 等于 或 小于 最低 限制 ， 则 将 ( a , b ) 从 p 的 包含 区间 集中 删除 ， 将 其父 结点 中尾值 最小 的 区间 充入 p ， 将 p 的 父 结点 赋予 p ， 重复 执行 直到 容量 大于 最低 限制 的 结点 . 这时 如 p 的 父 结点 的 容量 大于 最高 限制 ， 则 对 它 运行 删除 平衡 算法 . 转向 ( 6 ) ； 
 　 　 ( 5 )   如果 可 删除 标志 为 假且 p 的 容量 等于 或 小于 最低 限制 ， 则 将 ( a , b ) 从 包含 区间 集中 删除 ， 对 p 执行 插入 平衡 算法 ； 
 　 　 ( 6 )   如 被 删除 区间 的 结点 或 删除 转嫁到 的 结点 出现 包含 区间 集 不 均衡 ( 即 包含 区间 集中 区间 的 尾值 大于 某个 值 c 的 区间 数 至少 为 上部 区间 中 的 最小 尾值 大于 某个 值 c 的 子 结点 数 的 B / 2 倍 ) ， 则 对 该 结点 执行 插入 调整 算法 和 删除 调整 算法 进行 调整 . 　 　 
 　 　 算法 4 .   合并 算法 ( 将 结点 r 与 s 合并 ) 
 　 　 ( 1 )   将 r 和 s 的 包含 区间 集合 并 在 一起 ； 
 　 　 ( 2 )   将 两个 结点 的 子 结点 合并 在 一起 ， 并 修改 平衡 关系 结构 . 
 　 　 算法 5 .   插入 平衡 算法 
 　 　 输入 ： DM _ 树中 一个 结点 p ； 
 　 　 ( 1 )   将 p 的 子 结点 q 的 包含 区间 集中 尾值 最大 的 区间 ( 设 属于 q ) 加入 父 结点 中 ， 如 q 的 容量 大于 最低 限制 ， 则 算法 结束 ， 如 q 为叶 结点 ， 则 转向 ( 2 ) ， 将 q 赋给 p ， 转向 ( 1 ) ； 
 　 　 ( 2 )   如果 p 的 容量 大于 或 等于 B2 / 2 ， 则 算法 结束 ， 否则 对 p ， p 的 兄弟 和 p 的 父 结点 进行 重组 将 其 分为 一个 父 结点 和 — 1 个子 结点 ， 如 p 的 父 结点 的 子 结点 数 与其 兄弟 的 相加 小于 B ， 则 转向 ( 3 ) ， 否则 算法 结束 . 
 　 　 ( 3 )   如 p 的 父 结点 r 与 兄弟 s 的 子 结点 和 小于 B ， 则 r 和 s 合并 ( 调用 合并 算法 ) ， p 赋上 新 结点 的 父 结点 ， 转向 ( 3 ) . 否则 算法 结束 . 
 　 　 算法 6 .   删除 平衡 算法 
 　 　 输入 ： DM _ 树中 一个 结点 p . 
 　 　 ( 1 )   如果 p 为叶 结点 ， 则 转向 ( 2 ) . 将 p 的 上部 满 的 子 结点 的 上部 区间 中尾值 最小 的 区间 充入 其子 结点 ， 将 该子 结点 赋给 p ； 如果 p 的 容量 等于 或 大于 最高 限制 ， 则 转向 ( 1 ) . 否则 算法 结束 ； 
 　 　 ( 2 )   如 p ， p 的 兄弟 和 p 的 父 结点 的 容量 和 小于 B3 + B2 ， 算法 结束 ； 
 　 　 ( 3 )   否则 将 p 的 父 结点 一分为二 ， 插入 区间 ， 将 p 的 父 结点 赋给 p ； 
 　 　 ( 4 )   如 p 与其 某一 兄弟 共有 小于 2B 个 兄弟 ， 则 算法 结束 ， 否则 将子 结点 数 大于 B 的 结点 r 的 包含 区间 集和子 结点 一分为二 ， 将 r 分成 两个 结点 ， 同时 计算 两个 结点 的 包含 区间 集 ， 如 一个 结点 的 包含 区间 集中 区间 数 多于 最高 限制 ， 则 在 平衡 关系 表中 指明 该 结点 和 另 一 结点 的 平衡 关系 ( 设定 平衡点 和平 衡量 ) . 将 p 赋上 r 的 父 结点 ， 转向 ( 4 ) . 
 5 　 性能 分析 
 5.1 　 算法 复杂性 分析 
 　 　 定理 1 .   DM 树 的 存储空间 为 O ( n / B ) ， 且 DM _ 树 总共 有 O ( logBn ) 层 . ( n 为 二维 区间 的 个数 ) . 
 　 　 证明 .   每个 区间 在 DM _ 树中 只 存储 一次 ， 由 文献 ［ 9 ］ 中 的 存储 结构 可得 其 存储空间 为 O ( n / B ) . 
 　 　 DM 树 与 B _ 树 相同 每个 结点 至少 有 B / 2 个子 结点 ， 每个 结点 至少 由   A × B / 2 个 区间 ， 所以 DM _ 树 总共 有 O ( logBn ) 层 . 
 　 　 在 算法 6 的 步骤 ( 3 ) 中将 结点 一分为二 时 ， 虽然 会 产生 不 平衡 的 现象 ， 即 结点 的 容量 大于 最高 限制 或 小于 最低 限制 ， 但 两个 结点 的 和 是 满足 最低 和 最高 限制 的 . 而且 产生 不 平衡 结点 对后 ， 在 以后 的 每次 插入 和 删除 操作 执行 时 ， 均 保证 有 平衡 关系 的 结点 的 容量 总和 不变 ， 而且 向 满足 限制 的 方向 转化 . 
 证毕 . 
 　 　 定理 2 .   在 对 一个 结点 进行 分解 时该 结点 与 任何 结点 均 无 平衡 关系 . 
 　 　 证明 .   结点 间 的 平衡 关系 只有 某个 结点 在 执行 插入 操作 中 进行 分解 时才 会 产生 . 
 　 　 某个 结点 在 分解 之前 要求 为 ： 该 结点 有 B 个子 结点 ， 分解 后 其 容量 最多 和 原来 一样 ， 最少 为 0 ， 如 容量 为 0 则 每次 向 其满 的 子 结点 增加 新 的 区间 都 会 向 该 结点 增加 区间 ， 所以 当 它 再次 分解 时其 容量 早已 达到 正常 水平 ， 从而 消除 了 平衡 关系 . 而且 产生 不 平衡 结点 对后 ， 在 以后 的 每次 插入 和 删除 操作 执行 时 ， 对 平衡 量 大于 0 的 结点 ， 在 算法 中是 不会 向 其中 加点 的 ， 同时 将 平衡 量 减 1 ， 由于 平衡 量 是 不会 大于 在 该 结点 分解 之前 在 当前 结点 及其 子 结点 中 插入 的 区间 数 ， 所以 在 其 平衡点 再次 分解 时 平衡 关系 早已 结束 . 所以 定理 得证 . 
 证毕 . 
 　 　 推论 1 .   DM _ 树中 每个 结点 只 与 一个 结点 有 平衡 关系 ， 而且 相邻 . 
 　 　 证明 .   由 插入 算法 可 得 一个 结点 只有 在 分解 时才 产生 和 它 有关 的 新 的 平衡 关系 ， 而且 一个 结点 在 分解 时 与 其它 结点 已 无 平衡 关系 ， 所以 DM _ 树中 每个 结点 只 与 一个 结点 有 平衡 关系 . 由于 两个 结点 之间 除了 分解 操作 是 无法 生成 新 的 结点 ， 所以 一对 有 平衡 关系 的 结点 之间 是 不会 出现 新 的 结点 的 ， 所以 一对 有 平衡 关系 的 结点 总是 相邻 的 . 
 证毕 . 
 　 　 由 推论 1 和 定理 2 可以 看到 软性 限制 、 滞后 调整 和 记录 平衡 关系 相结合 可 保证 在 动态 调整 的 过程 中 对 限制 的 违反 只是 存在 于 相邻 两个 结点 之间 . 因此 可以 通过 插入 和 删除 操作 对 平衡 关系 的 处理 将 其 调整 成 正常 状态 ， 同时 由于 查询 算法 是 宽度 优先 扫描 ， 所以 两个 相邻 的 结点 间 有 平衡 关系 时 ， 并 不 影响 查询 的 效率 . 
 　 　 定理 3 .   查询 I / O 时间 为 logBn + t / B . ( n 为 二维 区间 的 个数 ， t 为 查询 结果 的 个数 ) . 
 　 　 证明 .   从 DM _ 树上 的 查询方法 上 可以 看到 查询 结果 所在 的 包含 区间 集 共有 3 种 可能 ： 
 　 　 ( 1 )   完全 包含 在 折线 内且 子 结点 与 折线 的 水平 部分 不 相交 ： 每层 结点 的 包含 区间 集中 区间 的 个数 至少 为 A × B / 2 ， ( 以 一次 读取 B2 个 计算 ［ 1 ］ ) ， 所以 读取 这部分 区间 所 需 访问 外存 的 次数 为 O ( t / B ) 次 ； 
 　 　 ( 2 )   与 折线 的 垂线 部分 相交 ， 从 定理 1 中 可 看到 DM _ 树 总共 有 O ( logBn ) 层 ， 由 纵向 结构 的 特点 可以 看到 ， 每层 只有 一个 块 中 的 区间 不全 满足 查询 条件 ， 所以 读取 这部分 结果 所 需 访问 外存 的 次数 为 O ( logBn ) . 
 　 　 ( 3 )   与 折线 的 水平线 部分 相交 或子 结点 与 折线 的 水平 部分 相交 ， 由 横向 结构 的 特点 可以 看到 ， 每个 结点 只有 一个 块 中 的 区间 不全 满足 查询 条件 ， 从 本文 第 2 部分 可知 DM _ 树中 每个 结点 有 A 个子 结点 ， 每个 结点 的 包含 区间 集中 区间 的 个数 至少 为 A × B / 2 ( 至少 两个 相邻 结点 的 和 是 满足 这一 结论 的 ) ， 设某 结点 与 折线 水平 部分 相交 的 子 结点 有 A 个 . 这 A + 1 次 外存 访问 至少 读取 A × B / 2 个 区间 ， 所以 以 一次 读取 消耗 在 该 部分 的 外存 访问 次数 为 O ( t / B ) . 动态 调整 中 删除 操作 有 可能 造成 查询 结果 中 区间 的 数量 小于 独到 的 块 数 的 B / 2 倍 ， 但 第 6 步中 的 调整 操作 保证 了 这个 比例 . 
 　 　 所以 查询 I / O 时间 为 O ( logBn + t / B ) . 
 证毕 . 
 　 　 定理 3 与 文献 ［ 1 ］ 中 对 Meta _ 树 的 查询 操作 复杂性 的 分析 是 相似 的 . 
 　 　 定理 4 .   DM _ 树 的 调整 算法 中 插入 和 删除 操作 I / O 时间 是 O ( logB 　 n ) . 
 　 　 证明 .   DM _ 树上 的 插入 操作 在 第 1 步 从 根向叶 的 插入 过程 的 最高 时间 复杂性 为 O ( logBn ) ， 因为 只 访问 了 O ( logBn ) 层 ， 且 每个 结点 的 操作 的 时间 复杂性 为 常数 . 叶 结点 上 的 调整 过程 只是 在 一个 结点 下 进行 的 ， 其 复杂性 可 认为 是 常数 . 由于 每个 平衡 算法 执行 的 时间 复杂性 为 O ( logBn ) ， 而 整个 插入 操作 中 只 执行 有限 次 平衡 算法 ， 所以 整个 插入 的 时间 复杂性 为 O ( logBn ) . 
 　 　 DM _ 树上 的 删除 操作 在 1 步 从 根向叶 的 删除 过程 的 最高 I / O 时间 为 O ( logBn ) ， 因为 只 访问 了 O ( logBn ) 层 ， 且 每个 结点 的 操作 的 时间 复杂性 为 常数 . 叶 结点 上 的 调整 过程 只是 在 一个 结点 下 进行 的 ， 其 复杂性 可 认为 是 常数 . 由于 每个 平衡 算法 执行 的 时间 复杂性 为 O ( logBn ) ， 而 整个 删除 操作 中 只 执行 有限 次 平衡 算法 ， 第 6 步 只 对 包含 区间 集中 删除 了 区间 的 结点 和 区间 转嫁 的 结点 使用 ， 所以 也 只 执行 一次 ， 所以 整个 插入 的 时间 复杂性 为 O ( logBn ) . 
 证毕 . 
 　 　 最高 限制 和 临界 容量 的 设定 用于 在 父子 结点 间 进行 区间 交换 时 保持 包含 区间 集中 区间 的 平衡 . 避免出现 图 6 中 S 结点 中 S1 和 S2 这种 所 含 区间 的 尾值 较大 的 子 结点 上面 的 部分 所含 的 区间 数较 少 ， 而 Sm 和 Sm - 1 这种 所 含 区间 的 尾值 较大 的 子 结点 上面 的 部分 所含 的 区间 数较 多 . 这样 将 影响 查询 操作 的 效率 . 删除 算法 的 第 6 步 和 插入 算法 的 第 3 步对 这 一点 进行 控制 . 
 
 
 图 　 6 
 5.2 　 比较 
 　 　 下面 将 DM _ 树 与 其他 的 几种 区间 索引 方法 作 一下 比较 ， 见表 2 . 
 表 　 2 
 
 名称 存储 效率 查询 I / O 时间 插入 I / O 时间 删除 I / O 时间 
 Interval _ 树 O ( n / B ) O ( logBn + t / B ) 　 　 
 Segment _ 树 O ( nlogBn / B ) O ( logBn + t / B ) 　 　 
 Meta _ 树 O ( n / B ) O ( logBn + t / B ) O ( log2Bn ) 　 
 DM _ 树 O ( n / B ) O ( logBn + t / B ) O ( logBn ) O ( logBn ) 
 
 　 　 从 上表 可以 看出 DM _ 树 的 存储 、 查询 、 插入 和 删除 效率 达到 最优 ， 所以 DM _ 树 的 综合 效率 是 较 好 的 .   
 6 　 总结 
 　 　 文中 提出 了 一个 DM _ 树 ， 可 用于 约束 数据库 中 数据 的 存储 和 访问 ， 它 在 一维 区间 索引 的 存储 、 查询 和 动态 调整 方面 有 较 好 综合性 能 ， 基本 达到 B _ 树 的 性能 . 以后 还 将 对 如何 进一步提高 性能 以及 进行 多维 区间 的 索引 需要 进一步 的 研究 . 
 本 课题 得到 国家自然科学基金 资助 . 
 作者简介 ： 王轶彤 ， 女 ， 1973 年生 ， 博士生 ， 主要 研究 方向 为 数据库 和 半 结构化 数据处理 . 
 　 　 　 　 　 施 伯乐 ， 男 ， 1935 年生 ， 复旦大学 首席 教授 ， 博士生 导师 ， 主要 研究 方向 为 数据库 、 知识库 和 数据仓库 等 . 
 作者 单位 ： 复旦大学 计算机科学 系 　 上海 　 200433 
 参考文献 
 　 1 　 　 Kanellakis   P   et   al .   Constraint   query   language .   Journal   of   Computer   Science   and   System ， 1995 ,   51 
 　 2 　 　 Goldin   D   Q ,   Kanellakis   P .   Constraint   query   algebra .   To   appear   in   Constraints   Journal   1st   issue   1996 
 　 3 　 　 王宇君 . 约束 数据库 ： 模式 设计 、 代数 查询语言 及 索引 ［ 博士论文 ］ .   复旦大学 .   上海 ，   1996 
 　 　 　 ( Wang   Yujun ， Constraint   database :   Scheme   design ,   algebra   query   language   and   indexing   ［ Ph   D   dissertation ］ ( in   Chinese ) .   Fudan   University ,   Shanghai ,   1996 ) 
 　 4 　 　 Edelsbruner   H .   A   new   approach   to   rectangle   intersections   ( Part   I ) .   Internet   Journal   of   Computer ,   1983 
 　 5 　 　 Guting   R   H .   Spatial   database   systems ， Very   Large   Database   ' 95 
 　 6 　 　 Samet   H .   The   Design   and   Analysis   of   Spatial   Data   Structure .   Reading ,   MA :   Addison - Wesley ,   1989 
 　 7 　 　 Samet   H .   Application   of   Spatial   Data   Structure .   Reading ,   MA :   Addison - Wesley ,   1989 
 　 8 　 　 Blankenagel   G ,   Guting   R   H .   External   segment   tree .   Algorithmica ,   1994 ,   12 :   498 ～ 532 
 　 9 　 　 Kanellakis   P   et   al .   Indexing   for   data   models   with   constraints   and   classes ,   Principle   of   Database   ' 93 .   Washington :   ACM   Press ,   1993 .   25 ～ 28 
 　 10 　 　 Ramaswamy   S ,   Subramanian   S .   Path   caching :   A   technique   for   optimal   external   searching .   Principle   of   DataBase   ' 94 .   Minneapolis :   ACM   Press ,   1994 .   24 ～ 26 
 　 11 　 　 Mccreight   E   M .   Priority   search   trees ,   SIAM   Journal   of   Computer ,   1985 ,   14 ( 2 ) :   257 ～ 276 
 原稿 收到 日期 ： 1998 - 10 - 06 ； 
 修改稿 收到 日期 ： 1999 - 03 - 08 . 
