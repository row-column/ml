微型机 与 应用 
 MICROCOMPUTER   &   ITS   APPLICATIONS 
 1999 年   第 18 卷   第 1 期   Vol.18   No.1   1999 
 
 
 
 Visual   FoxPro 字段 属性 字典 的 创建 与 应用 
 韩 志军 　 汪新庆 　 吴冲龙 
 　 　 摘 　 要 ： 运用 Visual   FoxPro 设计 创建 字 段 属性 字典 的 方法 ， 并 以 实际 程序 为例 介绍 了 字 段 属性 字典 的 信息 采集 方法 与 应用 类型 。 
 　 　 关键词 ： 数据 字典 　 Visual   FoxPro 　 程序开发 
 　 　 设计 创建 应用 项目 中 所 使用 的 各个 数据库 表格 ， 是 运用 Visual   FoxPro 进行 项目 开发 的 一个 重要 基础 工作 。 开发者 通常 运用 表 设计 器 创建表格 ， 并 对 每个 表 每个 字段 的 所有 属性 分别 一一 设置 。 但 在 实际 开发 过程 中 ， 同一 应用 项目 数据库 的 不同 表中 常常 包含 相同 的 字 段 。 如果 对 这些 相同 字段 的 相同 属性 多次重复 输入 ， 不仅 影响 工作效率 ， 而且 不 容易 完整 、 一致 。 因此 ， 开发者 常 希望 能 找到 1 种 方便 可靠 的 数据库 表 结构设计 方法 。 
 1 　 数据 字典 
 　 　 本文 介绍 的 数据 字典 是 成功 开发 应用程序 的 一个 重要 方法 ， 它 是 实现 数据库 的 安全性 、 完整性 、 一致性 、 可 恢复性 、 有效性 、 可修改性 以及 可扩充性 的 重要 手段 之一 。 数据 字典 为 那些 可能 很 复杂 且 很 耗时 的 程序开发 工作 提供 了 所 需 的 标准化 信息 ， 使 整个 开发 工作 简明 快捷 。 另一方面 ， 它 也 为 项目 开发 文档 的 生成 提供 了 方便 。 
 　 　 运用 Visual   FoxPro 创建 数据 字典 有 2 种 方法 ， 即用 Visual   FoxPro 提供 的 数据库 容器 并 对 它 进行 扩充 和 创建 自己 的 数据 字典 。 
 　 　 数据 字典 最 重要 的 目的 就是 存储 1 个 字 段 的 信息 ， 以便 进行 重建 和 引用 操作 。 而 在 Visual   FoxPro 的 数据库 容器 中 ， 存储 了 该 数据库 中 各个 对象 的 定义 以及 它们 的 属性 ， 包括 Database ( 数据库 ) 、 Table ( 表格 ) 、 Index ( 索引 ) 、 Field ( 字 段 ) 和 View ( 视图 ) 等 。 其中 存储 的 字 段 属性 有 ： Default   value ( 缺省值 ) 、 Format ( 格式 ) 、 Input   mask ( 输入 屏蔽 ) 、 Caption ( 标题 ) 、 Comment ( 注释 ) 、 Rules ( 规则 ) 、 Triggers ( 触发器 ) 和 Display   class ( 显示 类 ) 等 。 但是 ， 数据库 容器 中 并 不 存储 字 段 类型 、 大小 及 小数位 数等 属性 ， 这些 信息 只 存在 于 DBF 的 表头 中 。 如果 DBF 文件 被 破坏 ， 就 无法 确定 此类 信息 。 因此 ， 这些 属性 需要 在 数据 字典 中 作为 自定义 的 字 段 信息 被 保存起来 。 
 　 　 Visual   FoxPro 的 数据库 容器 本身 是 1 个 自由 表格 。 为了 扩充 数据库 容器 ， 可以 在 其 原有 结构 的 末尾 添加 新 的 字 段 。 但 由于 它 特殊 的 本质 所 决定 ， 数据库 容器 8 个 原有 字段 的 基本 结构 不能 被 修改 ， 因为 对 其 原字 段 的 任何 改动 都 可能 影响 到 数据库 的 完整性 ， 可能 无法 打开 任何 数据库 表格 。 如果 有 许多 附加 的 属性 要 存储 ， 而且 不想 存取 数据库 容器 以免 产生 一些 问题 ， 则 可 在 数据库 容器 之外 创建 自己 的 数据 字典 。 
 　 　 要 使 1 个 数据 字典 对 程序开发 有用 ， 必须 合理 地 设计 其 结构 。 通常 ， 1 个 完整 的 数据 字典 应该 包括 应用程序 字典 、 数据库 属性 字典 、 表格 属性 字典 、 字 段 属性 字典 、 索引 信息 字典 以及 存储 各 字典 关系 的 关系 字典 等 多种 字典 。 
 　 　 如前所述 ， 数据 字典 最 重要 的 目的 就是 存储 字段 的 信息 。 下面 将 着重 讲述 字 段 属性 字典 的 建立 与 应用 。 其它 几种 字典 读者 可 根据 相似 的 方法 以及 自己 特殊 的 需要 进行 创建 与 应用 。 
 2 　 字 段 属性 字典 的 创建 
 2.1 　 字 段 属性 字典 结构设计 
 　 　 字 段 属性 字典 中 定义 了 应用 项目 的 任一 数据库 中 所有 表格 使用 的 全部 字 段 。 它 的 目的 是 为了 确保 相同 的 字 段 具有 相同 的 名称 及 属性 。 即使 1 个 字 段 被 多个 表格 使用 ， 它 也 只 被 定义 1 次 ， 这样 确保 了 字 段 定义 是 规范化 与 标准化 的 。 
 　 　 笔者 以 数据库 容器 中 的 字 段 属性 为 依据 ， 结构 DBF 表中字 段 属性 所 设计 的 字 段 属性 字典 ( DICT . DBF ) 基本 结构 如下 ： 
 　 　 字 段 说明 　 　 　 字段名 　 　 　 　 　 类型 　 　 　 　 宽度 
 　 　 字段名 称 　 　 　 FIELDNAME 　 　 　 字符 型 　 　 　 　 10 
 　 　 字 段 类型 　 　 　 FIELDTYPE 　 　 　 字符 型 　 　 　 　 1 
 　 　 字 段长度 　 　 　 FIELDLEN 　 　 　   数值 型 　 　 　 　 3 
 　 　 小数位 数 　 　 　 FIELDDEC 　 　 　   数值 型 　 　 　 　 2 
 　 　 允许 空值 　 　 　 FIELDNULL 　 　 　 逻辑 型 　 　 　 　 1 
 　 　 允许 代码 转换 　 FIELDNOCP 　 　 　 逻辑 型 　 　 　 　 1 
 　 　 字 段 有效 规则 　 FIELDRULE 　 　 　 备注 型 　 　 　 　 10 
 　 　 字 段 有效 信息 　 FIELDERR 　 　 　   备注 型 　 　 　 　 10 
 　 　 字 段 默认值 　 　 FIELDDEFA 　 　 　 备注 型 　 　 　 　 10 
 　 　 表格 有效 规则 　 TABLERULE 　 　 　 备注 型 　 　 　 　 10 
 　 　 表格 有效 信息 　 TABLEERR 　 　 　   备注 型 　 　 　 　 10 
 　 　 字 段 标题 　 　 　 FIELDCAPT 　 　 　 字符 型 　 　 　 　 30 
 　 　 字 段 注释 　 　 　 FIELDCOMM 　 　 　 备注 型 　 　 　 　 10 
 　 　 字 段 格式 　 　 　 FIELDFORM 　 　 　 字符 型 　 　 　 　 30 
 　 　 字 段 输入 掩码 　 FIELDINPU 　 　 　 字符 型 　 　 　 　 30 
 　 　 字 段 显示 类库 　 FIELDLIB 　 　       字符 型 　 　 　 　 30 
 　 　 字 段 显示 类 　 　 FIELDCLAS 　 　 　 字符 型 　 　 　 　 30 
 　 　 该表 最后 4 个 字 段 为 Visual   FoxPro   5.0 版本 中 新 增加 的 数据库 表字 段 属性 ， 在 Visual   FoxPro   3.0 版本 的 数据库 容器 中 没有 这些 属性 。 在 实际 开发 工作 中 ， 读者 可 参照 上述 字典 结构 ， 依据 使用 的 Visual   FoxPro 版本号 进行 取舍 ， 也 可 根据 开发 需要 增加 自己 特殊 的 字 段 类型 。 
 2.2 　 字 段 属性 字典 信息 采集 
 　 　 字 段 属性 字典 中 具备 完善 的 数据 是 其 应用 的 基础 。 由于 它 本身 为 1 个 自由 表格 ， 开发者 可像 对待 普通 自由 表格 一样 ， 编制 相应 的 程序管理 字 段 属性 字典 ， 对 其 进行 相应 的 数据 输入 、 修改 、 查询 或 输出 操作 。 程序员 应 在 开发 初期 建立 字 段 属性 字典 ， 并 在 应用 程序开发 过程 中 逐步完善 其 内容 。 如果 已经 建立 了 完善 的 数据库 容器 ， 下面 提供 的 程序 则 可 依据 所 选 数据库 采集 信息 ， 自动 添加 到 字 段 属性 字典 中 。 
 * * * * * * * * * * * * * * * * * * * * * * * * * 
 * 程序 名 ： MKDICT . PRG 
 * 依据 数据库 容器 建立 字 段 属性 字典 ( DICT ) 
 * * * * * * * * * * * * * * * * * * * * * * * * * 
 LOCAL   lnOldArea , aTableProp ( 10 , 11 ) , cDBName 
 LOCAL   cTableName , cFieldName , cFieldCapt 
 LOCAL   cFieldComm , cFieldForm , cFieldInpu 
 lnOldArea = select ( ) 
 CLOSE   DATABASE 
 cDBName = GETFILE ( “ DBC ” , ` 数据库 名 ' ) 
 IF   EMPTY ( cDBName ) 
 　 　 CANCEL 
 ENDIF 
 * 生成 存放 数据库 中 各 表格 名 的 临时 表 
 select   0 
 CREA   TABLE   TEMPTABL ( TABLENAME   C ( 8 ) ) 
 select   0 
 USE   DICT 
 SET   ORDER   TO   FIELD - NAME 
 SELECT   0 
 USE   & cDBName 
 SET   ORDER   TO   Objectname 
 SCAN   FOR   objecttype = ` Table ' 
 cTableName = TRIM ( ObjectNAME ) 
 SELECT   TEMPTABL 
 APPEN   BLANK 
 REPL   TABLENAME   WITH   UPPER ( cTableName ) 
 ENDSCAN 
 USE 
 * 采集 各 表字 段 信息 加入 字 段 属性 字典 
 OPEN   DATABASE   & cDBName 
 SELECT   TEMPTABL 
 SCAN 
 　 cTableName = TRIM ( TABLENAME ) 
 　 IF   USED ( cTableName ) 
 　 　 SELECT   & cTableName 
 　 　 1USED = . T . 
 　 ELSE 
 　 　 SELECT   O 
 　 　 USE   & cTableName 
 　 　 1USED = . F . 
 ENDIF 
 aTableProp = . F . 
 = AFIELDS ( aTableProp ) 
 nFieldCount = FCOUNT ( ) 
 FOR 　 nFN = 1   to   nFieldCount 
 SELECT   & cTableName 
 cFieldName = aTableProp ( nFN , 1 ) + ‘ ’ 
 SELECT   DICT 
 SEEK ( cFieldName ) 
 IF . NOT . FOUND ( ) 
 cFieldCapt ＝ TRIM ( DBGETPROP ( cTableName + ‘ . ’ + cFieldName , ; ` FIELD ' , ` CAPTION ' ) ) 
 cFieldComm = TRIM ( DBGETPROP ( cTableName + ‘ . ' + cFieldName , ; 
 ` FIELD ' , ` COMMENT ' ) ) 
 cFieldForm = TRIM ( DBGETPROP ( cTableName + ‘ . ’ + cFieldName , ； 
 ` FIELD ' , ` FORMAT ' ) ) 
 cFieldInpu = TRIM ( DBGETPROP ( cTableName + ‘ . ' + cFieldName , ; ` FIELD ' , ` INPUTMASK ' ) ) 
 SELECT   DICT 
 APPEND   BLANK 
 REPL   FIELDNAME   WITH   aTableProp ( nFN , 1 ) , ; 
 FIELDType   WITH   aTableProp ( nFN , 2 ) , ; 
 FieldLen   WITH   aTableProp ( nFN , 3 ) , ; 
 FIELDDec   WITH   aTableProp ( nFN , 4 ) , ; 
 FIELDNull   WITH   aTableProp ( nFN , 5 ) , ; 
 FieldNocp   WITH   aTableProp ( nFN , 6 ) , ; 
 FIELDRule   WITH   aTableProp ( nFN , 7 ) , ; 
 FieldErr   WITH   aTableProp ( nFN , 8 ) , ; 
 FieldDefa   WITH   aTableProp ( nFN , 9 ) , ; 
 TABLErule   WITH   aTableProp ( nFN , 10 ) , ; 
 TABLEERR   WITH   aTableProp ( nFN , 11 ) , ; 
 FieldCapt   WITH   cFieldCapt , ; 
 FIELDComm   WITH   cFieldComm , ; 
 FIELDForm   WITH   cFieldForm , ; 
 FIELDInpu   WITH   cFieldInpu 
 　 ENDIF 
 　 ENDFOR 
 SELECT   ( cTableName ) 
 　 IF   NOT   1USED 
 　 　 USE 
 　 ENDIF 
 ENDSCAN 
 SELE   TEMPTABL 
 USE 
 DELE   FILE   TEMPTABL . DBF 
 = select ( lnOldArea ) 
 * * * * * * * * * * * * * * * * * * * * * * * 
 * 程序 MKDICT . PRG 结尾 
 * * * * * * * * * * * * * * * * * * * * * * * 
 3 　 字 段 属性 字典 的 应用 
 　 　 依据 完善 的 字 段 属性 字典 ， 可 对 数据库 表格 进行 设计 与 创建 ， 下述 程序 可 实现 对 所选 表格 各个 字 段 属性 的 自动 设置 。 这样 既 达到 了 高效 开发 ， 又 保证 了 所用 字 段 属性 的 标准化 。 
 * * * * * * * * * * * * * * * * * * * * * * * * * 
 * 程序 名 ： SETPROP . PRG 
 * 依据 字 段 属性 字典 设置 数据库 表字 段 属性 
 * * * * * * * * * * * * * * * * * * * * * * * * * 
 local   lnOldArea , lUSED , cTableName , cFieldtype 
 lnOldArea = select ( ) 
 cTableName = GETFILE ( ` DBF ' , ` 数据库 表名 ' ) 
 cTableName = SUBSTR ( cTableName , ； 
 　 　 RAT ( ` ＼ ' , cTableName ) + 1 ) 
 cTableName = SUBSTR ( cTableName , 1 , ； 
 　 　 AT ( ‘ . ' ， cTableName ) - 1 ) 
 IF   EMPTY ( cTableName ) 
 　 　 CANCEL 
 ENDIF 
 If   USED ( dictl ) 
 　 　 SELECT   DICT1 
 　 ELSE 
 　 　 SELECT   0 
 　 　 USE   dict1 
 ENDIF 
 SET   ORDER   TO   FIELDNAME 
 IF   USED ( cTableName ) 
 　 　 SELECT   & cTableName 
 　 1USED = . T . 
 ELSE 
 　 　 SELECT   0 
 　 　 USE   & cTableName 
 　 　 1USED = . F . 
 ENDIF 
 nFieldCount = FCOUNT ( ) 
 FOR   nFN = 1   to   nFieldCount 
 　 　 SELECT   & cTableName 
 　 　 cFieldName = FIELD ( nFN ) + ‘ ’ 
 　 　 cFieldCaption = TRIM ( DBGETPROP ( cTableName + ` . ' + ; cFieldName , ` FIELD ' , ` CAPTION ' ) ) 
 　 　 SELECT   DICT1 
 　 　 SEEK ( cFieldName ) 
 　 　 If   FOUND ( ) 
 　 　 　 cFieldCaption = TRIM ( FieldCapt ) 
 cFieldComment = TRIM ( Fieldcomm ) 
 cFieldType = Fieldtype 
 nFieldLen = FieldLen 
 nFieldDec = FieldDec 
 cFieldDefa 　 　 = FieldDefa 
 cFieldRule = TRIM ( FieldRule ) 
 cFieldErr = TRIM ( fielderr ) 
 cFieldInpu = TRIM ( FieldInpu ) 
 cFieldForm = TRIM ( FieldForm ) 
 　 　 　 ? DBSETPROP ( cTableName + ‘ . ' + cFieldName , ; 
 ‘ FIELD ' , ‘ CAPTION ' , cFieldCaption ) 
 　 　 　 ? DBSETPROP ( cTableName + ‘ . ' + cFieldName , ; 
 ` FIELD ' , ` COMMENT ' , cFieldComment ) 
 　 　 　 ? DBSETPROP ( cTableName + ‘ . ’ + cFieldName , ; 
 ` FIELD ' , ` FORMAT ' , cFieldForm ) 
 　 　 　 ? DBSETPROP ( cTableName + ` . ' + cFieldName , ; 
 ` FIELD ' , ` INPUTMASK ' , cFieldInpu ) 
 　 IF   NOT   EMPTY ( cFieldDefa ) 
 　   ALTER   TABLE ( cTableName ) ; 
 　 　 ALTER   COLUMN   & cFieldName . ; 
 　 　 SET   DEFAULT   EVALUATE ( cFieldDefa ) 
 　 ENDIF 
 　   ALTER   TABLE ( cTableName ) ; 
 　 　 ALTER   COLUMN   & cFieldName . ; 
 　 　 & cFieldType ( nFieldLen , nFieldDec ) 
 　 ENDIF 
 　 ENDFOR 
 　 SELECT ( cTableName ) 
 　 IF   NOT   1USED 
 　 　 USE 
 ENDIF 
 = select ( 1nOldArea ) 
 * * * * * * * * * * * * * * * * * * * * * * 
 * 程序 SETPROP . PRG 结尾 
 * * * * * * * * * * * * * * * * * * * * * * 
 　 　 上述 程序 已 在 Windows   95 及 Windows   NT 平台 下 ， 中文 Visual   FoxPro   3.0 及 5.0 版本 环境 中 测试通过 。 
 　 　 数据 字典 是 成功 高效 进行 应用 程序开发 的 一个 重要 方面 。 本文 只是 对 其 功能 、 创建 与 应用 作 了 初步 介绍 ， 希望 能 引起 程序开发 者 的 重视 与 广泛 深入 运用 。 
 作者 单位 ： 武汉 中国地质大学 资源 学院 信息系统 研究所 ( 430074 ) 
 参考文献 
 　 1 　 Antonovicb   M . Visual   FoxPro 开发 使用手册 . 北京 ： 机械 工业 出版社 ， 1997 
 　 2 　 许震宇 . Visual   FoxPro   3.0 程序设计 指南 . 北京 ： 清华大学出版社 ， 1996 
 　 3 　 吴冲龙 . 地质矿产 点源 信息系统 设计 原理 与 应用 . 北京 ： 中国地质大学 出版社 ， 1996 
 ( 收稿 日期 ： 1998 - 07 - 01 ) 
