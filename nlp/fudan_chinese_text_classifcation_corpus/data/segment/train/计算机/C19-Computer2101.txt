计算机 工程 
 COMPUTER   ENGINEERING 
 1999 年   第 25 卷   第 10 期   Vol.25   No.10   1999 
 
 
 
 基于 构件 的 框架 开发方法 及其 特定 域 应用 
 吴明晖 　 应晶 　 何志均 
 摘要 ： 传统 的 软件开发 方法 地面 向 领域 的 软件系统 开发 过程 中 难以 支持 重用 性 ， 针对 此 问题 ， 提出 了 一种 基于 构件 的 框架 开发方法 FCDM ， 主要 讲座 领域 分析 、 领域 框架 的 划分 、 领域 构件 的 提取 及 应用 系统 的 生成 等 关键 过程 ， 并 给出 在 特定 领域 中 的 应用 实例 。 
 关键词 ： 软件 重用 ； 领域 分析 ； 构件 ； 框架 
 The   Framework   of   Components   Development   Methodology   and   Its   Use   in   Domain 
 Wu   Minghui   Ying   Jing   He   Zhijun 
 ( Institute   of   Computer   Software , Zhejiang   University , Hangzhou   310027 ) 
 【 Anstract 】 It   is   difficult   for   traditional   software   development   methodology   to   support   software   reuse   in   domain   system   development . Aiming   at   this   problem , this   paper   proposes   the   framework   of   eomponents   development   methodology , and   discusses   the   effective   way   of   domain   analysis , frameworks   and   components   pick - up , application   system   integration . Finaly   it   gives   an   example   in   domain . 
 【 Key   words 】 Software   reuse , Domain   analysis , Component , Framework 
 　 　 软件 重用 技术 能 显著 地 提高 软件 的 开发 效率 、 增强 软件 的 可维护性 和 鲁棒性 ， 从而 达到 延长 软件 的 生命周期 、 降低 开发成本 和 缩短 开发周期 的 效果 ， 因此 对 软件 重用 方向 的 研究 一直 是 软件工程 中 的 重点 和 热点 。 传统 上 的 软件 重用 一般 是 指 程序 源代码 的 重用 ， 而 事实上 源代码 级 的 重用 并 不能 给 软件开发 带来 数量级 上 的 提高 [ 1 ] ， 重用 应当 包括 软件 的 分析 、 设计 、 实现 、 维护阶段 以及 相应 的 文档 、 知识 等 一切 与 软件开发 过程 有关 的 对象 ， 特别 在 大型 系统 的 开发 ， 由于 系统 固有 的 复杂性 ， 不仅 包括 功能 方面 的 需求 ， 还 包括 了 许多 非 功能 方面 的 需求 ， 如 灵活性 、 适应性 和 可靠性 等 ， 要 满足 这些 特性 ， 重用 性是 必不可少 的 。 对于 一个 特定 领域 来说 ， 通常 其 工作 流程 和 规范 大多 是 相同 或 相似 的 ， 当 软件 开发人员 为 该 领域 中 的 某个 企业 设计 开发 系统 后 其 大多数 成果 都 是 可以 运用 到 同 领域 的 其他 企业 ， 从而 不必 对 类似 的 项目 从零开始 开发 。 为 更好 地 利用 前期 的 开发 成果 ， 在 最初 的 开发 过程 中 就 应该 以 一种 重用 的 思想 来 指导 整个 开发 过程 。 
 1 　 构件 和 框架 
 　 　 软件产业 要 达到 工业生产 的 工程化 水平 ， 构件 的 生产 和 使用 起着 重要 的 作用 。 软件 的 生产 也 可以 象 硬件 的 生产 一样 ， 在 设计 好 框架 后 通过 标准 的 构件 组装 而成 。 
 　 　 一般 认为 构件 是 具有 一定 功能 、 能够 独立 工作 或同 其他 构件 组合 起来 协调 工作 的 程序 体 ， 一经 产生 ， 就 与 它 的 具体 实现 语言 无关 ， 可以 认为 是 一段 二进制码 和 数据 段 。 当今 关于 构件 的 标准 主要 有 Microsoft 公司 的 OLE / COM 、 OMG 组织 的 CORBA [ 2 ] 等 。 
 　 　 面向对象编程 技术 的 运用 极大 地 推动 了 软件工程 的 发展 ， 采用 面向对象编程 技术 可以 有效 地 增加 软件 的 重用 性 ， 这 和 构件 有着 相似之处 。 由于 以下 因素 有 必要 采用 构件 ， 而 不仅 局限于 面向对象编程 ： 1 ) 面向对象编程 的 重用 属于 白箱 重用 ， 即 是 源代码 级 的 重用 ， 而 构件 的 重用 可以 是 黑箱 重用 ， 使用者 可以 不 对 它 进行 继承 、 重载 等 操作 而 直接 使用 ； 2 ) 面向对象编程 的 重用 要 受到 其 开发 环境 的 制约 ， 如用 C++ 产生 的 类 很 难 在 以 Object   Pascal 为 开发 语言 的 项目 中 重用 ； 3 ) 由于 面向对象编程 的 重用 是 基于 源代码 的 ， 而 很多 程序员 出于 技术 保密 的 要求 ， 不会 公开 其 源代码 ， 故而 使得 研究成果 的 重用 范围 很小 ， 仅限于 个人 或 项目 开发 小组 。 
 　 　 若 采用 构件 形式 情况 就 会 截然不同 ， 因为 构件 是 一段 二进制 代码 ， 其 内部 具体 实现 是 无法 看到 的 ， 可 将 成熟 的 构件 当作 商品 出售 ， 在 保证 开发者 的 利益 同时 最大 地 满足 社会 需求 。 可见 采用 构件 来 开发软件 可以 更 有效 地 重用 他人 已有 的 劳动成果 。 
 　 　 在 一个 特定 的 域 中 ， 通过 领域 分析 可以 构造 出 一个 领域 模型 、 得出 领域 框架 。   Ralph   E . Johnson 对 框架 [ 3 ] 给出 了 如下 定义 ： 
 　 　 1 ) 框架 是 整个 系统 或 部分 系统 的 可 重用 设计 ， 由 一组 抽象 构件 及 构件 实例 间 的 相互作用 方式 组成 ； 
 　 　 2 ) 框架 是 由 开发人员 定制 的 应用 系统 的 骨架 。 
 　 　 由此可见 框架 把 一个 系统 有机 地 分解成 一群 相对 独立 的 构件 ， 定义 了 各个 构件 间 的 接口 和 作用 关系 ， 符合 软件工程 中 设计 的 模块化 、 独立化 和 信息 隐藏 等 特征 。 框架 是 一个 大 粒度 的 设计 ， 是 最初 系统 的 设计 成果 ， 所以 框架 支持 分析 和 设计 级 的 重用 。 
 2 　 FCDM 开发方法 及其 应用 
 　 　 本文 提出 一种 基于 构件 的 框架 开发方法 ： FCDM ( Framework   of   Components   Development   Methodology ) 。 FCDM 着重 支持 领域 分析 、 领域 框架 的 产生 和 领域 构件 的 提取 等 关键 过程 ， 在 开发 大型 书店 综合 管理系统 中 得到 有效 的 应用 。 
 2.1   FCDM 开发方法 
 　 　 FCDM 方法 是 针对 特定 领域 中 的 软件系统 开发 ， 以大 粒度 重用 为 指导思想 而 提出 。 该 方法 首先 采用 领域 分析方法 ， 找出 行业 的 共性 ， 得出 领域 模型 ， 再 根据 领域 模型 划分 出 领域 框架 ， 然后 根据 框架 中 的 约束条件 标识 出 领域 构件 ， 得到 领域 框架 库 和 领域 构件 库 。 在 目标 系统生成 时 就 不 需要 从 底层 开始 设计 ， 而是 根据 需求 从库 中 检索 出 符合要求 的 框架 和 构件 ， 将 其实 例化 ， 经 胶合 代码 组合而成 。 图 1 反映 的 是 一个 迭代 开发 过程 ， 领域 框架 库 和 领域 构件 库 随着 系统 的 运转 而 不断 充实 。 
 
 图 1   FCDM 开发方法 过程 示意图 
 　 　 ( 1 )   领域 分析 
 　 　 领域 分析 的 目的 是 在 软件开发 过程 中 对 应用领域 的 信息 进行 收集 、 抽象 及 组织 ， 识别 和 构造 出 各种 可 重用 的 信息 ， 使得 这些 信息 能够 在 开发 该 领域 的 软件 时 得到 最大 限度 的 利用 而 提高 开发 效率 。 在 FCDM 方法 中 领域 分析 主要 由 以下 两个 步骤 组成 ： 1 ) 确定 领域 范围 、 领域 分析 的 目标 和 参与 领域 分析 的 专家 ； 2 ) 建立 领域 模型 ， 标识 出 领域 实体 及 实体 的 特征 、 属性 及 实体 间 的 关系 ， 产生 相应 的 文档 。 
 　 　 ( 2 )   领域 框架 
 　 　 框架 定义 了 对象 集合 的 行为 ， 提供 了 一种 革新 的 方式 去 重用 软件 的 设计 和 代码 、 描述 要 解决 的 问题 ， 以及 问题 的 解决 方法 和 上下文 。 框架 可 分为 以下 3 类 ： 1 ) 开发 系统 框架 ： 由 专家 产生 ， 经 开发人员 封装 进 系统 ， 如 Microsoft   Visual   C++ 中 的 多 文档 应用 框架 、 屏幕 保护 程序 框架 等 ； 2 ) 行业 知识 框架 ： 封装 了 特定 行业 领域 知识 ， 一经 产生 即可 在 整个 行业 的 同类 软件 的 开发 中 进行 重用 ， 这是 采用 FCDM 开发方法 设计 的 重点 ； 3 ) 系统 环境 框架 ， 软件体系结构 层 框架 ， 如 采用 Client / Server 或 Browse / Server 结构 等 。 
 　 　 在 确定 领域 后 ， 可以 构造 出 一个 形式化 的 模型 作为 某类 产品 的 重用 框架 ， 用 扩展 的 实体 - 关系 图 ( EE - R 图 ) 来 表示 ， 分为 外 模式 、 逻辑 模式 和 内 模式 3 个 层次 。 外部 模式 为 用户 视图 ， 反映 用户 视角 中 系统 的 面貌 。 逻辑 模式 重点 描述 系统 实体 间 的 关系 ， 它 比内 模式 抽象 ， 不 涉及 到 具体 的 硬件 环境 ， 但 也 与 外 模式 不同 ， 它 与 具体 的 实现 语言 无关 。 而 内 模式 是 物理 模型 ， 它 是 实体 具体 实现 的 阶段 ， 主要 包含 属性 和 方法 ， 属性 是 其 状态 的 表示 ， 而 方法 是 其 行为 的 表示 ， 属性 通过 方法 而 改变 。 对于 属性 和 方法 有着 公有 和 私有 之分 ， 据此 使得 一个 实体 发生变化 对 整个 系统 产生 的 影响 最小 。 构造 框架 的 重点 在于 解 空间 ， 采取 如下 步骤 ： 1 ) 确定 框架 的 约束条件 ， 包括 软件 、 硬件 、 性能 及 设计 等 ； 2 ) 根据 通用 的 高层 设计 ， 标识 出 高层 的 构件 ， 确定 高层 构件 间 的 联系 。 
 　 　 采用 框架 技术 进行 软件开发 的 主要 特点 包括 ： 1 ) 行业 内 的 软件结构 一致性 好 ； 2 ) 迫使 软件设计 人员 加强 对 领域 的 了解 ， 需求 分析 充分 ， 避免 了 传统 软件开发 中 急于 编程 ， 过早 考虑 实现 细节 的 弊病 ； 3 ) 解决 高级 设计 人员 相对 不足 的 问题 ， 可以 让 那些 经验丰富 的 人员 去 设计 框架 、 领域 构件 而 不必 陷于 低层 编程 ； 4 ) 大 粒度 的 重用 使得 平均 开发 费用 降低 ， 参数 化 框架 使得 适应性 、 灵活性 增强 。 
 　 　 ( 3 )   领域 构件 提取 
 　 　 目前 虽然 已经 存在 巨大 的 构件 库供 软件 开发人员 使用 ， 并 使 开发人员 能 充分 感受 到 使用 构件 所 带来 的 好处 ， 但 无论 存在 的 构件 库 如何 丰富 ， 仍旧 不 可能 满足 新 系统 的 所有 需求 ， 因此 有 必要 开发 自己 所 需 的 构件 。 以往 开发 的 构件 通常 粒度 较 小 ， 只能 完成 一些 小 系统 级 的 功能 ， 故而 导致 重用 的 效果 不 明显 。 在 FCDM 方法 中 ， 把 构件 分为 两类 ： 系统 构件 和 领域 构件 ， 其中 系统 构件 主要 指 开发 环境 自身 所带 的 构件 库 ， 如 PowerBuild 的 PBL 、 Delphi 的 VCL 、 Microsoft   Visual   C++ 的 MFC 等 。 领域 构件 又 分为 通用 构件 和 特殊 构件 ： 通用 构件 是 指 整个 领域 中 无须 改动 可 使用 的 构件 ， 如 通用 查询 构件 ； 特殊 构件 则 与 领域 特定 环境 相关 ， 要 根据 实际 情况 做 相应 的 调整 ， 如 报表 发生 构件 等 。 领域 构件 不同于 系统 构件 ， 它 与 领域 框架 相适应 ， 构件 间 的 关系 比较 紧密 ， 它们 以 框架 所 确定 的 方式 进行 通信 ， 完成 领域 相关 的 功能 ， 也 正 因为 领域 构件 的 这些 特性 ， 使得 它们 在 特定 域 中能 得到 大 粒度 的 重用 。 在 使用 领域 构件 的 同时 并 不 排斥 系统 构件 ， 相反 ， 而是 要 充分利用 系统 构件 ， 一般 情况 下 由 系统 构件 完成 比较 低层 的 功能 而 领域 构件 完成 高层 功能 ， 领域 构件 往往 是 系统 构件 的 特定 组合 。 
 　 　 为此 ， 提出 了 在 设计 领域 构件 时应 遵循 以下 原则 ： 1 ) 构件 的 抽象 分类 应 在 领域 模型 和 领域 框架 设计 的 基础 上 进行 ； 2 ) 构件 的 设计 应 根据 子系统 或子 功能 来 划分 ， 使 每个 构件 与 领域 内 实体 相对 应 ； 3 ) 构件 的 接口 设计 要 规范 友好 ， 既 要 满足 信息 隐藏 的 要求 ， 又 要 符合 框架 内 的 通信 要求 ， 开发人员 能够 方便 地 使用 ； 4 ) 适应性 强 ， 可 根据 领域 内 不同 系统 进行 投影 和 组合 ， 最大 限度 地 满足 需求 ； 5 ) 质量保证 ， 由于 构件 的 重用 性 使得 它 的 应用 范围 广阔 ， 因此 使用 前 必须 充分 测试 、 审查 ； 6 ) 文档 齐全 ， 包括 设计 环境 、 理由 、 人员 、 使用 范围 、 关键字 、 测试 审查 情况 、 使用 实例 等 ， 提供 相应 的 检索 机制 。 
 　 　 ( 4 )   应用 系统 的 生成 
 　 　 在 完成 以上 的 设计 后 ， 应用 系统 的 生成 将 相对 比较简单 ， 领域 框架 和 构件 的 设计 已经 解决 了 许多 关键问题 ， 框架 和 构件 的 结合 将 导出 应用 系统 。 由于 领域 框架 和 构件 的 设计 人员 不同于 应用 系统 的 开发人员 ， 因此 一个 应用 系统 的 成功 与否 关键在于 合理 地 选择 使用 领域 框架 构件 ， 这 就 有 必要 遵循 以下 原则 ： 1 ) 深入 理解 框架 的 设计 理由 和 应用环境 ， 根据 新 系统 的 需求 在 框架 库中 查找 符合条件 的 框架 ， 进行 参数 调整 。 在 无 合适 的 框架 时要 重新 进行 框架 设计 ， 在 测试 完毕 后 加以 利用 ， 新 的 框架 及其 文档 加入 框架 库中 ； 2 ) 在 选定 框架 的 基础 上 从 构件 库 选择 领域 构件 ， 所选 的 构件 不仅 应 在 功能 上 满足要求 ， 还要 在 风格 上 与 框架 相适应 ， 不能 破坏 整个 框架 的 结构 、 通信 机制 ； 所选 的 构件 在 功能 上 不 满足 时 ， 必须 对 领域 构件 重新 开发 并 完善 领域 构件 库 。 
 2.2   FCDM 的 应用 实例 
 　 　 《 新华书店 集成 管理系统 》 包括 了 现代 书店 经营 管理 的 各个方面 ， 面向 多家 大型 书店 ， 因此 在 需求 分析 时 就 不 只 局限于 某 一家 特定 书店 的 运转 情况 ， 而是 广泛 听取 了 多家 地 、 市级 新华书店 的 工作 和 管理人员 的 意见 和 要求 ， 在 领域专家 的 参与 下 从 整个 行业 的 角度 进行 的 。 经过 领域 分析 ， 根据 行业 特征 ， 将 整个 业务 划分 为 以下 几种 大 的 框架 类型 ： 1 ) 业务 子系统 框架 ； 2 ) 门市 子系统 框架 ； 3 ) 财务 子系统 框架 ； 4 ) 栈房 子系统 框架 ； 5 ) 决策 子系统 框架 ； 
 　 　 其中 每个 大 的 框架 又 由 小 的 领域 框架 组成 ， 如 门市 子系统 框架 的 子 框架 有 ： 零售 、 批发 、 教材 销售 、 操作员 监控 、 销售 情况 实时 监控 、 读者 查询 、 退书 、 门市 盘存 、 折扣 设置 、 操作员 管理 、 销售 报表 生成 、 异地 数据交换 等 。 这些 框架 和子 框架 在 大多数 书店 系统 中是 基本相同 的 ， 对于 特殊 情况 可以 进行 灵活 配置 ， 使 其 符合要求 ， 而 不必 从头开始 设计 。 如 有些 书店 的 门市部 设有 二级 栈房 而 有 的 没设 ， 只 需 对 其 门市 框架 做 相应 设置 即可 。 
 　 　 根据 领域 构件 的 设计 原则 ， 可以 划分 出 如下 类型 的 领域 构件 ： 1 ) 计算 型 ： 包括 工资 计算 、 利润 计算 等 ； 2 ) 查询 统计 型 ： 包括 畅行 书目 销 排行榜 、 动销 书目 表 、 读者 查询 等 ； 3 ) 报表 型 ： 根据 查询 统计 结果 生成 、 预览 、 打印 各种类型 的 报表 ； 4 ) 文档 型 ： 包括 各类 通知 、 电子邮件 、 报表 、 定单 的 发送 、 接受 、 协同 等 ； 5 ) 决策 型 ： 根据 运转 情况 给出 各类 图表 ， 对 当前 形势 进行 分析 预测 ， 辅助 负责人 作出 决策 ； 6 ) 通信 型 ： 负责 数据交换 ， 维护 异地 数据库 的 一致性 和 完整性 。 
 　 　 领域 构件 是 由 其他 领域 构件 和 系统 构件 集 组成 ， 如 通用 查询 构件 就是 由 表单 ( TForm ) 、 编辑框 ( TEdit ) 、 位 图 按钮 ( TBitBtn ) 、 数据库 构件 ( TDataBase ) 、 数据库 查询 构件 ( TQuery ) 、 数据源 构件 ( TDataSourse ) 、 数据库 网格 ( TDBGrid ) 、 时间 拾取 器 ( TDateTimePicker ) 及 报表 型 领域 构件 等 组合而成 。 有 了 比较 完备 的 框架 和 构件 库 ， 就 可以 通过 良好 的 可视化 开发工具 ( Borland   Delphi ) 将 所选 的 领域 框架 进行 组合 来 产生 新 系统 ， 这 将 是 一件 让 人 感到 轻松 和 愉快 的 工作 了 。 
 3 　 结束语 
 　 　 面对 特定 领域 多个 系统 的 开发 ， 迫切需要 一种 好 的 开发方法 来 有效 支持软件 重用 性 ， 本文 提出 一种 基于 构件 的 框架 开发方法 FCDM 。 该 方法 已 在实践中 应用 ， 并 证明 这种 方法 是 有效 的 ， 能 显著 加大 重用 的 粒度 ， 从而 缩短 整体 开发周期 ， 在 提高 品质 的 同时 降低 了 费用 。 我们 将 继续 完善 FCDM 方法 并 对 构件 库 管理 、 框架 系统 进化 等 进一步 进行 研究 。 
 基金项目 ： 国家自然科学基金 和 浙江省 自然科学 基金 
 作者简介 ： 吴明晖 （ 1976 ～ ） ， 男 ， 研究生 ， 主研 方向 ： 软件工程 、 人工智能 
 作者 单位 ： 浙江大学 计算机软件 研究所 ， 杭州 301127 
 参考文献 
 1   Tracz   W . Software   Reuse   Myths . ACM   SIGSOFT   Software   曲   Engineering   Notes , 1988 , 13 ( 1 ) : 17 - 21 
 2   Object   Management   Group . The   Common   Object   Request   Broker : Architecture   and   Specification , Revision2.0 . Framingham , MA , 1995 
 3   Johnson   R   E . Components , Frameworks , Patterns , ACM   SIGSOFT   Software   Engineering   Notes , 1997 , 22 ( 3 ) :   10 - 17 
 4   王少锋 . 软件 重用 关键技术 和 基于 重用 的 特定 域 软件开发 方法 研究 [ 博士学位 论文 ] . 杭州 ： 浙江大学 , 1998 - 06 
 5   Show   M , Garlan   D . Software   Architecture   Perspectives   On   An   Emerging   Discipline . 北京 ： 清华大学出版社 , 1998 - 05 
 收稿 日期 ： 1999 - 01 - 18 
