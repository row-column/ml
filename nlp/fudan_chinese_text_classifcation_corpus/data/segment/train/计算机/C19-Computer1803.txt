微型机 与 应用 
 MICROCOMPUTER   &   ITS   APPLICATIONS 
 2000 　 No.19 　 No.1 　 P.12 - 14 
 
 
 
 
 Visual   Basic 中 过程 间 数据共享 方法 
 许 中卫 戴宗友 
 摘   要 ：   在 事件 驱动程序 编程 环境 下 ， Visual   Basic 过程 间 共享 数据 及 过程 间 共享 代码 的 一组 方法 ， 并 相应 讨论 这些 方法 对 软件 复用 性 和 可维护性 的 影响 。 
 关键词 ：   Visual   Basic   事件驱动 程 程序设计   变量   可维护性   复用 性 
 　 　 具有 面向 过程 方式 编程 经验 的 软件 开发人员 ， 在 使用 Visual   Basic 等 可视化 开发工具 时 ， 其 开发 工作 大多数 是 以 E － DP （ 事件驱动 程序设计 方式 展开 的 。 在 E － DP 中 ， 用 “ 过程 （ Procedure ） ” 来 标识 1 组 相关 代码 组成 的 子程序 、 过程 / 函数 ， 而 不用 “ 模块 ” ， 这 是因为 在 E － DP 中 ， “ 模块 ” 通常 指 1 个 容器 （ Container ） ； Visual   Basic 中有 3 类 模块 ： 1 ． Form （ 窗口 — — 所 包含 的 典型 内容 有 可视 目标 （ Visual   Objects ） 、 过程 （ Procedures ） 及 说明 （ declaration ） 等 ； 2 ． 标准 / 代码 模块 （ Standard / CodeModule — — 通用 过程 和 说明 的 容器 ； 3 ． 类 模块 （ Class   Module — — 各种 类 定义 的 容器 。 下面 介绍 在 E － DP 编程 环境 下 ， Visual   Basic 过程 间 共享 数据 的 方法 以及 过程 间 共享 代码 的 方法 ， 并 相应 讨论 对 复用 性 和 可维护性 的 影响 。 
 1   关于 全局变量 
 　 　 在 面向 过程 程序设计 方法 中 ， 由于 全局变量 的 值 能 被 系统 中 的 任何 过程 修改 ， 所以 全局变量 被 认为 是 损害 过程 独立性 的 重要 因素 之一 ， 所以 在 面向 过程 程序设计 中 ， 一个 重要 的 原则 是 ： 尽量避免 使用 全局变量 ， 而 提倡 使用 参 数显式 地 传给 被 调用 的 过程 。 同样 ， 在 E － DP 编程 环境 下 使用 全局变量 ， 对于 变量 这一 因素 来说 ， 将 最大 限度 降低 程序 的 可维护性 和 过程 的 复用 性 。 因此 在 使用 VB 时 ， 也 应 尽量避免 使用 全局变量 。 
 2   使用 Form 级 私有 变量 
 　 　 在 面向 过程 程序 中 ， 主要 有 全局变量 和 局部变量 。 前者 在 1 个 应用 中 整个 范围 内 有效 ， 后者 则 局限 在 1 个 应用 的 某 一 过程 中 有效 ； VB 中 ， 除了 上述 2 种 变量 外 ， 还有 模块 级 私有 变量 ， 其 作用域 为 说明 该 变量 的 模块 。 对于 VB 中 的 3 种 模块 （ Form 、 标准 / 代码 模块 和 类 模块 ） ， 这里 侧重 讨论 与 Form 相关 的 模块 级 变量 。 
 　 　 图 1 列出 了 2 个 事件 过程 ， 事件 过程 cmdStartClick （ ） 是 用 鼠标 点触 命令 按钮 cmdStart 事件 的 处理程序 。 表示 1 个 事务 活动 的 开始 。 事件 过程 cmdStopClick （ ） 是 用 鼠标 点触 命令 按钮 cmdStop 事件 的 处理程序 ， 表示 1 个 事务 活动 的 结束 。 用 鼠标 点触 命令 按钮 cmdStart 的 时间 存放 在 变量 mStartTime 中 ， 在 事件 过程 cmdStopClick （ ） 中要 利用 StartTime 计算 由 按钮 cmdStart 启动 的 事务 活动 所用 的 时间 ； 然而 没有 办法 将 mStartTime 的 值 通过 参数传递 给 事件 过程 cmdStopClick （ ） （ 因为 事件 过程 的 参数 是 由 系统 固定 的 ） ， 因此 ， 在 这个 应用 中 ， 说明 了 Form 级 私有 变量 mStartTime ， 使得 这个 容器 中 的 所有 过程 都 可以 直接 引用 或 修改 mStartTime 。 
 
 图 1 　 同一 Form 中 的 事件 过程 间 数据 传送 
 　 　 由于 Form 级 私有 变量 只 在 说明 它 的 模块 中 可用 （ 1 个 Form 、 标准 模块 或类 模块 ） ， 所以 对 可维护性 的 影响 要 小 一些 （ 相对 于 全局变量 ） ， 同时 也 解决 了 图 1 所示 的 应用 中 事件 过程 间 数据 传送 问题 。 
 3   在 通用 过程 中 的 模块 级 私有 变量 
 　 　 图 2 是 在 图 1 所示 的 例子 基础 上 的 1 个 改进 版本 ， 在 图 2 所示 的 例子 中 ， 事件 过程 cmdStart _ Click （ ） ， 调用 通用 过程 procStart 来 读取 开始 时间 ； 相似 地 ， 事件 过程 cmdStop _ Click （ ） ， 调用 通用 过程 procStop 来 计算 事务 耗时 ， 计算 出 的 结果 通过 参数 传给 cmdStop _ Click （ ） ； 在 本例 中 为了 例示 在 通用 过程 中 ， 使用 模块 级 私有 变量 对 复用 性 的 影响 ， 在 图中 所列 的 2 个 通用 过程 中 ， 都 直接 使用 模块 级 私有 变量 mStartTime ， 而 不 使用 参数 将 其 由 事件 过程 传给 相对 应 的 通用 过程 。 
 
 图 2 　 在 通用 过程 中 使用 From 级 私有 变量 
 　 　 由于 通用 过程 procStart 和 procStop 使用 了 模块 级 私有 变量 mStartTime ， 如同 前面 讨论 的 一样 ， 这 增加 了 对 procStart 和 procStop 的 理解 难度 。 另外 ， 由于 使用 了 mStartTime 而 降低 了 procStart 和 procStop 的 复用 性 。 
 　 　 对图 2 所示 的 通用 过程 procStart 和 procStop 进行 改进 ， 即 在 其中 不 直接 使用 模块 级 私有 变量 ， 而是 通过 参数传递 mStartTime 的 值 ， 这种 改进 的 版本 如图 3 所示 。 
 
 图 3 　 在 通用 过程 中 使用 参数 传送数据 
 　 　 相对 图 2 所示 的 版本 而言 ， 通用 过程 procStart 和 procStop 的 复用 性 以及 程序 的 可维护性 都 得到 了 提高 。 这时 ， 如果 用户 接口 有所 变动 （ 会 导致 原 事件 过程 名 的 改变 等 ） ， 各 调用 过程 不 用作 任何 修改 ， 因为 这时 调用 过程 调用 的 已 不是 事件 过程 本身 ， 而是 事件 过程 所 调用 的 通用 过程 。 例如 ， 本来 如果 鼠标 点触 按钮 时 计算 事务 耗时 ， 改为 在 某 一 文本编辑 框内 按下 回车键 时 计算 事务 耗时 。 由于 计算 事务 耗时 的 程序代码 已 分离 成一 通用 过程 procStop ， 所以 ， 当 用户 接口 作 上述 变动 后 ， 所用 调用 procStop 的 过程 无须 作 任何 修改 。 
 　 　 如果 通用 过程 procStart 和 procStop ， 在 容纳 它们 的 Form 中 ， 将 其 设置 为 共用 过程 ， 则 可 由 其它 Form 中 的 过程 调用 。 由于 Form 既 是 容器 也 是 用户 接口 ， 所以 当 界面 修改 涉及 到 删除 包含 procStart 和 procStop 的 Form 时 ， 所有 其它 Form 中 调用 procStart 和 procStop 的 过程 ， 都 要 作 相应 的 修改 ； 进一步 ， 其中 含有 共用 通用 过程 的 Form 在 程序运行 过程 时 ， 内存 中 始终 需要 该 Form 的 副本 （ 即 从 用户界面 而言 已 不 需要 该 Form ， 但 其中 含有 供 其它 Form 调用 的 通用 过程 ， 所以 仍 不能 关闭 / 释放 该 Form ） ， 因此 ， 为了 提高 可维护性 和 运行 效率 ， 共用 通用 过程 应 保存 在 标准 / 代码 模块 中 ， 而 不是 存放 在 Form 中 。 
 　 　 因此 ， 即使 是 象 mStartTime 一样 的 模块 级 全局变量 ， 也 应 尽量避免 在 通用 过程 中 使用 ， 它们 应 作为 参数 由 事件 过程 显式 地 传给 通用 过程 ， 而 不是 直接 在 通用 过程 中 使用 全局变量 。 
 4   使用 Form 级 公用 变量 
 　 　 在 以上 的 例子 中 ， 由于 2 个 事件 过程 在 同一 Form 中 ， 所以 变量 mStartTime 说明 为 Form 级 私有 变量 。 现在 考虑 另 一种 情形 ： cmdStart 在 Form1 中 ， 而 cmdStop 在 Form2 中 ， 一种 方法 是 将 Form1 中 的 变量 mStartTime 说明 为 Form 级 的 公用 变量 ， 在 Form2 中便 可以 加前缀 引用 ， 如图 4 所示 。 从而 将 开始 时间 从 Form1 中 的 事件 过程 cmdStart _ Click （ ） 传给 Form2 中 的 事件 过程 cmdStop _ Click （ ） 。 但 在 二 事件 过程 （ cmdStart _ Click （ ） / cmdStorp _ Click （ ） ） 与其 对应 的 通用 过程 （ procStart / procStop （ ） ） 间 仍 以 参数 的 形式 传递 “ 开始 时间 ” ， 防止 在 通用 过程 中 直接 使用 Form 级 公用 变量 。 
 
 图 4 　 在 Form 间 使用 Form 级 公用 变量 传送数据 
 　 　 Form 级 公用 变量 ， 不仅 在 说明 它 的 模块 中 可用 ， 只要 以 说明 该 变量 的 Form 名称 为 前缀 ， 其它 模块 中 的 过程 也 可以 直接 修改 引用 ， 所以 ， 相对 Form 级 私有 变量 而言 ， 它 在 更 大 的 程度 上 损害 可维护性 和 可 复用 性 。 
 　 　 有 一种 情况 ， 如 上述 示例 ， 在 1 个 Form 中 说明 的 全局变量 ， 在 其它 Form 中 不 对 其 修改 ； 为了 消除 公用 变量 的 副 面 作用 ， 可用 1 个 Form 级 私有 变量 及 1 个 公用 通用 过程 替代 ， 即将 该 变量 说明 为 From 级 私有 变量 ， 同时 增加 1 个 公用 过程 用以 读取 该 变量 ； 如图 5 所示 。 将 Form1 中 的 全局变量 说明 为 Form 级 私有 变量 ， 增加 全局 通用 过程 getStartTime ， 在 Form2 中 可以 调用 过程 getStartTime 读取 mStartTime 的 值 ， 这样 就 防止 了 在 Form1 以外 的 过程 修改 mStartTime 的 值 。 
 
 图 5 　 在 From 间 使用 公用 通用 过程 传送数据 
 　 　 在 不同 Form 中 的 事件 过程 间 ， 避免 使用 Form 级 全程 变量 共享 数据 的 另 一种 方法 是 ： 使用 一个 模块 级 私有 变量 和 标准 / 代码 模块 中 的 一个 全局 通用 过程 。 如图 6 所示 。 标准 / 代码 模块 ProjMd 中 说明 模块 级 私有 变量 mStartTime ， 其中 的 过程 procStart 和 过程 procStop 通过 mStartTime 共享 事务 开始 时间 ， 由于 procStart 和 procStop 说明 为 公用 通用 过程 ， 所以 Form1 和 Form2 中 的 事件 过程 可 调用 。 模块 级 私 变量 可用 范围 是 标准 / 代码 模块 ProjMd ， 它 在 相应 工程 （ Project ） 的 整个 运行 期间 有效 。 当 用 鼠标 点触 命令 Form1 中 按钮 cmdStart 时 ， 唤醒 事件 过程 cmdStart ＿ Click （ ） ， cmdStart ＿ Click （ ） 调用 ProjMd 中 的 procStart 将 事务 开始 时间 保存 在 变量 mStartTime 中 ； 当 用 鼠标 点触 命令 Form2 中 按钮 cmdStop 时 ， 唤醒 事件 过程 cmdStop ＿ Click （ ） ， cmdStop ＿ Click （ ） 调用 ProjMd 中 的 ProcStop ， ProcStop 利用 mStartTime 计算 事务 耗时 elasedTime 。 图 6 没有 使用 Form 级 全局变量 ， 然而 ， 在 其中 使用 了 全局 通用 过程 ProcStart 和 ProcStop ， 在 任何 Form 中 都 可以 调用 ProcStart 修改 mStartTime ， 但 只能 通过 调用 ProcStart 来 进行 ， 可 避免 对 全局变量 的 “ 无意 ” 修改 。 
 
 图 6 　 在 Form 间 利用 标准 / 代码 模块 传送数据 
 5   总   结 
 　 　 一般 事件 过程 的 复用 性 都 很 低 ， 将 事件 过程 中 用以 共享 的 一组 代码 分离 成 1 个 通用 过程 ， 可用 这种 间接 的 方式 增加 原 事件 过程 的 复用 性 和 可维护性 ， 如果 一个 通用 过程 由 多个 模块 共享 ， 则 该 通过 过程 应该 放在 标准 / 代码 模块 中 ， 而 不是 放在 Form 中 。 
     本来 ， 在 过程 间 传送数据 应 利用 过程 的 参数 来 实现 ， 然而 ， 没有 办法 通过 参数 将 数据 从 一个 事件 过程 传送 到 另 一个 事件 过程 ， 较 好 的 办法 是 使用 Form 级 的 私有 变量 ， 应 尽量避免 使用 全局变量 及 Form 级 共用 变量 ； 如果 1 个 变量 只 在 1 个 Form 中 修改 ， 而 在 其它 Form 中是 只读 性 引用 ， 则 可 使用 1 个 Form 级 私有 变量 和 1 个 全局 过程 来 替代 使用 全局变量 或 以 Form 名称 为 前缀 的 Form 级 共用 变量 。 
 　 尽管 使用 Form 级 私有 变量 实现 事件 过程 间 数据 传送 ， 但 在 通用 过程 中 仍 要 避免 直接 使用 ， 应 使用 过程 参数 将 Form / 模块 级 私有 变量 、 Form 级 公用 变量 、 或 全局变量 的 值 传给 通用 过程 ， 这样 可以 提高 过程 的 复用 性 和 可维护性 。 
 许 中卫 （ 安徽大学 计算机系  230039 ） 
 戴宗友 （ 中国人民解放军 炮兵 学院  230031 ） 
 参考文献 
 1 ， Bard   D 著 ， 赵军 ， 李杜译 ． FOXPRO 事件驱动 程序设计 ． 北   京 ： 清华大学出版社 ， 1994 
 2 ， 冯 玉林 ， 赵 宝华 ． 软件工程 ． 中国 科学技术 大学 出版社 ，   1986 
 3 ， 刘炳文 ． Visual   Basic   4 ． 0 程序设计 基础 ． 北京 ： 人民邮电   出版社 ， 1998 
 收稿 日期 ： 1999 － 07 － 16 
