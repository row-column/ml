软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 10 卷   第 7 期 　 No.7   Vol.10   1999 
 
 
 
 一阶反 合一 研究 
 许满武 　 潘光 睿 　 周荣国 　 宋晓梁 　 刘 东升 
 　 　 摘要 　 文章 讨论 一阶反 合一 问题 以及 求反 合一 子 完备 集 的 算法 . 在 合一 问题 中 , 有 多种 求解 合一 问题 的 方法 , 其中 研究 得 较为 彻底 的 是 用 转换规则 进行 求解 的 方法 . 在 研究 反 合一 问题 的 过程 中 , 人们 也 陆续 提出 了 许多 转换规则 , 这样 做 的 结果 是 最终 给出 的 是 已解 出形 . 该文 在 已解 出形 的 基础 上 讨论 一种 方法 ， 以 给出 具体 解 的 完备 集 （ 反 合一 子 完备 集 ） . 通过 引入 G θ 和 Z 函数 ， 使 求解 更为 方便 、 直观 . 
 　 　 关键词 　 反 合一 , 反 合一 子 , 最 一般 反 合一 子 , 反 合一 子 完备 集 . 
 　 　 中图法 分类号 　 TP18 
 First - Order   Disunification 
 XU   Man - wu 　 PAN   Guang - rui 　 ZHOU   Rong - guo 　 SONG   Xiao - liang   LIU   Dong - sheng 
 ( Department   of   Computer   Science   and   Technology 　 Nanjing   University 　 Nanjing 　 210093 ) 
 ( State   Key   Laboratory   for   Novel   Software   Technology 　 Nanjing   University 　 Nanjing 　 210093 ) 
 　 　 Abstract 　 In   this   paper ,   the   authors   discuss   the   first - order   disunification   and   the   algorithm   for   computing   the   complete   set   of   disunifiers .   There   are   many   methods   for   solving   unification   problem ,   the   method   by   using   translation   rules   has   been   thoroughly   studied .   Many   translation   rules   are   also   given   out   in   the   study   of   disunification   problem .   By   using   translation   rules ,   people   usually   get   some   solved   forms   for   the   problem .   In   this   paper ,   the   authors   are   concerted   with   the   method   for   giving   out   the   complete   set   of   disunifiers   based   on   solved   forms .   The   method   becomes   more   convenient   and   direct   by   using   functions   G θ and   Z . 
 　 　 Key   words 　 Disunification ,   disunifier ,   most   general   disunifier ,   complete   set   of   disunifiers . 
 　 　 合一 是 一类 重要 的 计算 问题 , 它 广泛 地 应用 于 计算机科学 的 各个 分支 领域 . 随着 研究 领域 的 拓宽 , 合一 问题 的 种类 也 逐渐 丰富 起来 . 其中 比较 典型 的 有 方程式 合一 （ E - unification ） 、 高阶 合一 （ high - order   unification ） 以及 半 合一 （ semi - unification ） . 总的说来 , 在 研究 这些 合 一时 , 人们 主要 关心 的 是 “ 相等 ” 或 “ 弱 相等 ” 的 问题 . 后来 , 人们 在 研究 函数 式 语言 的 模式匹配 时 , 需要 讨论 一些 从 反例 中 学习 的 问题 ； 在 研究 重写 系统 时 , 需要 讨论 有关 充分 完备 性 的 问题 , 等等 , 这些 都 牵涉到 了 “ 不 等 ” . 于是 人们 又 把 一部分 目光 由 “ 相等 ” 转向 了 “ 不 等 ” , 这 就 导致 了 “ 反 合一 问题 ” 的 研究 . 
 　 　 简单 说来 , 对于 合一 问题 〈 s = t 〉 , 我们 关心 的 是 求 合一 子 θ , 使得 θ s = θ t ； 而 对于 反 合一 问题 〈 s ≠ t 〉 , 我们 关心 的 是 那些 使 不等式 成立 的 替换 σ , 使得 σ s ≠ σ t . 
 　 　 在 对 反 合一 问题 进行 研究 的 过程 中 , 人们 不可避免 地要 参照 和 借鉴 合一 问题 中 的 一些 概念 、 方法 . 在 合一 问题 中 , 有 多种 求解 合一 问题 的 方法 , 其中 比较 典型 的 是 用 转换规则 进行 求解 ［ 1 ］ . 在 研究 反 合一 问题 的 过程 中 , 人们 也 陆续 提出 了 许多 转换规则 ［ 2 ］ , 这样 做 的 结果 是 最终 给出 的 是 已解 出形 . 而 在 本文 中 , 我们 关心 的 是 在 已解 出形 的 基础 上 讨论 一种 方法 , 以 给出 具体 解 的 完备 集 （ 反 合一 子 完备 集 ） . 通过 引入 G θ 和 Z 函数 , 使 求解 更为 方便 、 直观 . 在下文 展开 前 , 我们 先作 一些 约定 . 
 　 　 在 本文 中 所 涉及 的 项均 是 一阶项 , 合一 中 的 等价关系 是 指 字面 等价关系 , “ ≠ ” 是 指 字面 不 等价关系 . 
 　 　 Var （ □ ） 表示 由 □ 中 所有 变量 组成 的 集合 , 其中 □ 可以 是 项 , 可以 是 替换 , 也 可以 是 G θ 和 Z ( s , t ) （ 这 两个 函数 将 在下文 中 定义 ） . 
 　 　 以 “ 。 ” 表示 替换 的 复合 运算 . 例如 , σ 和 θ 的 复合 运算 记 为 σ 。 θ , 对 任意 t ∈ T , σ 。 θ ( t ) = θ ( σ ( t ) ) . 
 　 　 其他 有关 的 概念 请 参考文献 ［ 1 , 3 , 4 ］ . 
 1   基本概念 
 　 　 定义 1.1 .   反 合一 问题 , 反 合一 子 . 
 　 　 任给 项 对 〈 s , t 〉 , 问 是否 存在 替换 σ , 使得 σ s ≠ σ t , 且 对 任意 的 替换 δ 总有 . 这 就是 反 合一 问题 , 记 为 〈 s ≠ t 〉 . 若 存在 这样 的 σ , 则 σ 称为 反 合一 子 . 
 　 　 定义 1.2 .   最 一般 反 合一 子 , 最 一般 反 合一 子 的 集合 , 反 合一 子 的 完备 集 , 最 一般 反 合一 子 的 完备 集 . 
 　 　 ( 1 )   对于 任意 给定 的 反 合一 问题 〈 s ≠ t 〉 , 其 所有 反 合一 子 构成 的 集合 记为 DU ( s , t ) , 在 不 引起 混淆 的 情况 下 简记 为 DU . 
 　 　 ( 2 )   MGDU ( s , t ) （ 简记 为 MGDU ） 表示 〈 s ≠ t 〉 的 最 一般 反 合一 子 ： 
 　 　 若 σ ∈ DU , 则 σ 是 MGDU 当且 仅 当 对于 任意 θ ∈ DU , 若 θ ≤ σ , 则 σ = θ （ 此处 , θ ≤ σ , 是 指 存在 ρ 使得 ρ 。 θ = σ ） . 
 　 　 ( 3 )   cDU 称为 〈 s ≠ t 〉 的 反 合一 子 完备 集 , 满足 ： 
 　 　 ( 3.1 )   cDUDU ； 
 　 　 ( 3.2 )   对 任意 θ ∈ DU , 存在 σ ∈ cDU 使 σ ≤ θ . 
 　 　 ( 4 )   μ DU 表示 最 一般 反 合一 子 的 集合 ： 由 最 一般 反 合一 子 构成 的 集合 . 
 　 　 ( 5 )   μ cDU 最 一般 反 合一 子 的 完备 集 ： 既 是 cDU 又 是 μ DU 的 集合 . 
 2   相关 定理 
 　 　 为了 便于 讨论 , 我们 在 此 做 一些 必要 的 准备 工作 . 
 　 　 首先 , 由于 在 讨论 替换 间 的 关系 以及 构造 新 替换 时 , 直接 使用 替换 来 讨论 不如 把 它 先 转化 为项 的 形式 更为 方便 , 所以 我们 将 引入 一个 与 某 替换 θ 对应 的 函数 G θ , G θ “ 独立 于 ” 项集 T . 众所周知 , 项集 T 是 定义 在 函数 集 F 和 可数 变量 集 V 之上 的 . 说 G θ “ 独立 于 ” 项集 T , 意思 是 G θ F . 
 　 　 G θ 与 θ 有 如下 关系 ： s , t ∈ T , 
 　 　 　 　 　 　 　 　 　 　 Var ( s ) ∪ Var ( t ) = { x1 , x2 , ... , xn } . 
 　 　 当 θ 为 恒等 替换 ( Id ) 时 , θ 对应 着 GId ( x1 , x2 , ... , xn ) . 
 　 　 当 θ 形 如 { t1 / y1 , ... , tm / ym } 时 , θ 对应 着 
 　 　 　 　 　 　 G θ = θ GId = GId ( θ ( x1 ) , θ ( x2 ) , ... , θ ( xn ) ) = G θ ( s1 , s2 , ... , sn ) , 
 其中 si = θ ( xi ) . 
 　 　 为了 方便 ， 可 将 G θ ( s1 , s2 , ... , sn ) 简记 为 G θ . 
 　 　 当 已有 θ 及其 所 对应 的 G θ ( s1 , s2 , ... , sn ) , 在 作 复合 运算 θ 。 ρ = σ 时 , σ 对应 着 
 　 　 　 　 G σ = G θ 。 ρ = ρ G θ = G θ ( ρ ( s1 ) , ρ ( s2 ) , ... , ρ ( sn ) ) = G σ ( r1 , r2 , ... , rn ) , 
 其中 ri = ρ ( si ) . 
 　 　 此外 , G θ ( s1 , s2 , ... , sn ) = G σ ( r1 , r2 , ... , rm ) 当且 仅 当 m = n 且 ri ＝ si . 
 　 　 其次 , 既然 讨论 替换 间 的 关系 , 我们 关心 的 是 当 不同 的 替换 作用 在 项 对 〈 s , t 〉 上时 产生 的 效果 有何 不同 , 故此 , 我们 把 s , t 作为 一个 整体 来 对待 , 于是 我们 引入 另 一个 与 s , t 有关 的 、 独立 于 项集 T 的 二元 函数 Z ( s , t ) , Z 的 两个 变 目的 位置 分别 放入 s 和 t , 并且 对 任意 替换 ρ 有 
 　 　 　 　 　 　 　 　 　 　 　 　 ρ ( Z ( s , t ) ) = Z ( ρ ( s ) , ρ ( t ) ) . 
 　 　 此外 , Z ( s1 , t1 ) = Z ( s2 , t2 ) 当且 仅 当 s1 = s2 且 t1 = t2 . 这样一来 , 替换 对 〈 s , t 〉 的 作用 就 变成 了 对 项 Z ( s , t ) 的 作用 , 处理 起来 更为 方便 . 需要 注意 的 是 , 尽管 我们 引入 了 G , Z 两个 函数 , 但 由于 它们 独立 于 T , 所以 在下文 中 , G , Z 不会 像 T 里 的 那些 函数 那样 出现 在 替换 里 . 
 　 　 至此 , 我们 的 准备 工作 就 完成 了 . 下面 进入 相关 定理 的 研究 . 
 　 　 定理 2.1 .   给定 项对 〈 s , t 〉 , 若 θ 为 〈 s , t 〉 的 合一 子 , σ 为 〈 s , t 〉 的 反 合一 子 , 则 必有 
 　 　 　 　 　 　 　 　 　 　 　 
 证明 : 用 反证法 . 假设 存在 δ 1 , δ 2 , 使得 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 1 ) 
 由式 ( 1 ) 　 　 　 　 　 
 　 　 　 　 　 　 　 　 
 由于 θ 为 〈 s , t 〉 的 合一 子 , 故 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 
 由式 ( 2 ） 、 ( 3 ） 得 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 
 式 ( 4 ） 与 σ 为 〈 s , t 〉 的 反 合一 子 矛盾 . 反证 完成 . 　 　 □ 
 　 　 推论 2.2 .   给定 项对 〈 s , t 〉 , 若 θ 为 〈 s , t 〉 的 最 一般 合一 子 （ MGU ） , 则 σ 为 〈 s , t 〉 的 反 合一 子 , 当且 仅 当 ρ 1 ρ 2 ( θ 
 　 　 证明 : 先证 , 这 由 定理 2.1 可以 得到 . 再证 , 用 反证法 . 
 　 　 假设 σ 不 为 〈 s , t 〉 的 反 合一 子 , 则 必 存在 δ , 使得 , 即 是 合一 子 . 由于 θ 为 MGU , 所以 存在 τ , 使得 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 
 即 　 　 　 　 　 　 　 　 　 　 　 　 
 这 与 矛盾 , 故 σ 为 〈 s , t 〉 的 反 合一 子 . 　 　 □ 
 　 　 需要 注意 的 是 , 在 推论 2.2 的 条件 中 θ 必须 为 MGU , 这要 比 定理 2.1 的 条件 严格 一些 , 否则 , 推论 2.2 不 成立 . 例如 , 有项 对 〈 s , t 〉 , 其中 s = x , t = y , 还有 〈 s , t 〉 的 一个 合一 子 θ = { g ( a ) / x , g ( a ) / y } 以及 替换 σ = { h ( a ) / x , h ( a ) / y } , 尽管 , 但 σ 却 不是 反 合一 子 , 它 是 合一 子 . 
 　 　 定理 2.3 .   已知 项对 〈 s , t 〉 及其 上 的 两个 替换 θ 和 σ , 对于 任意 替换 ρ 1 , ρ 2 , 
 　 　 　 　 　 　 　 　 　 　 　 当且 仅 当 ρ 1G θ ≠ ρ 2G σ . 
 　 　 证明 : 先证 . 
 　 　 令 　 　 　 　 　 　 　 　 　 　 　 
 　 　 由 已知 可 得 ： 必 存在 某个 xi ∈ Var ( s ) ∪ Var ( t ) , 
 　 　 　 　 　 　 　 　 　 　 　 τ 1 ( xi ) ≠ τ 2 ( xi ) . 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 5 ) 
 由式 ( 5 ) 可得 GId ( τ 1 ( x1 ) , ... , τ 1 ( xi ) , ... , τ 1 ( xn ) ) ≠ GId ( τ 2 ( x1 ) , ... , τ 2 ( xi ) , ... , τ 2 ( xn ) ) , 
 即 　 　 　 　 　 　 　 　 　 　 　 　 　 　 G τ 1 ≠ G τ 2 , 
 即 　 　 　 　 　 　 　 　 　 　 　 　 　 G θ 。 ρ 1 ≠ G σ 。 ρ 2 , 
 即 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ρ 1G θ ≠ ρ 2G σ . 
 　 　 再证 . 
 由 已知 ρ 1G θ ≠ ρ 2G σ 可 得 
 　 　 　 　 　 　 　 　 　 　 □ 
 定理 2.4 .   已知 项对 〈 s , t 〉 及其 上 的 两个 替换 θ 和 σ , 
 　 　 　 　 　 　 当且 仅 当 ρ 1 ρ 2 ( ρ 1G θ ≠ ρ 2G σ ) . 
 证明 : 先证 , 用 反证法 . 假设 存在 τ 1 , τ 2 , 使得 τ 1G θ = τ 2G θ , 即 
 　 　 　 　 　 　 　 　 　 　 　 　 
 　 　 由式 ( 6 ) 得 ： 任给 xi ∈ Var ( s ) ∪ Var ( t ) , 
 　 　 　 　 　 　 　 　 　 　 θ 。 τ 1 ( xi ) = σ 。 τ 2 ( xi ) . 　 　 　 　 　 　 　 　 　 　 ( 7 ) 
 由式 ( 7 ) 可 得 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 8 ) 
 和 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　   ( 9 ) 
 由式 ( 8 ) 、 ( 9 ) 得 
 　 　 　 　 　 　 　 　 　 　 
 这 与 矛盾 . 
 　 　 再证 , 用 反证法 . 
 　 　 假设 存在 τ 1 , τ 2 , 使得 , 则 任 给 xi ∈ Var ( s ) ∪ Var ( t ) , 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 10 ) 
 由式 ( 10 ) 得 　 　 　 　 　 
 即 　 　 　 　 　 　 　 　 　 　 τ 1G θ = τ 2G σ , 
 这 与 ρ 1 ρ 2 ( ρ 1G θ ≠ ρ 2G σ ) 矛盾 . 
 　 　 综上所述 , 命题 成立 . 　 　 　 □ 
 　 　 定理 2.5 .   已知 项对 〈 s , t 〉 及其 上 的 两个 替换 θ 和 σ , 若 Var ( G θ ) ∪ Var ( G σ ) = , 则 ρ ( ρ G θ ≠ ρ G σ ) 当且 仅 当 ρ 1 ρ 2 ( ρ 1G θ ≠ ρ 2G σ ) . 
 　 　 证明 ： 先证 , 用 反证法 . 
 　 　 假设 存在 τ 1 , τ 2 , 使得 τ 1G θ = τ 2G θ , 其中 τ 1 形如 { t1 / x1 , ... , tn / xn } , τ 2 形如 { r1 / y1 , ... , rm / ym } , 我们 用 τ 1 , τ 2 构造 如下 替换 ： 
 　 　 　 　 　 　 　 　 　 　 
 　 　 　 　 　 　 　 　 　 　 τ = τ ′ 1 ∪ τ ′ 2 . 
 　 　 由于 τ 1 中 { ti / xi ｜ xiVar ( G θ ) } 对 G θ 不会 起 作用 ； 同样 地 , τ 2 中 { ri /   yi ｜ yiVar ( G σ ) } 对 G σ 不会 起 作用 , 所以 
 　 　 　 　 　 　 　 　 τ 1G θ = τ ′ 1G θ , τ 2G σ = τ ′ 2G σ . 　 　 　 　 　 　 　 　 　 　 ( 11 ) 
 　 　 又 由于 Var ( G θ ) ∩ Var ( G σ ) = , 所以 , 任给 ti / xi ∈ τ ′ 1 , xiVar ( G σ ) . 同样 地 , 任给 ri / yi ∈ τ ′ 2 , yiVar ( G θ ) , 所以 , 
 　 　 　 　 　 　 　 　 　 　 τ G θ = τ ′ 1G θ , τ G σ = τ ′ 2G σ 　 　 　 　 　 　 　 　 　 　 ( 12 ) 
 由式 ( 11 ) 、 ( 12 ) 得 
 　 　 　 　 　 　 　 　 　 τ G θ = τ ′ 1G θ = τ 1G θ , τ G σ = τ ′ 2G σ = τ 2G θ . 　 　 　 　 ( 13 ) 
 由式 ( 13 ) 和 反证 假设 得 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 τ G θ = τ G σ , 
 这 与 ρ ( ρ G θ ≠ ρ G σ ) 矛盾 . 
 　 　 再证 , 用 反证法 . 假设 存在 ρ 使得 ρ G θ = ρ G σ , 其中 ρ 形 如 { t1 / x1 , ... , tn / xn } . 我们 构造 如下 替换 ： 
 　 　 　 　 　 　 　 　 　 　 
 由于 { ti / xi ｜ xiVar ( G θ ) } 在 替换 中 对 G θ 不起作用 , 故 
 　 　 　 　 　 　 　 　 　 　 ρ G θ = ρ 1G θ . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 14 ) 
 同理 
 　 　 　 　 　 　 　 　 　 　 ρ G σ = ρ 2G σ . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 15 ) 
 由式 ( 14 ) 、 ( 15 ) 可 得 
 　 　 　 　 　 　 　 　 　 　 ρ 1G θ = ρ 2G σ , 
 这 与 ρ 1 ρ 2 ( ρ 1G θ ≠ ρ 2G σ ) 矛盾 . 
 　 　 综上所述 , 定理 成立 . 　 　 □ 
 　 　 定理 2.6 .   已知 项对 〈 s , t 〉 及其 最 一般 合一 子 θ , 函数 集中 至少 含有 1 个元数 大于 等于 1 的 函数 . 若 存在 r / x ∈ θ , r ∈ T 且 r 中 含有 不同于 x 的 变量 （ 比如说 是 y ） , 则 〈 s , t 〉 必有 无穷 多个 最 一般 反 合一 子 . 
 　 　 证明 ： 由 已知 ： 存在 f ∈ F , arity ( f ) = k ( k ≥ 1 ) , 
 　 　 　 　 　 　 　 　 　 　 　 　 r / x ∈ θ , y ∈ Var ( r ) . 
 　 　 我们 构造 如下 一系列 替换 ： 
 　 　 　 　 　 　 　 　 　 　 
 　 　 不难 验证 , 诸 σ i 都 是 反 合一 子 , 且 诸 σ i 之间 （ 即 σ i 与 σ j ( i ≠ j ) 之间 ） 不 存在 σ i ≤ σ j 或 σ j ≤ σ i 的 关系 . 利用 诸 σ i 之间 在 x 处 的 替换 的 模式 不同 , 可以 构造 出 不同 的 最 一般 反 合一 子 , 此处 不再 赘述 . 由于 σ i 的 构造 过程 可 无限 递推 下去 , 故 〈 s , t 〉 的 最 一般 反 合一 子有 无穷 多个 . 
 　 　 推论 2.7 .   已知 项对 〈 s , t 〉 , 函数 集 F 中不含 零元 函数 , 但 至少 含有 1 个元数 大于 等于 1 的 函数 . 若 〈 s , t 〉 仅 有 唯一 的 最 一般 反 合一 子 σ , 则 σ 必为 恒等 替换 . 
 　 　 证明 : 假设 σ 不 为 恒等 替换 , 则 〈 s , t 〉 必 存在 最 一般 合一 子 θ （ 因为 〈 s , t 〉 不 存在 最 一般 合一 子 当且 仅 当 最 一般 反 合一 子为 恒等 替换 ） . 又 由于 F 中不含 零元 函数 , 故 存在 r / x ∈ θ , r 中 含有 不同于 x 的 变量 y , y ∈ Var ( s ) ∪  Var ( t ) . 由 定理 1.6 可知 , 〈 s , t 〉 必有 无穷 多个 最 一般 反 合一 子 , 这 与 已知 条件 中 的 〈 s , t 〉 仅 有 唯一 的 最 一般 反 合一 子 σ 矛盾 . 故 σ 只能 是 恒等 替换 . 　 　 □ 
 　 　 注意 , F 中 不能 含有 零元 函数 , 否则 定理 不 成立 . 如 , 已知 〈 s , t 〉 , s = x , t = a , F = { f , a } , arity ( f ) = 1 , arity ( a ) = 0 , 通过观察 可知 〈 x , a 〉 的 最 一般 反 合一 子 唯一 , 为 σ = { f ( x ) / x } , 而 非 恒等 替换 ρ = { x / x } . 
 3   进一步 讨论 
 　 　 下面 我们 将 利用 前面 的 结果 来 求反 合一 子 的 完备 集 . 由 推论 2.2 可知 反 合一 子 σ 与 最 一般 合一 子 θ 的 关系 , 即 
 　 　 　 　 　 　 　 　 　 　 
 其中 θ 是 可求 的 , 现在 要求 的 是 σ . 可是 ρ 1 , ρ 2 都 是 任意 的 , 不等式 两边 都 不 确定 , 如何 去求 σ 并 保证 尽管 ρ 1 , ρ 2   随意 变动 而 不等式 又 始终 成立 呢 ? 
 　 　 由于 在 前文 我们 引入 了 与 θ 对应 的 函数 G θ , 再 由 定理 2.3 和 定理 2.4 , 我们 可以 把 θ 与 σ 的 关系 转化成 G θ 与 G σ 的 关系 . 这样一来 , 我们 希望 通过 构造 G σ , 使得 ρ 1 ρ 2 ( ρ 1G θ ≠ ρ 2G σ ) , 也 就 使得 ρ 2 ( Z ( s , t ) ) ) , 从而 得到 与 G σ 对应 的 σ , σ 就是 反 合一 子 . 
 　 　 下面 通过 一个 小小的 转化 来 摆脱 ρ 1 和 ρ 2 随意 变动 所 带来 的 不便 . 
 　 　 考察 一下 合一 子 就 可以 看出 , 最 一般 合一 子 θ 相当于 一个 模式 , 其他 的 合一 子 只是 在 其 上作 某种 代入 罢了 . 假如 我们 能 找到 另 一些 完全 不同于 最 一般 合一 子 θ 模式 的 替换 , 则 这些 替换 必为 反 合一 子 , 这 也 正是 定理 2.1 和 推论 2.2 的 含义 . 
 　 　 既然 最 一般 合一 子 θ 是 一种 模式 , 我们 就 把 它 对应 的 G θ 中 的 所有 变量 改写 成 一些 完全 不同于 项集 T 的 符号 系统 S 的 符号 . 如 ， S 中 含有 变量 , 我们 可以 把 G θ ( f ( x ) , y ) 改写 成 G θ ′ ( f ( ) , 而 在 构造 其他 替换 σ 所 对应 的 G σ 时 仍 用 项集 T 的 符号 系统 . 这样一来 ， Var ( G θ ′ ) ∩ Var ( G σ ) = . 
 　 　 我们 只要 使 G σ 与 G θ ′ 不能 合一 （ 合一 过程 是 在 符号 系统 T ∪ S 下 进行 的 ） , 借助于 定理 2.5 可得 ρ 1 ρ 2 ( ρ 1G θ ′ ≠ ρ 2G σ ) . 这样 , ρ 1 和 ρ 2 随意 变动 所 带来 的 问题 就 解决 了 . 至此 , 构造 G σ 只 找到 了 排列 的 方法 , 即 在 GId 的 所有 位置 代入 项 的 所有 可能 情形 , 并 与 G θ ′ 进行 合一 检测 , 留下 与 G θ ′ 不可 合一 的 G σ , 所有 对应 的 σ 就 构成 反 合一 子 的 完备 集 . 
 4   结束语 
 　 　 本文 是 以 一阶项 和 字面 合一 为 基础 来 讨论 反 合一 问题 的 , 至于 以 高阶 项 和 方程式 合一 为 基础 来 探讨 反 合一 还是 相当 复杂 的 , 有关 这 类 问题 , 我们 将 在 以后 的 工作 中 进一步 去 探索 . 
 　 　 本文 研究 得到 国家自然科学基金 和 国家 863 高科技 项目 基金 资助 . 作者 许满武 , 1944 年生 , 博士 , 教授 , 主要 研究 领域 为 计算机软件 , 算法 理论 . 潘光 睿 , 1972 年生 , 硕士 , 主要 研究 领域 为 计算机软件 , 算法 理论 . 周荣国 , 1976 年生 , 硕士生 , 主要 研究 领域 为 计算机软件 , 算法 理论 . 宋晓梁 , 1974 年生 , 硕士生 , 主要 研究 领域 为 计算机软件 , 算法 理论 . 刘 东升 , 1971 年生 , 硕士生 , 主要 研究 领域 为 计算机软件 , 算法 理论 . 
 　 　 本文 通讯联系 人 : 许满武 , 南京 210093 , 南京大学 计算机科学 与 技术 系 
 　 　 作者 单位 ： 南京大学 计算机科学 与 技术 系 　 南京 　 210093 ； 南京大学 计算机软件 新 技术 国家 重点 实验室 　 南京 　 210093 
 　 　 E - mail :   mwxu @ netra . nju . edu . cn 
 参考文献 
 　 1 　 Gallier   Jean   H ,   Snyder   Wayne .   Complete   sets   of   transformations   for   general   E - unification .   Theorem   Computer   Science ,   1989 , 67 : 203 ～ 260 
 　 2 　 Comon   Hubert ,   Lescanne   Pierre .   Equational   problems   and   disunification .   Journal   of   Symbolic   Computation ,  1989 , 7 ( 3 & 4 ) : 371 ～ 425 
 　 3 　 Siekmann   Jrgh .   Unification   theory .   Journal   of   Symbolic   Computation .   1989 , 7 ( 3 & 4 ) : 207 ～ 274 
 　 4 　 Mitchell   John   C .   Foundations   for   programming   languages .   Cambridge ,   MA :   MIT   Press ,   1996 
 1998 - 04 - 07 收到 原稿   
 1998 - 08 - 03 收到 修改稿 
