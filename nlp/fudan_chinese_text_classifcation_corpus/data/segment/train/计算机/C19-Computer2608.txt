软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 6 期   第 10 卷   Vol.10   No.6   1999 
 
 
 
 基于 微内核 的 网络系统 界面 的 实现 * 
 胡 宁宁 　 金志 权 　 谢   立 
 　 　 摘要 　 CONET   V2.0 是 一种 在 微内核 环境 下 实现 的 网络 系统软件 , 由于 微内核 在 系统 构造方法 上 与 传统 的 方法 不同 , 所以 该 环境 下 的 系统 模块 在 实现 上 也 具有 其 特殊 之处 . 文章 介绍 了 CONET   V2.0 的 体系结构 与 实现 思想 , 并 着重 阐述 了 作为 该 系统 应用 程序接口 之一 — — SOCKET 的 设计 与 实现 . 
 　 　 关键词 　 网络系统 , 应用 程序接口 , 套 接字 , 微内核 . 
 　 　 中图法 分类号 　 TP393 
 　 
 Implementation   of   Interface   for   Microkernel   Based   Network   System 
 HU   Ning - ning 　 JIN   Zhi - quan 　 XIE   Li 
 ( Department   of   Computer   Science   and   Technology   Nanjing   University   Nanjing   210093 ) 
 ( State   Key   Laboratory   for   Novel   Software   Technology   Nanjing   University   Nanjing   210093 ) 
 　 　 Abstract   　 CONET   V2.0   is   a   network   system   under   microkernel   environment .   Compared   with   the   traditional   monolithic   kernel ,   microkernel   provides   a   different   approach   to   construct   operating   system ,   which   leads   to   different   implementation   of   those   modules   running   under   such   environment .   In   this   paper ,   the   architecture   and   design   of   CONET   V2.0   are   outlined ,   and   then   the   design   and   the   implementation   of   SOCKET ,   which   is   one   of   the   application   interfaces   for   the   network   system ,   are   presented   in   detail . 
 　 　 Key   words 　 Network   system ,   application   interface ,   socket ,   microkernel . 
 　 　 网络 系统软件 是 在 一定 操作系统 环境 下 实现 的 一组 通信协议 , 为 用户 的 网络应用 提供 支持 . 不同 的 操作系统 环境 势必会 造成 网络系统 具体 实现 方法 的 不同 . 本文 在 简要 介绍 了 微内核 机制 下 实现 的 网络 系统软件 CONET   V2.0 的 总体 结构 与 实现 思想 之后 , 着重 介绍 了 作为 该 系统 应用 程序接口 之一 — — SOCKET 的 设计 与 实现 . 
 　 　 在 微内核 机制 出现 以前 , 通常 ， 整个 操作系统 分为 内核 层 与 应用层 , 在 内核 层 实现 各种 系统 服务 , 在 应用层 ， 应用程序 通过 系统 调用 来 使用 这些 服务 . 但 在 软硬件 迅猛发展 、 各种 不同 的 操作系统 不断 出现 的 情况 下 , 人们 对 不同 平台 上 系统软件 的 可移植性 、 可 构造性 提出 了 更 高 的 要求 , 进而 促使 软件 开发者 更加 重视 操作系统 构造 的 灵活性 与 重用 性 , 而 不再 像 以往 那样 仅 局限于 高效性 . 传统 操作系统 的 构造方法 很难 达到 这点 要求 , 虽然 诸如 分层 法 、 虚拟机 法等 构造方法 在 一定 程度 上 改善 了 系统 模块 的 可移植性 , 但 却 不能 让 用户 为 实现 某种 特定 需要 而 动态 地 构造 服务 系统 ［ 1 ］ . 
 　 　 微内核 机制 的 引入 在 很大 程度 上 解决 了 这 一 问题 , 其 主要 设计 思想 为 : 将 整个 操作系统 分为 3 层 , 即 内核 层 、 服务 层 与 应用层 ［ 2 ］ . 在 内核 层 实现 操作系统 最 基本 的 功能 , 如 进程 管理 、 内存 管理 、 进程 间通信 以及 I / O 管理 等 ; 在 服务 层以 服务器 的 形式 实现 操作系统 中 面向 应用程序 的 其他 功能 （ 如图 1 ( b ) 所示 , 其中 NS 即 指以 服务器 形式 实现 的 CONET   V2.0 , FSS 指 文件系统 服务器 ） ; 应用层 的 应用程序 通过 在 运行 时链 入 的 动态 映射 库 DML （ dynamic   mapped   library ） 来 调用 各种 服务器 中 的 系统 服务 . 
 　 　 　 　 　 　 　 　 
 ( a ) 传统 操作系统 的 体系结构 　 　 　 ( b ) 基于 微内核 的 操作系统 的 体系结构 
 图 1   两种 操作系统 的 体系结构 
 　 　 由此可见 , 在 微内核 机制 下 实现 的 各种 服务器 最 重要 的 就是 使 其 所 提供 的 应用 程序接口 能 适应 这种 系统 调用 方式 . 对于 网络 服务器 CONET   V2.0 来说 , 就 要求 SOCKET 与 TLI ( transport   layer   interface ) 模块 具备 这种 能力 . 
 1   CONET   V2.0 系统 概述 
 1.1   CONET   V2.0 的 层次结构 
 　 　 CONET   V2.0 按照 标准 实现 了 TCP / IP 协议 簇 , 其 层次结构 以及 在 系统 中 的 位置 如图 2 所示 . 其中 SOCKET / TLI 是 应用 程序接口 , TCP , UDP , IP , ICMP , ARP , RARP 都 是 根据 标准 实现 的 传输层 与 网间 网层 的 协议 模块 ; VNET 用于 管理 各 物理 网络协议 （ 如 Ethernet , X.25 ） 的 多路复用 ; ETH 与 ETHDRV 负责 与 网卡 的 交互 . 
 
 图 2 　 系统 层次结构 图 
 1.2   CONET   V2.0 中 的 面向对象 机制 
 　 　 CONET   V2.0 的 整体 设计 采用 了 面向对象 的 思想 ［ 3 ］ , 利用 面向对象 理论 在 各层 协议 之间 构造 了 模块化 的 统一 界面 , 大大简化 了 协议 模块 间接口 的 处理 . CONET   V2.0 将 系统 中 的 各种 主要 数据 分成 3 类 : 
 　 　 .   协议 对象 ( protocol   object ) : 图 2 中 的 各层 协议 模块 皆 以 协议 对象 的 形式 存在 于 网络系统 中 , 它们 在 网络系统 初启时 创建 一次 , 在 整个 系统 运行 过程 中 一直 存在 . 它们 的 主要 功能 是 , 协调 与 管理 会话 对象 与 消息 对象 . 下文 以 P ( x ) 表示 x 协议 对象 . 
 　 　 .   会话 对象 ( session   object ) : 会话 对象 对应 于 网络通信 中 的 传输 端点 （ end   point ） , 由 它 来 解释 消息 对象 中 的 数据 并 维护 与 数据通信 相关 的 状态 信息 . 在 CONET   V2.0 中 , 会话 对象 是 作为 协议 对象 的 实例 ( instance ) , 由 协议 对象 动态创建 与 释放 的 , 每次 连接 （ 连接 方式 ） 或 数据传输 （ 非 连接 方式 ） 时 , 由 系统生成 一组 相互连接 的 会 话 对象 . 下文 以 S ( x , y ) 表示 P ( x ) 与 P ( y ) 两 协议 对象 之间 的 会 话 对象 . 
 　 　 .   消息 对象 ( message   object ) : 对应 于 传输 的 数据 , 无论是 应用程序 要 发送到 网络 上 的 数据 , 还是 从 网络 上 接收 到 的 数据 , 都 以 消息 对象 的 形式 在 会 话 对象 之间 或会话 对象 与 协议 对象 之间 传递 . 
 　 　 协议 对象 与会 话 对象 、 消息 对象 之间 的 关系 集中体现 在 通信 时 网络系统 内部 数据通路 的 建立 上 （ 如图 3 所示 ） . 对 连接 方式 而言 , 这 条 通路 在 连接 建立 时 创建 （ 对非 连接 方式 而言 , 在 第 1 次 传送数据 时 创建 ） . 对于 连接 请求 方 , 这是 一个 主动 创建 的 过程 , P ( socket ) 将 用户 的 连接 请求 交给 P ( tcp ) 协议 对象 , 后者 就 创建 P ( socket ) 与 P ( tcp ) 之间 的 会 话 对象 S ( socket , tcp ) . 同时 , 将 该 请求 再 交给 P ( ip ) . 依此类推 , 这样 就 建立 了 一条 协议 - 会话 对象 链 , 作为 通信 时 网络系统 内部 的 数据处理 通路 . 对于 接收 连接 方 , 则 存在 两个 问题 : ( 1 )   这种 通路 在 没有 连接 请求 时 是 不 应该 建立 的 ; ( 2 )   连接 请求 最先 是 由 最 下层 协议 对象 获得 , 而 在 未 建立 这 条 通路 前 是 无法 将 该 请求 给 P ( socket ) , 然后 再 像 连接 请求 方 那样 由上而下 地 创建 . 为 解决 这 两个 问题 , 我们 采用 协议 对象 之间 的 授权 机制 : 当 应用 进程 准备就绪 可以 接收 连接 时 , P ( socket ) 对 P ( tcp ) 授权 , P ( tcp ) 再 对 P ( ip ) 授权 . 依此类推 , 使得 下层 协议 对象 可以 自下而上 地 创建 与 上层 对象 之间 的 会 话 对象 . 
 
 图 3 　 CONET   V2.0 中 3 种 对象 间 的 关系 
 　 　 可以 看出 , 通过 面向对象 机制 , 能够 较 好 地 将 网络系统 中 静态 成分 与 动态 成分 分离 , 从而 提高 了 系统 的 模块化 ， 增强 了 可移植性 与 可扩充性 . 
 2   CONET   V2.0 中 SOCKET 的 设计 与 实现 
 　 　 Socket ( 套 接字 ) 作为 通信协议 应用 程序接口 , 相对 于 OSI 的 7 层 网络 模型 , 是 处于 会话层 的 地位 , 它 作为 传输 端点 ( end   point ) 是 网络系统 内部 的 数据 发送者 与 接收者 , 同时 也 是 应用程序 与 网络系统 交互 的 界面 . 
 2.1   SOCKET 与 DML 的 交互 及 多线程 的 实现 
 2.1 . 1   SOCKET 与 DML 的 交互 
 　 　 CONET   V2.0 与 传统 UNIX 系统 （ 如 BSD ） , 在 SOCKET 模块 的 实现 上 最 突出 的 不同点 在于 系统 调用 过程 中 用户 参数 的 获取 . 在 BSD 中 , 系统 调用 经 内核 进入 SOCKET 模块 后 , 后者 获得 的 就是 应用程序 的 原始 参数 . 而 在 CONET   V2.0 所处 的 微内核 环境 中 , 系统 调用 经 内核 后 首先 由 DML 获取 , 再 由 DML 通过 IPC ( interprocess   call ) 将 这些 用户 参数 传送 给 SOCKET 模块 . 由于 IPC 本身 的 限制 , 它 不能 很 好 地 处理 某些 （ 诸如 链表 ） 数据结构 ( 这种 限制 实际上 与 远程 过程 调用 （ RPC ） 所 遇到 的 问题 具有 相同之处 ) . 具体 实现 时 , 我们 在 SOCKET 与 DML 两个 模块 中 分别 加入 一个 内部 模块 IPC - client 与 IPC - server （ 如图 4 所示 ） , 其中 IPC - client 将 用户 参数 改变 成 IPC 可以 处理 的 数据 形式 , 而 IPC - server 则 负责 解释 IPC 消息 中 的 数据 , 并 将 解释 后 的 数据 传送 给 相应 的 SOCKET 内部 处理函数 . 
 
 图 4 　 SOCKET 与 DML 的 交互 及 CONET   V2.0 多线程 的 实现 
 2.1 . 2   多线程 的 实现 
 　 　 线程 作为 现代 操作系统 中 一种 运行 单位 , 能够 很 好 地 实现 程序运行 的 并行性 . 不同于 BSD 的 核内 单线程 垂直 处理 的 体系结构 ［ 4 ］ , 基于 微内核 的 CONET   V2.0 在 服务 层 实现 了 基于 消息 的 多线程 处理 ( 如图 4 所示 ) . 在 网络系统 初启时 , SOCKET 中 的 IPC - server 利用 内核 的 线程 管理工具 生成 多个 相同 的 线程 , 等待 接收 DML 的 IPC 消息 , 从而 可以 同时 处理 多个 用户 的 服务 请求 . 执行 完毕 后 , 线程 仍 回到 初启 状态 继续 等待 . 这种 基于 消息 的 并行 机制 相对 于 某些 网络系统 所 实现 的 协议 模块 之间 的 并行性 ， 具有 以下 优点 : （ 1 ）   并行 程度 高 , 不 受 系统 内部 分层 数 的 限制 ; （ 2 ）   各 协议 层 间通信 少 ; （ 3 ）   易于 实现 并行 模块 之间 的 同步 . 
 2.2   面向对象 机制 对 SOCKET 层 实现 的 影响 
 　 　 由 第 1.2 节 已知 , 在 CONET   V2.0 中 ， 各 协议 模块 皆 以 协议 对象 的 形式 存在 , 这些 协议 对象 是 在 网络系统 初启时 创建 的 , 同时 初始化 协议 对象 以及 各 协议 对象 之间 的 接口 . 由于 各 协议 对象 都 可 看做 是 同一个 类 的 实例 , 它们 之间 具有 相同 的 接口函数 , 因而 大大简化 了 各层 协议 之间 界面 的 处理 . SOCKET 作为 CONET   V2.0 的 一个 协议 模块 , 与 其他 协议 之间 的 接口 也 应 遵守 协议 对象 之间 的 统一 接口 . 但 考虑 到 程序 兼容性问题 , 这种 接口 并 不能 涉及 到 应用程序 , 即 这种 面向对象 机制 以及 由此 而 获得 的 各 对象 之间 的 统一 接口 只能 作为 网络系统 服务器 内部 实现 方法 而 存在 , 而 不能 对 应用程序 产生 影响 , 应用程序 仍 以 系统 调用 的 方式 来 使用 网络服务 . 这样 就 对 作为 通信协议 应用 程序接口 的 SOCKET 提出 了 特殊 的 要求 : 对 上层 应用程序 而言 （ 在 微内核 环境 下 , 实为 对 DML 而言 ） , SOCKET 应是 一个 普通 系统 模块 , 提供 一组 标准 socket 函数 ; 对 下层 协议 而言 , SOCKET 则 应 是 一个 协议 对象 P ( socket ) , 使用 协议 对象 间 的 统一 接口 进行 交互 . 
 　 　 在 实现 时 ， 我们 综合 了 上述 两种 要求 . 在 整体 上用 普通 的 模块化 思想 来 实现 SOCKET , 即将 SOCKET 的 各种 功能 用 一组 函数 实现 , 并且 这些 函数 皆 可为 外部 模块 所 调用 , 这样 就 能 较 好 地 实现 SOCKET 与 DML 间 IPC 的 交互 , 从而 实现 了 网络系统 与 应用程序 的 接口 . 与此同时 ， 在 SOCKET 内部 ， 按 协议 对象 的 形式 实现 一个 初启 模块 （ 如图 4 所示 ） . 在 网络系统 初启时 , 由 系统 利用 这个 初启 模块 创建 P ( socket ) , 并 初始化 它 与 下层 协议 对象 间 的 接口 . 该 初启 模块 中 的 数据 都 可 被 SOCKET 层 的 其他 函数 访问 , 从而 可 方便 地 将 下层 协议 对象 上传 的 数据 交给 应用程序 . 利用 这种 实现 方法 , 我们 较 好 地 实现 了 从 应用程序 的 系统 调用 到 网络系统 内部 各 对象 间 统一 接口 的 转变 . 
 2.3   套 接字 状态 转换 图 及其 在 CONET   V2.0 中 的 实现 
 　 　 在 应用程序 中 , 套 接字 ( socket ) 由套 接字 描述符 ( socket   descriptor ) 来 表示 , 在 功能 上 , 它 类似 于 文件系统 中 的 文件 描述符 . 每个 套 接字 描述符 在 系统 内部 与 一个 socket   address 结构 的 数据 相关联 , 由该 数据 保存 套 接字 的 状态 、 类型 等 信息 . 另外 , 应用程序 依 自身 应用领域 不同 而 对 网络系统 所 提供 的 服务 有 不同 的 要求 , 这种 要求 在 套 接字 系统 中由套 接字 类型 来 表示 , 共有 5 种套 接字 类型 ( SOCK - STREAM , SOCK - SEQPACKET , SOCK - DGRAM , SOCK - RDM , SOCK - RAW ) , 各种类型 是否 实现 主要 依该 类型 所 应用 的 通信 域 （ communication   domain ） 不同 而 不同 . 例如 , 在 Internet   domain 中 主要 涉及 3 种 类型 : SOCK - STREAM （ 提供 面向 连接 的 、 可靠 、 双向 有序 数据流 通信 ） 、 SOCK - DGRAM （ 提供 非 连接 、 不 可靠 的 数据通信 ） 和 SOCK - RAW （ 参见 文献 ［ 5 ］ ） . 
 　 　 套 接字 作为 传输 端点 , 在 数据传输 过程 中要 经历 各种 不同 阶段 （ 如 连接 准备 , 建立 、 接收 连接 , 数据 传送 与 接收 等 ） , 不同 阶段 的 套 接字 具有 不同 的 特性 与 能力 , 我们 将 称 这些 套 接字 所处 的 不同 阶段 为套 接字 状态 . 为了 更好 地 刻画 状态 之间 的 关系 , 根据 两种 主要 的 套 接字 类型 （ SOCK - STREAM 与 SOCK - DGRAM ） , 我们 给出 套 接字 的 状态 转换 图 ， 如图 5 所示 . 
 
 图 5 　 套 接字 状态 转换 图 
 　 　 从图 中 可以 清楚 地 看出 一个套 接字 要 进行 数据通信 所 应 进行 的 准备 工作 . CONET   V2.0 中 主要 使用 client - t 与 socket - t 两个 数据结构 来 实现 SOCKET 的 各种 状态 转换 及 相应 的 各种 功能 . 在 网络系统 中 , 通信 双方 之间 进行 数据 交互 要 分别 进行 以下 几步 : 
 　 　 ( 1 )   套 接字 描述符 的 获取 . 这 一步 在 图 5 中 就是 由 NULL 向 GROUND 状态 的 转变 , 套 接字 描述符 对于 应用 进程 而言 只是 一个 整数 s , 在 SOCKET 层中 它 对应 于 一个 socket - t 型 数据 . 在 实现 socket ( ) 时 ， 为 每 一个 应用 进程 分配 一个 client - t 型 数据 , 并 根据 用户 参数 初始化 sds ［ s ］ 所 指向 的 socket - t , 由 它 来 完成 应用 进程 在 套 接字 描述符 上 的 各种 动作 . 
 　 　 ( 2 )   连接 的 建立 . 由 CONET   V2.0 面向对象 的 设计 思想 可知 , 一次 连接 的 建立 在 网络系统 内部 实际上 就是 一次 协议 - 会话 对象 链 的 建立 . 对于 连接 请求 方 而言 , SOCKET 层 只 需 发出 连接 请求 即可 . 而 对于 接收 连接 方 而言 , 它 要 通过 上层 对 下层 的 授权 , 告诉 下层 协议 本 套 接字 接收数据 的 端口号 等 信息 , 以便 在 该 套 接字 为 多条 连接 服务 时 数据 能 正确 地 向上 传递 , 这些 工作 都 是 由 SOCKET 中 的 bind ( ) 与 listen ( ) 两 函数 来 完成 . 这 也 是 为什么 接收 连接 方在 完成 连接 之前 要 经过 BOUND 与 LISTENING 两 状态 , 而 连接 请求 方 只要 获得 了 套 接字 描述符 即可 发起 连接 的 原因 . 当 接收 连接 的 套 接字 到达 LISTENING 状态 后 , 它 实际上 成为 一个 分配器 （ dispatcher ） , 即 每 成功 接收 一次 连接 ( accept ( ) ) , 就 产生 一个 新 的 套 接字 描述符 和 相应 的 socket - t 数据 , 并 使 这个 新 的 套 接字 进入 CONNECTED 状态 （ 可以 与 对 等 进程 进行 数据通信 ） , 而 原来 的 套 接字 则 仍 处于 LISTENING 的 状态 , 继续 监听 连接 请求 （ 如图 5 所示 ） . 这样 , 就 使 一个 服务 进程 可以 同时 接收 多个 连接 请求 , 这 也 是 为什么 我们 往往 称 接收 连接 方 为 服务 方 的 原因 . 
 　 　 ( 3 )   数据 的 传递 . 在 连接 建立 完成 之后 , 数据 的 通信 相对 就 简单 一些 . 发送 时 , 由 P ( socket ) 将 数据 以 消息 对象 形式 向下 传送 ; 而 对于 接收 , 则 需 通过 自身 socket - t 结构 中 的 so - rcv 来 实现 , so - rcv 指向 一个 FIFO 的 消息 对象 队列 , 每次 P ( tcp ) 或 P ( udp ) 都 将 自身 处理 完 的 数据 以 消息 对象 的 形式 插入 该 队列 , 而 P ( socket ) 则 从 该 队列 中 取出 消息 对象 , 抽取 出 数据 交予 应用 进程 . 
 　 　 ( 4 )   套 接字 描述符 的 关闭 . 根据 不同 的 应用 要求 , 我们 实现 了 套 接字 的 两种 关闭 函数 : ( Ⅰ )   close ( ) , 它 释放 掉 与 该 进程 相 联系 的 client - t 及 socket - t 数据 , 从而 使 应用 进程 不再 与 网络系统 有关 ; ( Ⅱ )   shutdown ( ) , 有时 用户 只 希望 将 套 接字 双向 传输 中 的 一个 方向 关闭 , 此时 并 不 回收 client - t 与 socket - t 数据 , 因而 不能 使用 close ( ) , shutdown ( ) 通过 设置 socket - t 中 参数 so - state 的 两个 状态 位 , 同时 配合 数据 发送 与 接收 的 实现 来 实现 这种 功能 . 
 2.4   SOCKET 的 选项 控制 功能 
 　 　 SOCKET 还 向 应用程序 提供 了 用于 设置 、 获取 网络系统 各 协议 模块 参数 的 辅助 服务 功能 , 应用程序 可 通过 getsockopt ( ) , setsockopt ( ) , ioctl ( ) , fcntl ( ) , getpeername ( ) 等 函数调用 来 请求 服务 . 我们 在 实现 时 根据 各种 参数 实现 的 不同 位置 与 方法 , 将 这些 服务 分为 3 类 : 
 　 　 ( 1 )   由 SOCKET 层 内部 数据 维护 的 参数 : SOCKET 层 的 socket - t 数据结构 中 的 so - state , so - type , so - error 等 记录 了 的 SOCKET 主要 运行 属性 , 可 直接 回答 某些 应用程序 的 服务 请求 . 如 应用 进程 使用 ioctl ( ) 或 fcntl ( ) 来 获取 套 接字 所属 进程 或 进程 组 标志符 时 , 即可 直接 由 socket - t 的 参数 so - pgrp 及 so - cid 获取 . 
 　 　 ( 2 )   SOCKET 层 内部 实现 的 功能 : 主要 指 应用 进程 设置 了 套 接字 的 某种 属性 , 但 这种 属性 需要 在 运行 过程 中 体现 . 我们 利用 socket - t 结构 中 的 参数 , 同时 配合 相关 socket 函数 的 实现 来 达到 这一 要求 . 如套 接字 阻塞状态 的 设置 , 若套 接字 被 设置 为 阻塞状态 , 当其 接收数据 并 发现 相应 的 接收数据 队 列为 空时 , 则 使 应用 进程 在 调用 接受 数据 的 函数 时 进入 睡眠 等待 状态 , 直到 下层 将 接收 到 的 数据 插入 其 接收 队列 并 被 唤醒 为止 ; 否则 , 应用 进程 并 不 等待 , 而是 直接 将 出错 标志 作为 系统 调用 的 返回值 . 
 　 　 ( 3 )   由 其他 网络协议 实现 的 服务 功能 : 对 这些 功能 （ 如 接收 、 发送数据 缓冲区 大小 的 设置 等 ） , SOCKET 层仅 是 一层 界面 , 向下 传递 服务 请求 , 向上 传递 服务 结果 , 不 作 任何 附加 处理 . 
 3   结束语 
 　 　 CONET   V2.0 中 SOCKET 的 设计 方法 较 好 地 实现 了 整个 网络系统 与 微内核 的 操作系统 结构 相 协调 , 解决 了 由 微内核 的 系统 调用 到 网络系统 中 各 对象 统一 接口 的 过渡 , 同时 利用 多线程 实现 了 网络系统 内部 的 并行 . 今后 的 工作 是 进一步 完善 系统 . 
 * 　 本文 研究 得到 国家 “ 九五 ” 科技 攻关项目 基金 资助 。 
 作者简介 　 胡 宁宁 ， 1976 年生 ， 硕士生 ， 主要 研究 领域 为 分布 与 并行 计算机系统 ， 网络系统 。 
 　 　 　 　 　 金志 权 ， 1941 年生 ， 教授 ， 主要 研究 领域 为 分布 与 并行 计算机系统 ， 网络系统 。 
 　 　 　 　 　 谢立 ， 1942 年生 ， 教授 ， 博士生 导师 ， 主要 研究 领域 为 分布 与 并行 计算机系统 ， 智能 操作系统 。 
 本文 通讯联系 人 ： 胡 宁宁 ， 南京   2100093 ， 南京大学 计算机科学 与 技术 系 
 作者 单位 ： 南京大学 计算机科学 与 技术 系   南京   210093 　 　 南京大学 计算机软件 新 技术 国家 重点 实验室   南京   210093 
 参考文献 
 　 1 　 Cheung   W   H ,   Anthony   H   S   Loong .   Exploring   issues   operating   systems   structuring :   from   microkernel   to   extensible   systems .   ACM   Operating   Systems   Review ,   1995 , 29 ( 4 ) : 4 ～ 16 
 　 2 　 Liedtke   Jochen .   On   μ - kernel   construction .   ACM   Operating   Systems   Review ,   1995 , 29 ( 5 ) : 237 ～ 250 
 　 3 　 Hutchinson   N   C ,   Perterson   L   L .   The   x - kernel :   an   architecture   for   implementing   network   protocols .   IEEE   Transactions   on   Software   Engineering ,   1991 , 17 ( 1 ) : 64 ～ 75 
 　 4 　 Schmidt   D   C ,   Suda   Tatsuya .   Transport   system   architecture   services   for   high - performance   communications   systems .   IEEE   Journal   on   Selected   Areas   in   Communications ,   1993 , 11 ( 4 ) : 489 ～ 505 
 　 5 　 Quarterman   J   S ,   Silberschatz   Abraham ,   Peterson   J   L .   4.2 BSD   and   4.3 BSD   as   examples   of   the   UNIX   system .   ACM   Computing   Surveys ,   1985 , 17 ( 4 ) : 379 ～ 418 
 本文 1998 - 03 - 24 收到 原稿 ， 1998 - 06 - 22 收到 修改稿 
