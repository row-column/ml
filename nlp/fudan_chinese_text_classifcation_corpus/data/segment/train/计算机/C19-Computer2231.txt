计算机 应用 研究 
 APPLICATION   RESEARCH   OF   COMPUTERS 
 2000   Vol.17   No.3   P.48 - 51 
 
 
 
 
 异质 可 复用 软 构件 属性 模型 
 徐正权 　 骆婷 
 摘 　 要 ： 提出 了 一个 五元 组软 构件 属性 模型 ， 讨论 了 与 之 相关 的 方法 和 语言 ， 并用 BNF 刻画 了 所 提出 的 模型 ， 还 介绍 了 软 构件 操作 原语 。 
 关键词 ： 软 构件 描述   属性 模型   操作 原语 
 l 　 引言 
 　 　 软 构件 是 为 复用 而 选定 的 软件 单元 。 直观 上 讲 ， 软 构件 就 像 建筑 上 的 预制板 ， 而 构件 类同 生产 预制板 的 模子 相似 。 然而 ， 软 构件 的 概念 和 种类 一般 是 变化 的 。 它 通常 可以 是 软件系统 模型 、 体系结构 、 被 封装 的 对象 类 、 功能模块 、 程序 ( 源代码 、 目标 代码 ， 等等 ) 、 文档 ( 规格 说明 、 设计 文档 、 测试 证明 ， 等等 ) ， 以及 测试程序 和 数据 。 按 规模 分 ， 构件 可以 是 语句 、 分 程序 、 模块 、 任务 、 命令 和 系统 ； 按 形式 分 ， 有 程序代码 、 微 体系结构 、 宏 体系结构 和 系统 模型 ； 按 功能 用途 分 ， 有 系统 构件 、 支撑 构件 和 领域 构件 ； 按 用法 分 ， 有 黑盒 构件 、 灰盒 构件 、 模式 / 骨架 构件 和 白盒 构件 ； 按类型 分 ， 有 处理 类型 的 构件 、 数据类型 的 构件 、 对象 类型 的 构件 和 面向对象 的 构件 ； 按 结构 分 ， 有 原子 构件 和 组合 构件 ； 按 应用 的 范围 分 ， 有 专用 构件 、 面向 领域 的 构件 和 通用 构件 ； 按 复用 时 状态 分 ， 有 动态 构件 和 静态 构件 。 
 　 　 储备 软 构件 可 使 软件开发 任务 标准化 和 简单化 。 用软 构件 制作 新 的 软件 ， 就 是从 软 构件 集合 中 选择 构件 ， 通过 组装 和 控制 来 实现 。 反复 利用 软 构件 可以 提高 软件生产率 。 复用 优质 软 构件 能够 提高 软件 质量 。 将 系统 环境 变化 局部 于 软 构件 的 变化 可 为 软件 的 修改 带来 方便 。 
 　 　 可是 ， 软 构件 的 组装 并非 像 预制板 组合 那样 简单 ， 要 进行 无缝 插接 ， 组合成 优质 的 可 应用软件 系统 ， 需要 特殊 的 机制 。 首当其冲 ， 软 构件 及其 相互之间 的 关系 应当 有 适当 的 描述 。 这样 才 能够 有效 表示 、 开发 、 理解 、 修改 和 复用 软 构件 。 另一方面 ， 适当 地 描述 对软 构件 的 分类 、 编目 、 存储 和 检索 起 关键性 的 作用 ， 是 软 构件 组织 和 管理 的 基础 和 核心 。 因此 ， 我们 通过 对软 构件 属性 的 研究 ， 提出 一种 描述 机制 ， 以 促进 软件 复用 。 
 　 　 软 构件 的 描述 涉及 模型 、 方法 和 语言 三个 方面 的 内容 。 
 2 　 软 构件 属性 模型 
 　 　 模型 是 方法 和 语言 的 基础 ， 给出 软 构件 描述 的 抽象 对象 ， 即 What   to   describe 。 软 构件 属性 模型 刻画 那些 影响 软 构件 可 复用 性 因素 ， 规定 构件 与 构件之间 的 接口 和 交互 机制 。 目前 ， 已有 多种 软 构件 模型 出现 ， 代表性 的 有 3C 模型 和 REBOOT 模型 。 
 　 　 3C 是 一个 指导性 软 构件 属性 模型 。 它 由 概念 、 内容 、 环境 三 部分 组成 。 概念 ( Concept ) 是 软 构件 的 抽象 描述 。 它 给出 软 构件 的 内部 属性 ， 通过 接口 描述 及 操作 语义 描述 刻画 软 构件 的 功能 ； 内容 ( Content ) 是 直接 可 复用 的 软 构件 本体 ， 实现 概念 所 刻画 的 功能 ； 环境 ( Context ) 是 软 构件 属性 的 附加 描述 ， 通过 显式 定义 和 描述 软 构件 概念 环境 ( 软 构件 相互之间 接口 和 语义 关系 ) 、 操作 环境 ( 操作 数据 的 特性 ， 如 类型 、 可用 的 操作 等 ) 和 实现 环境 ( 一个 软 构件实现 时 对 其它 软 构件 的 依赖 关系 ， 如软 构件 间 的 调用 关系 ) ， 给出 软 构件 的 外部 属性 。 
 　 　 REBOOT 是 基于 已有 软 构件 的 一种 分面 分类 和 检索 模型 。 从 各个 角度 ， 即 分面 ( Facet ， 如软 构件 的 操作 、 操作 的 对象 等等 ) 刻画 软 构件 属性 。 函数 型 或 过程 型 的 软 构件 用 三元组 ( Function ， Object ， Medium / Agent ) 刻画 所 提供 的 操作 、 操作 对象 以及 与 其它 构件 间 的 关系 。 面向对象 ( O - O ) 的 构件 用 四元组 ( Abstraction ， Operations ， OperatesOn ， Dependencies ) 刻画 对象 、 所 提供 的 操作 、 操作 对象 以及 与 其它 构件 间 的 关系 。 3C 模型 和 REBOOT 模型 在 许多 方面 是 等同 的 。 
 　 　 3C 的 概念 对应 于 REBOOT 的 分面 ； 环境 与 OperatesOn 和 Dependencies 分面 一致 ， 描述 软 构件 的 外部 属性 ( 即 一个 构件 与 其它 构件 间 的 关系 ) 和 数据 特性 。 但 这 两个 模型 也 有 不同之处 。 基于 3C 模型 的 软 构件 描述语言 允许 刻画 类 属 构件 属性 ， 更 适合 于 形式化 的 描述 方法 和 语言 ， 而 REBOOT 模型 只 允许 按照 给定 的 分面 框架结构 描述 已有 的 软 构件 ， 因而 适合 于 非 形式化 的 方法 。 此外 ， REBOOT 模型 没有 对应 于 3C 模型 中 的 内容 的 分面 。 
 　 　 3C 和 REBOOT 是 两个 通用 软 构件 抽象 描述 模型 。 它们 为 软 构件 描述 提供 了 一个 抽象 模板 。 没有 给出 特定 应用领域 中 的 软 构件 的 特定 属性 ， 因而 适合 于 所有 应用领域 。 
 　 　 与 3C 和 REBOOT 不同 ， 我们 通过 对软 构件 的 研究 ， 抽象 、 概括 出其 基本 的 属性 框架 ， 提出 一种 五元 组 的 软 构件 描述 模型 ， 用 基本 属性 、 分类 属性 、 配合 属性 、 联系 属性 和 处境 描述 软 构件 ， 即 
 < comp _ basis ,   comp _ taxonomy ,   comp _ cooperate ,   comp _ link ,   comp _ situation > 
 　 　 基本 属性 描述 软 构件 的 名称 、 关键码 、 功能 、 制作者 、 制作 时间 、 版本号 、 版权 和 使用 频率 。 分类 属性 概括 软 构件 与 编目 、 存储 、 检索 和 使用 有关 的 特性 ， 如 抽象 层 、 规模 、 种类 、 使用 方式 、 应用 范围 。 配合 属性 描述 软 构件 与 合成 有关 的 特性 ， 包括 连接子 、 插头 和 插座 。 联系 属性 刻画 软 构件之间 的 依赖 关系 ， 如 层次 关系 、 朋友 关系 、 继承 关系 、 引用 关系 。 层次 关系 是 多种形式 的 软 构件 制品 各层次 输出 之间 的 关系 ， 如 需求 文档 与 详细 设计 文档 间 的 关系 ， 总体设计 与 各 模块 间 的 关系 等 ； 主要 表现 为 父子 和 兄弟 关系 。 朋友 关系 指 构件 间 输入输出 可 匹配 的 关系 ， 比如说 ， 一个 构件 的 输出 和 另 一个 的 输入 类型 和 个数 完全 匹配 ， 从 形式 上 两者 可以 进行 合成 。 继承 关系 指类 体系 中 继承性 。 引用 关系 指 同一 项目 不同 层次 软 构件 间 控制 动作 上 的 关联 。 这个 属性 是 为了 方便 在 检索 时 进行 构件 合成 。 处境 指明 软 构件 制品 及其 存放 位置 和 执行 环境 ； 存放 位置 指定 所属 构件 库 的 名称 ， 执行 环境 说明 执行 时所 要求 的 程序设计 环境 。 
 　 　 软 构件 描述 模型 指出 了 软 构件 的 抽象 对象 。 根据 以上 模型 ， 扩充 描述 具体 的 软 构件 ， 可以 产生 不同 的 构件 描述 模板 。 不同 的 描述 模板 概念 上 相当于 不同 的 构件 类 。 由 不同 的 构件 类 ， 可以 产生 出 具体 构件 的 描述 ， 表示 不同 领域 不同 层次 构件 的 信息 。 该 描述 模板 亦 是 建立 可 复用 软 构件 库 的 基础 ， 为了 储备 软 构件 的 目的 ， 具体 构件 的 描述 可以 某种 规则 进入 构件 库 。 因此 说 它 是 一个 异质 软 构件 属性 模型 。 注意 ： 可 复用 软 构件 库 的 组织 和 管理 不仅仅 是 简单 的 描述 问题 ， 还 涉及 到 检索 、 合成 等 诸多 问题 ； 不过 ， 软 构件 库 的 效率 以及 功能 的 充分发挥 有赖于 软 构件 属性 模型 。 
 　 　 通过 模型 描述 ， 用户 能够 从 各个方面 去 了解 软 构件 。 如果 要 描述 和 刻画 某一 领域 的 软 构件 ， 需要 对 上述 模型 进行 扩充 。 通过 对 模板 的 扩充 和 具体化 ， 可以 建立 自己 的 软 构件 属性 模型 。 根据 此 属性 模型 可以 开发 出 相应 的 构件 描述语言 和 操作 语言 ， 支持 构件 的 各种 动作 。 
 3 　 软 构件 描述 方法 
 　 　 方法 是 描述 的 依据 ， 亦 是 语言 的 设计 基础 ， 指出 如何 描述 软 构件 模型 ， 即 How   to   describe 。 软 构件 描述 方法 是 指 运用 某种 表示法 描绘 软 构件 的 抽象 特征 。 为此 ， 人们 提出 了 多种 形式化 和 非 形式化 方法 。 
 　 　 与 描述语言 紧密 相关 的 是 形式化 方法 。 
 　 　 形式化 方法 是 用 形式化 的 规格 说明 语言 描述 软 构件 。 规格 说明 语言 指明 软 构件 的 抽象 而 不 考虑 实现 细节 。 形式化 方法 避免 了 语义 的 二义性 、 模糊性 ； 软件系统 的 形式化 规格 说明 为 系统 原型 的 快速 开发 奠定 基础 。 典型 的 软 构件 形式化 描述 方法 有 代数 规格 说明 方法 、 多 形式 体系 方法 和 多层次 规格 说明 方法 。 
 　 　 代数 规格 说明 S = ( T ， F ， A ) 描述 可 复用 软 构件 的 核心思想 是 通过 类型 T 和 函数 集 F 描述 软 构件 功能 ， T 的 元素 作为 F 中 函数 的 输入 / 输出 集 ， 公理 集 A 描述 了 函数 的 功能 。 它 的 语义 允许 一些 类型 可见 ， 一些 不 可见 ； 对 代数 规格 说明 可 进行 三个 方面 的 扩充 ： 增加 操作 ， 参数 化 ， 附加 接口 描述 。 所以 可以 从 不同 的 抽象层次 和 不同 的 角度 来 描述 软 构件 。 
 　 　 多 形式 体系 方法 核心 是从 多个 角度 来 描述 软 构件 。 
 　 　 多层次 规格 说明 方法 允许 每个 高层 规格 说明 对 低层 规格 说明 施加 一些 约束 。 在 垂直 方向 ， 设计 实例 的 规格 说明 必须 继承 父 对象 的 规格 说明 ； 在 水平 方向 ， 设计 实例 的 规格 说明 可以 继承 设计 框架 的 规格 说明 ， 设计 框架 的 规格 说明 必须 继承 领域 模型 的 规格 说明 。 这种 方法 可以 提供 不同 抽象层次 的 规格 说明 ， 适用 于 大型 软 构件 复用 。 
 　 　 非 形式化 方法 包括 超文本 方法 、 人工智能 方法 、 库 与 信息科学 方法 等 。 
 　 　 超文本 是 一种 数据结构 ， 节点 表示 软 构件 ， 连线 表示 节点 间 的 关系 。 它 允许 用户 在 文本 内 通过 链接 来回 移动 查找 所 需 构件 。 
 　 　 人工智能 方法 采用 基于 知识 的 表示 方法 来 有效 地 表达 构件 间 的 关系 ， 而且 能够 帮助 用户 理解 这种 关系 。 常用 的 有 语义 网 、 规则 和 框架 。 语义 网是 一个 有向图 ， 结点 表示 对象 ， 弧 表示 对象 间 的 关系 。 它 有 较 好 的 表示 能力 ， 但 基本 语义 网 的 试探 能力差 ， 可 增加 一阶 谓词 逻辑 来 增强 其 推理 能力 。 规则 是 已知 的 最好 知识 表示 机制 ， 通常 用 规则 对软 构件 进行 分类 。 框架 是 一种 数据结构 ， 包括 槽 和 填充 值 。 通常 将 构件 的 框架 描述 存放 在 知识库 里 ， 一个 框架 对应 一种 构件 ， 槽 表示 构件 类型 ， 填充 值 表示 具体 的 构件 。 
 　 　 常用 的 库 与 信息科学 方法 有 分类 表示法 和 关键词 表示法 。 分类 表示法 常用 有限 个 术语 描述 构件 ， 构件 库 按 术语 分类 ， 形成 层次结构 或 网络结构 。 层次结构 简单 灵活 ， 易于 理解 ， 但 不利于 修改 和 扩充 ； 网络结构 易于 修改 、 扩充 ， 但是 随着 构件 库 的 扩大 ， 构件 的 检索 和 维护 会 越来越 困难 。 关键词 表示法 使用 各种 术语 描述 软 构件 的 特性 ， 如用 动词 描述 软 构件 提供 的 操作 ， 用 名词 描述 操作 对象 ， 用 形容词 修饰 对象 特征 。 它 由 语法 和 语义 两 部分 组成 ， 语法 部分 描述 不同 词性 术语 的 组合 规则 ， 语义 体现 在 各 术语 的 意义 上 。 关键词 表示法 直观 、 简捷 、 表达能力 强 ， 易于 用户 理解 和 描述 ， 便于 工具 的 组织 和 检索 ， 因而 能 有效 地 提高 用户 的 复用 意愿 。 但 该 方法 对软 构件 的 描述 不够 精确 ， 易有 二义性 ， 不能 自动 解决 一词 多义 、 多词 同义 ， 为此 应该 用 词汇表 列出 术语 的 同义词 和 术语 间 的 概念 关系 ， 便于 术语 语义 匹配 和 构件 的 检索 。 
 　 　 软 构件 描述 方法 影响 可 复用 构件 的 生成 、 检索 和 修改 。 在 选择 描述 方法 时 ， 要 考虑 以下 几个 问题 ： 对象 或 系统 的 结构 、 需要 描述 的 操作 类型 、 描述 的 一致性 、 可 理解 性 、 可 表达 性 、 构件 的 可 集成性 ， 以及 描述 方法 对 描述语言 的 影响 。 另一方面 ， 衡量 描述 方法 好坏 的 两个 因素 是 表示 充分性 和 试探 能力 。 表示 充分性 指 某个 表示法 描述 了 多少 信息 ， 试探 能力 描述 了 表示法 的 推理 能力 。 
 　 　 我们 采用 传统 的 库 与 信息 方法 和 关键词 方法 相结合 的 非 形式化 方法 对软 构件 进行 描述 。 出于 面向 领域 的 考虑 ， 我们 结合 分面 分类 方法 和 枚举 方法 来 组织 构件 ， 因此 ， 将 构件 依照 其 某种 共同 特征 ( 分面 ) ， 如 应用领域 ， 组织 在 一起 ， 便于 查询 和 使用 ， 所属 构件 库名 就是 指明 其 所属 哪 一类 。 不过 ， 在 不同 标准 下 ， 枚举 各种 类中 的 构件 会 带来 信息冗余 。 
 4 　 软 构件 描述语言 
 　 　 语言 是 软 构件 描述 的 工具 ， 即 With   what   to   describe ， 可以 对模型 加以 描述 和 刻画 ， 建立 在 属性 模型 的 基础 之上 ， 软 构件 描述语言 以 一种 严格 而 又 易于 理解 的 方式 为 复用 者 提供 全面 准确 的 信息 。 它 是从 70 年代 的 模块 互连 语言 、 80 年代 的 构件 描述语言 和 90 年代 的 体系结构 描述语言 发展 而来 的 。 较 有 影响 的 构件 描述语言 有 LIL 、 CDL 、 CIDER 和 Resolve 。 
 　 　 库 互连 语言 LIL 是 为 开发 大型 软件系统 设计 的 构件 描述语言 ， 支持 代码 复用 和 经验 复用 。 允许 软 构件 的 垂直 合成 ( 不同 抽象层次 间 软 构件 的 组合 ) 和 水平 合成 ( 同一 抽象层次 构件 间 的 修改 和 组合 ) 。 
 　 　 CDL 是 基于 对象 结构 范型 ( Object - structured   paradigm ) 的 构件 描述语言 。 其 基本 思想 是 将 软 构件 看作 黑盒 ， 通过 接口 的 语法 和 语义 描述 向 外界 提供 结构 和 行为 信息 ， 使 复用 者 不必 关心 其 内部 细节 。 构件 包括 两 部分 ： 构件 接口 和 构件 本体 。 构件 接口 描述 构件 的 输出 以及 与 其它 构件 的 关系 ； 构件 本体 用类 - Ada 符号 描述 ， 实现 接口 部分 所 体现 的 思想 。 CDL 语言 是 设计 级 语言 ， 可 通过 本身 工具箱 将 CDL 转换 为 实现 语言 。 
 　 　 CIDER 具有 面向对象 语言 的 特点 ， 是 一种 面向对象 的 构件 描述语言 ， 允许 构件 继承 、 输入 和 实例 化 。 构件 由 接口 和 本体 组成 。 接口定义 方式 可以 是 显式 或 隐式 的 。 Resolve 语言 用 基于 方法 的 数学模型 表达 构件 的 形式化 规格 说明 。 它 给出 构件 的 类型 、 操作 所 满足 的 前置条件 和 后置 条件 、 实现 、 构件 模型 和 表示法 的 对应 关系 。 
 　 　 Resolve 用 数学模型 描述 构件 的 接口 需求 、 接口 需求 与 一个 可能 的 实现 间 的 关系 ， 适合 于 可 复用 构件 的 设计 。 但是 ， Resolve 语言 无法 用 抽象 的 数学模型 描述 两个 构件 概念 间 的 继承 关系 。 因此 ， 从 一个 构件 产生 另 一个 构件 就 会 显露出 很多 弱点 。 
 　 　 此外 ， CORBA   IDL 、 DCOM   ODL 和 IDL 等 接口定义 ( 或 描述 ) 语言 都 能够 刻画 软 构件 接口 的 语法 ， 并且 具备 编译 和 浏览 工具 的 支持 。 然而 ， 现有 的 接口 描述语言 在 刻画 软 构件 接口 语义 和 构件 相互之间 复杂 的 交互 协议 方面 却 缺乏 进一步 的 支持 。 
 5 　 资用 软 构件 属性 模型 
 　 　 如 第 2 节 所述 ， 软 构件 的 属性 包括 基本 属性 、 分类 属性 、 配合 属性 、 联系 属性 和 处境 。 通过 模型 描述 ， 用户 能够 从 各个方面 去 了解 软 构件 。 
 5.1 　 软 构件 描述 
 　 　 语法 上 ， 我们 采用 BNF 表示法 描述 软 构件 。 软 构件 属性 描述 如下 ： 
 < component > : : = < comp _ basis > 　 　 　 　 　 　   基本 属性 
 　 　 < comp _ taxonomy > 　 　 　 　 　 　 　 　 　 　 分类 属性 
 　 　 < comp _ cooperate > 　 　 　 　 　 　 　 　 　 　 配合 属性 
 　 　 < comp _ link > 　 　 　 　 　 　 　 　 　 　 　 　 联系 属性 
 　 　 < comp _ situation ) 　 　 　 　 　 　 　 　 　 　 处境 
 < comp _ basis > : : = < comp _ name > 　 　 　 　 　 　 　 构件 名称 
 　 　 < comp _ key > 　 　 　 　 　 　 　 　 　 　 　 　 　 关键码 
 　 　 < comp _ function > 　 　 　 　 　 　 　 　 　 　 功能 描述 
 　 　 < comp _ maker > 　 　 　 　 　 　 　 　 　 　 　 制作者 
 　 　 < act _ time > 　 　 　 　 　 　 　 　 　 　 　 　 制作 时间 
 　 　 < comp _ version > 　 　 　 　 　 　 　 　 　 　 版本号 
 　 　 < comp _ copyrights > 　 　 　 　 　 　 　 　 版权 
 　 　 < use _ frequency ) 　 　 　 　 　 　 　 　 　 使用 频率 
 < comp _ name ) : : = < identifier > 
 < identifier > : : = letter { letter | digital | ' _ ' } * 
 < comp _ key > : : = integer 
 < comp _ function > : : = string 
 < comp _ maker > : : = string 
 < act _ time > : : = < create _ time > < modify _ time > 
 < create _ time > : : = datetime 
 < modify _ time > : : = datetime 
 < comp _ version > : : = integer 
 < comp _ copyrights > : : = commercial | freeware | public _ domain | shareware 
 < use _ frequency > : : = integer 
 < comp _ taxonomy > : : = < comp _ level ) 　 　 　 　 　 　 抽象 层 
 　 　 < comp _ size > 　 　 　 　 　 　 　 　 　 　 　 　 　 　 规模 
 　 　 < comp _ usage > 　 　 　 　 　 　 　 　 　 　 　 　 　 使用 方式 
 　 　 < comp _ scope > 　 　 　 　 　 　 　 　 　 　 　 　 　 应用 范围 
 　 　 < comp _ category ) 　 　 　 　 　 　 　 　 　 　 　 　 种类 
 < comp _ level > : : = requirment | specification | architecture | design | source | executable 
 < comp _ size > : : = statement | block | module | task | command | system 
 < comp _ usage > : : = black _ box | gray _ box | skelten | white _ box 
 < comp _ scope > : : = dedicated | domain _ oriented | general _ purpose 
 < comp _ category > : : = system _ software | application _ software 
 < system _ software > : : = language _ processor | utility | operating _ systems 
 < application _ software > : : = financial | database | desktop _ accessory   
 　 　 | word _ processing | communication | desktop _ publishing   
 　 　 | entertainment | educational | development | graphics 
 　 　 | spreadsheets | integrated 
 < comp _ cooperate > : : = { < connector > { < plug >   |   < socket > } * } * 连接子 
 < connector > : : = < identifier > 
 < plug > : : = ! < param _ declaration > 
 < param _ declaration > : : = < param _ type > < data _ type > 
 < param _ type > : : = val _ param | var _ param 
 < data _ type > : : = < simple _ type >   |   < compund _ type >   |   < pointer > 
 < simple _ type > : : = integer | boolean | char | real | datetime 
 < compound _ type > : : = string | subrange | array | record | enumeratedtype | set | union 
 < pointer > : : =   ' * '   < data _ type > 
 < socket > : : = ? < param _ declaration > 
 < comp _ link > : : = < hierarchy _ r > 　 　 　 　 　 层次 关系 
 　 　 [ < friend _ r > ] 　 　 　 　 　 　 　 　 　 　 　 朋友 关系 
 　 　 [ < inherit _ r > ] 　 　 　 　 　 　 　 　 　 　 继承 关系 
 　 　 [ < reference _ r > ] 　 　 　 　 　 　 　 　 　 引用 关系 
 < hierarchy _ r > : : = < child > [ < brother > ] 
 < child > : : = < comp _ key > 
 < brother > : : = < comp _ key > 
 < friend _ r > : : = [ < input _ friend > ] [ < output _ friend > ] 
 < input _ friend > : : = < first _ friend > < next _ friend > 
 < output _ friend > : : = < first _ friend > < next _ friend > 
 < first _ friend > : : = < comp _ key > 
 < next _ friend > : : = < comp _ key > 
 < inherit _ r > : : = { < supercomp > ; } * 
 < supercomp > : : = < comp _ key > 
 < reference _ r > : : = { < ref _ comp > ; } * 
 < ref _ comp > : : = < comp _ key > 
 < comp _ situation > : : = < comp _ artifacts > 　 　 　 　 　 制品 
 　 　 < comp _ location > 　 　 　 　 　 　 　 　 　 　 　 　 　 所属 构件 库 
 　 　 < run _ environment > 　 　 　 　 　 　 　 　 　 　 　 　 执行 环境 
 < comp _ artifacts > : : = processing | data | object | object _ oriented | document | figure 
 < comp _ location > : : = < lib _ name > 
 < lib _ name > : : = < identifier > 
 < run _ environment > : : = < operating _ systems > < programming _ env > 
 < operating _ systems > : : = dos | win31 | win95 | winnt | unix | aix | ... 
 < programming _ env > : : = delphi | c | pascal | vc | bc | vb | pb | ... 
 5.2 　 软 构件 操作 原语 
 　 　 软 构件 的 操作 基于 属性 模型 ， 包括 构件 的 生成 、 删除 、 检索 等 ， 涉及 软 构件 的 动态 特性 ， 但 某些 接口 将 依赖于 一些 静态 属性 ， 如 
 　 　 Create   ( 生成 形式 ， 参数 集 ) 
 　 　 软 构件 的 生成 即 为 构件 类 的 实例 化 过程 。 将 实例 化后 的 构件 入库 。 由于 软 构件 制品 粒度 是 不定 的 ， 可以 是 软件开发 任何 一个 阶段 的 产品 ， 所以 实例 化有 多种形式 ， 如 
 　 　 ． 变量 说明 ： 变量 类型 和 变量 的 关系 ， 这 是 最 一般 的 生成 方式 ； 
 　 　 ． 对象 类 和 实例 ： 对象 类 是 对象 实例 的 样板 ， 例如 C++ 中类 和 实例 的 关系 ， 生成 的 对象 实例 共享 对象 类 所 定义 的 数据 和 操作 特征 ， 但 各 实例 的 初始化 状态 不同 ； 
 　 　 ． 宏 替换 和 预处理 ： 在 构件 类中 可以 有宏 定义 和 预处理 定义 ， 对 其 进行 宏 替换 和 预处理 即 生成 构件 ； 
 　 　 ． 文件 描述 ： 构件 类 也 可以 由 一个 文件 的 内容 来 描述 ， 通过 生成 工具 将 文件 描述 的 内容 转换 为 构件 ， 如 在 Informix - 4GL 中 ， 可以 通过 屏幕 表格 说明 文件 来 描述 表格 ， 然后 用 屏幕 表格 生成 工具 生成 最终 的 屏幕 表格 ； 
 　 　 ． 规则 生成 工具 ： 构件 类中 含有 规则 的 描述 ， 通过 相应 的 生成 工具 来 生成 构件 ， 例如 ， Unix 中 的 Lex 和 Yacc 就是 由 规则 表达式 生成 程序 的 两个 生成 工具 。 
 　 　 Delete ( 构件 类 ， 关键码 ) 
 　 　 软 构件 的 删除 即将 某 构件 类 的 实例 删除 出库 。 每 一个 构件 在 所属 类 ( 共 一个 描述 模板 ) 中 都 有 一个 关键码 与 之 相对 应 。 删除 动作 既 可以 直接 通过 给出 构件 的 关键码 来 完成 ， 也 可以 在 浏览 ( 或 检索 ) 的 过程 中 完成 。 
 　 　 Search ( 构件 类 ， 检索 属性 集 ) 
 　 　 在 属性 模型 中 ， 含有 与 检索 有关 的 属性 ， 例如 构件 名称 、 关键码 等 。 对 构件 的 合成 也 包含 着 检索 的 过程 。 这种 检索 不同于 一般 数据库 检索 ， 它 位于 开发 中 ， 还 存在 匹配 问题 ， 多个 构件 的 组合 需要 进行 参数 的 配合 。 参数 的 配合 依赖于 软 构件 与 合成 有关 的 属性 ， 如 模板 和 连接子 。 
 6 　 结论 
 　 　 本文 在 介绍 软 构件 的 概念 之后 ， 介绍 了 现有 的 软 构件 描述 模型 、 方法 和 语言 ， 并 提出 了 一个 新 的 软 构件 属性 模型 ， 使用 五元 组 < comp _ basis ， comp _   taxonomy ， comp _ cooperate ， comp _ link ， comp _ situation ) 描述 软 构件 ， 并用 BNF 刻画 了 五元 组 属性 模型 的 软 构件 属性 ， 对 构件 的 操作 原语 也 进行 了 简单 的 讨论 。 
 本 课题 获 国家 高性能 计算 基金 资助 
 徐正权 ( 华中理工大学 计算机 学院   武汉   430074 ) 
 骆婷 ( 华中理工大学 计算机 学院   武汉   430074 ) 
 参考文献 
 1   T .   Biggerstaff   &   C .   Richter ,   Reusability   Framework ,   Assessment   and   Directions ,   IEEE   Software ,   Vol.4 ,   No.2 ,   Mar .   1987 
 2   T .   C .   Jones ,   Reusability   in   Programming :   A   Survey   of   the   State   of   the   Art ,   IEEE   Trans .   on   Software   Engineering ,   Vol .   SE - 10 ,   No.5 ,   September   l984 
 3   丁忠俊 ,   徐正权 .   软件 重用 技术 与 方法 .   小型 微型 计算机系统 ,   1998 年 第 19 卷 第 11 期第 24 ～ 31 页 
 4   李 留英 等 .   软 部件 描述 :   模型 、 方法 和 语言 .   计算机科学 ,   1997 年 第 24 卷 第 1 期 
 5   骆   婷 ,   徐正权 .   基于 复用 的 软件开发 模型 .   计算机 应用 研究 ,   1998 年 
 6   R .   Prieto - Diaz ,   Status   Report :   Software   Reusability ,   IEEE   Software ,   May   l993 
 7   R .   Prieto - Diaz   ＆ P .   Freeman ,   Classifying   Software   for   Reusability ,   IEEE   Software ,   Vol.4 ,   No.1 ,   1987 
 8   徐家 福 ,   陈道 蓄 ,   吕   建 ,   王志坚 .   软件 自动化 .   北京 ： 清华大学出版社 ,   南宁 ： 广西 科学技术 出版社 ,   1996 
 9   徐正权 .   软件 生产线 方法 .   小型 微型 计算机系统 ,   1999 
 10   徐正权 .   软件 复用 方法 与 技术 .   武汉 ： 华中理工大学 出版社 ,   1998 
 收稿 日期 ： 1999 年 7 月 7 日 
