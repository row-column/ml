软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 1 期   No.1   1999 
 
 
 
 多媒体 对象 的 Agent 展示 集成 模型 * 
 巩志国   周龙骧 
 　 　 摘要 　 根据 多媒体 对象 的 面向对象 特点 , 给出 了 一种 基于 “ 事件 - 条件 - 动作 ” 的 Agent 展示 集成 模型 . 该 模型 集 对象 的 内容 、 时序 、 空间 关系 于 一体 , 通过 消息传递 与 对象 展示 状态 事件 控制 对象 展示 集成 的 行为 , 保证 了 对象 的 封装 性 , 并 对 用户 的 交互 提供 有力 的 支持 , 是 一种 动态 集成 模型 . “ 事件 - 条件 - 动作 ” 机制 是 主动 数据库 中 广泛 采用 的 方法 , 已有 成熟 的 技术支持 . 通过 对 Allen 所 定义 的 时序 关系 的 表示 , 说明 了 模型 的 表达能力 , 并 通过 实例 加以 验证 . 指出 了 展示 集成 模型 在 多媒体数据库 中 的 作用 . 
 　 　 关键词 　 Agent 模型 , 展示 集成 , 面向对象 , 多媒体 对象 , 时序 关系 , 空间 关系 . 
 　 　 中图法 分类号 　 TP391 
 An   Agent   Model   for   Integration   of   Multimedia   Object   Presentation 
 GONG   Zhi - guo   ZHOU   Long - xiang 
 　 　 Abstract 　 In   this   paper ,   an   agent   model   for   the   integration   of   multimedia   object   presentation   is   established   by   using   events - conditions - actions   mechanism   and   considering   object - oriented   characteristics   of   multimedia   objects .   This   model   is   a   dynamic   model ,   which   integrates   contents ,   temporal   relations   and   spatial   relations   of   multimedia   objects   and   supports   user   interactions .   Because   it   controls   objects   by   message   passing ,   the   encapsulations   of   objects   can   be   maintained .   Events - conditions - actions   mechanism   is   employed   in   active   database   intensively   and   has   mature   technologies .   The   expressive   ability   of   this   model   is   described   by   using   it   to   the   temporal   relations   defined   by   Allen ,   and   it   is   also   verified   with   an   example .   Its   contributions   to   multimedia   database   systems   are   also   analyzed . 
 　 　 Key   words 　 Agent   model ,   presentation   integration ,   object - oriented ,   multimedia   objects ,   temporal   relations ,   spatial   relations . 
 　 　 当前 在 多媒体 数据模型 的 研究 中 , 面向对象 模型 普遍 被 认为 是 一种 比较 合适 的 多媒体 数据 描述 方法 . ［ 1 ～ 6 ］ 这 主要 是因为 面向对象 理论 中 的 继承性 、 封装 性 和 可扩展性 非常适合 于 多媒体 对象 的 特点 : 多媒体 对象 操作 的 复杂性 对外 透明 ； 多媒体 对象 之间 复杂 的 语义 关系 被 模型 化 ； 方法 的 可 重构 性使 具有 相同 操作 和 管理 特点 的 多媒体 对象 接口 统一 ［ 1 ］ ； 面向对象 机制 对于 基于 集合 的 查询 与 导航 式 浏览 的 支持 等 . 这些 特点 导致 众多 专家学者 对 它 的 偏爱 . 但是 , 对于 多媒体 对象 的 集成 （ Integration ) , 面向对象 的 引用 （ Reference ) 特性 不足以 刻画 多媒体 对象 之间 的 展示 关系 ( Presentation   Relation ) . 多媒体 数据 与 传统 数据 ( 字符 、 数值 ) 之间 的 重要 区别 在于 , 其 展示 特性 必须 被 模型 化 . 复合 多媒体 对象 不仅 要 体现 与子 对象 之间 的 内容 语义 关系 ( Reference ) , 而且 还 必须 体现 复合 媒体 中 各子 对象 之间 的 时间 调度 关系 和 空间布局 关系 , 否则 , 势必 影响 用户 对 复合 媒体 对象 内容 的 理解 . 因此 , 多媒体 对象 之间 的 展示 关系 必须 被 充分考虑 . 
 　 　 纵观 多媒体 对象 的 各种 集成 方法 ［ 3 , 7 ～ 10 ］ , 其 时序 关系 一般 是 通过 链接 方式 、 图 方式 或 算子 方式 来 刻画 的 . 链 方式 就是 通过 在 对象 之间 定义 链 的 方法 来 表示 多媒体 对象 之间 的 时序 同步 . ［ 7 , 8 ］ 这种 方法 的 语义 简单 , 比较 自然 , 但 对于 同步 语义 的 表示 则 非常 有限 , 不足以 反映 出 多媒体 对象 时序 同步 的 动态变化 特征 . 另外 , 链接 定义 往往 是 基于 实例 的 , 繁琐 且易 出错 . 算子 方式 是 用 符号 表示 由 Allen ［ 11 ］ 所 定义 的 13 种 时序 关系 . 进而 , 多媒体 对象 之间 的 时序 同步 可以 用 这些 算符 与 对象 的 有效 表达式 来 表示 . ［ 3 ］ 直接 通过 单独 定义 的 时序 运算符 来 操作 多媒体 对象 , 显然 破坏 了 对象 机制 的 封装 特性 . 图 方式 是 指用 加以 扩展 的 有向图 方法 表示 多媒体 对象 之间 的 同步 关系 . 由于 时间 Petri 网对 并行 、 并发 及 串行 的 表示 非常 有力 , 从而 被 人们 普遍 采用 . ［ 9 , 10 ］ 这种 方法 的 特点 是 直观 , 对于 时间 同步 具有 很 好 的 表达能力 . 但 这种 方法 一般 要求 事先 确定 出 媒体 对象 的 展示 时间 . 这 一点 过于 苛刻 , 因为 用户 的 交互 及 系统 负荷 的 变化 都 可能 动态 影响 展示 时间 . 所以 , 用户 容许 有 一定 的 抖动 ( Jitter ) 和 延时 ( Latency ) . 另外 , 这种 模型 是 一种 表示 模型 ( Represent   Model ) , 实现 时 必须 变换 成可 操作 模型 , 其 转换 过程 也 是 相当 复杂 的 . 
 　 　 Agent 是 人工智能 领域 里 发展 起来 的 一种 新型 计算 模型 ［ 12 ］ , 现在 尚无 统一 的 定义 . 但 有 一点 可以 肯定 , 即 Agent 具有 功能 的 连续性 及 自主性 ( Autonomy ) . 也就是说 , Agent 能够 连续不断 地 感知 外界 发生 的 以及 自身 状态 的 变化 , 并 自主 产生 相应 的 动作 . 对 Agent 更 高 的 要求 可 让 其 具有 认知 功能 ( Cognitive - like   Function ) , 以 达到 高度 智能化 的 效果 . 由于 Agent 的 上述 特点 , Agent 被 广泛应用 于 分布 计算环境 , 用于 协同 计算 以 完成 某项 任务 . 我们 采用 Agent 模型 方式 控制 并 协调 多媒体 对象 展示 行为 的 集成 , 以 克服 当前 多媒体 对象 时序 同步 所 遇到 的 问题 . 
 　 　 本文 首先 给出 Agent 模型 的 基本 运作 机制 , 分析 了 多媒体 对象 展示 集成 中 的 事件 、 条件 和 动作 类型 , 设计 了 一种 控制 多媒体 对象 展示 的 控制 元 ( Cell ) 结构 , 并 对 其 表达能力 进行 了 验证 . 定义 了 屏幕 布局 中 的 几个 基本概念 , 进一步 给出 了 Agent 模型 结构 BNF 描述 , 最后 分析 了 该 模型 在 多媒体数据库 系统 中 的 重要 作用 . 
 1 　 多媒体 对象 集成 的 基本 Agent 机制 
 　 　 Agent 模型 的 结构 尚无 标准 可言 . 文献 ［ 12 ］ 把 Agent 描述 为 4 个 智能 ( Mental ) 构件 的 组合 , 这 4 个 智能 构件 分别 为 beliefs , capabilities , choices 和 commitments . 其中 beliefs 定义 了 Agent 所 具有 的 知识 ； capabilities 描述 的 是 Agent 所 具有 的 处理 能力 ； choices 为 Agent 对 某 一 动作 的 执行 ； commitments 描述 了 Agent 对 其他 Agent 所 承担 的 责任 . 另外 , 为 使 基于 这 4 个 智能 构件 的 Agent 运作 , 还 必须 引入 各种 条件 和 规则 . 该 方法 智能 描述 程度 高 , 适合 于 拟人化 系统 的 刻画 , 但 其 结构复杂 、 实现 困难 , 且 不 适合 于 对 多媒体 对象 的 集成 描述 . 我们 根据 多媒体 对象 展示 集成 的 需求 , 构造 出 基于 事件 ( Events ) 、 条件 ( Conditions ) 和 动作 ( Actions ) 的 Agent 模型 结构 . 其 技术 特点 是 ： ( 1 )   多媒体 对象 已经 存在 , 我们 对 其 集成 操作 只能 通过 消息传递 （ Message   Passing ） ； ( 2 )   多媒体 对象 有 主动 对象 ( Audio , Video , Animation ) 与 被动 对象 ( Text , Image ) 之分 . 主动 对象 能够 返回 展示 的 结束 状态 , 而 被动 对象 的 结束 只有 通过 Agent 发送 的 终止 消息 来 实现 ； ( 3 )   Agent 为 状态 结构 与 通讯 的 封装 体 , 可 被 用户 或 其他 Agent 直接 引用 ； ( 4 )   支持 局部 于 Agent 的 展示 控制 , 能够 根据 外部 的 展示 请求 或 内部 对象 的 展示 状态 决定 自身 的 展示 行为 ； ( 5 )   若干 Agent 可以 合成 为 更 复杂 的 Agent , 以便 完成 更 复杂 的 多媒体 对象 集成 ； ( 6 )   Events - conditions - actions 为 主动 数据库 广泛 采用 的 机制 ［ 13 ］ , 已有 成熟 的 技术 . 我们 这里 的 Agent 模型 以此 为 基础 , 可以 保证 Agent 的 运行 效率 , 且 易于 实现 . 
 　 　 多媒体 对象 展示 Agent 集成 模型 的 运行机制 如图 1 所示 . Agent 的 消息 接口 感知 外部 消息 、 时钟 报警 以及 对象 的 展示 状态 变化 所 产生 的 消息 , 过滤 掉 无用 的 消息 , 对 事件 状态 进行 更新 , 对 条件 进行 赋值 , 然后 , Agent 需 检查 条件 满足 的 情况 , 进一步 执行 条件 与 动作 的 匹配 . 对于 为 真的 条件 , 执行 相应 的 动作 . 这里 , 动作 执行 的 内容 就是 传送 相应 的 展示 请求 到 对象 或 设置 时钟 延时 报警 . 多媒体 对象 接收 到 Agent 所 发来 的 消息 后 , 会 按 消息 内容 展示 , 并 产生 相应 的 展示 开始 事件 . 主动 对象 能够 反馈 自身 的 结束 状态 , 而 被动 对象 展示 状态 的 改变 只有 依靠 Agent 的 调度 命令 . 这种 多媒体 对象 展示 集成 机制 的 特点 在于 ： 
 　 　 ( 1 )   模型 基于 events - conditions - actions , 这是 主动 数据库 中 广泛 采用 的 机制 , 可使 以 事件驱动 为 核心 的 系统控制 结构 简单 清晰 . 
 　 　 ( 2 )   Agent 通过 消息 机制 实现 对 多媒体 对象 的 展示 控制 , 维护 了 对象 的 封装 性 , 有利于 对象 的 分布 存储 . 
 　 　 ( 3 )   对象 展示 状态 的 变化 （ 展示 开始 、 展示 结束 ） 作为 它们 的 时序 同步 点 , 可 保证 主动 多媒体 对象 （ Audio , Video , Animation ) 的 展示 主动性 , 无需 事先 给出 其 展示 时间 , 使 多媒体 对象 时序 同步 描述 更加 自然 . 因为 多媒体 展示 时 , 用户 的 交互 比 传统 要 频繁 , 这 势必 影响 媒体 的 播放 时间 . 所以 , 预先确定 其 展示 时间 的 方法 很 不 自然 . 
 　 　 ( 4 )   引入 时钟 对象 概念 . 这样 , 可 由 Agent 设置 被动 对象 （ Text , Image ） 的 展示 时间 , 或 利用 时钟 对象 报警 强制 结束 主动 对象 的 展示 . 
 　 　 ( 5 )   利用 条件 （ Conditions ） 概念 可 灵活 设置 多媒体 对象 同步 策略 , 即 先者 等待 、 令 延迟 者 加速 及 终止 延迟 者 . 
 　 　 ( 6 )   利用 外部 事件 （ 其他 Agent 或 用户 产生 的 事件 ） 与 内部 对象 的 展示 状态 事件 控制 对象 展示 的 时序 集成 , 可 使 用户 参与 媒体 的 同步 展示 . 所以 , 这种 时序 集成 模式 对 Hypermedia 有 充分 的 支持 . 
 
 图 1 　 Agent 调度 机制 
 2 　 事件 、 条件 和 动作 
 　 　 事件 （ Events ） 是 Agent 控制 调度 多媒体 对象 展示 的 动力 , 即 Agent 由 事件驱动 . 在 主动 数据库 理论 研究 与 应用 中 , 所指 事件 一般 为 基于 事务 的 发生 . 我们 这里 所 考虑 的 事件 用来 服务 于 多媒体 对象 同步 展示 的 描述 , 分为 两类 ： 外部 事件 和 内部 事件 . 
 　 　 外部 事件 描述 了 Agent 模型 的 外部 接口 , 用户 或 其他 Agent 只有 通过 产生 这些 外部 事件 才能 激活 、 控制 或 结束 Agent 的 活动 . 这些 外部 事件 为 ： start - com : 激活 Agent ; stop - com : 结束 Agent 的 活动状态 ; choice1 : 用户 自定义 事件 1 ; choice2 : 用户 自定义 事件 2 ; ... ; choicen : 用户 自定义 事件 n . 
 　 　 事件 start - com 导致 Agent 活动 的 开始 , 在 这里 也 就是 Agent 控制 一组 多媒体 对象 的 展示 调度 的 开始 点 . 事件 stop - com 可使 Agent 的 展示 调度 结束 . 事件 choice1 , choice2 , ... , choicen 可 用于 外部 ( 用户 或 其他 Agent ) 参与 该 Agent 展示 调度 的 控制 . 
 　 　 内部 事件 反映 Agent 的 子 对象 展示 活动 的 状态 或 时钟 状态 所 产生 的 事件 , Agent 可以 根据 这些 内部 事件 自主 控制 对象 的 展示 调度 . 我们 模型 中 的 内部 事件 为 ： object . s : 对象 object 展示 开始 ; object . e : 对象 object 展示 结束 ; h . alarming ： 句柄 为 h 的 时钟 报警 . 
 　 　 一旦 对象 接收 到 Agent 发来 的 展示 请求 消息 , 则 立刻 返回 展示 开始 的 状态 事件 . 在此之后 , 若 对象 接收 到 Agent 发来 的 终止 命令 或 对象 已 自行 展示 结束 （ 对 主动 对象 来讲 ） , 则 返回 对象 展示 结束 消息 object . e 给 Agent . 在 我们 的 调度 模型 中 , Agent 有 一个 时钟 子 对象 clock , 可以 利用 时钟 的 延时 报警 方式 , 让 Agent 控制 对象 的 展示 行为 , 时钟 报警 所 产生 的 事件 为 h . alarming , 这里 h 表示 所 对应 的 报警 设置 产生 的 消息 . 
 　 　 在 主动 数据库 理论 中 , 条件 （ Conditions ） 被 定义 为 对 数据库 状态 及 事务处理 历史 状态 的 监视 . ［ 13 ］ 在 我们 的 模型 中 , 条件 的 含义 是 指 Agent 事件 发生 历史 的 监视 . 事件 发生 的 历史 状态 决定 了 Agent 对 其 对象 的 展示 控制 的 执行 （ 即 动作 的 实施 ） . 亦 即 , 只有 在 条件 满足 的 情况 下 , Agent 才 向 其子 对象 传递 控制 命令 . 这样 可 充分发挥 对象 （ 尤其 是 主动 对象 ） 展示 的 主动性 , 适应 于 系统 负荷 或 网络通信 状态 的 动态变化 . 
 　 　 我们 用 ei 表示 事件 （ 内部 事件 或 外部 事件 ） , 引进 事件 谓词 occur ( ei ) , occur ( ei ) = TRUE ( FALSE ) 表示 事件 ei 已 发生 （ 未 发生 ） . 另外 , 我们 引入 逻辑 运算符 “ ∧ ” , “ ∨ ” . 条件 （ Conditions ） 由 事件 谓词 及 运算符 “ ∧ ” , “ ∨ ” 递归 定义 得到 . 
 　 　 定义 1 .   （ 1 ）   设 ei 为 任何 事件 , 则 occur ( ei ) 为 条件 ; （ 2 ）   有限 个 条件 经 逻辑 运算符 “ ∧ ” , “ ∨ ” 的 有限 次 运算 所得 的 逻辑 表达式 仍为 条件 . 
 　 　 例如 , 设 e1 , e2 , e3 为 事件 , 则 occur ( ei ) （ i = 1 , 2 , 3 ） , occur ( e1 ) ∧ occur ( e2 ) , occur ( e1 ) ∨ occur ( e2 ) , occur ( e1 ) ∧ ( occur ( e2 ) ∨ occur ( e3 ) )   均 为 条件 . 对于 任何 多媒体 对象 ( MM - Object ) , 均 对应 于 两种 条件 ： 展示 启动 条件 SC ( start   condition ) 和 展示 结束 条件 EC ( end   condition ) . 一旦 展示 启动 条件 SC 为 TRUE , Agent 传递 展示 消息 给 该 对象 , 随后 Agent 将 监视 该 对象 的 结束 条件 EC 是否 为 TRUE , 以便 终止 该 对象 的 展示 . 
 　 　 动作 ( Actions ) 描述 了 Agent 对 其 多媒体 对象 的 展示 控制 或 对 时钟 对象 的 报警 设置 . 动作 的 实现 通过 消息传递 机制 , 这 保证 了 面向对象 模型 的 封装 性 . 动作 （ 消息 ） 的 格式 为 Message - Name ( receiver , para - list ) . 在 我们 的 多媒体 对象 展示 集成 模型 中 , 动作 类型 主要 有 以下 几种 ： 
 　 　 （ 1 ）   Agent 对 主动 多媒体 对象 ( audio , video ) 控制 动作 
 　 　 　 　 　 　 start ( receiver , para - list ) ； 　 　 　 　 ∥   展示 开始 
 　 　 　 　 　 　 fast ( receiver , para - list ) ; 　 　 　 　 　 ∥   展示 加速 
 　 　 　 　 　 　 backward ( receiver , para - list ) ; 　 　 　 ∥   倒播 
 　 　 　 　 　 　 fastBackward ( receiver , para - list ) ; 　 ∥   快 倒 
 　 　 　 　 　 　 stop ( receiver ) ; 　 　 　 　 　 　 　 　 　 　 ∥   展示 结束 
 　 　 （ 2 ）   Agent 对 被动 多媒体 对象 ( image , text ) 的 控制 动作 
 　 　 　 　 　 　 start ( receiver , para - list ) ； 　 　 　 　 ∥   展示 开始 
 　 　 　 　 　 　 stop ( receiver , para - list ) ; 　 　 　 　 　 ∥   展示 结束 
 　 　 （ 3 ）   Agent 对 时钟 对象 的 控制 为 
 　 　 　 　 　 　 setclock ( handle , delay ) ; 　 　 　 　 　 　 ∥   设置 以 handle 为 柄 , 延时 delay 后 报警 
 　 　 　 　 　 　 cancel ( handle ) ; 　 　 　 　 　 　 　 　 　 　 ∥   取消 柄 为 handle 的 报警 设置 
 　 　 动作 的 执行 （ 消息 的 发送 ） 会 导致 对象 展示 状态 变化 的 事件 发生 , 我们 特别 注意 的 两种 展示 状态 变化 事件 为 展示 开始 obj . s 和 展示 结束 obj . e . Start 动作 的 完成 导致 对象 obj 展示 开始 事件 obj . s 的 发生 , 而 Stop 动作 的 完成 导致 对象 结束 事件 obj . e 的 发生 . 主动 对象 可 识别 到 自身 的 展示 状态 的 结束 , 自动 返回 事件 obj . e . 用于 展示 同步 的 另 一 事件 为 时钟 报警 handle . alarming . 
 3 　 控制 元 对 时序 关系 的 表示 
 　 　 Agent 动作 与 受控对象 展示 事件 的 关系 如图 2 所示 . 
 
 图 2 　 动作 与 事件 之间 的 关系 
 　 　 任何 对象 的 展示 活动 均 由 Agent 协调控制 , 针对 每个 对象 在 Agent 控制结构 中 存在 一个 控制 元 cell . 控制 元 由 展示 启动 条件 SC , 展示 动作 SA , 结束 条件 EC , 结束 动作 EA 描述 . 我们 用 cell 表示 图 2 所示 的 控制结构 如下 ： 设 SC 为 x （ 条件 变量 ） , 
 　 　 （ 1 ）   cell1 = { SC ： x ； SA ： start ( obj , para - list ) ； EC ： occur ( obj . e ) ； EA ： φ ； } ( φ 表示 空 , 下同 ) . 
 该 控制 元 表示 Agent 检测 到 条件 x 为 真后 , 传递 开始 消息 给 对象 obj , obj 展示 结束 条件 为 自身 产生 的 终止 消息 , 结束 动作 为空 , 表示 无需 终止 命令 . 
 　 　 （ 2 ）   cell2   = { SC ： x ； SA ： start ( obj , para - list ) , setclock ( h , delay ) ； EC ： occur ( h . alarming ) ； EA ： stop ( obj ) } 
 cell2 表示 条件 x 为 真后 , 触发 对 obj 展示 消息 的 传递 , 并 同时 设置 延时 为 delay , 句柄 为 h 的 时钟 报警 . 一旦 时钟 报警 事件 h . alarming 发生 , 则 obj 展示 结束 . 
 　 　 Allen ［ 11 ］ 将 时间 关系 定义 为 13 种 ： before , meets , overlaps , during , starts , finishes , equals 及前 6 种 的 逆 关系 . 因为 逆 关系 为 非本质 的 , 实际 仅 有 7 种 基本 关系 . 为 节省 篇幅 , 我们 仅 给出 两种 时序 关系 的 表示 . 
 　 　 （ 1 ）   Ｏ 1   before   Ｏ 2 
 　 　 ( 1 . a )   O1 , Ｏ 2 均 为 主动 对象 时 , 
 　 　 　 　 cell ( O1 ) = { SC ： x ； SA ： start ( O1 , p1 ) ； EC ： occur ( O1 . e ) ； EA ： φ ； } 
 　 　 　 　 cell ( τ ) = { SC ： occur ( Ｏ 1 . e ) ； SA ： setclock ( h , τ ) ； EC ： occur ( h . alarming ) ； EA ： φ ； } 
 　 　 　 　 cell ( Ｏ 2 ) = { SC ： occur ( h . alarming ) ； SA ： start ( Ｏ 2 , p2 ) ； EC ： occur ( Ｏ 2 . e ) ； EA ： φ ； } 
 　 　 ( 1 . b )   O1 , O2 均 为 被动 对象 时 , 
 　 　 　 　 cell ( Ｏ 1 ) = { SC ： x ； SA ： start ( Ｏ 1 , p1 ) , setclock ( h1 , d1 ) ； EC ： occur ( h1 . alarming ) ； EA ： stop ( Ｏ 1 ) } 
 　 　 　 　 cell ( τ ) = { SC ： occur ( h1 . alarming ) ； SA ： setclock ( h τ , d τ ) ； EC ： occur ( h τ . alarming ) ； EA ： φ ； } 
 　 　 　 　 cell ( Ｏ 2 ) = { SC ： occur ( h τ . alarming ) ； SA ： start ( Ｏ 2 , p2 ) , setclock ( h2 , d2 ) ； EC ： occur ( h2 . alarming ) ； 
 EA ： stop ( O2 ) ； } 
 　 　 ( 2 )   Ｏ 1   overlaps   Ｏ 2 
 　 　 ( 2 . a )   Ｏ 1 , Ｏ 2 均 为 主动 对象 时 , 
 　 　 　 　 cell ( Ｏ 1 ) = { SC ： x ； SA ： start ( Ｏ 1 , p1 ) , setclock ( h , τ ) ； EC ： occur ( Ｏ 1 . e ) ； EA ： φ ； } 
 　 　 　 　 cell ( O2 ) = { SC ： occur ( h . alarming ) ； SA ： start ( Ｏ 2 , p2 ) ； EC ： occur ( Ｏ 2 . e ) ； EA ： φ ； } 
 　 　 ( 2 . b )   O1 , O2 均 为 被动 对象 时 , 
 　 　 　 　 cell ( Ｏ 1 ) = { SC ： x ； SA ： start ( Ｏ 1 , p1 ) , setclock ( h1 , d1 ) , setclock ( h τ , d τ ) ； EC ： occur ( h1 . alarming ) ； EA ： stop ( Ｏ 1 ) } 
 　 　 　 　 cell ( Ｏ 2 ) = { SC ： occur ( h τ . alarming ) ； SA ： start ( Ｏ 2 , p2 ) , setclock ( h2 , d2 ) ； EC ： occur ( h2 . alarming ) ； EA ： stop ( Ｏ 2 ) } 
 　 　 以上 介绍 了 两种 用 cell 表示 的 时序 关系 , 其余 不再 赘述 . 可见 此 方法 对 多媒体 同步 策略 设置 的 灵活性 . 
 4 　 多媒体 展示 的 空间布局 
 　 　 多媒体 展示 集成 的 另 一个 重要 问题 是 多媒体 对象 展示 的 空间布局 结构 ( Spatial   Layout   Architecture ) . 对于 复合 媒体 对象 , 其 各个 对象 的 空间 关系 应 缺省 存在 . 这一 特性 应 成为 多媒体 对象 集成 的 一部分 . 一般来讲 , 对于 image , video , animation 等 对象 , 在 创建 时 已经 保存 了 其内 在 显示 尺寸 . 但是 , 复合 媒体 对象 作为 一个 整体 的 布局 考虑 , 其 展示 时 的 大小 必须 重新 确定 . Text 对象 属性 一般 不 包含 其 显示 区域 的 大小 , 因此 在 复合 媒体 中 必须 增加 . 而 audio 对象 的 显示 设备 为 扬声器 , 在 集成 中有 两种 参数 需 考虑 ： 音量 ( Volume ) 和 平衡 ( Balance ) . 除了 自身 的 显示 尺寸 外 , 各 媒体 对象 之间 的 空间布局 必须 给定 . 
 　 　 文献 ［ 14 ］ 把 空间 关系 ( Spatial   Relations ) 分为 两大类 ： 物理 位置 关系 和 逻辑 位置 关系 . 物理 位置 关系 是 指地 理性 的 位置 关系 , 如 , 东 、 西 、 南 、 北等 , 而 逻辑 位置 关系 是 指 抽象 的 位置 关系 . 多媒体 对象 的 空间 关系 是 指 逻辑 位置 关系 , 因此 , 下面 所述 的 空间 关系 均 指 逻辑 位置 关系 . 根据 文献 ［ 14 ］ 中 的 讨论 , 空间 关系 可 分为 DJ ( 分离 ) , EC ( 外切 ) , IS ( 内含 ) , OL ( 交搭 ) , CV ( 内切 ) , EQ ( 相等 ) （ 如图 3 所示 ） . 而 DJ 关系 又 可 细分 为 LT ( 左 ) , RT ( 右 ) , AB ( 上 ) , BL ( 下 ) 等 方向 关系 . 复合 媒体 的 空间 关系 通过 每个 对象 展示 区域 的 屏幕 坐标 及 大小 被 隐含 确定 . 根据 文献 ［ 15 ］ 对 Screen ( 屏 ) 与 Frame ( 帧 ) 的 定义 , 进行 适当 扩充 与 修改 , 我们 有 ： 
 　 　 screen ∷ = SCREEN : { 〈 frame 〉 * | ( 〈 frame 〉 * 〈 speaker 〉 ) * | 〈 speaker 〉 * } , 
 　 　 frame ∷ = 〈 x - origin , y - origin , width , height 〉 , 
 　 　 speaker ∷ = 〈 volume , balance 〉 . 
 
 图 3 　 空间 关系 
 　 　 Screen 概念 为 显示 设备 的 逻辑 表示 , 它 由 一个 或 多个 frame 及 speaker 的 组合 描述 . 而 frame 定义 了 可视化 对象 的 显示 区域 , 它 由 区域 位置 与 区域 大小 描述 . speaker 为 声频 对象 的 显示 特性 描述 , 它 由 音量 与 平衡 组成 . 图 4 刻画 了 复合 媒体 的 一种 布局 设计 . 
 
 图 4 　 屏幕 布局 设计 
 5 　 Agent 展示 集成 模型 结构 
 　 　 Agent 模式 ( Pattern )   刻画 了 一组 多媒体 对象 之间 的 展示 行为 关系 , 完成 整个 复合 对象 的 展示 任务 . Agent 模式 给出 了 复合 对象 展示 的 形式化 描述 . 其 描述 要素 概括 为 ： ( 1 )   外部 事件 , 定义 了 其他 Agent 或 用户 对 复合 对象 的 展示 操作 所 产生 的 事件 ; ( 2 )   Agent 所 集成 的 每个 多媒体 对象 的 类型 名 ; ( 3 )   报警 时钟 类型 名 , 对 每 一组 对象 集成 只有 一个 类型 名 ; ( 4 )   屏幕 布局 描述 , 刻画 了 各 对象 的 显示 位置 与 大小 及 声音 输出特性 ; ( 5 )   每种 多媒体 类型 的 展示 调用 消息 集合 ; ( 6 )   每种 多媒体 类型 展示 状态 产生 的 事件 — — 当 多媒体 响应 展示 调用 消息 后 , 由于 其 展示 状态 的 变化 所 产生 的 状态 事件 ; ( 7 )   一组 基于 events - conditions - actions 的 展示 控制 元 cell . cell 的 定义 描述 了 一个 或 几个 多媒体 对象 并行 同步 关系 . Agent 模式 中 所有 控制 元 所 构成 的 集合 刻画 了 整个 复合 对象 的 展示 调度 行为 . 
 　 　 定义 2 .   一个 Agent 集成 模式 α 的 BNF 形式 描述 如下 ： 
 　 　 〈 α 〉 ∷ = 〈 agent   name 〉 〈 set   of   external   events 〉 〈 set   of   roles 〉 〈 screen   layout 〉 〈 set   of   cells 〉 , 
 　 　 〈 agent   name 〉 ∷ = string , 
 　 　 〈 set   of   external   events 〉 ∷ = EXT - EVT : 〈 start - com 〉 〈 stop - com 〉 〈 choice 〉 * , 
 　 　 〈 set   of   roles 〉 ∷ = ROLES : 〈 role 〉 * , 
 　 　 〈 role 〉 ∷ = 〈 object   type 〉 〈 message   List 〉 〈 status 〉 〈 events 〉 , 
 　 　 〈 object   type 〉 ∷ = string , 
 　 　 〈 message   List 〉 ∷ = 〈 message 〉 * , 
 　 　 〈 message 〉 ∷ = 〈 mes - name 〉 〈 receiver 〉 〈 parameter - list 〉 , 
 　 　 〈 status 〉 ∷ = 〈 alive 〉 〈 dead 〉 , 
 　 　 〈 events 〉 ∷ = 〈 start   events 〉 〈 stop   events 〉 , 
 　 　 〈 screen   layout 〉 ∷ = SCREEN : { 〈 frame 〉 * | ( 〈 frame 〉 * 〈 speeker 〉 ) * | 〈 speaker 〉 * } , 
 　 　 〈 frame 〉 ∷ = 〈 x - origin , y - origin , width , height 〉 , 
 　 　 〈 speaker 〉 ∷ = 〈 volume , balance 〉 , 
 　 　 〈 set   of   cell 〉 ∷ = CELLS : 〈 cell 〉 * , 
 　 　 〈 cell 〉 ∷ = 〈 start   condition 〉 〈 start   actions 〉 〈 end   condition 〉 〈 end   actions 〉 . 
 6 　 应用 举例 
 　 　 某 城市 旅游 信息 由 下列 多媒体 对象 组成 ： ( 1 )   城市 风光 视频 对象 : City - Video ; ( 2 )   相对 于 City - Video 的 声频 注解 对象 : City - Audio ; ( 3 )   两张 古建筑 照片 ; Image1 , Image2 ; ( 4 )   与 每张 古建筑 照片 相对 应 的 一段 中文 文字 介绍 : Chinese - Text1 , Chinese - Text2 ; ( 5 )   相对 于 每张 古建筑 照片 的 英文 文字 介绍 : English - Text1 , English - Text2 . 由 以上 各 多媒体 对象 构成 多媒体 复合 对象 City - Scene , 对 City - Scene 中 各 对象 之间 的 展示 关系 描述 如下 : 
 　 　 （ 1 ）   复合 对象 展示 开始 播放 City - Video 时 , 声频 对象 City - Audio 并行 播出 . 因为 City - Video , City - Audio 皆 为 主动 对象 , 其 展示 状态 具有 主动性 , 要求 在 这 两个 对象 都 结束 后 , 才 进行 以后 的 展示 . 
 　 　 （ 2 ）   City - Video , City - Audio 并行 播放 完后 , 自动 进入 古建筑 照片 的 展示 , 照片 的 展示 顺序 为 Image1 , Image2 . 每张 照片 显示 时 , 同时 伴随 其中 文 文字 介绍 及 英文 文字 介绍 . 因为 照片 、 文本 皆 为 被动 对象 , 我们 利用 时钟 设置 其 时间 , 每张 照片 展示 t 秒 . 最后 一张 照片 展示 完后 , 整个 复合 对象 展示 结束 . 
 　 　 Agent 展示 集成 定义 如下 : 
 　 　 City - Scene 
 　 　 { 
 　 　 EXT - EVT : start - com , stop - com ; 
 　 　 ROLES : 
 　 　 　 video : City - Video ; 
 　 　 　 audio : City - Audio ; 
 　 　 　 image : Image1 , Image2 ; 
 　 　 　 text : Chinese - Text1 , Chinese - Text2 , English - Text1 , English - Text2 ; 
 　 　 SCREEN : 
 　 　 　 City - Video - frame = ( x1 , y1 , width1 , height1 ) ; 
 　 　 　 City - Audio - speaker = ( volume , balance ) ; 
 　 　 　 Image1 - frame = Image2 - frame = ( x2 , y2 , width2 , height2 ) ; 
 　 　 　 Chinese - Text1 - frame = Chinese - Text2 - frame = ( x3 , y3 , width3 , height3 ) ; 
 　 　 　 English - Text1 - frame = English - Text2 - frame = ( x4 , y4 , width4 , height4 ) ; 
 　 　 CELLS : 
 　 　 　 cell1 = 
 　 　 　 { 
 　 　 　 SC : occur ( start - com ) ； 
 　 　 　 SA : start ( City - Video , City - Video - frame ) , start ( City - Audio , City - Audio - speaker ) ; 
 　 　 　 EC : occur ( City - Video . e ) ∧ occur ( City - Audio . e ) ; 
 　 　 　 EA :  : 
 　 　 　 } 
 　 　 　 cell2 = 
 　 　 　 { 
 　 　 　 SC : occur ( City - Video . e ) ∧ occur ( City - Audeo . e ) ; 
 　 　 　 SA : start ( Image1 , Image1 - frame ) , 
 　 　 　 　 start ( Chinese - Text1 , Chinese - Text1 - frame ) , 
 　 　 　 　 start ( English - Text1 , English - Text1  - frame ) , 
 　 　 　 　 setclock ( h1 , t ) ; 
 　 　 　 EC : occur ( h1 . alarming ) , 
 　 　 　 EA : stop ( Image1 ) , stop ( Chinese - Text1 ) , stop ( English - Text1 ) ; 
 　 　 　 } 
 　 　 　 cell3 = 
 　 　 　 { 
 　 　 　 SC : occur ( h1 . alarming ) ; 
 　 　 　 SA : start ( Image2 , Image2 - frame ) , 
 　 　 　 　 start ( Chinese - Text2 , Chinese - Text2 - frame ) , 
 　 　 　 　 start ( English - Text2 , English - Text2 - frame ) , 
 　 　 　 　 setclock ( h2 , t ) ; 
 　 　 　 EC : occur ( h2 . alarming ) , 
 　 　 　 EA : stop ( Image2 ) , stop ( Chinese - Text2 ) , stop ( English - Text2 ) ; 
 　 　 　 } 
 7   总   结 
 　 　 时序 属性 与 空间 属性 为 多媒体 对象 所 固有 的 性质 . 因此 , 多媒体 对象 的 集成 不但 要 包括 内容 集成 , 而且 还 必须 考虑 时序 集成 与 空间 集成 . 同样 的 内容 , 不同 的 时序 集成 或 空间 集成 会 有 不同 的 视觉效果 , 甚至 影响 对 复合 对象 的 理解 . 
 　 　 在 多媒体数据库 理论 研究 文献 中 ［ 1 ～ 5 ］ , 一般 比较 一致 地 选择 面向对象 的 范型 作为 多媒体 对象 存储 与 管理 的 模式 . 通过 PART - OF 关系 定义 复合 对象 的 内容 构成 . 但是 , 这些 文献 对于 多媒体 复合 中 的 时序 关系 与 空间 关系 的 讨论 较 少 , 甚至 没有 涉及 . 例如 , 文献 ［ 4 ］ 将 对象 之间 的 空间 关系 抽象地 表示 为 Left , Right , Above , Below 等 , 时序 关系 表示 为 Before , After , During , At 等 , 而 这些 关系 的 实现 只能 在 应用 中 解决 . 文献 ［ 3 ］ 是 在 对象 概念 之上 , 利用 算子 的 方式 定义 复合 对象 的 展示 关系 , 该 方法 存在 同样 的 问题 . 另一方面 , 在 商业化 的 数据库系统 中 ( DB2 , Informix , Oracle , Sybase 等 ) , 通常 提供 抽象数据类型 ( Abstract   Type ) 及 用户 自定义 函数 ( User   Defined   Functions ) 等 特性 , 将 多媒体 数据 存储 为 BLOB 方式 , 使 关系 模式 扩充 为 对象 - 关系 型 模式 . DB2 是 这 一 技术 的 典型 代表 . ［ 16 ］ 这种 范型 依赖于 关系数据库 成熟 的 技术 , 因此 具有 高效 、 可靠 、 实用 等 特点 . 对于 多媒体 对象 的 集成 , 可以 利用 在 同一 元组 ( Tuple ) 中 定义 多个 BLOB 项 或 联结 ( Join ) 运算 实现 内容 上 的 集成 . 但 对于 对象 之间 的 时序 与 空间 关系 描述 没有 提供 有效 的 手段 , 仍 需 在 应用 中 解决 . 
 　 　 多媒体 对象 的 集成 是 多媒体数据库 系统 的 重要 组成部分 . 根据 我们 已经 开发 成功 的 多媒体数据库 系统 CDB / M , 我们 对 其 进行 了 扩展 ［ 6 , 15 ］ , 其中 包含 了 多媒体 对象 的 展示 集成 功能 . 我们 所 给出 的 Agent 集成 模型 是 一种 对象 行为 上 的 集成 . 该 模型 集 内容 、 时序 、 空间 关系 于 一体 , 描述 了 复合 对象 与 其子 对象 之间 的 通讯 关系 . 所 定义 的 对象 之间 的 展示 关系 无需 翻译 , 可 直接 实现 . 集成 模型 与 对象 模型 为 紧 耦合 , 充分保证 了 对象 的 封装 性及 多媒体数据库 的 高效率 . 同时 , 展示 集成 模型 对 用户 的 交互 具有 充分 的 支持 , 是 一种 动态 集成 模型 . 使 用户 不但 在 对象 级 , 而且 在 对象 展示 行为 上 得到 共享 . 我们 拟用 独立 于 平台 的 Java 语言 重写 多媒体数据库 系统 CDB / M , 这样 有利于 Agent 在 网络 环境 中 的 流动 . 另外 , 对于 网络通信 延迟 及 用户 的 QoS 需求 对 多媒体 展示 集成 的 影响 , 我们 仍 在 研究 中 . 
 本文 研究 得到 国家 863 高科技 项目 基金 资助 . 
 作者 介绍 ： 巩志国 , 1963 年生 , 博士生 , 主要 研究 领域 为 分布式 数据库系统 , 多媒体数据库 系统 。 
 　 　 　 　 周龙骧 , 1938 年生 , 研究员 , 博士生 导师 , 主要 研究 领域 为 分布式 数据库系统 , 多媒体数据库 系统 . 
 本文 通讯联系 人 ： 巩志国 , 北京   100080 , 中国科学院 数学 研究所 
 作者 单位 ： 巩志国   周龙骧 　 中国科学院 数学 研究所   北京   10008 
 参考文献 
 　 ［ 1 ］ Ishikawa   H ,   Suzuki   F   et   al .   The   model ,   language ,   and   implementation   of   an   object - oriented   multimedia   knowledge   base   management   system .   ACM   Transactions   on   Database   Systems ,   1993 , 18 ( 1 ) : 1 ～ 50 
 　 ［ 2 ］ Ishikawa   H   et   al .   A   next - generation   industry   multimedia   Database   System .   In :   Stanley   Y ,   Su   W   eds .   Proceedings   of   the   12th   International   Conference   on   Data   Engineering .   Los   Alamitos ,   CA :   IEEE   Computer   Society   Press ,   1996 .   364 ～ 371 
 　 ［ 3 ］ Schloss   G   A ,   Wynblatt   M   J .   Providing   definition   and   temporal   structure   for   multimedia   data .   Multimedia   Systems ,   1995 , 3 ( 5 ) : 264 ～ 277 
 　 ［ 4 ］ Narashimhalu   A .   Desai ,   multimedia   databases .   Multimedia   Systems ,   1996 , 4 ( 5 ) : 226 ～ 249 
 　 ［ 5 ］ Chen   C ,   Roger   Y   et   al .   Design   of   a   multimedia   object - oriented   DBMS .   Multimedia   Systems ,   1995 , 3 ( 5 ) : 217 ～ 227 
 　 ［ 6 ］ Gong   Zhi - guo ,   Zhou   Long - xiang .   Analysis   and   study   of   multimedia   database   system .   In :   Masao   Ito ,   Zhong   Xi - chang   eds .   Proceedings   of   the   International   Symposium   on   Future   Software   Technology   ( ISFST - 97 ) .   Tokyo :   Software   Engineers   Association ,   1997 .   125 ～ 132 
 　 ［ 7 ］ ISO .   Hypermedia / Time - based   structure   language :   HyTime   ( ISO   10744 ) .   International   Standard   Organization ,   1992 
 　 ［ 8 ］ ISO .   Multimedia   and   hypermedia   information   coding   expert   group .   ISO / IEC   JTC1 / SC29 / WG12 ,   MHEG   Working   Draft   “ WD.1 . 0 ” ,   Version   1.0 ,   Feb .   1993 
 　 ［ 9 ］ Little   T   D   C ,   Ghafoor   A .   Synchronization   and   storage   models   for   multimedia   objects .   IEEE   Journal   on   Selected   Area   in   Communications ,   1990 , 8 ( 3 ) : 413 ～ 427 
 　 ［ 10 ］ Diaz   M ,   Senac   P . Time   stream   Petri   nets :   a   model   for   multimedia   streams   synchronization .   In :   Tat - Seng   Chua ,   Tosiyasu   L   Kunii   eds .   Multimedia   Modeling   ( MMM ' 93 ) , 　 the   1st   International   Conference   on   Multimedia 　 Modeling .   Singapore :   World   Scientific   Press ,   1993 .   257 ～ 273 
 　 ［ 11 ］ Allen   J   F .   Maintaining   knowledge   about   temporal   intervals .   Communications   of   the   ACM ,   1983 , 26 ( 11 ) : 832 ～ 843 
 　 ［ 12 ］ Shoham   Y .   Agent - oriented   programming ．   Artificial   Intelligence ,   1993 , 60 ( 1 ) : 51 ～ 92 
 　 ［ 13 ］ Fraternali   P ,   Tanca   L .   A   structured   approach   for   the   definition   of   the   semantics   of   active   databases .   ACM   Transactions   on   Database   Systems ,   1995 , 
 20 ( 4 ) : 414 ～ 471 
 　 ［ 14 ］ Li   J   Z   et   al .   Spatial   reasoning   rules   in   multimedia   management   systems .   In :   Courtial   J   P   ed .   Multimedia   Modeling   ( MMM96 ) ,   the   3rd   International   Conference   on   Multimedia   Modeling .   Singapore :   World   Scientific   Press ,   1996 .   119 ～ 133 
 　 ［ 15 ］ 周龙骧 , 柴兴 无 . 分布式 多媒体数据库 系统 的 分层 体系结构 . 计算机 学报 , 1996 , 19 ( 7 ) : 481 ～ 491 ( Zhou   Long - xiang ,   Chai   Xing - wu .   Hierarchical   Architecture   of   Distributed   Multimedia   Database   Systems .   Chinese   Journal   of   Computers ,   1996 , 19 ( 7 ) : 481 ～ 491 ) 
 　 ［ 16 ］ URL   http : ∥ WWW . software . ibm . com / data / db2 / db2v2 . html 
 本文 1997 - 11 - 20 收到 原稿 , 1998 - 01 - 19 收到 修改稿 
