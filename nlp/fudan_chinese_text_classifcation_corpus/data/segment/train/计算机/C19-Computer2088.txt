计算机 工程 
 COMPUTER   ENGINEERING 
 1999 年   第 25 卷   第 10 期   Vol.25   No.10   1999 
 
 
 
 分布式 虚拟环境 的 几何 数据管理 
 姜晓红 　 潘志庚 　 石教英 
 摘要 ： 在 分析 现有 分布式 虚拟环境 的 数据 几何 复制 方法 之后 ， 提出 了 多 服务器 / 客户 模式 下 采用 分区 管理 几何 数据 的 方法 。 这种 方法 既 利用 了 数据 集中管理 便于管理 实现 的 好处 ， 又 解决 了 单 服务器 / 客户 模式 的 服务器 瓶颈 问题 。 
 关键词 ： 分布式 虚拟环境 ； 服务器 / 客户 模式 ； 数据管理 ； 负载平衡 
 Geometry   Data   Management   for   Distributed   Virtual   Environment 
 Jiang   Xiaohong   Pan   Zhigeng   Shi   Jiaoying 
 ( CAD & CG   State   Key   Laboratory , Department   of   Computer   Science , Zhejiang   University , Hangzhou   310027 ) 
 【 Abstract 】 This   paper   analyses   existing   geometry   replicating   methods   for   DVE , and   presents   a   new   subarea   management   strategy   for   multi   Server / Client   mode . Problems   about   load   balance   and   data   consistency   are   also   discussed . 
 【 Key   words 】 Distributed   virual   environment ; Server / Client   mode ; Data   management ; Load   balance 
 1 　 简介 
 1.1   分布式 虚拟环境 
 　 　 分布式 虚拟环境 ( Distributed   Virtual   Environment ， DVE ) 是 高速 发展 的 计算机技术 与 网络通信 技术 结合 的 产物 。 DVE 的 研究 与 开发 最早 开始 于 80 年代 初 ， 最有 代表性 的 是 美国国防部 为 军事训练 模拟 资助 开发 的 SIMNET 系统 ， 后来 在 其 基础 上 制订 的 DIS 协议   ( Distributed   Interactive   Simulation ) 成 了 DVE 系统 的 一项 标准 。 由于 DVE 系统 在 军事 、 协同 设计 、 多 学科 研究 、 远程教育 、 网上游戏 等 众多 领域 都 有 广泛 的 应用 前景 ，   因此 ， 各国 政府 和 国际 上 一些 著名 的 大学 和 研究所 都 开展 了 研究 ， 开发 了 DVE 实验 系统 或 开发 环境 和 工具 ， 如 美国 NPS 开发 的 NPSNET 、 瑞典 计算机科学 研究所 的 DIVE 、 加拿大 Albert 大学 的 MR 工具 库 、 英国 Nottingham 大学 的 AVIARY ， 以及 著名 的 网络 VR 游戏 Doom 等 。 
 　 　 DVE 系统 指 分布 在 不同 地理位置 的 用户 可以 通过 网络 在 一个 具有 高度 真实感 的 虚拟世界 里 实时 地 交互 。 因此 DVE 系统 最 基本 特点 是 ： 共享 虚拟空间 ( 环境 与 资源 ) 、 虚拟空间 的 高度 真实感 和 各 用户 间 的 实时 交互性 。 
 　 　 由于 DVE 系统对 系统 的 交互性 、 实时性 、 真实感 有 较 高 的 要求 ， 同时 各 用户 又 要 通过 网络 进行 交互 模拟 和 游戏 ， 因此 ， 网络通信 的 带宽 、 延时 就 成为 DVE 系统 的 主要 限制 , 若 进一步 考虑 系统 的 可扩展性 , 网络带宽 和 延时 问题 就 更为 突出 。 
 1.2   图形 数据分布 处理 方式 
 　 　 DVE 系统 中 在 网络 上 传输 的 主要 数据 均 与 图形 、 图象 有关 ， 因此 分布式 图形处理 是 DVE 系统 的 关键技术 之一 。 在 分布式 图形系统 中 ， 图形 分布 处理 方式 一般 有 3 种 模式 ： 
 　 　 ( 1 )   基于 图象 ： 既 图形 的 建模 、 几何 转换 、 绘制 均 由 一台 主 服务器 完成 ， 在 各 Client 节点 上 显示 的 图象 由 网上 传送 。 如 分布式 可视化 系统 中 采用 较 多 。 这 对 网络 的 带宽 有 极 高 的 要求 。 
 　 　 ( 2 )   即时 绘制 ： 即 在 网上 传输 的 是 几何 转换 的 结果 数据 ， 由 各 Client 节点 调用 绘制 程序 自行 绘制 。 如 PEX [ 1 ] 就 采用 了 这种 模式 。 
 　 　 ( 3 ) 几何 复制 ： 几何 数据库 的 备份 存放 于 系统 的 各个 节点 上 ， 由 各 应用 进程 调用 进行 几何 转换 和 绘制 。 
 2 　 现有 几何 数据管理 方法 
 　 　 几何 复制 方法 有 多个 变种 , 在 DVE 应用 中 使用 得 最为 普遍 ， 但 都 存在 一些 问题 ： 
 　 　 ( 1 )   完全 复制 ， 分布 管理 。 每个 用户 结点 都 有 一个 同类 的 ( homogeneous ) 虚拟世界 数据库 ,   存放 整个 虚拟环境 的 数据 ,   如 场景 、 模型 、 动作 ( behavior ) 等 ,   还 包括 代表 各 用户 的 对象 的 状态 信息 。 如 SIMNET [ 2 ] 。 系统 需 初始化 ,   用户 间 的 通信 只 需 传递 对象 状态 的 改变 信息 。 优点 是 消息 较 小 , 所 需 网络带宽 较 小 ； 但 不 灵活 ,   可扩展性 差 ,   因为 一旦 增加 用户 ,   则 每个 用户 的 数据库 都 要 作 修改 。 另外 为 维护 各 数据备份 的 一致性 开销 也 较大 。 
 　 　 ( 2 )   可以 采用 网络 下载 的 方法 ， 如 VRML 浏览器 。 但 大规模 的 数据库 导致 下载 时间 很长 ， 使得 用户 的 等待时间 过长 ， 难以 保证系统 的 实时性 ， 进而 影响 系统 的 沉浸 式 效果 。 
 　 　 ( 3 )   网络 模拟 复制 方法 。 如 NPSNET [ 3 ] ， 整个 虚拟环境 没有 集中 数据库 ,   远程 对象 的 信息 是 通过 接受 远程 结点 定期 发来 的 对象 状态 消息 包 获得 的 ， 远程 对象 在 本地 的 状态 可 根据 该 对象 的 盲 导航 ( dead   reckoning ) 模型 计算 预测 ,   而 根据 定期 发来 的 状态 改变 消息 包 加以 较 正 。 实现 了 数据 的 松弛 一致性 ( loose   consistency ) 。 这种 方法 具有 网络通信 量 小 、 可扩展性 好 的 特点 。 但 这种 适合 于 大规模 模拟 的 方式 对 网络带宽 相对 较 高 的 局域网 不 一定 合适 ， 也 不 适于 描述 大规模 的 翔实 的 静态 场景 数据 。 
 　 　 ( 4 )   Client / Server 模式 。 采用 部分 复制 ,   对 虚拟环境 数据库 作 划分 ,   数据分布 在 Client 上 , 而 用户 间 的 通信 通过 一个 中央 服务器 ( Server ) 进行 。 如 dVS ,   数据 修改 由 一个 在 服务器 上 的 称作   Director 的 进程 控制 , 各 用户 进程 可以 自由 地 修改 本地 数据 , 但 为了 向 共享 环境 提交 ( commit ) 修改 , 必需 向 Director 发送 修改 请求 。 显然 当 用户 规模 扩大 后 , 服务器 将 很快 成为 系统 的 通信 瓶颈 ， 系统 的 可扩展性 较差 。 
 　 　 为了 减少 绘制 代价 ， 现在 普遍 采用 了 LOD ( Level   Of   Detail ) 技术 ， 采用 几何 复制 意味着 要 复制 所有 LOD 数据 ， 尽管 在 绘制 时有 很多 数据 可能 并不需要 。 在 单 服务器 / 客户 模式 下 由 服务器 集中管理 几何 数据 ， 而 在 Client 上 允许 用户 显示 和 游历 整个 VR 数据库 。 基于 Client 只 需 实际 要 显示 的 数据 的 思想 ， 不必 在 Client 节点 上 复制 整个 数据库 ， 只 在 Client 需要 它 的 AOI ( Area   Of   Interest ) 区域 内 某个 对象 的 某级 LOD ( Level   Of   Detail ) 数据 时才 向 服务器 发出 数据 请求 。 每个 Client 只 保存 其 AOI 区域 中 的 对象 信息 。 尽管 这种 数据传输 方法 减少 了 网络带宽 需求 ， 但 仍 存在 服务器 瓶颈 和 系统 可扩展性 差 的 问题 。 因为 每当 模拟 对象 移动 时 ， Client 都 要 向 服务器 发 数据 请求 ， 服务器 负责 数据库 的 维护 和 所有 Client 的 AOI 的 管理 。 这样 一旦 Client 数 增多 、 对象 移动 频繁 或 速度 很快 时 ， 即使 服务器 的 能力 很强 ， 也 会 很快 成为 系统 的 瓶颈 。 
 　 　 为 解决 这个 问题 ， 同时 也 为了 提高 系统 的 可扩展性 ， 所以 DVE 系统 采用 多 服务器 / 客户 模式 。 由 多个 服务器 分区 管理 整个 对象 空间 ， Client 根据 需求 向 Server 发 数据 请求 ， 而 Server 间 则 采用 完全 几何 复制 的 方法 ， 既 利用 了 集中管理 的 好处 ， 又 具有 数据传输 量 小 、 系统 可扩展性 好 的 优点 。 
 3 　 多 服务器 / 客户 模式 DVE 结构 
 　 　 DVE 系统 的 硬件 结构 如图 1 。 系统 由 多台 服务器 负责 维护 整个 VE 数据库 并 管理 各 客户 的 AOI 区域 ， 客户 进程 管理 局部 仿真 活动 ， 与 I / O 工具 进行 交互 并 完成 图形 绘制 。 
 
 图 1     多 服务器 模式 下 的 分区 数据管理 方法 
 3.1   数据 分区 管理 
 　 　 在 多 服务器 / 客户 模式 下 , 由 多个 服务器 分区 管理 对象 空间 。 为 实现 对象 空间 的 完全 划分 , 即 所有 分区 能 覆盖 整个 对象 空间 , 同时 各分 区间 又 不 互相 交叉 , 采用 了 一种 简单 的 对象 空间 的 划分 方法 。 如图 1 , 若为 2 - 服务器 模式 , 整个 对象 空间 可 由 一 平面 一分为二 , 特别 的 当 中心 平面 穿过 某一 客户 的 AOI 区域 时 , 划分 平面 可 向 两个 方向 作 微调 。 
 　 　 当 客户 跨区 移动 时 , 会 出现 客户 的 AOI 区域 跨于 两个 分区 之上 的 情况 。 为了 保证 服务器 分区 管理 对 用户 是 透明 的 , 又 避免 多个 服务器 管理 一个 AOI 的 复杂 情况 , 同时 也 为了 减少 因此 引起 的 服务器 间 的 通信量 ， 有 两种 处理 方法 ( 假定 客户 的 AOI 区域 定义 为 以 参与者 为 中心 的 球体 ) ： ( 1 ) 由 管理 负载平衡 的 主 服务器进行 划分 平面 的 微调 ， 使得 一个 AOI 区域 不落 在 两个 分区 里 ； ( 2 ) 为了 避免 频繁 调整 划分 平面 ， 特别 是 跨区 AOI 数目 不多时 ， 允许 划分 平面 是 带有 凸 半球 的 准 平面 。 即仅 当 参与者 ( AOI 中心点 ) 从 分区 i 跨越 划分 平面 进入 分区 j 时 , 才 由 分管 分区 j 的 服务器 接管 参与者 的 AOI 。 
 3.2   动态 负载平衡 
 　 　 为了 避免 各 服务器 的 工作 负载 不 均衡性 ， 采用 一种 动态 负载平衡 算法 。 由于 多 服务器 的 管理 对 各 Client 而言 最好 是 透明 的 ， 故 系统 的 负载平衡 管理 由 一主 服务器 负责 。 各 服务器 根据 其 运算 能力 确定 两个 AOI 上 下界 值 。 当某 服务器 所 管理 的 AOI 数 小于 设定 的 下界 时 ， 则 向 主 服务器 发出 申请 AOI 请求 ； 当 服务器 所 管理 的 AOI 数 大于 设定 的 上界时 ， 则 向 主 服务器 发出 移去 AOI 请求 。 主 服务器 根据 整个 VE 环境 中 的 AOI 数及 各 服务器 发来 的 申请 或移 去 AOI 请求 ， 调整 划分 平面 或 进行 区域 划分 / 合并 。 
 　 　 下面 说明 主 服务器 的 负载 管理策略 ， 假设 各 服务器 的 能力 相等 。 若主 服务器 未 收到 AOI 请求 ， 则 各 服务器 负载 正常 。 若仅 收到 申请 AOI 请求 而 没有 移去 AOI 请求 ， 则 说明 系统 负载 较 轻 。 当 系统 中 总 AOI 数 小于 一 设定 阈值 时 ， 可以 进行 分区 的 合并 ， 即 划分 平面 在 无穷 远处 ， 此时 转换 为单 服务器 / 客户 模式 。 因为 AOI 不多时 ， 分区 管理所 引起 的 服务器 间 的 数据传输 开销 相对 增大 ， 此时 合并 分区 就 可以 避免 服务器 间 的 数据传输 。 若 收到 移去 AOI 请求 而 没有 申请 AOI 请求 ， 则 说明 系统 中 某些 服务器 负载 较 重 。 当 重载 不 厉害 时 ， 可 通过 划分 平面 调整 ， 平衡 各 服务器 的 负载 ； 若 系统 中 AOI 数 超过 某一 设定 的 重载 阈值 时 ， 则 可以 查找 空闲 服务器 作 进一步 的 区域 划分 。 
 　 　 当 进行 分区 调整 时 ， 服务器 间 的 消息 传输 如下 ： ( 1 ) 主 服务器 向 各 服务器 发 分区 调整 消息 。 ( 2 ) 服务器 收到 分区 调整 消息 后 ， 据此 判定 所 管辖 的 AOI 是否 需要 移 去 ， 若 有 则 向 主 服务器 移交 AOI 管理权 。 ( 3 ) 最后 再由主 服务器 将 这些 AOI 分配 给 相对 空闲 的 服务器 。 
 3.3   多 Server 的 数据 一致性 问题 
 　 　 数据 的 一致性 问题 是 采用 复制 式 结构 所 固有 的 问题 。 
 　 　 例如 SIMNET 系统 采用 了 初始化 备份 存放 在 各 节点 上 的 方法 , 系统 一旦 初始化 后 就 由 各个 用户 结点 自己 维护 数据库 , 没有 保证数据 一致性 的 机制 。 
 　 　 DIVE 也 采用 了 类似 的 方法 , 但 通过 分布 加锁 机制 和 可靠 的 多播 协议 维护 了 动态 的 具 数据 ( 用户 视图 ) 一致性 的 数据库 。 即 用户 把 一 对象 数据 加锁 , 然后 修改 数据 的 本地 副本 , 再 通过 多播 向 其它 用户 结点 发送 修改 信息 , 最后 释放 锁 。 这种 方法 保证 了 数据 的 绝对 一致性 , 但 加锁 机制 大大增加 了 通信 开销 。 
 　 　 系统 在 单 服务器 模式 下 ， 因 服务器 集中管理 数据库 ， 所以 数据 一致性 问题 可不 考虑 。 在 多 服务器 模式 下 ， 各 服务器 采用 完全 几何 复制 的 方法 ， 所以 必然 存在 各 数据备份 的 一致性 问题 。 由于 各 服务器 所 管理 的 AOI 区域 相对 稳定 ， 服务器 数量 相对 较 少 ， 因此 可以 采用 疏松 一致性 的 方法 。 各 服务器 可 将 数据 修改 打包 ， 定时 发送给 其它 服务器 。 这样 可以 减少 服务器 间 维护 数据 一致性 所花 的 通信 开销 。 
 4 　 结论 
 　 　 本文 在 对 现有 分布式 虚拟环境 中 的 几何 数据管理 方法 进行 了 分析 讨论 后 ， 提出 了 多 服务器 分区 管理 几何 数据 的 方法 ， 验证 系统 正在 实现 中 。 该 方法 既 能 利用 数据 集中管理 、 便于 实现 的 优点 ， 又 解决 了 单 服务器 系统 因 服务器 负载 过重 而 引起 的 性能 瓶颈 问题 。 
 作者简介 ： 姜晓红 （ 1965 ～ ） ， 女 ， 讲师 ， 主攻 虚拟 实现 技术 ， 计算机 体系结构 
 作者 单位 ： 浙江大学 CAD & CG 国家 重点 实验室 ， 计算机系 ， 杭州 310027 
 参考文献 
 1   Rost   R , Friedberg   J , Nishimoto   P . PEX :   A   Network - transparent   3   D   Graphics   System . Computer   Graphics   &   Applications , 1989 , 9 ( 4 ) : 14 
 2   Calvin   J . The   SIMNET   Virtual   World   Architecture . Proceedings   of   the   IEEE   VRAIS ' 93   Conference , 1993 : 450 - 455 
 3   Acedonia   M   D , Zyda   M   J , Pratt   D   R , et   al . NPSNET ： A   Network   Software   Architecture   for   Large - scale   Virtual   Environment . PRESENCE , 1994 , 3 ( 4 ) : 265 
 4   Snowdon   D   N , West   A   J . AVIARY ： Design   Issues   for   Future   Large - scale   Virtual   Environments . PRESENCE , 1994 , 3 ( 4 ) : 288 
 5   Carlsson   C , Hagsand   O . A   Platform   for   Multi - user   Virtual   Environments . Computer   &   Graphics , 1993 , 17 ( 6 ) : 663 
 6   Morrison   J . The   VR - Link   Networked   Virtual   Environment   Software   Infrastructure . PRESENCE , 1995 , 4 ( 2 ) : 194 
 7   Singhal   SK , Cheriton   DR . Exploiting   Position   History   for   Efficient   Remote   Rendering   in   Networked   Virtual   Reality . PRESENCE , 1995 , 4 ( 2 ) : 169 
 收稿 日期 ： 1999 - 01 - 11 
