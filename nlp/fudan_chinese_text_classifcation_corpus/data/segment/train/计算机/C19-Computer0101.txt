计算机 应用 
 COMPUTER   APPLICATIONS 
 1999 年   第 19 卷   第 9 期   Vol.19   No.9   1999 
 
 
 
 数据仓库 数据模型 的 设计 
 张玉芳 　 熊忠阳 
 　 　 摘 　 要 　 本文 首先 就 数据仓库 与 传统 关系数据库 作 了 一个 简单 比较 ， 然后 介绍 了 一种 适合 于 数据仓库 设计 的 方法 。 
 　 　 关键词 　 数据仓库 ， 数据模型 ， 数据库 设计 
 DESIGNING   THE   DATA   WAREHOUSE 
 Zhang   Yufang 　 Xiong   Zhongyang 
 College   of   Computer   Science   and   Engineering   ,   Chongqing   University ,   Chongqing   400044 
 　 　 Abstract 　 This   paper   first   compares   data   warehouse   with   traditional   relation   database , then   introduces   a   method   for   designing   data   warehouse . 
 　 　 Keywords 　 Data   warehouse ,   Data   model ,   Database   design 
 1 　 传统 数据库 与 数据仓库 的 比较 
 　 　 传统 的 关系数据库 RDB 遵循 一致 的 关系 模型 ， 其中 的 数据 （ 记录 ） 以 表格 的 方式 存储 ， 并且 能 用 统一 的 SQL 语言 进行 数据 访问 ， 因此 它 的 应用 常 被 称为 联机 事务处理 OLTP （ On - Line   Transaction   Process ） 。 其 重点 在于 完成 事务处理 ， 在 瞬间 的 时间 里 给予 用户 响应 。 关系数据库 能够 处理 大型 数据库 ， 但 不能 将 其 简单 地 堆积 就 直接 作为 数据仓库 进行 使用 。 
 　 　 数据库 主要 操作 对象 是 多维 数据 ， 因此 也 称为 多维 数据库 。 多维 数据库 的 情形 正好 相反 ， 其 数据 以 阵列 方式 存储 ， 既 没有 统一 的 规律 可 遵循 ， 也 没有 统一 的 多维 模型 可 遵循 ， 更 没有 统一 的 存取数据 语言 或 编程语言 接口 （ API ） 可 利用 ， 多维 数据库 只能 按 其 所属 类别 进行 归类 。 对于 应用 来说 ， 多维 数据库 应该 具备 极强 的 查询 能力 ， 因此 与 关系数据库 相比 ， 多维 数据库 中 存储 的 信息 多而广 ， 但 由于 其 完成 的 是 一种 联机 分析 处理 OLAP （ On - Line   Analysis   Process ） ， 因此 不 追求 瞬间 响应 时间 ， 在 有限 的 时间 里 给予 响应 即 被 认可 。 实际上 ， OLAP 包含 交互式 的 数据 查询 ， 伴随 着 多种 分析方法 ， 例如 下 钻 （ drill - down ） 式 成功 地 钻入 到 最底层 的 细节 信息 上 。 因此 数据仓库 中 的 信息 尽管 是 多维 的 ， 它 仍然 可以 用 形象化 的 表格 表示 。 
 　 　 表 1 给出 了 传统 数据库 存储 的 数据 与 数据仓库 存储 的 数据 之间 的 区别 。 
 表 1 　 数据仓库 与 数据库 中 数据 的 比较 
 
 比较 内容   操作 数据仓库 数据 
 存在 时间 生存期 短 ， 经常 变化 长期存在 ， 相对 静态 
 存取 结果 记录 层 的 存取 需求 以 聚集 方式 的 集合 存取 ， 因此 比 RDB 友好 
 存取 方式 反复 的 事务 存取 模式 定期 地 报告 式 的 特定 查询 
 修改 方式 实时 修改 周期性地 大批量 修改 装入 
 驱动 方式 事件驱动 ： 过程 产生 数据 数据 驱动 ： 数据 支配 过程 
 操作 读写操作 只读 
 规模 几个 GB 可达 100GB + 
 
 　 　 尽管 数据仓库 与 传统 数据库 之间 存在 着 如此 大 的 差异 ， 但 我们 设计 数据仓库 并 不是 完全 另起炉灶 ， 而是 利用 现有 的 传统 操作 数据 ， 从中 进行 信息 的 集成 ， 从而 构造 出 满足 不同 需求 的 数据仓库 。 即 数据 从 动态 的 、 当前 事件驱动 的 传统 操作 数据流 向 静态 的 、 历史数据 的 数据仓库 。 从 理论 上 说 ： 从 操作 数据 中 策略性 地 引入 到期 的 数据 可以 完成 这个 转变 ， 但是 由于 受到 实际 存储容量 和 技术 的 限制 ， 实际上 是 不 可能 的 ， 而 必须 从 操作 数据 中 分离 和 提取 数据 进入 数据仓库 。 
 　 　 鉴于 以上 各种因素 ， 为 保证 OLTP 的 性能 ， 必须 将 数据仓库 与 传统 操作 数据 相 分离 ， 为了 获得 数据仓库 中 的 数据 ， 首先 必须 进行 数据仓库 的 设计 。 
 2 　 数据仓库 的 设计 
 　 　 本文 介绍 的 是 面向 主题 的 自顶 而 下 的 设计 方法 ， 其实 面向 主题 就是 面向对象 。 数据仓库 包含 的 对象 可以 是 ： 客户 、 产品 、 策略 等 多维 概念 。 终端用户 通过 各种 维度 来 获取 商业 数据 ， 其中 时间 是 最 基本 、 最 关键 的 维度 。 数据仓库 的 设计 方法 同 传统 的 数据库 设计 一样 经历 了 概念模型 设计 、 逻辑 模型 设计 和 物理 模型 设计 三个 阶段 ， 对于 面向 主题 的 数据仓库 ， 分别 对应 数据仓库 中 的 信息 包图 设计 、 星型 图 模型 设计 和 物理 数据模型 设计 。 表 2 给出 了 数据仓库 和 数据库 开发 过程 中 建立 数据模型 各 阶段 采用 的 设计 方法 。 
 表 2 　 数据仓库 与 数据库 各 阶段 的 设计 方法 
 
 设计阶段 数据仓库 数据库 
 概念模型 信息 包图 数据 流程图 
 逻辑 模型 星形 图 模型 实体 关联 图 
 物理 模型 物理 数据模型 物理 数据模型 
 
 　 　 下面 分别 介绍 数据仓库 三个 模型 设计阶段 采用 的 各种 技术 。 
 2.1 　 概念模型 设计 — — 信息 包图 
 　 　 概念模型 设计 也 就是 通常 所说 的 需求 分析 ， 在 与 用户 交流 的 过程 中 ， 确定 数据仓库 所 需要 访问 的 信息 ， 这些 信息 包括 当前 、 将来 以及 与 历史 相关 的 数据 。 在 需求 分析阶段 确定 操作 数据 、 数据源 以及 一些 附加 数据 ， 设计 容易 理解 的 数据模型 ， 有效 地 完成 查询 和 数据 之间 的 映射 。 
 　 　 由于 数据仓库 的 多维 性 ， 利用 传统 的 数据 流程图 进行 需求 分析 已 不能 满足需要 。 超 立方体 （ hypercube ） 用 超出 三维 的 表示 来 描述 一个 对象 ， 显然 具备 多维 特性 ， 完全 可以 满足 数据仓库 的 多维 特性 。 利用 自上而下 方法 设计 一个 超 立方体 的 步骤 为 ： 
 　 　 确定 模型 中 需要 抓住 的 商业 过程 ， 例如 销售 活动 或 销售 过程 ； 
 　 　 确定 需要 捕获 的 值 ， 例如 销售 数量 或 成本 ， 这些 信息 通常 是 一些 数值 ； 
 　 　 确定 数据 的 粒度 ， 亦 即 需要 捕获 的 最低 一级 的 详细信息 。 
 　 　 由于 超 立方体 在 表现 上 缺乏 直观性 ， 尤其 当 维度 超出 三维 后 ， 数据 的 采集 和 表示 都 比较 困难 ， 因此 我们 可以 采用 一种 称为 信息 包图 的 方法 在 平面 上 展开 超 立方体 ， 即用 二维 表格 反映 多维 特征 。 信息 包图 提供 了 一个多 维空间 建立 用户 信息 模型 的 方法 ， 它 提供 了 超 立方体 的 可视化 表示 。 
 　 　 信息 包图 拥有 三个 重要 对象 ： 指标 、 维度 和 类别 。 指标 表明 在 维度 空间 衡量 商务信息 的 一种 方法 ， 而 类别 是 在 一个 维度 内 为了 提供 详细 分类 而 定义 的 ， 其中 的 成员 是 为了 辨别 和 区分 特定 数据 而设 。 信息 包图 集中 在 用户 对 信息 包 的 需要 ， 它 定义 主题 内容 和 主要 性能 测试 指标 之间 的 关系 ， 其 目标 就是 满足用户 需要 。 利用 信息 包图 设计 概念模型 需要 确定 三大 内容 ： 
 　 　 .   确定 指标 。 指标 是 访问 数据仓库 的 关键所在 ， 是 用户 最 关心 的 信息 。 成功 的 信息 包 可以 保证 用户 从 信息 包中 获取 需要 的 各个 性能指标 参数 。 
 　 　 .   确定 维度 。 维度 提供 了 用户 访问 数据仓库 信息 的 途径 ， 对应 超 立方体 的 每 一面 ， 位于 信息 包图 的 第一行 的 每 一个 栏目 中 。 
 　 　 .   确定 类别 。 类别 表示 一个 维度 包含 的 详细信息 ， 一个 维度 内 最底层 的 可用 的 分类 又 称为 详细 类别 。 
 　 　 从 上 所述 可以 看出 ： 在 一张 平面 表格 上 描述 了 元素 的 多维 性 ， 其中 的 每 一个 维度 用 平面 表格 的 某列 表示 ， 通常 的 维度 是 ： 时间 、 地点 、 产品 和 顾客 ， 而 细化 本列 的 对象 就是 类别 ， 例如 时间 维度 的 类别 可以 细化 到 年 、 月 、 日 ， 甚至 小时 。 平面 表格 中 的 一个 元素 （ 对应 超 立方体 中 的 一个 单元格 ） 可以 表示 ： 某年某月 份 ， 在 某 商店 的 某类 产品 的 销售额 。 创建 信息 包图 时 需要 确定 最高层 和 最低 层 的 信息 需求 ， 以便 最终 设计 出 包含 各个 层次 需要 的 数据仓库 。 
 　 　 对于 复杂 的 商业 要求 进行 需求 分析 时 ， 有时 一张 信息 包图 不能 反映 所有 情况 ， 可能 需要 设计 不同 的 信息 包图 来 满足 全部 需求 ， 此时 应该 保证 多个 信息 包图 中 出现 的 维度 信息 和 类别 信息 完全一致 。 
 2.2 　 逻辑 模型 设计 — — 星形 图 设计 
 　 　 在 传统 的 数据库 逻辑 模型 设计 中 ， 根据 需求 分析阶段 获得 的 数据 流程图 ， 利用 实体 关联 方法 将 概念模型 转换 为 实体 关联 E — R 图 。 从前 所述 数据仓库 的 需求 分析阶段 获得 的 是 信息 包图 ， 同时 数据仓库 主要 提供 的 是 查询 操作 ， 而 最 便于 执行 查询 操作 的 逻辑 模型 设计 工具 是 星形 图 ， 因此 可以 利用 星形 图来 设计 数据仓库 的 逻辑 模型 。 
 　 　 星形 图因 其 外观 似 五角星 而 得名 ， 它 支持 以 商务 决策者 的 观点 定义数据 实体 ， 满足 面向 主题 数据仓库 设计 的 需要 ， 而 信息 包图 又 为 星形 图 的 设计 提供 了 完备 的 概念 基础 。 同 信息 包图 中 的 三个 对象 对应 ， 星形 图 拥有 三个 逻辑 实体 ： 维度 、 指标 和 类别 。 
 　 　 位于 星形 图 中心 的 实体 是 指标 实体 ， 对应 信息 包图 中 的 指标 对象 ， 是 用户 最 关心 的 基本 实体 和 查询 活动 的 中心 ， 为 用户 的 商务活动 提供 定量 数据 。 每个 指标 实体 代表 一系列 相关 事实 ， 完成 一项 指定 的 功能 ， 在 一般 情况 下 代表 一个 现实 事务 的 综合 水平 ， 仅仅 与 每个 相关 维度 的 一个点 对应 。 位于 星形 图星角 上 的 实体 是 维度 实体 ， 对应 信息 包图 中 的 维度 对象 ， 其 作用 是 限制 用户 的 查询 结果 ， 将 数据 过滤 使得 从 指标 实体 查询 返回 较少 的 行 ， 从而 缩小 访问 范围 。 另外 一个 实体 是 详细 类别 实体 ， 它 对应 信息 包图 中 的 类别 对象 。 一个 维度 内 的 每个 单元 就是 一个 类别 ， 代表 该 维度 内 的 一个 单独 层次 ， 要求 更加 详细 的 信息 才能 满足用户 的 需要 ， 与 对应 的 事务 数据库 结构 产生 映射 。 
 　 　 从 概念模型 — — 信息 包图 转换成 逻辑 模型 — — 星形 图 ， 需要 确定 三大 实体 : 
 　 　 .   定义 指标 实体 。 使用 每 一个 指标 ， 同时 确定 是否 存储 经过 计算 的 指标 。 
 　 　 .   定义 维度 实体 。 一个 维度 实体 对应 指标 实体 中 的 多个 指标 。 用户 利用 维度 实体 来 访问 指标 实体 ， 其实质 对应 着 逻辑 数据 实体 ， 一个 维度 实体 对应 信息 包图 中 的 一个 列 。 
 　 　 .   定义 详细 类别 实体 。 对应 现实 世界 的 某 一 实体 。 
 　 　 在 星形 图中 ， 用户 通过 维度 实体 获得 指标 实体 数据 ， 其中 指标 实体 与 维度 实体 间 的 联系 通过 每个 维度 中 的 最低 一层 的 详细 类别 实体 连接 。 
 　 　 当 多个 信息 包图 转换成 星形 图时 ， 可能 出现 维度 实体 的 交叉 重叠 ， 为了 保证 实体 的 一致性 需要 进行 统一 处理 ， 确定 它们 是 同一 实体 在 不同 层次 上 的 数据 反映 ， 还是 两个 不同 的 实体 。 当 多个 维度 实体 相关 并且 存在 共性 时 ， 可能 需要 将 其 合并 为 一个 指标 实体 。 
 2.3 　 数据库 物理 模型 设计 — — 星形 图 转换 为 数据模型 
 　 　 从 逻辑 模型 — — 星形 图 转向 物理 模型 设计 ， 完全 遵循 传统 的 数据库 设计 方法 。 一般来说 ， 星形 图中 的 指标 实体 和 详细 类别 实体 通常 转变 为 一个 具体 的 物理 数据库 表 ， 而 维度 实体 则 作为 查询 参考 、 过滤 和 聚合 数据 使用 ， 因此 通常 并 不 直接 转变 为 物理 数据库 表 。 在 物理 模型 设计阶段 ， 需要 确定 以下内容 : 
 　 　 定义数据 标准 ， 规范化 数据仓库 中 的 各种 数据 ; 
 　 　 定义 实体 和 实体 特征 ， 完整 定义 实体 所 具有 的 一切 属性 ; 
 　 　 定义 规模 ， 确定 数据 容量 和 更新 频率 。 
 　 　 在 物理 模型 设计阶段 ， 可以 利用 自动 定义 工具 如 ： Sdesigner ， PowerDesigner 进行 数据管理 ， 获得 该 阶段 完整 的 文档资料 。 
 3 　 小结 
 　 　 随着 信息技术 突飞猛进 地 发展 ， 如何 存储 、 管理 、 维护 和 使用 信息 变得 越来越 重要 ， 因此 数据仓库 的 建设 就 显得 越来越 必要 。 本文 介绍 了 一种 面向对象 的 数据仓库 设计 方法 ， 在 数据仓库 的 不同 设计阶段 ， 围绕 面向 主题 的 数据仓库 ， 与 传统 数据库 设计阶段 相对 应 ， 介绍 了 各 阶段 的 具体 设计 方法 。 
 作者简介 ： 张玉芳 　 讲师 ， 在职 博士 研究生 。 主要 从事 计算机网络 和 数据库 应用 技术 等 领域 的 研究 和 教学 工作 。 
 熊忠阳 　 副研究员 。 主要 从事 网络 信息系统 和 并行 技术 等 方面 的 研究 工作 。 
 作者 单位 ： 重庆大学 计算机科学 与 工程学院 　 重庆 （ 400044 ） 
 参考文献 
 ［ 1 ］ 　 Tom   Hammergren ， 著 .   数据仓库 技术 . 北京 ： 中国 水力 水电 出版社 ， 1998 , 2   
 收稿 日期 : 1999 - 03 - 12 ( 修改稿 ) 
