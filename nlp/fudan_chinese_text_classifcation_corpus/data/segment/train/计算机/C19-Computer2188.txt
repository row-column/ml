计算机 应用 研究 
 APPLICATION   RESEARCH   OF   COMPUTERS 
 2000 　 Vol.17 　 No.2 　 P.48 - 50 
 
 
 
 Win32 应用程序 中 进程 间通信 方法 分析 与 比较 
 李志刚 　 纪玉波 　 程小茁 　 崔朝辉 
 摘   要   随着 人们 对 应用程序 的 要求 越来越 高 ， 单 进程 应用 在 许多 场合 已 不能 满足 人们 的 要求 。 编写 多 进程 / 多线程 程序 成为 现代 程序设计 的 一个 重要 特点 ， 在 多 进程 程序设计 中 ， 进程 间 的 通信 是 不可避免 的 。 Microsoft   Win32   API 提供 了 多种 进程 间通信 的 方法 ， 全面 地 阐述 了 这些 方法 的 特点 ， 并 加以 比较 和 分析 ， 希望 能 给 读者 选择 通信 方法 提供 参考 。 
 关键词   进程   进程 通信   IPC   Win32   API 
 1   进程 与 进程 通信 
 　 　 进程 是 装入 内存 并 准备 执行 的 程序 ， 每个 进程 都 有 私有 的 虚拟地址 空间 ， 由 代码 、 数据 以及 它 可 利用 的 系统资源 ( 如 文件 、 管道 等 ) 组成 。 多 进程 / 多线程 是 Windows 操作系统 的 一个 基本特征 。 Microsoft   Win32 应用 编程 接口 ( Application   Programming   Interface ,   API ) 提供 了 大量 支持 应用程序 间 数据共享 和 交换 的 机制 ， 这些 机制 行使 的 活动 称为 进程 间通信 ( InterProcess   Communication ,   IPC ) ， 进程 通信 就是指 不同 进程 间 进行 数据共享 和 数据交换 。 
 　 　 正 因为 使用 Win32   API 进行 进程 通信 方式 有 多种 ， 如何 选择 恰当 的 通信 方式 就 成为 应用 开发 中 的 一个 重要 问题 ， 下面 本文 将 对 Win32 中 进程 通信 的 几种 方法 加以分析 和 比较 。 
 2   进程 通信 方法 
 2.1   文件 映射 
 　 　 文件 映射 ( Memory - Mapped   Files ) 能 使 进程 把 文件 内容 当作 进程 地址 区间 一块 内存 那样 来 对待 。 因此 ， 进程 不必 使用 文件 I / O 操作 ， 只 需 简单 的 指针 操作 就 可 读取 和 修改 文件 的 内容 。 
 　 　 Win32   API 允许 多个 进程 访问 同一 文件 映射 对象 ， 各个 进程 在 它 自己 的 地址 空间 里 接收 内存 的 指针 。 通过 使用 这些 指针 ， 不同 进程 就 可以 读 或 修改 文件 的 内容 ， 实现 了 对 文件 中 数据 的 共享 。 
 　 　 应用程序 有 三种 方法 来 使 多个 进程 共享 一个 文件 映射 对象 。 
 　 　 ( 1 ) 继承 ： 第一个 进程 建立 文件 映射 对象 ， 它 的 子 进程 继承 该 对象 的 句柄 。 
 　 　 ( 2 ) 命名 文件 映射 ： 第一个 进程 在 建立 文件 映射 对象 时 可以 给 该 对象 指定 一个 名字 ( 可 与 文件名 不同 ) 。 第二个 进程 可 通过 这个 名字 打开 此 文件 映射 对象 。 另外 ， 第一个 进程 也 可以 通过 一些 其它 I PC机 制 ( 有名 管道 、 邮件 槽 等 ) 把 名字 传给 第二个 进程 。 
 　 　 ( 3 ) 句柄 复制 ： 第一个 进程 建立 文件 映射 对象 ， 然后 通过 其它 I PC机 制 ( 有名 管道 、 邮件 槽 等 ) 把 对象 句柄 传递 给 第二个 进程 。 第二个 进程 复制 该 句柄 就 取得 对 该 文件 映射 对象 的 访问 权限 。 
 　 　 文件 映射 是 在 多个 进程 间 共享 数据 的 非常 有效 方法 ， 有 较 好 的 安全性 。 但 文件 映射 只能 用于 本地 机器 的 进程 之间 ， 不能 用于 网络 中 ， 而 开发者 还 必须 控制 进程 间 的 同步 。 
 2.2   共享内存 
 　 　 Win32   API 中 共享内存 ( Shared   Memory ) 实际 就是 文件 映射 的 一种 特殊 情况 。 进程 在 创建 文件 映射 对象 时用 0xFFFFFFFF 来 代替 文件 句柄 ( HANDLE ) ， 就 表示 了 对应 的 文件 映射 对象 是从 操作系统 页面 文件 访问 内存 ， 其它 进程 打开 该 文件 映射 对象 就 可以 访问 该 内存 块 。 由于 共享内存 是 用 文件 映射 实现 的 ， 所以 它 也 有 较 好 的 安全性 ， 也 只能 运行 于 同一 计算机 上 的 进程 之间 。 
 2.3   匿名 管道 
 　 　 管道 ( Pipe ) 是 一种 具有 两个 端点 的 通信 通道 ： 有 一端 句柄 的 进程 可以 和 有 另一端 句柄 的 进程 通信 。 管道 可以 是 单向 － 一端 是 只读 的 ， 另一端 点 是 只 写 的 ； 也 可以 是 双向 的 一 管道 的 两端 点 既 可读 也 可 写 。 
 　 　 匿名 管道 ( Anonymous   Pipe ) 是 在 父 进程 和子 进程 之间 ， 或 同一 父 进程 的 两个 子 进程 之间 传输数据 的 无 名字 的 单向 管道 。 通常 由父 进程 创建 管道 ， 然后 由要 通信 的 子 进程 继承 通道 的 读 端点 句柄 或 写 端点 句柄 ， 然后 实现 通信 。 父 进程 还 可以 建立 两个 或 更 多个 继承 匿名 管道 读 和 写 句柄 的 子 进程 。 这些 子 进程 可以 使用 管道 直接 通信 ， 不 需要 通过 父 进程 。 
 　 　 匿名 管道 是 单机 上 实现 子 进程 标准 I / O 重定向 的 有效 方法 ， 它 不能 在 网上 使用 ， 也 不能 用于 两个 不 相关 的 进程 之间 。 
 2.4   命名 管道 
 　 　 命名 管道 ( Named   Pipe ) 是 服务器 进程 和 一个 或 多个 客户 进程 之间 通信 的 单向 或 双向 管道 。 不同于 匿名 管道 的 是 命名 管道 可以 在 不 相关 的 进程 之间 和 不同 计算机 之间 使用 ， 服务器 建立 命名 管道 时 给 它 指定 一个 名字 ， 任何 进程 都 可以 通过 该 名字 打开 管道 的 另一端 ， 根据 给定 的 权限 和 服务器 进程 通信 。 
 　 　 命名 管道 提供 了 相对 简单 的 编程 接口 ， 使 通过 网络 传输数据 并不比 同一 计算机 上 两 进程 之间 通信 更 困难 ， 不过 如果 要 同时 和 多个 进程 通信 它 就 力不从心 了 。 
 2.5   邮件 槽 
 　 　 邮件 槽 ( Mailslots ) 提供 进程 间 单向 通信 能力 ， 任何 进程 都 能 建立 邮件 槽 成为 邮件 槽 服务器 。 其它 进程 ， 称为 邮件 槽 客户 ， 可以 通过 邮件 槽 的 名字 给 邮件 槽 服务器 进程 发送 消息 。 进来 的 消息 一直 放在 邮件 槽 中 ， 直到 服务器 进程 读取 它 为止 。 一个 进程 既 可以 是 邮件 槽 服务器 也 可以 是 邮件 槽 客户 ， 因此 可 建立 多个 邮件 槽 实现 进程 间 的 双向通信 。 
 　 　 通过 邮件 槽 可以 给 本地 计算机 上 的 邮件 槽 、 其它 计算机 上 的 邮件 槽 或 指定 网络 区域 中 所有 计算机 上 有 同样 名字 的 邮件 槽 发送 消息 。 广播 通信 的 消息 长度 不能 超过 400 字节 ， 非 广播 消息 的 长度 则 受 邮件 槽 服务器 指定 的 最大 消息 长度 的 限制 。 
 　 　 邮件 槽 与 命名 管道 相似 ， 不过 它 传输数据 是 通过 不 可靠 的 数据 报 ( 如 TCP / IP 协议 中 的 UDP 包 ) 完成 的 ， 一旦 网络 发生 错误 则 无法 保证 消息 正确 地 接收 ， 而 命名 管道 传输数据 则 是 建立 在 可靠 连接 基础 上 的 。 不过 邮件 槽 有 简化 的 编程 接口 和 给 指定 网络 区域 内 的 所有 计算机 广播 消息 的 能力 ， 所以 邮件 槽 不失为 应用程序 发送 和 接收 消息 的 另 一种 选择 。 
 2.6   剪贴板 
 　 　 剪贴板 ( Clipped   Board ) 实质 是 Win32   API 中 一组 用来 传输数据 的 函数 和 消息 ， 为 Windows 应用程序 之间 进行 数据共享 提供 了 一个 中介 ， Windows 已 建立 的 剪切 ( 复制 ) － 粘贴 的 机制 为 不同 应用程序 之间 共享 不同 格式 数据 提供 了 一条 捷径 。 当 用户 在 应用程序 中 执行 剪切 或 复制 操作 时 ， 应用程序 把 选取 的 数据 用 一种 或 多种 格式 放在 剪贴板 上 。 然后 任何 其它 应用程序 都 可以 从 剪贴板 上 拾取 数据 ， 从 给定 格式 中 选择 适合 自己 的 格式 。 
 　 　 剪贴板 是 一个 非常 松散 的 交换 媒介 ， 可以 支持 任何 数据格式 ， 每一 格式 由 一 无 符号 整数 标识 ， 对 标准 ( 预定 义 ) 剪贴板 格式 ， 该值 是 Win32   API 定义 的 常量 ； 对 非标准 格式 可以 使用 Register   Clipboard   Format 函数 注册 为 新 的 剪贴板 格式 。 利用 剪贴板 进行 交换 的 数据 只 需 在 数据格式 上 一致 或 都 可以 转化 为 某种 格式 就行 。 但 剪贴板 只能 在 基于 Windows 的 程序 中 使用 ， 不能 在 网络 上 使用 。 
 2.7   动态 数据交换 
 　 　 动态 数据交换 ( DDE ) 是 使用 共享内存 在 应用程序 之间 进行 数据交换 的 一种 进程 间通信 形式 。 应用程序 可以 使用 DDE 进行 一次性 数据传输 ， 也 可以 当 出现 新 数据 时 ， 通过 发送 更新 值 在 应用程序 间 动态 交换 数据 。 
 　 　 DDE 和 剪贴板 一样 既 支持 标准 数据格式 ( 如 文本 、 位图 等 ) ， 又 可以 支持 自己 定义 的 数据格式 。 但 它们 的 数据传输 机制 却 不同 ， 一个 明显 区别 是 剪贴板 操作 几乎 总是 用作 对 用户 指定 操作 的 一次性 应答 － 如 从 菜单中选择 Paste 命令 。 尽管 DDE 也 可以 由 用户 启动 ， 但 它 继续 发挥作用 一般 不必 用户 进一步 干预 。 DDE 有 三种 数据交换 方式 ： 
 　 　 ( 1 )   冷链 ： 数据交换 是 一次性 数据传输 ， 与 剪贴板 相同 。 
 　 　 ( 2 )   温链 ： 当 数据交换 时 服务器 通知 客户 ， 然后 客户 必须 请求 新 的 数据 。 
 　 　 ( 3 )   热链 ： 当 数据交换 时 服务器 自动 给 客户 发送数据 。 
 　 　 DDE 交换 可以 发生 在 单机 或 网络 中 不同 计算机 的 应用程序 之间 。 开发者 还 可以 定义 定制 的 DDE 数据格式 进行 应用程序 之间 特别 目的 IPC ， 它们 有 更 紧密 耦合 的 通信 要求 。 大多数 基于 Windows 的 应用程序 都 支持 DDE 。 
 2.8   对象连接 与 嵌入 
 　 　 应用程序 利用 对象连接 与 嵌入 ( OLE ) 技术 管理 复合 文档 ( 由 多种 数据格式 组成 的 文档 ) ， OLE 提供 使 某 应用程序 更 容易 调用 其它 应用程序 进行 数据 编辑 的 服务 。 例如 ， OLE 支持 的 字 处理器 可以 嵌套 电子表格 ， 当 用户 要 编辑 电子表格 时 OLE 库 可 自动 启动 电子表格 编辑器 。 当 用户 退出 电子表格 编辑器 时 ， 该 表格 已 在 原始 字 处理器 文档 中 得到 更新 。 在 这里 电子表格 编辑器 变成 了 字 处理器 的 扩展 ， 而 如果 使用 DDE ， 用户 要 显式 地 启动 电子表格 编辑器 。 
 　 　 同 DDE 技术 相同 ， 大多数 基于 Windows 的 应用程序 都 支持 OLE 技术 。 
 2.9   动态 连接 库 
 　 　 Win32 动态 连接 库 ( DLL ) 中 的 全局 数据 可以 被 调用 DLL 的 所有 进程 共享 ， 这 就 又 给 进程 间通信 开辟 了 一条 新 的 途径 ， 当然 访问 时要 注意 同步 问题 。 
 　 　 虽然 可以 通过 DLL 进行 进程 间 数据共享 ， 但 从 数据安全 的 角度 考虑 ， 我们 并 不 提倡 这种 方法 ， 使用 带有 访问 权限 控制 的 共享内存 的 方法 更好 一些 。 
 2.10   远程 过程 调用 
 　 　 Win32   API 提供 的 远程 过程 调用 ( RPC ) 使 应用程序 可以 使用 远程 调用函数 ， 这使 在 网络 上用 RPC 进行 进程 通信 就 像 函数调用 那样 简单 。 RPC 既 可以 在 单机 不同 进程 间 使用 也 可以 在 网络 中 使用 。 
 　 　 由于 Win32   API 提供 的 RPC 服从 OSF - DCE ( Open   Software   Foundation   Distributed   Computing   Environment ) 标准 。 所以 通过 Win32   API 编写 的 RPC 应用程序 能 与 其它 操作系统 上 支持 DEC 的 RPC 应用程序 通信 。 使用 RPC 开发者 可以 建立 高性能 、 紧密 耦合 的 分布式应用 程序 。 
 2.11   NetBios 函数 
 　 　 Win32   API 提供 NetBios 函数 用于 处理 低级 网络 控制 ， 这 主要 是 为 IBM   NetBios 系统 编写 与 Windows 的 接口 。 除非 那些 有 特殊 低级 网络 功能 要求 的 应用程序 ， 其它 应用程序 最好 不要 使用 NetBios 函数 来 进行 进程 间通信 。 
 2.12   Sockets 
 　 　 Windows   Sockets 规范 是 以 U . C . Berkeley 大学 BSD   UNIX 中 流行 的 Socket 接口 为 范例 定义 的 一套 Windows 下 的 网络 编程 接口 。 除了 Berkeley   Socket 原有 的 库函数 以外 ， 还 扩展 了 一组 针对 Windows 的 函数 ， 使 程序员 可以 充分利用 Windows 的 消息 机制 进行 编程 。 
 　 　 现在 通过 Sockets 实现 进程 通信 的 网络应用 越来越 多 ， 这 主要 的 原因 是 Sockets 的 跨平台 性要 比 其它 I PC机 制 好得多 ， 另外 WinSock   2.0 不仅 支持 TCP / IP 协议 ， 而且 还 支持 其它 协议 ( 如 IPX ) 。 Sockets 的 唯一 缺点 是 它 支持 的 是 底层 通信 操作 ， 这 使得 在 单机 的 进程 间 进行 简单 数据 传递 不太 方便 ， 这时 使用 下面 将 介绍 的 WM _ COPYDATA 消息 将 更 合适 些 。 
 2.13   WM _ COPYDATA 消息 
 　 　 WM _ COPYDATA 是 一种 非常 强大 却 鲜为人知 的 消息 。 当 一个 应用 向 另 一个 应用 传送数据 时 ， 发送 方只 需 使用 调用 SendMessage 函数 ， 参数 是 目的 窗口 的 句柄 、 传递数据 的 起始 地址 、 WM _ COPYDATA 消息 。 接收 方只 需像 处理 其它 消息 那样 处理 WM _ COPY   DATA 消息 ， 这样 收发 双方 就 实现 了 数据共享 。 
 　 　 WM _ COPYDATA 是 一种 非常简单 的 方法 ， 它 在 底层 实际上 是 通过 文件 映射 来 实现 的 。 它 的 缺点 是 灵活性 不高 ， 并且 它 只能 用于 Windows 平台 的 单机 环境 下 。 
 3   结束语 
 　 　 Win32   API 为 应用程序 实现 进程 间通信 提供 了 如此 多种 选择 方案 ， 那么 开发者 如何 进行 选择 呢 ？ 通常 在 决定 使用 哪种 IPC 方法 之前 应 考虑 以下 一些 问题 ： 
 　 　 ( 1 ) 应用程序 是 在 网络 环境 下 还是 在 单机 环境 下 工作 。 
 　 　 ( 2 ) 应用程序 是否 需要 和 运行 其它 操作系统 的 程序 通信 。 
 　 　 ( 3 ) 应用程序 是否 需要 动态 选择 与其 进行 通信 的 应用程序 。 
 　 　 ( 4 ) 应用程序 是否 需要 提供 多种 数据格式 与 许多 不同 的 应用程序 通信 ， 例如 使用 其它 应用程序 的 剪切 和 粘贴 功能 。 
 　 　 ( 5 ) 性能 是 应用程序 的 关键 吗 ？ 所有 的 I PC机 制都 有 一定 的 通信 开销 ， 但 不同 的 机制 间 相差 很大 。 
 　 　 综上所述 ， 选择 哪种 I PC机 制 进行 通信 主要 是 根据 应用 的 类型 和 运行 环境 来 选择 ， 在 实用性 的 前提 下 ， 兼顾 通用性 、 易 扩充性 和 高效性 。 在 实际 应用 中 ， 一个 应用 往往 要 用到 多种 I PC机 制来 完成 通信 任务 。 
 李志刚 （ 抚顺 石油学院 计算机科学 与 技术 系   辽宁抚顺   113001 ） 
 纪玉波 （ 抚顺 石油学院 计算机科学 与 技术 系   辽宁抚顺   113001 ） 
 程小茁 （ 抚顺 石油学院 计算机科学 与 技术 系   辽宁抚顺   113001 ） 
 崔朝辉 （ 抚顺 石油学院 计算机科学 与 技术 系   辽宁抚顺   113001 ） 
 参考文献 
 1 ， Microsoft   Corporation .   Microsoft   Win32 程序员 参考 大全 ( 二 ) .   
 2 ， Davide   Marcato .   Using   the   IPCs   in   Win32   for   Successful   Component   Communication 
 收稿 日期 ： 1999 年 8 月 30 日 
