计算机 工程 
 COMPUTER   ENGINEERING 
 1999 年     第 25 卷   第 7 期   Vol.25   No.5   1999 
 
 
 
 高级 综合 中 寄存器 合并 问题 的 研究 
 袁 小龙 　 高德远 
 摘要 　 高级 综合 技术 的 研究 在 当前 倍受 关注 。 在 进行 资源分配 时 ， 为了 减少 互连 线 的 数目 ， 提高 设计 质量 ， 应对 数据 路径 综合 中所 需 的 寄存器 进行 合并 。 通过 对 寄存器 合并 问题 进行 研究 分析 ， 给出 一种 高级 综合 中 的 寄存器 合并 算法 。 经 实验 证明 ， 该 算法 具有 速度 快 、 效率高 的 特点 ， 应用 在 高级 综合 系统 中 时 ， 可 提高 综合 设计 的 质量 。 
 关键词 　 高级 综合 寄存器 合并 
 A   Study   on   Register   Merging   Problem   for   High - level   Synthesis 
 Yuan   Xiaolong   Gao   Deyuan 
 Aerospace   Microelectronice   Center ， Northwest   Polytechnical   University   Xian   710072 
 Abstract ： High - level   synthesis   is   an   active   area   of   research   presently . Inthe   process   of   resource   allocation , the   registers   required   in   data   path   should   be   merged   in   order   to   reduce   the   interconnection   wires . Based   on   the   study   of   the   register   merging , a   register   merging   algorithm   is   presented   in   this   paper . This   algorithm   is   very   efficient   and   can   improve   the   quality   of   the   design   in   high - level   synthesis . 
 Key   words ： High - level   synthesis ； Register ； Merge 
 　 　 高级 综合 也 叫 行为 综合 ， 其 基本 任务 是 完成 从 数字 系统 的 行为 描述 到 寄存器 传输 级 ( RTL ) 设计 的 转换 。 从 行为 描述 到   RTL 结构 的 转换 可 分为 4 个子 任务 ， 即 ： 内部 表示 、 操作 分配 和 调度 、 映射 、 控制器 综合 。 内部 表示 子 任务 将 行为 描述 转化 为 计算机 可以 处理 的 机内 表示 形式 。 操作 调度 将 构成 设计 行为 的 操作 划分 到 控制 步中 ， 使得 在 一个 控制 步中 的 所有 操作 均 可 在 一个 时钟 周期 中 执行 。 操作 分配 确定 在 给定 的 面积 与 性能 约束 下 实现 一个 设计所 需 的 资源 的 类型 与 数量 。 映射 将 行为 描述 设计 中 的 操作 、 存储器 访问 及 互连 分配 给 硬件 单元 ， 得到 优化 的 面积 与 性能 。 一旦 操作 调度 、 操作 分配 完成 及 数据 路径 单元 选取 完毕 后 ， 须 根据 操作 调度 的 需要 生成 相应 的 控制器 ， 控制器 实际上 是 一个 有限 状态 自动机 FSM ( Finite   State   Machine ) ， 操作 调度 及 操作 分配 确定 了 FSM 的 状态 数目 、 状态 转换 情况 及 FSM 的 输入 、 输出 信号 ， 可 由 这些 信息 综合 出 相应 的 控制电路 。 
 　 　 这 4 个子 任务 相互 联系 ， 相互影响 。 高级 综合 的 第一步 是 将 以 算法 形式 的 行为 描述 转化 为 一个 内部 表示 ， 而后 其它 子 任务 在 此基础 之上 工作 。 在 对 内部 表示 模型 [ 1 ] 和 操作 调度 问题 [ 2 ] [ 3 ] 进行 了 研究 之后 ， 开始 研究 数据 路径 综合 中 的 资源分配 ( 映射 ) 问题 ， 前面 已经 提到 过 ， 资源分配 任务 是 将 行为 描述 中 的 操作 、 存储器 访问 及 互连 分配 给 硬件 单元 ， 得到 优化 的 面积 与 性能 。 和 大多数 高级 综合 系统 一样 ， 在 操作 调度 阶段 就 完成 了 功能 单元 的 分配 ， 因此 在 资源分配 阶段 主要 完成 存储单元 ( 主要 是 寄存器 ) 与 互连 单元 ( 如 总线 、 多路 选择器 、 三态 驱动器 等 ) 的 分配 ， 其中 寄存器 的 分配 是 数据 路径 综合 中 的 一个 重要 任务 ， 高级 综合 中 寄存器 的 分配 可以 通过 3 个 步骤 来 完成 ， 即求 出 每个 变量 的 生命期 、 寄存器 的 分配 和 寄存器 的 合并 。 当前 ， 关于 寄存器 的 分配 问题 所 进行 的 研究 不 多 ， 关于 寄存器 的 合并 ， 当前 所 进行 的 研究 主要 集中 于用 存储器 来 取代 所 需要 的 寄存器 。 基于 实际 的 芯片 设计 经验 ， 本文 将 探讨 用 寄存器 组来 取代 单个 的 寄存器 ， 在 不 影响 芯片 性能 的 条件 下 减少 互连 线 ， 从而 达到 减小 芯片 的 面积 、 提高 综合 设计 质量 的 目的 。 
 1 　 变量 的 生命期 
 　 　 我们 知道 ， 在 一个 以 VHDL 给出 的 数字 系统 的 行为 描述 中 ， 含有 许多 变量 ， 如果 它们 在 产生 后 ， 经过 一段时间 后 还要 用到 ， 则 必须 对 这些 变量 分配 寄存器 将 它们 保存起来 ， 但是 如果 对 每个 变量 分配 一个 寄存器 ， 这 将 会 增大 最后 所 产生 的 设计 的 面积 ， 导致 低质量 设计 的 产生 ， 因此 必须 考虑 变量 对 寄存器 的 共享 问题 。 要 解决 这个 问题 ， 必须 先求 出 每个 变量 的 生命期 。 
 　 　 寄存器 分配 是 在 操作 调度 的 基础 之上 进行 的 ， 前面 已 提到 过 ， 操作 调度 的 任务 是 将 行为 描述 中 的 操作 划分 到 控制 步中 ， 因而 每个 变量 必须 在 有效 的 时间段 就 确定 好 ， 这个 时间段 就是 变量 的 生命期 ， 以 控制 步数 来 度量 。 在 确定 变量 的 生命期 时 需要 注意 的 一个 问题 是 ， 当 行为 描述 中 含有 条件 结构 时 ， 由于 一个 条件 结构 中 的 两个 分枝 不会 同时 执行 ， 如果 两个 变量 是 在 不同 的 条件 分枝 中 产生 的 ， 则 它们 不会 同时 产生 ， 这样 ， 即使 它们 的 生命期 有 重叠 ， 也 可用 一个 寄存器 来 保存 它们 的 值 ， 即 需要 考虑 对 变量 的 生命期 进行 合并 的 问题 。 变量 的 生命期 可用 一个 表格 表示 ， 也 可以 集合 的 形式 来 表示 。 例如 ， 变量 i 必须 在 第 2 个 控制 步 、 第 3 个 控制 步 和 第 4 个 控制 步中 有效 ( 需要 对 其值 进行 保存 ) 时 ， 则 它 的 生命期 为 集合 Si = ( 2 , 3 , 4 ) 。 
 2 　 寄存器 的 分配 
 　 　 当 确定 了 每个 变量 的 生命期 后 ， 就 可 进行 寄存器 的 分配 。 对于 两个 变量 ， 当 它们 的 生命期 不 重叠 时 ， 则 可用 一个 寄存器 来 存储 它们 的 值 。 寄存器 的 分配 问题 可 采用 文献 [ 5 ] 中 的 团 划分算法 ( clique   partitioning   algorithm ) 来 解决 ， 在 该 算法 中 ， 用 一个 图来 表示 寄存器 的 分配 问题 ， 图中 的 节点 表示 变量 ， 以弧 连接 在 同一个 控制 步中 不会 同时 有效 的 变量 。 图 1 中 给出 了 文献 [ 5 ] 中 的 例子 的 VHDL 行为 描述 ， 经 操作 调度 后 ， 该 行为 需要 5 个 控制 步 就 可 完成 执行 ， 语句 前面 的 括号 中 的 数字 j 表示 本行 语句 将 在 控制 步骤 j 中 完成 执行 。 
 
 图 1   一段 VHDL 行为 描述 
 　 　 从图 1 中 可 看出 ， 该 行为 描述 中 包含 了 15 个 变量 ， 在 这里 ， 假定 图 1 中 的 VHDL 行为 描述 是 连续 循环 执行 的 ， 则 很 容易 确定 如图 2 所示 的 变量 的 生命期 。 
 
 图 2   变量 的 生命期 表 
 　 　 在 图 2 中 ， vi 表示 第 i 个 变量 ， 行 表示 控制 步 ， 列 表示 变量 ， l ( live ) 表示 变量 vi 在 该 控制 步中 的 值 必须 有效 ， d ( dead ) 表示 变量 vi 在 该 控制 步中 的 值 是 无效 的 ( 不 需要 保存 其值 ) 。 显然 ， 对 这 15 个 变量 ， 如果 给 每个 变量 均 分配 一个 寄存器 时 ， 就 需要 15 个 寄存器 ， 这样 将会 浪费 硬件资源 。 实际上 ， 对于 这 15 个 变量 ， 仅 需要 8 个 寄存器 r1 - r8 ， 它们 分别 分配 给 r1 ( v1 , v14 ) 、 r2 ( v2 , v7 , v9 , v15 ) 、 r3 ( v3 , v8 , v13 ) 、 r4 ( v4 ) 、 r5   ( v5 , v11 ) 、 r6 ( v6 ) 、 r7 ( v10 ) 、 r8 ( v12 ) 。 当 确定 了 数据 路径 综合 中所 需 的 寄存器 后 ， 将 讨论 寄存器 的 合并 问题 。 
 3 　 寄存器 的 合并 算法 
 　 　 对于 每个 寄存器 ， 在 数据 路径 综合 过程 中 ， 需要 将 它 与 某些 功能 单元 相连接 ， 以 进行 数值 的 传输 ， 从而 能 正确 地 实现 行为 描述 所 定义 的 功能 。 如果 将 每个 连接 都 用 连线 来 实现 ， 对于 某些 设计 ， 连线 的 数目 将 是 非常 大 的 。 因此 为了 减少 连线 和 提高 设计 的 质量 ， 可 对 寄存器 进行 合并 ， 实现 连线 的 共享 ， 即 根据 对 寄存器 的 读写 关系 ， 可 将 几个 寄存器 合并 为 一个 寄存器 组 ， 每个 组 含有 多个 读出 端口 和 写入 端口 ， 在 芯片 设计 中 ， 将 寄存器 的 读出 端口 和 写入 端口 分开 进行 设计 ， 仅 在 需要 进行 值 的 传输 时 ， 才 将 这些 端口 与 有关 的 单元 连接起来 。 在 寄存器 的 合并 过程 中 ， 首先 要 考虑 的 问题 就是 找出 可以 合并 成 一个组 的 寄存器 组 ， 并且 使 每个 组 包含 尽可能 多 的 寄存器 。 在 对 高级 综合 技术 进行 研究 的 过程 中 发现 ， 如果 寄存器 组 具有 的 读出 端口 和 写入 端口 数目 比较 多时 ， 则 每个 寄存器 组可 包含 更 多 的 寄存器 ， 但 增加 了 控制 开销 ， 相反 ， 如果 寄存器 组 具有 的 读出 端口 和 写入 端口 数目 比较 少时 ， 则 每个 寄存器 组可 包含 的 寄存器 就 比较 少 ， 但 控制 开销 比较 小 。 基于 对 微处理器 和 MPP 计算机 的 芯片 设计 经验 ， 认为 ， 每个 寄存器 组 包含 一个 写入 端口 和 两个 读出 端口 是 比较 合适 的 。 在 寄存器 合并 中 主要 解决 的 问题 就是 确定 出 可以 合并 到 一个 寄存器 组中 的 最大 的 寄存器 集合 。 在 进行 寄存器 的 合并 时 ， 是 先求 出 可 合并 到 一个 寄存器 组 的 最大 的 寄存器 集合 ， 然后 再 从 剩余 的 寄存器 中求 出 可 合并 到 下 一个 寄存器 组 的 最大 的 寄存器 集合 ， 重复 该 过程 直至 剩下 最后 一个 寄存器 或 所有 的 寄存器 均 已 被 分配 到 寄存器 组中 ， 当 剩下 最后 一个 寄存器 时 ， 可 根据 对 它 的 读写 关系 将 它 与 相关 的 元件 相连接 即可 。 下面 给出 求出 可 合并 到 一个 寄存器 组中 的 寄存器 集合 的 算法 。 
 　 　 假设 每个 寄存器 组有 2 个 读出 端口 和 1 个 写入 端口 ； 操作 调度 后 ， 操作 被 调度 到 k 个 控制 步中 完成 执行 ， 即 s1 - - sk ； 进行 寄存器 分配 后 ， 行为 描述 中 的 变量 需要 y 个 寄存器 来 保存 其值 ， 即 r1 - - ry ； 当 寄存器 i 包含 在 寄存器 组 RG 中时 ， 变量 Xi 为 1 ， 否则 ， Xi 为 0 ； 则 找到 可 合并 到 一个 寄存器 组 RG 的 最大 寄存器 数目 的 问题 可定义 为 如下 的 0 - 1 线性规划 问题 ： 
 
 ( 1 ) 
 约束条件 如下 ： 
 
 　 　 其中 j = 1 , ... , k ； 
 　 　 cij 表示 寄存器 i 在 第 j 个 控制 步中要 进行 读出 操作 ； 
 　 　 dij 表示 寄存器 i 在 第 j 个 控制 步中要 进行 写入 操作 。 
 　 　 通过 对 该 0 - 1 线性规划 问题 进行 求解 ， 就 可 找到 可 合并 到 一个 寄存器 组 RG 中 的 最大 数目 的 寄存器 集合 。 
 4 　 实验 结果 
 　 　 在 对 寄存器 合并 问题 进行 研究 且 给出 了 相应 的 算法 之后 ， 我们 用 C语言 实现 了 该 算法 ， 采用 文献 [ 5 ] 中 5.6 节 给出 的 例子 来 验证 本文 中 给出 的 合并 算法 的 有效性 。 图 3 ( a ) 给出 了 寄存器 合并 前 的 数据 路径 ( 文献 [ 5 ] 中 的 图 1 ) ， 可 看出 ， 数据 路径 中 包括 8 个 寄存器 ， 采用 本文 给出 的 方法 进行 寄存器 合并 后 ， 产生 了 3 个 寄存器 组 ， 即 ( v1 , v3 ) 、 ( v2 ) 、 ( v4 , v5 , v6 , v10 , v12 )   , 最后 生成 的 数据 路径 如图 3 ( b ) 所示 。 可 看出 ， 新 产生 的 数据 路径 中 连线 的 数目 减少 了 ， 并且 比较 规整 了 。 
 
 
 图 3   合并 前 的 数据 路径 和 寄存器 合并 后 的 数据 路径 行 寄存器 合并 后 ， 五 连线 的 数目 减少 了 许多 ， 所 产生 的 结果 与 手工 设计 的 完全一致 。 
 　 　 采用 本文 中 给出 的 算法 对 LS   MPP 中 的 处理 元 ( 包括 一个 ALU ， 一个 移位 器 ， 路由器 ， 一个 缓冲器 ， 8 个 寄存器 ) 进行 寄存器 合并 后 ， 互连 线 的 数目 减少 了 许多 ， 所 产生 的 结果 与 手工 设计 的 完全一致 。 
 5 　 结论 
 　 　 实验 证明 ， 本文 的 寄存器 合并 算法 能 很 好地解决 高级 综合 中 的 寄存器 合并 问题 。 通过 寄存器 的 合并 ， 不但 减少 了 连线 的 数目 ， 使 芯片 的 面积 减小 了 ， 而且 使得 所 产生 的 数据 路径 比较 规整 ， 体现 出 了 VLSI 设计 中 的 模块化 思想 ， 这样 ， 有利于 对 芯片 的 测试 。 
 本文 受 “ 九五 ” 预研 专题 航空 基金 97F53133 资助 
 作者简介 ： 袁 小龙   男 ， 28 岁 ， 博士后 ， 研究 方向 为 EDA 技术 
 作者 单位 ： 西北工业大学 航空 微电子 中心 西安 710072 
 参考文献 
 1 　 Yuan   Xiaolong ， Shen   Xubang . A   New   Control   and   Data     Flow   Graph   Model . in   Proceedings   of   International   Workshop   on   Advanced   Parallel   Processing   Technology ， Beijing ,   1995 ： 107 
 2 　 袁 小龙 ， 沈绪 榜 . 一种 新 的 操作 调度 算法 . 计算机 学报 ， 1997 ， 20 ( 3 ) : 193 
 3 　 袁 小龙 ， 沈绪 榜 . 一种 基于 路径 的 调度 算法 . 计算机 研究 与 发展 ， 1998 ， 35 ( 3 ) ： 193 
 4 　 Tseng   C   J , Siewiorek   D   P . Automated   Synthesis   of   Data   Paths   in   Digital   Systems . IEEE   Trans . on   CAD ， CAD - 5 ( 3 ) ： 1986 - 07 
 收稿 日期 ： 1998 - 11 - 02 
