微型机 与 应用 
 MICROCOMPUTER   &   ITS   APPLICATIONS 
 2000   Vol.19   No.3   P.11 - 13 
 
 
 
 WWW 代理 技术 现状 与 改进 方案 
 吴冬升   谷天翔 
 　 　 摘 　 要 ： 客户机 Cache 技术 、 WWW 上 的 代理 技术 、 公共 Cache 技术 , 指出 了 它们 各自 的 局限性 。 提出 了 一种 改进 方案 — — WWW 本地 代理 的 公共 Cache 和 辅助 代理 相结合 的 解决方案 。 
 　 　 关键词 ： WWW 环球网   客户机 Cache   公共 Cache   HTTP 协议   辅助 代理 
 　 　 WWW 环球网 是 基于 超文本 的 信息 查询 系统 和 信息 发布 工具 , 为 用户 提供 了 友好 的 信息 查询 界面 。 它 的 出现 推动 了 Internet 的 发展 。 然而 , 分析 在 WWW 上 传输 的 数据 , 发现 其中 很多 是 冗余 的 。 例如 : 某 教研室 1 台 工作站 的 多个 用户 都 想 取得 Netscape 的 最新 版本 , 在 这种 情况 下 , 这些 用户 各自 去取 1 个 Netscape 的 拷贝 , 而 实际上 这个 教研室 只须 由 工作站 取 1 次 就 可以 了 。 这些 数据 的 重复 传输 浪费 了 许多 网络带宽 , 使 网络 速度 越来越 慢 , 而且 使 服务器 的 负荷 加重 。 为了 解决 这些 问题 , 现在 采用 的 一般 技术 是 客户机 Cache 技术 和 WWW 代理 的 公共 Cache 技术 。 下面 对 二者 作一 介绍 。 
 1   客户机 Cache 技术 和 WWW 代理 的 公共 Cache 技术 
 1.1   客户机 Cache 技术 
 　 　 这里 以 Netscape 浏览器 为 例来 说明 客户机 Cache 技术 的 使用 , 在 Netscape 的 菜单 Option 中选 Network   Preferences , 点击 Cache 页 , 可以 看到 其中 的 Memory   Cache 和 Disk   Cache 项 的 设置 , 缺省值 分别 为 600KB 和 10MB 。 也就是说 在 本地 机上 开辟 了 1 个 内存 区 （ Memory   Cache ） 和 1 个 磁盘 区 （ Disk   Cache ） 作为 数据 传送 的 缓冲区 , 可以 暂存 以前 调用 过 的 资料 。 其中 内存 区 用于 本次 入网 所 调用 的 数据资料 的 暂存 , 从 Internet 上传 过来 的 每 一页 面 , 相应 地 在 内存 缓冲区 给予 保存 1 个 备份 。 硬盘 缓冲区 则 用于 保存 前几次 入网 所 调用 的 资料 页面 。 只要 硬盘 区 开辟 得 足够 大 , 将 可以 保存 前 几个 星期 甚至 前 几个 月 曾 调用 过 的 数据资料 。 这样 , 可以 大大 节省 从 Internet 上 传输 的 数据量 。 
 　 　 在 Cache 页面 还有 Verify   Documents 的 设置 情况 , 3 个 选项 分别 为 : Once   per   Session 、 Every   Time 及 Never 。 当 选择 Once   per   Session 的 设置 时 , Netscape 将 发送 1 个 信息 给 所 调用 页面 的 Web 服务器 , 查问 资料 是否 有 改变 , 如 有 改变 , 则 传送 1 个 新 的 拷贝 , 如 无 改变 , 则 从 硬盘 缓冲区 直接 调用 。 本次 入网 只 校验 1 次 , 如 再 调用 则 不再 校验 , 而是 直接 调用 内存 或 硬盘 缓冲区 的 备份 。 Every   Time 选项 则 每次 调用 该 资料 , 无论 资料 是否 改变 , 都 要 进行 校验 。 Never 选项 不 对 调用 资料 校验 , 只要 硬盘 上 有 , 则 直接 调用 。 
 　 　 采用 客户机 技术 解决 了 单个 用户 查询 数据 的 浪费 问题 , 但 这些 Cache 并 不 被 共享 , 每个 客户机 都 有 自己 的 Cache , 同一 数据 可能 被 放在 不同 的 Cache 中 , 显然 这种 方案 并未 从根本上 解决问题 。 
 1.2   WWW 代理 的 公共 Cache 技术 
 　 　 为了 解决 上述 问题 , 有人 提出 了 WWW 代理 的 公共 Cache 技术 。 图 1 为 原理图 。 
 
 图 1   WWW 代理 的 公共 Cache 技术 
 　 　 这种 技术 的 思想 是 : 客户机 想 访问 Internet 时 , 首先 与 WWW 代理服务器 建立 连接 , 当 WWW 客户机 请求 的 数据 在 Cache 时 , 代理服务器 根据 一定 的 规则 判断 是 将 该 数据 直接 返回 给 客户机 还是 向 远端 服务器 请求 。 如果 不 在 Cache 中 , 代理服务器 则 向 远端 WWW 服务器 请求 该 数据 , 在 将 数据 返回 给 客户机 的 同时 , 按 一定 规则 决定 是否 将 数据 放在 Cache 中 。 
 　 　 代理 既 是 1 个 WWW 服务器 , 又 是 1 个 WWW 客户 方 。 当 代理 接受 WWW 浏览器 的 请求 时 , 它 是 1 个 服务器 ; 当 代理 与 1 个 WWW 服务器 相连 请求 其 数据 时 , 它 是 1 个 客户 方 。 从 客户 方向 服务器 发出 的 请求 由 WWW 代理 完成 , 它 充分利用 了 WWW 代理 机 速度 的 高效性 , 可以 很快 地 完成 查询 的 任务 , 并 将 结果 返回 给 客户机 。 
 　 　 采用 WWW 代理 的 公共 Cache 技术 存在 下面 一些 问题 。 WWW 代理 的 公共 Cache 技术 对于 客户 方 用户 较少 的 情况 比较 好 , 但 当 用户 过多时 客户 方在 主机 上 存储 信息 过多 , 主机 负担 太重 , 同时 对 磁盘空间 的 要求 也 太高 , 直接 导致 了 系统 性能 下降 ; 另 一个 问题 是 该 系统对 一些 信息 不能 存放 , 例如 由 网关 执行 生成 的 动态数据 等 , 而 随着 JAVA 语言 和 VRML 等 新 技术 的 兴起 , 将 有 更 多 的 动态数据 生成 。 针对 这些 问题 , 本文 提出 一种 改进 的 方案 , 即 WWW 本地 代理 的 公共 Cache 和 辅助 代理 相结合 的 解决方案 。 
 2   WWW 本地 代理 的 公共 Cache 和 辅助 代理 相结合 的 解决方案 
 　 　 该 系统 设计 主要 有 3 个 方面 : 即 WWW 代理 模块 的 设计 , Cache 管理 模块 的 设计 , 辅助 代理 管理 模块 的 设计 。 下面 具体 介绍 3 部分 的 设计 情况 。 
 2.1   WWW 代理 模块 的 设计 
 　 　 1 . WWW 代理 模块 的 原理图 如图 2 所示 。 
 
 图 2   WWW 代理 模块 的 原理图 
 　 　 2 . WWW 代理 在 浏览器 与 服务器 间 的 作用 。 
 　 　 一般 的 WWW 浏览器 除了 支持 HTTP 协议 外 , 同时 还 支持 FTP 、 Gother 、 WAIS 、 NNTP 等 协议 , 为了 简化 WWW 浏览器 与 代理 之间 的 接口 , 在 WWW 浏览器 与 代理 之间 将 只 使用 HTTP 协议 。 当 用户 请求 1 个 其它 协议 目标 时 , WWW 浏览器 首先 向 代理 发出 1 个 HTTP 请求 , 由 代理 送出 1 个 其它 协议 的 请求 到 相应 的 服务器 上去 , 同时 代理 还要 将 服务器返回 的 目标 翻译成 HTTP 的 目标 , 再 送给 客户机 的 WWW 浏览器 。 
 　 　 3 . 代理 向 Cache 和 辅助 代理 写入 数据 
 　 　 当 代理 从 远端 WWW 服务器 中 接受 数据 时 , 要 根据 接受 到 的 数据 情况 , 决定 哪些 数据 放在 Cache 中 , 哪些 放在 辅助 代理 中 , 哪些 应该 舍弃 。 
 　 　 （ 1 ） 一般说来 , 在 由 GET 方法 下 请求 的 HTTP 协议 的 数据 应该 存在 Cache 中 , 因为 其 在 Internet 通信量 中 占 很大 的 比重 , 同时 该 协议 也 比较 容易 获得 关于 数据 的 信息 ; 
 　 　 （ 2 ） 对 HTTP 协议 中 由 POST 等 方法 获得 的 数据 , 或 在 HTTP 响应 头中 有 Authorization 行 的 数据 存放 到 辅助 代理 中 ; 
 　 　 （ 3 ） 对 HTTP 协议 中 包含 JAVA 和 VRML 等 技术 的 动态数据 信息 也 将 保存 到 辅助 代理 中 去 ; 
 　 　 （ 4 ） FTP 协议 的 数据 应该 放入 辅助 代理 中 , 因为 FTP 数据 缓冲 比较 困难 , 不 适宜 放在 Cache 中 , 而且 FTP 数据 信息 比较 难 获得 , 所以 存 到 辅助 代理 中 ; 
 　 　 （ 5 ） gopher 数据 不 存放 , 因为 gopher 数据 的 缓冲 并 不 重要 且 不 像 HTTP 和 FTP 那样 流行 , 同时 gopher 不 允许 client 获取 有关 的 文件 信息 ; 
 　 　 （ 6 ） NNTP 协议 的 数据 不 放入 Cache 中 , 因为 USENET 的 分布式系统 已经 实现 了 大 范围 的 数据交换 ; 
 　 　 （ 7 ） WAIS 和 其它 数据库 查询 结果 放到 辅助 代理 中 ; 
 　 　 （ 8 ） 当主 代理 的 Cache 空间 满时 按 一定 的 规则 将 其中 的 数据 存放 到 Cache 中 。 
 　 　 4 . 代理 从 Cache 和 辅助 代理 中 读数据 
 　 　 每当 WWW 浏览器 向 代理 发出请求 时 , 代理 必须 首先 检查数据 是否 已经 在 Cache 或 辅助 代理 中 , 当 数据 已经 在 Cache 或 辅助 代理 中 时 , 它 要 决定 是否 把 数据 直接 返回 给 WWW 的 client 端 , 这时 有 2 种 情况 : 
 　 　 （ 1 ） 代理 不 负责 对 Cache 和 辅助 代理 中 数据 的 管理 和 更新 , Cache 和 辅助 代理 中 数据 的 管理 和 更新 由 另外 的 模块 负责 。 代理 认为 所有 在 Cache 和 辅助 代理 中 的 数据 都 有效 , 且 最新 , 把 Cache 和 辅助 代理 中 的 数据 直接 返回 给 客户 方 ; 
 　 　 （ 2 ） 代理 负责 对 Cache 和 辅助 代理 中 的 数据 的 管理 和 更新 , 当 要求 的 数据 在 Cache 和 辅助 代理 中 时 , 代理 首先 确定 该 数据 是否 为 最新 。 为此 , 代理 送出 1 个 If - Modified - Since 的 请求 到 WWW 服务器 , 如果 服务器 上 数据 未 更新 , 代理 才 将 Cache 和 辅助 代理 中 数据 返回 给 客户 方 。 
 　 　 上述 2 种 方法 都 有 一定 的 缺陷 。 第一种 方法 中 , 代理 不 负责 Cache 和 辅助 代理 中 数据 的 更新 , 可以 减少 代理 的 负担 , 使得 代理 比较简单 , 同时 Cache 和 辅助 代理 中 的 数据 直接 送 client 端 , 缩短 了 客户端 的 响应 时间 。 但是 , 由于 代理 对 Cache 和 辅助 代理 中 的 数据 缺乏 了解 , 当 管理 和 更新 Cache 和 辅助 代理 的 模块 出现 问题 时 , 代理 返回 给 客户 的 数据 可能 不是 最新 的 。 
 　 　 在 第二种 方法 中 , 对于 已经 放到 Cache 和 辅助 代理 中 的 数据 , 每次 都 要 送 出 1 个 If - Modified - Since 的 请求 到 WWW 服务器 。 但是 在 Internet 上 建立 1 条 TCP 连接 将 花费 不少 的 时间 。 对于 较 小 的 数据 , 建立 连接 的 时间 远大于 数据 传送 的 时间 , 同时 不断 地 建立 TCP 连接 将 增加 WWW 服务器 的 负担 。 另外 , DNS 的 查找 是 十分 费时 的 工作 。 
 　 　 因此 , 上面 2 种 方法 都 不 太 理想 , 理想 的 方法 是 对 Cache 和 辅助 代理 中 的 每个 数据 都 建立 1 个 失效 日期 , 在 到达 失效 日期 前 , 代理 认为 数据 是 最新 的 , 采用 第一种 方法 , 将 数据 直接 返回 给 客户 方 ; 在 到达 失效 日期 后 , 代理 将 不能 保证 Cache 中 的 数据 是 最新 的 , 采用 第二种 方法 。 这种 方法 既 能 保证 返回 给 客户 方 的 数据 是 最新 的 , 又 能 减少 用户 的 响应 时间 。 代理 从 Cache 和 辅助 代理 读数据 的 流程图 如图 3 所示 。 
 
 图 3   代理 从 Cache 和 辅助 代理 中 读数据 的 流程图 
 　 　 如何 设定 不同 数据 的 失效 时间 , 是 一个 关键问题 。 这里 设定 Cache 数据 失效 时间 短 一些 , 而 辅助 代理 数据 失效 时间 相对 长 一些 。 数据 失效 时间 可以 通过 配置文件 来 设置 , 也 可以 通过 一定 的 算法 来 确定 。 失效 时间 的 建立 对本 系统 的 性能 影响 很大 。 
 2.2   Cache 管理 模块 的 设计 
 　 　 Cache 管理 模块 算法 如下 : 
 　 　 　 if （ freedisk < k ）   then 
 　 　 　 　 　 　 day = Cache 中 数据 的 最长 保留 时间 
 　 　 　 　 　 　 while （ freedisk < k ）   and   （ day > 1 ）   do 
 　 　 　 　 　 　 　 　 将 recenty = = day 的 文件 转移 到 辅助 代理 上 
 　 　 　 　 　 　 　 　 day = day - 1 
 　 　 　 　 　 　 　 　 end   while 
 　 　 　 　 　 　 　 　 if   day = = 1   then 
 　 　 　 　 　 　 　 　 　 　 while   （ freedisk < k ）   do 
 　 　 　 　 　 　 　 　 　 　 　 将 最大 的 文件 转移 到 辅助 代理 上 
 　 　 　 　 　 　 　 　 　 　 end   while 
 　 　 　 　 　 　 end   if 
 　 　 　 end   if 
 　 　 Cache 管理 模块 的 主要 功能 是 对 Cache 系统 的 磁盘空间 进行 监督 , 当其 剩余 空间 freedisk 少于 某 门限 k 时 , 将 存在 价值 小 的 数据 删除 , 删除 的 原则 可 采用 把 近期 最久 未 删除 的 数据 及时 删去 , 同时 将 数据文件 的 大小 作为 一个 低优先级 的 参数 给予 考虑 。 
 2.3   辅助 代理 管理 模块 的 设计 
 　 　 辅助 代理 管理 模块 的 设计 思想 仿照 上面 Cache 管理 模块 的 设计 , 算法 如下 : 
 　 　 　 　 if （ freedisk < k ）   then 
 　 　 　 　 　 　 　 day = 辅助 代理 中 数据 的 最长 保留 时间 
 　 　 　 　 　 　 　 while （ freedisk < k ）   and   （ day > 1 ）   do 
 　 　 　 　 　 　 　 　 　 将 recenty = = day 的 文件 删除 
 　 　 　 　 　 　 　 　 　 day = day - 1 
 　 　 　 　 　 　 　 end   while 
 　 　 　 　 　 　 　 if   day = = 1   then 
 　 　 　 　 　 　 　 　 　 while （ freedisk < k ）   do 
 　 　 　 　 　 　 　 　 　 　 　 将 最大 的 文件 删除 
 　 　 　 　 　 　 　 　 　 end   while 
 　 　 　 　 　 　 　 end   if 
 　 　 　 　 end   if 
 　 　 当然 , 还 可以 综合 考虑 到 对于 特定 系统 , 某些 信息 会 被 经常 访问 到 , 可 将 这些 信息 的 优先级 提高 。 例如 , 对于 一所 大学 来说 , 其它 高校 的 信息 可能 经常 被 访问 到 , 可以 将 这些 信息 的 优先级 提高 , 尽量 保存 长 一些 时间 。 
 3   总   结 
 　 　 采用 本文 提出 的 WWW 本地 代理 的 公共 Cache 和 辅助 代理 相结合 的 解决方案 , 可以 减少 文件 在 网上 的 重复 传输 , 大大 减轻 了 网络 服务器 的 负担 , 降低 了 网络带宽 的 浪费 , 最终 方便 了 用户 。 
 吴冬升 （ 合肥工业大学 预测 与 发展 研究所  230009 ） 
 谷天翔 （ 合肥工业大学 预测 与 发展 研究所  230009 ） 
 参考文献 
 1 ， Berners - Lee   T . Hypertext   transfer   protocol . Internet   Engineering   Text   Force   Working   Draft , 1993 ; ( 11 ) 
 2 ， Glassman   S . A   caching   relay   for   the   world   wide   web .   in   Proceeding   of   First   International   WWW   Confeence , 1994 ; ( 5 ) 
 3 ， 陈良洲 , 鲍璐 , 张根度 . 公共 Cache 在 WWW 中 的 应用 . 计算机 工程 与 应用 , 1997 ; ( 7 ) 
 4 ， 赖庆 . 利用 Netscape 快速 查阅 Internet 资源 . 中国 计算机用户 , 1996 ; ( 10 ) 
 收稿 日期 ： 1999 - 09 - 19 
