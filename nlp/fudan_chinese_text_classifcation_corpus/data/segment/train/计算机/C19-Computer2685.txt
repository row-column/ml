软件 学报 
 JOURN   AL   OF   SOFTWARE 
 1999 年 　 第 10 卷 　 第 10 期 　 Vol.10 　 No.10 　 1999 
 
 
 
 一个 动态 超媒体 映射 引擎   
 钱培德   吕   强   杨季文   朱巧明 
 
 摘要 　 文章 首先 介绍 了 传统 应用软件 和 超媒体 应用软件 的 差异 , 指出 了 超媒体 应用 系统 的 特征 和 对 最终用户 的 吸引力 . 在 此基础 上 , 建立 了 一个 动态 超媒体 映射 引擎 的 模型 , 它 可以 透明 地为 大多数 传统 应用 系统 增加 超媒体 的 界面 . 文章 最后 给出 了 在 WWW 上 实现 的 一个 DHyME ( dynamic   hypermedia   mapping   engine ) 实例 . 
 关键词 　 超媒体 , 映射 引擎 , 联系 . 
 中图法 分类号 　 TP311 
 
 A   Dynamic   Hypermedia   Mapping   Engine 
 QIAN   Pei - de   L   Qiang   YANG   Ji - wen   ZHU   Qiao - ming   
 ( Jiangsu   Key   Laboratory   of   Information   Processing   Technology   Suzhou   215006 ) 
 ( Department   of   Computer   Engineering   Suzhou   University   Suzhou   215006 ) 
 Abstract   The   differences   between   traditional   applications   and   hypermedia   applications   are   compared   in   this   paper .   The   main   features   of   hypermedia   system   and   the   attraction   for   non - hypermedia   application   users   are   introduced .   A   model   of   dynamic   hypermedia   mapping   engine   is   built ,   which   can   enhance   non - hypermedia   application   with   hypermedia   features   with   minimal   or   no   changes   to   it .   A   prototype   of   DhyME   ( dynamic   hypermedia   mapping   engine )   is   also   presented   in   this   paper . 
 Key   words   Hypermedia ,   mapping   engine ,   relationship . 
 　 　 超媒体 ( hypermedia ) 应用 系统 已经 成为 描述 一个 信息系统 的 新 模式 , 超媒体 和 超文本 ( hypertext ) 在 当前 的 学术界 已经 不加区分 . 超媒体 的 魅力 不仅 在于 media 这个 词上 : 它 把 信息 对象 从 传统 的 文字 扩展 为 图像 、 声音 等 更 接近 于 客观 对象 的 形式 , 更 重要 的 是 , 超媒体 的 魅力 体现 在 hyper 的 含义 上 , 即 着重 表达 信息 对象 之间 的 自然 联系 , 并 以 这种 联系 作为 用户 访问 应用 系统 的 基石 . 于是 , 用户 通过 超媒体 应用 系统 , 可以 享受 到 更 接近 客观事实 的 、 使用 上 更 灵活 的 信息系统 . 
 　 　 INTERNET 的 普及 和 应用 , 为 超媒体 应用 系统 的 推广 和 普及 作出 了 贡献 , 但 同时 也 为 超媒体 应用 系统 的 更 深层次 、 更 高效率 的 推广 制造 了 误解 . 通常 人们 倾向 于 认为 在 WWW 上 感受 到 的 就是 超媒体 应用 系统 的 全部 . 事实上 , WWW 上 的 应用 系统 仅仅 体现 了 超媒体 应用 系统 的 一小部分 特征 , 远 不是 超媒体 应用 系统 的 全部 . 超媒体 应用 系统 并不等于 采用 HTTP 的 Web 应用程序 . 
 　 　 本文 首先 从 用户 视图 的 观点 指出 了 传统 信息 应用 系统 和 超媒体 应用 系统 的 特征 , 从中 比较 了 它们 的 差别 . 然后 小结 了 超媒体 的 特点 , 指出 超媒体 系统 的 魅力 所在 . 我们 还 建立 了 一个 动态 超媒体 映射 引擎 DHyME ( dynamic   hypermedia   mapping   engine ) 的 模型 , 它 可以 透明 地为 大多数 传统 应用 系统 增加 超媒体 的 界面 , 这些 传统 的 应用 系统 包括 采用 C / S 模型 的 应用 系统 . 本文 最后 简单 地 给出 了 在 WWW 上 实现 的 一个 DHyME 实例 . 
 1 　 超媒体 和 超媒体 应用 系统 的 特征 
 1.1   传统 应用 系统 的 特征 
 　 　 传统 的 应用 系统 均 可 抽象 为 面向 解决 特定 问题 的 信息检索 系统 . 从 用户 视图 来看 , 是 将 一个 特定 领域 的 信息 集合 , 通过 各种 用户界面 表达 给 用户 . 这种 用户界面 可以 是 层层 递选 菜单 的 路径 指定 式 , 也 可以 是 用户 输入 参数 的 计算 式 . 不管怎样 , 都 是从 特定 的 信息 集合 中 抽取 一部分 , 成为 一个 视图 而 提供 给 用户 . 
 　 　 相对 于 超媒体 而言 , 我们 可以 小 结出 以下 关于 传统 应用 系统 的 特征 . 
 　 　 ( 1 )   它 面向 一个 特定 的 应用 问题 . 
 　 　 ( 2 )   用户界面 是 固定 的 , 由 应用 系统 的 设计者 在 发布 该 应用 系统 之前 就 确定 好 了 , 即 在 系统 的 开发阶段 就 已 确定 , 用户 无权 在 使用 的 过程 中 调整 . 
 　 　 ( 3 )   由于 用户界面 的 固定 , 导致 该 应用 系统 提供 给 用户 的 信息 视图 也 是 固定 的 , 用户 无法 得到 这些 固定 的 视图 之外 的 信息 , 哪怕 是 这些 信息 就 囿于 面向 该 特定 问题 的 “ 信息 资源 ” . 
 1.2   超媒体 应用 系统 的 特征 
 　 　 在 超媒体 应用 系统 中 , 首先 , 特定 问题 的 “ 信息 资源 ” 用 “ 元体 ( element ) ” 来 组织 , 虽然 “ 信息 资源 ” 面向 具体 问题 , 但元体 的 组织 和 划分 以 表达 这些 客体 本身 的 属性 为主 . 建立 元体 与 元体 之间 的 联系 ( relationship ) 是 超媒体 系统 的 基石 . 
 　 　 由于 元体 和 联系 的 建立 并 不是 只 面向 解决 特定 问题 , 所以 联系 可以 有 内 联系 ( internal   relationship ) 和 外 联系 ( external   relationship ) 之分 , 它们 分别 表示 应用 系统 内部 的 联系 和 跨越 应用 系统 的 联系 . 
 　 　 用户 通过 用户界面 得到 的 用户 视图 事实上 是 元体 的 展示 . 其 特殊 之 处 在于 用户 可以 通过 元体 的 联系 来 访问 得到 另外 的 视图 , 包括 系统 内 的 或 系统 外 的 . 因此 , 有别于 传统 应用 系统 , 超媒体 系统 的 用户 视图 有 以下 特点 . 
 　 　 ( 1 )   由于 外 联系 的 存在 , 用户 可以 跨越 系统 得到 相关 信息 . 这里 所谓 的 “ 相关 ” , 既 可以 是 客观 事务 本身 的 联系 , 也 可以 是 主观 建立 的 面向 逻辑 的 联系 , 参见 1.3 . 3 节 的 标注 特征 . 
 　 　 ( 2 )   由于 用户 视图 的 多样性 , 连 开发者 本身 也 无法 罗列 可能 的 用户 视图 , 完全 由 用户 在 使用 过程 中 的 交互 动态 来 决定 . 
 　 　 ( 3 )   传统 应用 系统 提供 用户 视图 树供 用户 遍历 , 树 的 路径 均 是 确定 的 , 而且 只能 在 这棵 树中 遍历 . 超媒体 系统 提供 一个 无序 的 用户 视图 网络 给 用户 遍历 , 遍历 的 路径 几乎 无数 , 遍历 的 节点 可以 不 受限制 . 这是 超媒体 系统 最大 的 优点 , 也 是 最大 的 缺点 . 好 在 有 其他 的 理论 和 措施 限制 这个 缺点 [ 1 ] . 
 1.3   超媒体 的 特征 
 　 　 超媒体 的 特征 可以 有 多角度 的 描述 , 从 应用 系统 的 用户 视图 来看 , 其 主要 特征 有 结构 ( structure ) 、 导航 ( navigation ) 和 标注 ( annotation ) 3 个 方面 [ 2 ] . 
 1.3 . 1   结构特征 
 　 　 结构特征 是 超媒体 的 内在 特征 , 也 是 联系 的 具体 记载 . 在 用户 视图 中 , 结构化 的 特征 也 是 能够 体会 到 的 . 如 用户 视图 可以 是 一组 具备 语义 的 节点 ( semantically - typed   node ) 集合 , 每个 节点 具备 语义 化 的 链接 ( semantically - typed   link , 名词 ) , 每个 链接 具备 齐全 的 属性 ( link   attribute ) . 又 如 , 用户 视图 可以 是 一个 系统 概述 ( overview ) 示意 . 
 　 　 ( 1 )   节点 就是 一个 用户 视图 , 它 把 若干个 元体 组合 在 一起 , 完成 一定 的 逻辑 功能 , 表现 给 用户 . 节点 具备 了 语义 功能 后 , 就 有 了 上下文 的 语境 , 从而 可以 体现 出 不同 的 语 用来 . 简单 地 理解 , 具备 了 语义 的 节点 , 从 内容 上 对 节点 进行 了 归类 , 帮助 用户 更 快 、 更 准确 地 找到 用户 视图 . 
 　 　 ( 2 )   链接 的 语义 是 在 元体 层次 上 进行 内容 上 的 分类 . 从 节点 过渡 到 节点 是 面向 解决问题 的 , 从元体 连结 到 另外 的 部件 则 是 事务 本身 联系 的 . 所以 , 链接 的 语义 同 节点 的 语义 属于 不同 的 层次 . 超媒体 系统 可以 有 另外 的 机制 为 具体 的 用户 限制 或 表现 一定 的 链接 语义 , 并非 每个 用户 在 任何 条件 下 都 可以 享用 所有 链接 的 语义 . 
 　 　 ( 3 )   系统 概述 有 全局 与 局部 之分 , 从 用户 视图 的 角度 来看 , 它们 没有 区别 , 只不过 是 用户 视角 的 广和窄 之分 . 系统 概述 实际上 是 节点 语义 的 图形 表示 . 
 1.3 . 2   导航 特征 
 　 　 导航 特征 是 用户 最 容易 体会 的 超媒体 特征 , 也 是 超媒体 系统 区别 于 传统 应用 系统 的 最 显著 的 特征 , 它 是 联系 的 外 在 体现 . WWW 给 用户 最 深刻 的 印象 恐怕 就是 一部分 的 导航 特征 , 如 浏览 、 连结 和 部分 索引 . 
 导航 特征 可以 细化 为 以下几点 . 
 　 　 ( 1 )   浏览 , 用 Microsoft 的 术语 叫 explore , 用 Netscape 的 术语 叫 browse , 均 指 显示 或 表现 某个 节点 或元体 的 内容 ( 可以 是 各种 media ) , 这 一点 与 传统 的 应用 系统 没用 任何 差别 . 
 　 　 ( 2 )   连结 ( 动词 ) , 根据 浏览 到 的 节点 或元体 所 提供 的 链接 , 访问 其他 与 此 联系 的 节点 或元体 . 一般来说 , 具备 连结 功能 的 节点 或元体 在 超媒体 中 被 称为 锚点 ( anchor ) . 
 　 　 ( 3 )   索引 , 这 是 将 用户 浏览 的 节点 或元体 索引 起来 , 于是 用户 可以 回到 自己 访问 踪迹 的 任何 一点 . 
 　 　 ( 4 )   查寻 , 这是 连结 的 扩展 , 用户 可以 基于 节点 或元体 , 条件 化地 发出 基于 内容 或 基于 结构 的 查寻 , 由 应用 系统 过滤 出 可能 的 链接 , 再 从 这些 链接 中 实施 连结 操作 . 
 　 　 ( 5 )   导图 , 这是 索引 的 扩展 , 系统 开发者 或 用户 都 可以 组织 一定 的 节点 或元体 , 在 其中 建立 一种 固定 的 联系 , 用来 完成 一个 具体 的 逻辑 功能 , 其他 用户 就 可以 被 限制 在 这个 导图 上 , 按 指定 的 次序 访问 固定 的 内容 . 
 1.3 . 3   标注 特征 
 　 　 标注 特征 是 指 用户 能够 为 浏览 到 的 任何 客体 标 上 注释 , 或者 强行 为 其 建立 本 系统 内 、 甚至 本 系统 外 的 链接 . 传统 应用 系统 的 联系 侧重 的 是 应用 系统 内 本身 固有 的 联系 , 它 针对 解决 一个 固定 的 问题 , 是 客体 自身 的 记载 . 而 标注 特征 则 完全 体现 了 用户 的 一种 主观 理解 , 它 可以 完全 独立 于 客体 本身 的 联系 之外 . 
 　 　 如果说 超媒体 的 联系 是 开发者 针对 解决问题 而 建立 , 那么 , 标注 特征 提供 用户 一种 能力 , 使 他 能够 针对 使用 建立 另外 一种 “ 联系 ” , 或 针对 解决问题 而 增加 在 开发阶段 未 建立 的 “ 联系 ” . 
 　 　 标注 特征 和 导航 特征 的 基础 都 是 结构特征 , 建立 新 的 联系 只能 基于 该 客体 的 结构 表达 的 基础 . 如果 这种 结构 表达 不能 支持 用户 想 建立 的 新 联系 , 那么 这种 联系 就 无法 建立 . 
 2 　 动态 超媒体 映射 引擎 DHyME 的 设计 
 　 　 应该 说 超媒体 应用 系统 并未 在 当前 的 应用 系统 中 占据 主流 , 因此 , 其 魅力 因 技术 和 普及 的 原因 并未 得到 充分 展示 . 下面 我们 将 建立 一个 动态 超媒体 映射 引擎 DHyME 的 模型 , 它 可以 透明 地为 非 超媒体 应用 系统 增加 超媒体 的 界面 , 用户 可以 平滑 地 从 传统 应用 系统 过渡 到 超媒体 系统 , 享受 超媒体 的 功能 . 
 2.1 　 目标 系统 的 约束 要求 
 　 　 相对来说 , 应用 系统 可以 分为 面向 计算 和 面向 文档 两类 , 前者 如 会计 结算 系统 、 计算机辅助 设计 系统 、 专家系统 、 地理信息系统 和 统计分析 软件包 等 ; 后者 如 资料 检索系统 、 信息 文档 阅读 系统 . 虽然 这 两种 类型 的 应用 系统 在 用户 视图 中 没有 任何 差别 , 但是 从 实现 的 角度 来说 , 面向 文档 的 应用 系统 的 主要 工作 在于 文档 的 组织 和 用户界面 ; 面向 计算 的 应用 系统 除了 实现 用户界面 来 显示 计算结果 之外 , 还有 一大部分 工作 在于 针对 问题 建立 模型 及其 实时 计算 . 
 　 　 对于 面向 文档 的 应用 系统 来说 , 增强 超媒体 功能 的 工作 在于 重新 建立 文档 之间 的 联系 , 并 在 用户界面 上 实现 对 这些 联系 的 访问 , 这是 一种 静态 的 工作 过程 . 对于 面向 计算 的 应用 系统 来说 , 由于 其 在 用户界面 上 显示 的 “ 文档 ” 是 一个 动态 的 计算结果 , 所以 为 它 建立 超媒体 功能 的 思路 和 方法 均 比较 特殊 . 我们 把 这种 以 面向 计算 应用 系统 为 特征 的 应用 系统 称为 DMIS ( dynamically - mapped   information   system ) , 意 为 不得不 动态 映射 超媒体 功能 的 信息系统 [ 3 ] . 
 　 　 DMIS 的 特征 是 , 应用 系统 明显 地 可以 划分 为 显示 模块 和 计算 模块 这样 一前一后 的 两个 组成部分 . 前者 可以 用 UIS ( user   interface   system ) 来 表示 , 后者 还是 借用 DMIS 来 代表 . 不难理解 , C / S 应用程序 就是 典型 的 DMIS , Web 应用程序 更是 标准 的 DMIS , 甚至于 静态 的 Web 主页 由于 其 HTTP 框架 的 实现 , 也 可以 归类 到 DMIS 中 . 
 　 　 DMIS 就是 DHyME 工作 的 目标 系统 , DHyME 将 为 DMIS 类型 的 应用 系统 透明 地 增加 超媒体 功能 提供 一种 比较 通用 的 解决方案 . 为 DMIS 增强 超媒体 功能 的 重要性 和 迫切性 还 在于 : 不同于 面向 文档 的 应用 系统 , DMIS 在 界面 上 显示 的 “ 文档 ” 具有 更深 的 内涵 , 它 的 中间 结果 , 例如 这份 “ 文档 ” 的 生成 方法 、 生成 参数 等 都 具有 重要 价值 , 用 超媒体 的 概念 来 实现 和 表示 这 类 信息 是 最 直接 、 最 自然 的 方法 . 
 2.2   DHyME 的 体系结构 
 　 　 DHyME 的 总体目标 是 要 在 尽量少 改动 DMIS 或 根本 不 改动 DMIS 的 基础 上 , 为 DMIS 增加 超媒体 功能 . 图 1 是 DHyME 的 结构 示意图 . 
 
 图 1 　 DHyME 的 结构 示意图 
 　 　 在 图 1 中 , DMIS 和 UIS 的 概念 在 第 2.1 节中 已经 说明 , 下面 我们 来 说明 其他 组成部分 . 
 　 　 User   Interface   System   Wrapper ,   简称 UIW , 是 一个 将 通用 的 DHyME 应用 于 一个 特定 应用 程序界面 方向 的 连接件 . 它 的 功能 有 3 个 : ①   翻译 转换 DHyME 和 UIS 之间 的 信息格式 ; ②   实现 DHyME 和 UIS 之间 的 信息 流通 ; ③   实现 UIS 未能 实现 的 、 DhyME 所 要求 的 超媒体 用户界面 . 
 　 　 UIS   Wrapper   Knowledge   Base , 含有 所有 UIW 所 需 的 与 UIS 通信用 信息 , 如 格式 转换 信息 、 通信协议 及 例程 、 DMIS 和 UIS 的 协调 关系 . 
 　 　 DMIS   Wrapper , 简称 DMISW , 是 一个 将 通用 的 DHyME 应用 于 一个 特定 应用程序 计算 核心 方向 的 连接件 . 它 的 功能 除了 实现 DHyME 和 DMIS 之间 的 信息 转换 和 流通 之外 , 更 重要 的 是 , DMISW 的 功能 是 要 为 来自 DMIS 的 文档 标注 出 可以 具备 超媒体 功能 的 元体 , 并 将 这些 元体 可以 具备 的 联系 一一 准备 好 , 包括 该 应用程序 DMIS 相关 于 解决 本 特定 问题 的 内 联系 和 帮助 理解 解决 特定 问题 的 外 联系 . DMISW 是 实现 DHyME 对 DMIS 的 透明 程度 的 关键 , 必须 充分利用 DMIS 所 提供 的 API 和 DMIS 开发人员 的 知识 . 
 　 　 DMIS   Instance 是 一些 基于 同一个 DMIS 的 应用 系统 实例 , 例如 , 基于 同一个 数据库 服务器 的 实例 数据库 和 基于 同一个 专家系统 开发 SHELL 的 具体 专家系统 . 
 　 　 DMIS   Wrapper   Knowledge   Base , 记录 和 实现 DMIS 内部结构 到 超媒体 结构 的 映射 . 我们 将 在 下 一节 详细 叙述 这个 部分 . 
 　 　 Dynamic   Hypermedia   Mapping   Engine , 这是 各种 超媒体 引擎 集合 的 总称 , 它 是 超媒体 特征 的 实现 者 , 事实上 是 超媒体 的 功能模块 的 组合 . 例如 , 可以 有 连结 引擎 、 索引 引擎 、 导图 引擎 和 查询 引擎 等等 . UIS 和 DMIS 之间 的 信息 流动 均 经过 DHyME 过滤 处理 之后 , 不管 是 在 界面 上 还是 在 用户 交互 的 内容 上 , 都 有 了 原 DMIS 所 不 含有 的 处理 : 超媒体 特征 . 
 　 　 从图 1 中 我们 可以 看到 , DHyME 是 与 应用程序 无关 的 , 它 可以 服务 于 所有 的 UIW 和 DMISW . DHyME 工作 在 超媒体 的 映射 模型 之中 , 实现 超媒体 的 各种 功能 . 两个 wrapper 除了 起 接口 的 作用 外 , 更 重要 的 是 实例 化 映射 模型 中 的 各种 表格 和 数据 . 因此 , wrapper 是 与 应用 系统 相关 的 , 将 目标 应用 系统 的 各种 要素 : 静态 的 属性 和 动态 的 行为 映射 为 超媒体 的 元体 、 节点 及其 联系 , 必要 的话 , 补充 提供 新 的 逻辑 的 或 物理 的 元体 、 节点 及其 联系 . 
 2.3   映射 机制 
 　 　 映射 机制 要 解决 的 主要 问题 是 描述 和 实现 超媒体 的 结构特征 . 总体 上 来说 , 我们 通过 一种 称为 桥接 规则 ( bridge   law ) 的 机制 来 实现 . 具体来讲 , 有 3 种 类型 的 桥接 规则 . 
 　 　 ( 1 )   元体 标定 桥接 规则 ( identification   bridge   law ) 
 　 　 这 类 规则 主要 用于 从 DMIS 到 超媒体 的 映射 . 它 描述 了 如何 把 DMIS 的 基本 信息 单元 映射 并 组织 成 超媒体 的 元体 或 节点 . 元体 和 节点 具有 许多 基于 超媒体 的 属性 , 元体 标定 桥接 规则 一方面 要 填充 这些 属性 , 另一方面 还要 描述 锚点 在 UIS 的 属性 : 显示 位置 、 显示 模式 、 锚点 位置 等 . 事实上 , 它 桥接 的 是 超媒体 对象 和 DMIS 对象 . 
 　 　 例如 , 在 一张 电子 数据报表 ( spreadsheet ) 中 , 作为 DMIS 对象 的 每个 cell 都 可以 是 超媒体 的 元体 , 它 所 具有 的 链接 可以 提供 该 cell 是 如何 生成 的 实例 ; cell 所 对应 的 列 标题 和行 标题 可以 提供 本列 或 本行 的 公式 ( formula ) 连结 . 
 　 　 ( 2 )   链接 桥接 规则 ( link   bridge   law ) 
 　 　 这 类 规则 主要 用来 描述 UIS 中 的 锚点 所 具备 的 链接 如何 映射 到 一个 新 的 “ 文档 ” , 这 实际上 是 连结 的 静态数据 资源 . DHyME 中 的 “ 动态 ” 含义 的 另 一种 诠释 也 就 在于 每个 链接 都 是 动态 生成 的 . 
 　 　 例如 , 如果 每个 链接 都 可以 用 一组 命令 序列 来 实现 , 链接 桥接 规则 就 可以 描述 这组 命令 序列 . 在 这些 命令 中 , 可以 有 如下 种类 : 
 　 　 ①   DMIS 原有 的 内部 命令 , 只不过 DMIS 把 这些 命令 用 在 实现 其他 用户 视图 上 ; 
 　 　 ②   DMIS 的 API , DMIS 原来 是 准备 给 UIS 或 二次开发 DMIS 用 的 ; 
 　 　 ③   由 DHyME 实现 的 和 ② 的 组合 ; 
 　 　 ④   其他 DMIS 的 ① 和 ② ; 
 　 　 ⑤   由 DHyME 实现 的 不同 DMIS 的 内部 命令 和 API 的 组合 . 
 　 　 ( 3 )   再现 桥接 规则 ( regeneration   bridge   law ) 
 　 　 由于 结构化 的 特征 允许 用户 随机 地 访问 元体 或 节点 , 因此 , 元体 或 节点 的 再现 需要 用 特定 的 规则 来 描述 , 这 就是 再现 桥接 规则 所 要 解决 的 问题 . 因为 用户 视图 或 节点 有 一定 的 上下文 环境 , 当 游离 于 这种 上下文 关系 随机 访问 某个 视图 或 节点 时 , 不能 要求 用户 继续 给出 这种 上下文 环境 . 再现 桥接 规则 就是 用来 记录 和 实现 每 一个 节点 或元体 的 上下文 环境 , 以便 独立 地 产生 相应 的 元体 或 节点 . 
 　 　 例如 , 用户 输入 一组 参数 , 得出 一个 方程解 , 又 将 这 一组 方程解 组合 另外 的 方程解 表现 在 一张 图示 中 . 那么 , 当 用户 在 别的 视图 中 突然 想要 访问 这个 方程解 , 或者 这张 综合 图示 时 , 再现 桥接 规则 能够 使 用户 直接 方程解 的 视图 或 综合 图示 . 
 3 　 一个 实例 
 3.1   概   述 
 　 　 我们 在 DHyME 的 指导 下 , 在 WWW 上 实现 了 一个 超媒体 引擎 [ 4 ] , 它 可以 动态 地为 浏览器 用户 提供 新 的 多重 链接 : 为 同一个 锚点 提供 不止 一个 链接 , 而 这种 新 增加 的 超媒体 功能 不 需要 修改 任何 原有 的 DMIS 和 UIS . 其 大致 思路 是 : 设置 一个 代理服务器 ( proxy   server ) , 当 浏览器 以此 代理 在 WWW 上 发出请求 时 , 代理服务器 首先 截获 返回 的 文档 , 将 此 文档 转发给 DMISW . DMISW 利用 元体 标定 桥接 规则 把 该 文档 内 的 所有 元体 标注 出来 , 再 将 此 文档 递交 给 DHyME . DHyME 根据 此次 请求 用户 的 级别 判定 该 为 这些 元体 提供 哪些 链接 , 然后 再 将 这份 文档 传递 给 UIW . UIW 需要 把 具备 链接 的 元体 嵌入 到 文档 中 , 使 其 成为 锚点 , 并 将 控制 机制 嵌入 文档 , 以便 当 用户 操作 这些 锚点 时 , 由 UIW 接受 控制 而 不是 由 浏览器 接受 控制 . 最后 , UIW 将 这 一份 新 文档 返回 给 代理服务器 , 由 其 返回 给 浏览器 作为 用户 请求 的 响应 . 
 　 　 当 用户 操作 到 DHyME 所 支持 的 锚点 时 , UIW 先于 浏览器 截获 控制 , 向 DHyME 发出 链接 请求 . DHyME 根据 链接 桥接 规则 和 当前 用户 的 级别 给出 一组 链接 , UIW 就 把 这 一组 链接 提供 给 用户 选择 . 当 用户 选择 了 其中 一个 实施 连结 时 , UIW 就 会 把 连结 命令 传递 给 DHyME . DHyME 取出 链接 桥接 规则 中 的 命令 序列 , 依次 发给 相应 的 DMIS 动态 执行 这些 命令 . 当 这些 命令 产生 新 文档 时 , 又 被 相应 的 DMISW 截获 . 如此 循环往复 . 
 
 图 2 　 DHyME 的 功能模块 和 数据流 示意图 . 
 　 　 UI - DMIS 是 一个 完整 的 应用程序 . 代理服务器 ( engine   proxy   server ) 的 作用 是 截获 来往 于 UI 和 DMIS 这 两个 模块 之间 的 消息 , 把 这些 消息 放到 引擎 的 各个 功能模块 中 去 处理 . 对于 我们 实现 的 原型 来说 , 代理服务器 就是 HTTP 代理服务器 . 
 　 　 在 DHyME 的 结构 中 , 引擎 功能模块 ( engine   function   module ) 是 实现 具体 功能 的 载体 , 事实上 , 除了 DMIS 和 UIW 之外 , 其他 模块 均 为 引擎 功能模块 . 这些 功能模块 可以 分布 地 运行 在 INTERNET 的 各个 主机 上 . 其 功能模块 之间 相互 独立 , 彼此 不 可见 . 消息 旅行 定位 管理器 ( traversal   path   manager ) 负责 动态 地 确定 所有 消息 流经 功能模块 的 路径 . 如 Message3 由 它 判定 了 不 需 经过 任何 其他 功能模块 , 直接 流通 于 UI 和 DMIS 之间 ; 而 Message1 和 Message2 被 判定 为 分别 流过 若干个 功能模块 , 然后 再 回到 UI - DMIS 的 循环 . 
 3.2   消息 对象 设计 
 　 　 在 DHyME 中 , 消息 采用 了 XML ( extensible   markup   language ) 规范 , 并 采用 Microsoft 的 msxml   软件包 实现 了 文档 对象 模型 DOM ( document   object   model ) . 于是 , 每个 功能模块 输入 和 输出 的 均 为 消息 对象 ( 在 DHyME 中 被 命名 为 EngineMessage ) . 对 消息 的 产生 和 消费 均 按照 面向对象 的 访问 规范 . 
 　 　 下面 是 一个 消息 对象 的 例子 , 这是 一个 由 代理服务器 产生 的 , 来自 于 Web 服务器 的 消息 . 
 　 　 <   ! - -   DHyME   message   By   Qiang   Lv   - - > 
 　 　 <   ? XML   version = “ 1.0 ” ? >   
 　 　 < ! DOCTYPE   DOCUMENT   [ 
 　 　 <   ! ELEMENT   DOCUMENT   ( Subject , MessageID , TraversalPath , MessBody ) >   
 　 　 < ! ELEMENT   Subject   ( # PCDATA ) >   
 　 　 <   ! ELEMENT   MessageID   ( Owner , RealMessageID , MessageType , SubModules ) >   
 　 　 <   ! ELEMENT   Owner   ( # PCDATA ) >   
 　 　 <   ! ELEMENT   RealMessageID   ( # PCDATA ) >   
 　 　 <   ! ELEMENT   MessageType   ( # PCDATA ) >   
 　 　 <   ! ELEMENT   SubModules   ( # PCDATA ) >   
 　 　 <   ! ELEMENT   TraversalPath   ( # PCDATA ) > 
 　 　 <   ! ELEMENT   MessBody   ( # PCDATA ) > 
 　 　 ] >   
 　 　 <   DOCUMENT > 
 　 　 　 　 <   Subject >   SourceDocument <   / Subject > 
 　 　 　 　 <   MessageID >   
 　 　 　 　 　 　 　 <   Owner ?   OriginalUser <   / Owner >   
 　 　 　 　 　 　 　 <   RealMessageID >   do c# 921213 <   / RealMessageID >   
 　 　 　 　 　 　 　 <   MessageType >   sample <   / MessageType >   
 　 　 　 　 　 　 　 <   SubModules >   Proxy <   / SubModules >   
 　 　 　 　 <   / MessageID >   
 　 　 　 　 <   TraversalPath >   fun1 + fun2 * fun3 + fun4 á   / TraversalPath > 
 　 　 　 　 <   MessBody >   
 　 　 　 　 　 　 　 <   ! [ CDATA [ 
 　 　 　 　 　 　 　 　 　 <   HTML >   
 　 　 　 　 　 　 　 　 　 　 ... 
 　 　 　 　 　 　 　 　 　 <   / HTML >   
 　 　 　 　 　 　 　 　 ] ] >   
 　 　 　 　 <   / MessBody >   
 　 　 <   / DOCUMENT >   
 　 　 能 模块 将 此 消息 滤过 msxml 软件包 后 , 就 变成 对 消息 对象 的 处理 了 , 没有 必要 自己 扫描 消息 来 获取 需要 的 信息 . TraversalPath 元素 的 内容 指示 了 本 消息 需要 旅行 功能模块 fun1 , 然后 可以 同时 并行 发给 fun2 和 fun3 , 最后 再 旅行 到 fun4 . 
 　 　 除了 连结 引擎 以外 , 我们 还 实现 了 索引 引擎 , 把 用户 访问 的 每个 页面 用 再现 桥接 规则 记载下来 , 用户 可以 随机 访问 任何 一个 被 索引 的 页面 . 
 4 　 结   语 
 　 　 DHyME 的 贡献 在于 , 建立 一个 平滑 的 、 从 传统 应用 系统 到 超媒体 系统 的 过渡 机制 , 使 最终用户 能够 在 传统 应用 系统 的 背景 下 享用 超媒体 的 功能 , 为 新 的 应用 系统 的 开发 提出 合理 的 需求 . 同时 , DHyME 的 各个 引擎 的 设计 和 实现 , 也 正是 超媒体 功能 的 设计 和 实现 , 与 具体 的 应用程序 无关 . 所以 , DHyME 的 研究 和 进步 同时 也 为 超媒体 系统 的 研究 和 开发 作出 了 贡献 . 
 作者简介 ： 钱培德 ： 1948 年生 , 教授 , 主要 研究 领域 为 操作系统 , 中文信息处理 
 　 　 　 　 　 吕 　 强 ： 1965 年生 , 副教授 , 主要 研究 领域 为 操作系统 , 中文信息处理 技术 
 　 　 　 　 　 杨季文 ： 1963 年生 , 副教授 , 主要 研究 领域 为 中文信息处理 技术 
 　 　 　 　 　 朱巧明 ： 1963 年生 , 副教授 , 主要 研究 领域 为 数据库 　 　 　 　 　 
 作者 单位 : 江苏省 计算机信息 处理 技术 重点 实验室   苏州   215006 
 　 　 　 　 　 苏州大学 计算机 工程系   苏州   215006 
 参考文献 
 1 　 Conklin   E   J .   Hypertext :   a   survey   and   introduction .   IEEE   Computer ,   1987 , 20 ( 9 ) : 17 
 　 　 ～ 41 
 2 　 Bieber   M ,   Kacmar   C .   Designing   hypertext   support   for   computational   applications .   
 　 　 Communications   of   the   ACM ,   1995 , 38 ( 8 ) :   99 ～ 107 
 3 　 Bieber   M ,   Vitali   F .   Toward   support   for   hypermedia   on   the   World   Wide   Web .   IEEE   
 　 　 Computer ,   1997 , 30 ( 1 ) : 62 ～ 70 
 4 　 L   Q ,   Ramanathan   P ,   Pattabiraman   M   et   al .   Automatically   applying   hypermedia   to   
 　 　 existing   web   applications .   In :   Proceedings   of   Hypertext ’ 98 .   Pittsburg .   1998 .   
 　 　 http : / / www . ics . uci . edu / pub / kanderso / ht98demos / lu . html 
 收稿 日期 : 1998 - 06 - 05 修稿 日期 : 1998 - 11 - 25 
