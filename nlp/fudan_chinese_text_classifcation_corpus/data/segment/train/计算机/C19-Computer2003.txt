微型机 与 应用 
 WEIXINGJI   YU   YINGYONG 
 1999 年 3 月   第 18 卷   第 3 期   vol.18   No.3 
 
 
 
 Java 战胜 C / C++ 的 奥秘 
 — 从 语言 和 实现 机制 角度 剖析 Java 与 C / C++ 
 徐鹏 　 王克宏 
 　 　 摘 　 要 ： 针对 Java 语言 与 C / C++ 语言 在 功能 、 安全性 、 可移植性 等 方面 各自 不同 的 特点 进行 技术 分析 ， 同时 展望 Java 语言 的 发展前景 。 
 　 　 关键词 ： Java 语言 　 C / C++ 语言 　 Java 虚拟机 　 即时 编译器 
 1 　 从 C 、 C++ 语言 到 Java 的 发展 
 　 　 C 程序设计 语言 自 推出 以来 就 一直 十分 流行 。 它 的 流行 应当 归功于 一些 非常 具有 使用 价值 的 特性 ( 例如 针对 计算机硬件 的 特定 数据类型 、 程序 小型化 以及 易于 掌握 等 ) 、 其 标准 的 运行 时 类库 ( 其中 包括 了 用于 输入 / 输出 、 存储 定位 、 字符串 操作 等 功能 ) 以及 数量 庞大 的 开发工具 集 ( 包括 UNIX 操作系统 在内 的 很多 操作系统 上 都 具有 很多 C语言 开发工具 ) 。 
 　 　 随着 计算机 应用程序 的 复杂化 ， C++ 语言 出现 了 ， C++ 语言 主要 用于 设计 大型 的 应用程序 ， 同时 由于 充分 结合 了 面向对象 的 技术 ， 使 利用 这种 语言 设计 出 的 程序 增加 了 可读性 和 可维护性 。 由于 C++ 语言 过多地 顾及 了 与 C语言 的 兼容性 ， 因此 导致 这种 新 语言 自身 存在 很多 问题 。 其中 典型 的 问题 包括 ： 指针 运算 、 缺少 数组 索引 、 缺少 数组 越界 检测 、 函数参数 的 数量 可变 以及 对 字母 的 大小写 不 进行 检测 等 。 
 　 　 Java 是 一种 新型 的 面向对象 的 程序设计 语言 ， 与 C 和 C++ 语言 相比 起来 ， 它 更加 易于 学习 和 使用 。 Java 扬弃 了 C 和 C++ 语言 中 的 一些 复杂 结构 ， 增添 了 可移植性 和 安全性 等 功能 ， Java 应用程序 ( 包括 Applet 程序 ) 可以 在 各种 不同 的 网络 环境中运行 。 Java 之所以 能够 在 短时间 内 就 战胜 C++ ， 成为 众多 程序员 首选 的 面向对象 程序设计 语言 ， 这 与其 自身 的 特性 是 密不可分 的 。 
 2 　 Java 语言 与 C 、 C++ 语言 的 比较 
 　 　 在 变量 声明 、 参数传递 、 操作符 、 控制 语句 等 方面 ， Java 语言 使用 了 和 C 、 C++ 相同 的 风格 ， 使得 那些 熟悉 C 、 C++ 语言 的 程序员 可以 很 方便 地 利用 这种 新型 的 程序设计 语言 进行 编程 工作 。 同时 Java 为了 实现 其 简单 、 鲁棒 、 安全 等 特性 ， 也 摒弃 了 C 和 C++ 语言 中 许多 不合理 的 内容 。 
 2.1 　 语言 特性 
 　 　 1 . 指针 类型 和 算术 运算 。 Java 语言 不 支持 C / C++ 中 的 指针 ， 因为 由于 指针 所 进行 的 内存地址 操作 常常 会 造成 不可 预知 的 错误 ， 同时 通过 指 针对 某个 内存地址 进行 显式 类型转换 后 ， 可以 访问 1 个 C++ 中 的 私有 成员 ， 从而 破坏 系统 的 安全性 ， 造成 系统 的 崩溃 。 Java 对 指针 进行 完全 的 控制 ， 程序员 不 能够 直接 进行 任何 指针 操作 ， 例如 把 整数 转化 为 指针 ， 或者 通过 指针 释放 某一 内存地址 等 。 
 　 　 2 . 头文件 。 在 C 和 C++ 语言 中 用 头文件 来 声明 类 的 原型 以及 全局变量 、 库函数 等 ， 在 较大型 的 系统 中 ， 维护 这些 头文件 是 很 困难 的 。 Java 不 支持 头文件 ， 类 成员 的 类型 和 访问 权限 都 封装 在 1 个类 中 ， 运行 时 系统对 访问 进行 控制 ， 防止 对 私有 成员 的 操作 。 同时 ， Java 中用 import 语句 来 与 其他 类 进行 通信 ， 以 使用 它们 的 方法 。 
 　 　 3 . 结构 、 联合 和 函数 。 C 、 C++ 中 的 结构 ( Structure ) 和 联合 ( Union ) 中 所有 成员 均 为 公有 ， 这样 就 带来 了 安全性 问题 。 Java 中 不 包含 结构 和 联合 ， 所有 的 内容 都 封装 在 类 中 。 同时 Java 语言 通过 类中 的 方法 来 实现 C 和 C++ 语言 中 函数 所 实现 的 功能 。 
 　 　 4 . GOTO 语句 。 Java 不 支持 C / C++ 中 的 GOTO 语句 ， 而是 通过 例外 处理 语句 try 、 catch 、 finally 等 来 代替 C / C++ 中 遇到 错误 时用 goto 来 进行 跳转 的 情况 ， 使 程序 更 具有 可读性 ， 并且 更加 结构化 。 
 　 　 5 . 多 继承 。 C++ 语言 支持 多重 继承 ， 多重 继承 指 1 个类 可以 同时 成为 多个 类 的 子类 ， 它 使得 类 的 层次 关系 不 清楚 ， 而且 当 多个 父类 同时 拥有 相同 的 成员 变量 和 方法 时 ， 子类 的 行为 并 不 容易 确定 ， 这 就 给 编程 工作 带来 了 困难 。 然而 Java 语言 只 支持 单一 继承 ， 也就是说 每个 Java 类 只 能够 具有 1 个 父类 。 单一 则 清楚 地 表明 了 类 的 层次 关系 ， 指明 子类 和 父类 各自 的 行为 。 但是 Java 语言 又 提供 了 1 个 “ 接口 ” 类型 ， 接口 把 方法 的 定义 和 类 的 层次 区分 开来 ， 通过 它 可以 在 运行 时 动态 地 定位 所 调用 的 方法 ， 同时 接口 实现 了 “ 多重 继承 ” ， 且 1 个类 可以 实现 多个 接口 。 正是 这些 机制 使 接口 提供 了 比 多重 继承 更加 简单 、 灵活 且 强劲 的 功能 。 
 　 　 6 . 类型转换 。 在 C 、 C++ 中 ， 可以 通过 指针 进行 任意 的 类型转换 ， 这 常常 会 带来 不 安全性 ， 而 在 Java 中 ， 运行 时 系统对 对象 的 处理 要 进行 类型 相容性 检查 ， 以 防止 不 安全 的 转换 。 
 　 　 7 . 浮点运算 。 Java 语言 在 浮点运算 的 精确度 上 存在 缺陷 。 目前 计算机 的 处理器 可以 产生 精确度 很 高 的 浮点数 ， 但是 Java 只 要求 处理器 返回 与其 所 产生 数据 相比 精确度 较 低 的 中介 结果 。 为了 满足 Java 规范 ， 必须 放弃 对 精确度 的 特殊要求 。 这 不但 导致 了 这种 语言 缺少 精确 的 浮点运算 ， 而且 也 直接 影响 到 了 Java 程序 的 执行 性能 ， 而 相同 的 问题 在 C 和 C++ 语言 中则 不 存在 。 
 　 　 8 . 数组 越界 检测 。 在 Java 语言 中 ， 数组 大小 为 负数 或者 程序运行 过程 中 数组 越界 都 作为 运行 时 例外 来 处理 ， 而 在 C 或 C++ 语言 中 没有 提供 对 这种 错误 的 检测 功能 。 
 　 　 9 . 字符串 。 Java 语言 的 字符串 是 作为 1 个 字符串 类 的 实例 出现 的 。 与 C语言 的 字符串 不同 ， Java 字符串 是 可变 的 。 程序员 可以 通过 使用 StringBuffers 类 作为 1 个 Java 字符串 对象 ， 这样 就 可以 任意 修改 这个 字符串 了 。 
 　 　 10 . 多线程 技术 。 Java 语言 支持 多线程 操作 ， 而 在 C / C++ 语言 规范 中 并 不 包含 多线程 的 内容 。 另外 ， 通过 在 程序 中 运用 多线程 技术 ， 使得 这些 程序 与 单一 线程 的 程序 比 起来 性能 有所提高 。 
 　 　 11 . 内存 管理 与 垃圾 回收 机制 。 在 C语言 中 ， 程序员 通过 库函数 malloc ( ) 和 free ( ) 来 分配 和 释放 内存 ， C++ 中则 通过 运算符 new 和 delete 来 分配 和 释放 内存 。 再次 释放 已经 释放 过 的 内存 块 或者 未 被 分配 的 内存 块 都 会 造成 系统 的 崩溃 ； 同样 ， 如果 程序员 忘记 释放 不再 使用 的 内存 块 也 会 逐渐 耗尽 系统资源 。 而 在 Java 语言 中 ， 所有 的 数据结构 都 是 对象 ， 通过 运算符 new 为 它们 分配内存 堆 。 通过 new 得到 对象 的 处理权 ， 实际 分配 给 对象 的 内存 可能 随着 程序运行 而 改变 ， Java 语言 对此 自动 地 进行 管理 并且 进行 垃圾 收集 操作 ， 有效 地 防止 了 由于 程序员 的 误操作 而 导致 的 错误 ， 并且 更好 地 利用 了 系统资源 。 
 　 　 12 . 网络 功能 。 Java 语言 支持 网络 操作 ， 通过 URL 类 可以 从 网络 上 读取数据 ， 同时 还 可以 向 服务器端 的 CGI 程序 发送数据 。 Java 还 隐藏 了 socket 接口 ， 同时 它 使得 客户 / 服务器应用程序 更加 便于 开发 。 而 这些 功能 在 C 和 C++ 语言 中 都 没有 提供 。 
 2.2 开发 和 执行 环境 
 　 　 Java 语言 及其 技术 得到 了 飞速 的 发展 ， 这 与 业界 巨大 的 推动 是 分不开 的 。 由于 Java 语言 还是 1 个 相对 新生 的 事物 ， 所以 开发 工作 所 需 的 工具 还 不 很 成熟 ， 这 也 是 可以 理解 的 。 我们 认为 判断 Java 推广 程度 的 最好 例证 之一 就是 Java   RAD 公司 的 发展 ， 随着 Java   RAD 工具 逐渐 走向 成熟 ， 这种 语言 将 对 客户 - 服务器 形成 挑战 。 
 　 　 运行 性能 仍旧 是 Java 执行 环境 的 1 个 重要 问题 ， 这 与 C 和 C++ 语言 是 完全 不同 的 。 Java 应用程序 是 通过 解释 执行 ， 而 不是 直接 通过 编译 执行 的 ， 并 像 C / C++ 程序 那样 与 本机 代码 进行 链接 。 
 　 　 Java 应用程序 可以 首先 被 编译成 字节 代码 ， 之后 通过 网络 以 本地 或者 远程 调用 方式 由 Java 虚拟机 来 解释 。 Java 字节 代码 的 规模 很小 ， 然而 ， 由于 每次 调用 都 需要 对 相同 的 代码 进行 解释 ， 而 C 和 C++ 程序 都 是 在 本地 执行 的 ， 所以 这 造成 了 Java 与 C / C++ 相比 在 执行 速度 上 相对 缓慢 。 
 　 　 即时 编译器 JIT ( Just - In - Time ) 将 字节 代码 翻译成 可以 动态 执行 的 本机 代码 ， 由于 这种 翻译 操作 在 整个 过程 中 只 进行 一次 ， 而 不是 每次 调用 都 需要 执行 ， 因此 它 提高 了 程序 的 性能 。 JIT 编译器 可以 较 好 地 提高 Java 程序 的 远程 调用 执行 速度 ， 但是 不足之处 在于 它 执行 本地 代码 时 的 速度 并 不 理想 。 而 本地 Java 编译器 可望 填补 这个 空缺 。 
 2.3 　 可移植性 
 　 　 当 用户 将 C / C++ 程序 移植 到 另外 一些 机器 上 执行 时 ， 这些 程序 往往 会 出现 一些 问题 。 例如 ， 这些 程序 不 具备 用于 分配 原始数据 类型 的 一些 标准 。 当 进行 原始 类型转换 时 ， C 和 C++ 语言 不 能够 指定 正确 的 结果 。 而 利用 Java 语言 设计 出 的 应用程序 可以 在 任何 1 台 具有 1 个 Java 虚拟机 的 计算机 上 运行 。 Java 的 口号 “ 一次 编写 ， 到处 运行 ” 就是 指导方针 。 
 　 　 与 C 和 C++ 程序 比 起来 ， Java 程序 更加 易于 进行 移植 。 然而 ， 虽然 在 各种 不同 的 平台 下 都 实现 了 Java 运行 环境 ， 但是 这个 环境 也 具有 针对 特定 主机 的 模块 。 这样 ， 一名 程序员 怎么 能够 保证 在 不 需要 于 不同 平台 上 对 他们 所 设计 的 应用程序 进行 测试 的 前提 下 就 可以 保证 这些 程序 在 这些 平台 上 完成 相同 的 操作 呢 ? 例如 ， 线程 的 排序 处理 就要 依赖于 主机 的 操作系统 ， 这样 就 造成 了 1 个 多线程 的 Java 应用程序 在 不同 的 计算机 环境 下 可能 进行 完全 不同 的 操作 。 因此 ， 1 个 “ 100% 纯 Java ” 程序 仍旧 应当 在 不同 的 平台 上 进行 测试 ， 这样 才 能够 保证 其 运行 质量 。 
 2.4 　 性能 
 　 　 与 Java 语言 相比 ， C 和 C++ 语言 更加 成熟 。 目前 ， 许多 软件 开发商 都 在 各自 的 Java 应用程序 中 使用 了 一定 数量 的 本地 代码 ， 这些 公司 包括 IBM 、 Netscape 、 Microsoft 、 Dimension   X 、 RandomNoise 和 NetDynamics 等 。 
 　 　 在 进行 程序开发 的 过程 中 ， 许多 开发人员 都 发现 单纯 地 使用 Java 语言 来 编写 其 应用程序 十分困难 ， 其 原因 是 多方面 的 ， 一个 最 普遍 的 原因 是 运行 性能 。 由于 Java 代码 是 解释 执行 的 ， 因此 其 执行 速度 比起 C 代码 来 要 慢 很多 。 即时 编译器 JIT 的 出现 缓解 了 这种 情况 。 而 Java 本地 编译器 可望 成为 三者 中 性能 最佳 的 编译器 ( 这种 编译器 的 运行 速度 与 另外 两种 编译器 相比 分别 提高 50 倍 和 4 ～ 7 倍 ) 。 
 　 　 总之 ， Java 语言 并 没有 提供 像 C / C++ 语言 中 注册 关键字 或 汇编程序 那样 的 标准 挂接 程序 来 实现 程序 优化 ， 它 不 支持 那些 协助 代码生成 工作 的 内联 本地 汇编 代码 。 在 Java 语言 的 设计 思想 中 ， 简便性 和 可移植性 比起 运行 性能 来 是 更加 重要 的 因素 。 Java 程序 更加 依靠 编译器 和 运行 时 环境 来 改善 运行 性能 。 
 　 　 根据 一个 独立 的 研究 机构 Market   Decisions 公司 的 调查 表明 ， 有 96% 的 Java 开发人员 是 在 Windows 平台 上 开发 并 使用 Java 应用程序 的 。 这个 数字 表明 大多数 Java 应用程序 是 在 Intel 体系结构 的 平台 上 运行 的 。 随着 Intel 系统 处理器 主频 的 不断 提高 ， Java 程序 的 解释 执行 速度 也 会 间接 得到 提高 。 
 　 　 当对 Java 语言 的 内部 机制 进行 考察 后 ， 就 会 发现 每次 方法 调用 都 必须 搜索 其 方法 表 ， Java 程序 在 方法 调用 方面 的 开销 要 高于 C语言 ， 接近 于 C++ 语言 ， 而 它 在 错误 校验 方面 比起 后 2 种 语言 来要 耗费 更 多 的 运行 时 资源 。 因此 有 理由 得出 这样 一个 结论 ， 在 具有 1 个 优秀 的 本地 Java 编译器 的 条件 下 ， Java 程序 的 运行 性能 能够 接近 于 C++ 程序 。   
 3 　 结论 
 　 　 Java 是 一种 与 C++ 类似 ， 但 更加 简单 的 面向对象 程序设计 语言 。 对于 熟悉 C 和 C++ 的 程序设计 人员 来说 应当 很 容易 掌握 Java 语言 ， 因为 这 3 种 语言 具有 相似 的 语言 结构 。 然而 Java 程序 剔除 了 在 C++ 语言 中 一些 复杂 的 功能 ， 并 增加 了 错误 校验 、 垃圾 收集 和 多线程 支持 等 功能 ， 因此 Java 语言 相对 更加 健壮 。 通过 内置在 Java 语言 中 的 安全 特性 ， 应用程序 可以 在 具有 1 个 Java 虚拟机 的 不同 网络 环境 中 自由 地被 解释 运行 。 
 　 　 目前 ， Java 开发 环境 的 成熟 程度 还 无法 与 本地 C / C++ 开发 环境 相比 ， Java 语言 的 解释 代码运行 速度 还 相对 较慢 。 即时 编译器 和 Java 本地 编译器 正在 不断 改善 ， 但是 目前 还 没有 证据 表明 它 能够 超过 本地 C 和 C++ 编译器 的 速度 。 
 　 　 Java 开发人员 必需 对 Java 所 提供 的 功能 有 一个 正确 的 认识 。 Java 所 提供 的 并 不仅仅 是 一种 传统意义 上 的 编程语言 ， 它 还是 一个 由 虚拟机 和 网络化 环境 ( 包括 Internet ) 组成 的 完整 的 环境 。 为了 成为 一种 主流 语言 ， Java 必定 需要 具备 一个 完整 的 功能集 ， 同时 应当 易于 使用 、 可靠 且 节省 费用 。 Java 语言 虽然 已经 取得 了 前所未有 的 成功 ， 但是 其 自身 仍然 存在 许多 需要 改进 之 处 ， 前进 的 道路 还 很 漫长 。   
 作者 单位 ： 清华大学 计算机系 ( 100084 ) 
 参考文献 
 　 1 　 Harbison   S   P , Steele   G   L . C - A   Reference   Manual . Tartan   Laboratories , 1996 
 　 2 　 Stroubtrup   B . The   C++ program   Language . AT&T   Bell   Laboratories , 1996 . 
 　 3 　 O ' Connell   M . Java : The   inside   story . Sun   World   Online , 1997 
 　 4 　 Gosling   J , Joy   B , Steele   G . The   Java   Language   Specification . Addison - Wesley , 1996 
 　 5 　 Gosling   J , McGiltion   H . The   Java   Language   Environment , A   White   Paper . Sun   Microsystems   Computer   Company , 1996 
 　 6 　 Ricciuti   M . Java   hype   aside , C++ still   rules . C / Net , 1997 
 　 7 　 100%   Pure   Java   watered   down , http : / / www . news . com / News / item , 1997.5 
 　 8 　 Volkmann   M . Java - What ' s   All   The   Excitement   About ? . Object   Computing   Inc , 1998 
 　 9 　 Shavlor   N . JCC - A   Java   to   C   converter . Java   Developer   Inc , 1997 . 
 　 10 　 IBM   High   performance   Compiler   for   Java : An   Optimizing   Native   Code   Compiler   for   Java   Application , white   paper . IBM   Corp , 1998 
 　 11 　 Jain   P ， Schmidt   D   C . Experiences   Converting   a   C++   Communication   Software   Framework   to   Java . Java   Developer   Inc , 1998 
 ( 收稿 日期 ： 1998 - 08 - 29 ) 
