自动化 学报 
 ACTA   AUTOMATICA   SINICA 
 2000 　 Vol.26 　 No.3 　 P.397 - 400 
 
 
 
 关于 选择函数 路径 无关 性 条件 的 一个 注记 
 罗云峰  岳超源 　 陈 珽 
 摘 　 要 　 通过 对 选择函数 路径 无关 性 条件 LPI 和 LSPI 的 分析 ， 重新 确定 了 条件 LPI 和 LSPI 间 的 相互 关系 ， 所得 结论 表明 ： 条件 LSPI 和 LPI 相互 独立 而 非 条件 LSPI 隐含 LPI . 
 关键词 　 选择函数 ， 路径 无关 性 条件 ， 序贯 路径 无关 性 条件 . 
 A   NOTE   ON   PATH   INDEPENDENCE   OF   CHOICE   FUNCTION 
 LUO   Yunfeng 　 YUE   Chaoyuan 　 CHEN   Ting 
 ( Institute   of   Systems   Engineering , Huazhong   University   of   Sci .   and   Tech . , Wuhan 　 430074 ) 
 Abstract 　 　 By   analysing   the   path   independence   conditions   of   choice   function ,   the   correlation   between   lower   path   independence   ( LPI )   and   lower   sequential   path   independence   ( LSPI )   can   be   established .   As   shown   in   this   paper ,   LPI   is   independent   of   LSPI ,   not   implied   by   LSPI . 
 Key   words 　 Choice   function ,   path   independence ,   sequential   path   independence . 
 　 　 选择函数 的 路径 无关 性 问题 是 决策 理论 研究 的 一个 基本 问题 ［ 1 ］ . 选择函数 的 路径 无关 性 形式化 表示 ( 即 路径 无关 性 条件 ) 有 两类 — — 路径 无关 性 条件 PI ( path   independence ) ［ 2 ］ 和 序贯 路径 无关 性 条件 SPI ( sequential   path   independence ) ［ 3 ］ . 本文 拟 对 上述 两类 条件 进行 分析 ， 确定 它们 间 的 相互 关系 ， 对文 ［ 4 ］ 中 的 一个 结论 进行 更正 . 
 1 　 准备 工作 
 　 　 用 X = ｛ x , y , z , … ｝ 表示 所有 可行 方案 的 集合 ， 其中 x , y , z , … 表示 可行 方案 ； V = ｛ S ｜ SX 且 S ≠ ｝ 表示 备选 方案 集 集合 ， 即 X 的 非 空子 集 的 集合 . 
 　 　 所谓 选择函数 是 定义 在 V 上 的 函数 关系 C ( ． ) 
 C : V → V , 
 即 S ∈ V ， 有 C ( S ) ∈ V 且 C ( S ) S . 因此 ， 选择函数 实际上 是 “ 任意 给定 一个 备选 方案 集 S ( 即 一种 选择 情形 ) ， 从中 选出 一个 或 几个 方案 作为 选择 结果 ” 的 一种 选择 机制 ( 关系 ) ［ 1 ， 5 ］ . 
 　 　 用 W = ｛ v1 , v2 , … , vm ｝ 表示 X 的 子集 族 ， 
 　 　 定义 1 ［ 2 ］ .   路径 无关 性 条件 PI ： 设 
 　 　 路径 无关 性 条件 PI 是 Plott 将 选择 过程 看成 是 一种 “ 分而治之 ” ( divide   and   conquer ) 的 过程 而 提出 来 的 ［ 2 ］ . 所谓 “ 分而治之 ” 就是指 在 选择 中 ， 先 将 一个 “ 大 的 被 选 方案 集 ” S ( S ∈ V ) 划分 为 许多 “ 小 的 方案 集 ” Si ( ∪ Si = S ) ， 并 对 每个 “ 小 的 方案 集 ” Si 分别 进行 选择 ； 再 将 所有 “ 小 的 方案 集 ” 的 选择 结果 C ( Si ) 合并 为 一个 新 的 被 选集 ( ∪ C ( Si ) ) ， 并 对 新 的 被 选集 进行 选择 . Plott 的 这种 “ 分而治之 ” 的 过程 在 实际 选择 中 随处可见 . 例如 ， 各种 分 预赛 和 复赛 ( 或 决赛 ) 两个 阶段 ( 甚至 多个 阶段 ) 进行 的 比赛 就 可以 看成 是 一个 “ 分而治之 ” 的 过程 . 
 　 　 “ 分而治之 ” 可以 简化 选择 过程 ， 减少 选择 的 次数 和 计算 量 . 但是 ， “ 划分 ” ( divide ) 方式 的 不同 往往 会 造成 最终 选择 结果 的 不同 ［ 2 ］ ， 因此 ， “ 分而治之 ” 不能 保证 得到 的 选择 结果 总是 最优 . 
 　 　 Bandyopadhyay 将 选择 过程 看成 是 连续 进行 的 “ 两 两 比较 ” ( binary   comparison ) 的 过程 而 提出 了 序贯 路径 无关 性 条件 SPI . 
 　 　 设 S ∈ V ， 用 Ω ( S ) 表示 所有 的 由 ｛ 1 , 2 , … , ｜ S ｜ ｝ ( ｜ S ｜ 表示 S 中 方案 个数 ) 到 S 的 一一对应 的 集合 . 设 ω K ∈ Ω ( S ) ， 对于 给定 的 选择函数 C ( ． ) ， 令 
 
 　 　 ω KT1 , ω KT2 , … , ω KT ｜ S ｜ 表示 的 是 由 选择函数 C ( ． ) 按 ω K 给定 的 顺序 对 S 中 的 方案 进行 “ 两 两 比较 ” 而 得到 的 S 的 子集 族 ， 其中 ω KT ｜ S ｜ 表示 进行 连续 的 “ 两 两 比较 ” 得到 的 最后 结果 . 
 　 　 定义 2 ［ 3 ］ .   序贯 路径 无关 性 条件 SPI ： 设 S ∈ V ， ω K ∈ Ω ( S ) , C ( S ) = ω KT ｜ S ｜ . 
 　 　 定理 1 ［ 4 ］ .   当 选择函数 C ( * ) 满足条件 SPI 时 ， 一定 满足条件 PI ， 即 条件 SPI 隐含 PI . 
 2 　 两类 路径 无关 性 条件 间 的 相互 关系 
 　 　 为了 讨论 问题 的 方便 ， 一般 将 路径 无关 性 条件 PI 分解 为 UPI ( upper   path   independence ) 条件 和 LPI ( lower   path   independence ) 条件 ， 将序贯 路径 无关 性 条件 SPI 分解 为 USPI ( upper   sequential   path   independence ) 条件 和 LSPI ( lower   sequential   path   independence ) 条件 . 
 　 　 定义 3 ［ 5 ］ . 上 路径 无关 性 条件 UPI ： 设 
 　 　 定义 4 ［ 5 ］ .   下 路径 无关 性 条件 LPI ： 设 
 　 　 定义 5 ［ 4 ］ .   上序贯 路径 无关 性 条件 USPI ： 设 
 　 　 定义 6 ［ 4 ］ .   下序贯 路径 无关 性 条件 LSPI ： 设 
 　 　 定理 2 ［ 4 ］ .   条件 USPI 和 UPI 相互 等价 . 
 　 　 关于 条件 LSPI 和 LPI 间 关系 ， 文 ［ 4 ］ 给出 了 一个 这样 的 结论 ( 即文 ［ 4 ］ 中 定理 4 ， 以下 简称 原 命题 ) ： 条件 LSPI 隐含 LPI . 从 直觉 上 看文 ［ 4 ］ 中 的 结论 似乎 正确 ， 但 从 下面 的 分析 和 例子 中 可以 看出 文 ［ 4 ］ 中 的 结论 是 错误 的 . 
 　 　 首先 分析 一下 文 ［ 4 ］ 中 有关 证明 的 不妥 之处 . 
 　 　 为了 证明 当 LSPI 成立 时 ( 即 S ∈ V 和 ω K ∈ Ω ( S ) , ω KT ｜ S ｜ C ( S ) ) ， LPI 也 成立 ( 即 S ∈ V 和文 ［ 4 ］ 提出 了 如下 命题 . 
 　 　 命题 1 . 设 S ∈ V ， 当 选择函数 C ( ． ) 满足条件 LSPI 时 ， W ∈ VS ， ω K ∈ Ω ( S ) ， 使 
 　 　 　 ( 1 ) 
 　 　 显然 ， 如果 命题 1 成立 的话 ， 原 命题 自然 成立 . 为了 证明 命题 1 ， 文 ［ 4 ］ 用 反证法 得到 了 如下 “ 矛盾 ” ( 确切 说应 是 推论 ) ： 
 　 　 假设 
 　 　 根据上述 “ 矛盾 ” 文 ［ 4 ］ 认为 命题 1 成立 . 
 　 　 仔细分析 文 ［ 4 ］ 中 命题 1 的 证明 就 可 发现 其 错误 在于 文 ［ 4 ］ 只 证明 了 W ∈ VS ， 使 ( 1 ) 式 成立 ， 而 并未 证明 命题 1 所 要求 的 W ∈ VS ， ( 1 ) 式 成立 . 所以 文 ［ 4 ］ 实际上 并未 真正 证明 命题 1 正确 与否 ， 故由 命题 1 直接 推导 出 的 结论 是 不 可靠 的 . 事实上 ， 从 下面 的 例子 可以 看出 不仅 命题 1 不 正确 ， 而且 原 命题 也 不 正确 . 
 　 　 例 1 .   设 X = ｛ x , y , z ｝ ， 定义 在 V = 2X ＼ ｛ ｝ 上 的 选择函数 C1 ( ． ) 按 如下 方式 给出 
 C1 ( ｛ x ｝ ) = ｛ x ｝ ; 　 C1 ( ｛ y ｝ ) = ｛ y ｝ ; 　 C1 ( ｛ z ｝ ) = ｛ z ｝ ; 　 C1 ( ｛ x , y ) ｝ ) = ｛ x ｝ ; 
 C1 ( ｛ y , z ｝ ) = ｛ y ｝ ; 　 C1 ( ｛ x , z ｝ ) = ｛ z ｝ ; 　 C1 ( ｛ x , y , z ｝ ) = ｛ x , y , z ｝ . 
 　 　 对于 上述 选择函数 C1 ( ． ) 很 容易 得到 如下 结论 ： 
 　 　   C1 ( ． ) 满足条件 LSPI 和 LPI ； 
 　 　   对于 S = X = ｛ x , y , z ｝ , 令 W = ｛ ｛ x ｝ , ｛ y ｝ , ｛ z ｝ ｝ ( W ∈ VS ) ， 则 
 
 而 ω K ∈ Ω ( S ) , 　 ｜ ω KT ｜ S ｜ ｜ = 1 即 ω KT ｜ S ｜ 为单 元素 集 . 因此 ， 当 W = ｛ ｛ x ｝ , ｛ y ｝ , ｛ z ｝ ｝ 时 ， 使 C1 ( ∪ C1 ( v ) ) ω KT ｜ S ｜ 成立 . 故 命题 1 不 成立 . 
 　 　 例 2 .   设 X = ｛ x , y , z , w ｝ ， 定义 在 V = 2X ＼ ｛ ｝ 上 的 选择函数 C2 ( * ) 按 如下 方式 给出 ： 
 C2 ( ｛ x ｝ ) = ｛ x } ; 　 C2 { y } ) = ｛ y ｝ ; 　 C2 ( ｛ z ｝ ) = { z } ; 　 C2 ( { w } ) = { w } ; 
 C2 ( { x , y } ) = { x } ; 　 C2 ( { x , z } ) = { x } ; 　 C2 ( { x , w } ) = { x } ; 
 C2 ( { y , z } ) = { y } ; 　 C2 ( { y , w } ) = { y } ; 　 C2 ( { z , w } ) = { z , w } ; 
 C2 ( { x , y , z } ) = { x , y , z } ; 　 C2 ( { x , y , w } ) = ｛ x , y , w ｝ ; 
 C2 ( { x , z , w } ) = { x , z , w } ; 　 C2 ( { y , z , w } ) = { y , z , w } ; 
 C2 ( { x , y , z , w } ) = { x , y , z } . 
 　 　 对于 上述 选择函数 C2 ( ． ) ， 可 得 如下 结论 ： 
 　 　 ① 设 S ∈ V ， 当 | S | = 1 ， 2 ， 3 时 ， 容易 验证 C2 ( ． ) 同时 满足条件 LPI 和 LSPI ， 即 定义域 为 V ′ = V ＼ ｛ X ｝ 时 ， 原 命题 成立 ; 
 　 　 ② 当 S = X 时 ， ω K ∈ Ω ( S ) , 　 ω KT ｜ S ｜ = { x } C2 ( S ) = { x , y , z } , 这 说明 当 S = X 时 C2 ( ． ) 也 满足条件 LSPI ， 因此 ， C2 ( ． ) 在 定义域 V = 2X ＼ ｛ ｝ 上 满足条件 LSPI ； 
 　 　 ③ 当 S = X 时 ， 令 W = { { x , y } , { z , w } } ( W ∈ VS ) ， 则 
 
 所以 ( 即 { x , z , w } ) 不是 C2 ( S ) ( 即 ｛ x , y , z ｝ ) 的 子集 ， 即 C2 ( ． ) 不 满足条件 LPI ， 这 说明 在 定义域 V = 2X ＼ ｛  ｝ 上 ， C2 ( * ) 不 满足条件 LPI . 
 　 　 综合 结论 ① ～ ③ 可知 ， 对于 定义 在 V = 2X ＼ ｛ ｝ 上 的 C2 ( ． ) ， 虽然 原 命题 在 V ′ = V ＼ { X } 上 成立 ， 但 在 定义域 V 上 并 不 成立 . 
 　 　 从 下面 的 例子 还 可以 看到 ， 选择函数 C ( ． ) 满足条件 LPI 时 ， 并不一定 满足条件 LSPI . 
 　 　 例 3 ［ 4 ］ .   设 X = { x , y , z } ， 定义 在 V = 2X ＼ { } 上 的 选择函数 C3 ( ． ) 按 如下 方式 给出 ： 
 C3 ( { x } ) = { x } ; 　 C3 ( { y } ) = { y } ; 　 C3 ( { z } ) = { z } ; 　 C3 ( { x , y } ) = { x , y } ; 
 C3 ( { y , z } ) = { y , z } ; 　 C3 ( { x , z } ) = { x , z } ; 　 C3 ( { x , y , z } ) = { y , z } . 
 　 　 对于 选择函数 C3 ( ． ) 容易 验证 ， C3 ( ． ) 满足条件 LPI 而 不 满足条件 LSPI . 
 　 　 综合 例 2 和 例 3 ， 可 得 如下 定理 . 
 　 　 定理 3 . 条件 LSPI 和 LPI 相互 独立 ( 即 互不 隐含 ) . 
 　 　 注 1 . 定理 3 表明 ， 条件 LSPI 和 LPI 相互 独立 而 非 LSPI 隐含 LPI . 
 　 　 注 2 . 虽然 序贯 路径 无关 性 条件 SPI 隐含 路径 无关 性 条件 PI ， 而 上 序贯 路径 无关 性 条件 USPI 与 上 路径 无关 性 条件 UPI 又 相互 等价 ， 但 不能 因此 而 推导 出下 序贯 路径 无关 性 条件 LSPI 隐含 下 路径 无关 性 条件 LPI 的 结论 . 
 国家自然科学基金 ( 69504005 ) 资助 项目 . 
 　 罗云峰 　 1966 年生 ， 1988 年 毕业 于 西北工业大学 固体 火箭 发动机 专业 ， 1994 年 获 华中理工大学 系统工程 专业 博士学位 . 1995 ～ 1997 年 在 华中理工大学 从事 博士后 研究 工作 ， 现为 华中理工大学 副教授 . 先后 在 国内外 期刊 上 发表 论文 四十余篇 ， 主要 研究 方向 为 决策分析 、 博弈论 和 社会 选择 理论 . 
 　 　 岳超源 　 1944 年生 ， 1968 年 毕业 于 清华大学电机系 工业 企业 电气化 及 自动化 专业 ， 1975 年 起 在 华中理工大学 任教 . 1980 年 开始 从事 系统工程 专业 的 科研 和 教学 工作 ， 1981 ～ 1983 年 在 美国哈佛大学 作 访问学者 . 现为 华中理工大学 教授 、 博士生 导师 . 主要 研究 方向 为 决策分析 和 教育 评估 . 
 罗云峰 （ 华中理工大学 系统工程 研究所 　 武汉 　 430074 　 E - mail : Luo - gu @ 263 . net ） 
 岳超源 （ 华中理工大学 系统工程 研究所 　 武汉 　 430074 ） 
 陈 珽 （ 华中理工大学 系统工程 研究所 　 武汉 　 430074 ） 
 参考文献 
 ［ 1 ］ 　 Arrow   K   J .   Social   Choice   and   Individual   Value   ( 2nd   ed . ) .   New   Haven :   Yale   University   Press ,   1963 ,   73 ～ 78 
 ［ 2 ］ 　 Plott   C   R .   Path   independence ,   rationality   and   social   choice .   Econometrica ,   1973 ,   41 ( 5 ) ： 1075 ～ 1091 
 ［ 3 ］ 　 Bandyopadhyay   T .   Revealed   preference   theory ,   ordering   and   the   axiom   of   sequential   path   independence .   Rev .   Econ .   Studies ,   1988 ,   55 ( 2 ) ：   343 ～ 351 
 ［ 4 ］ 　 Bandyopadhyay   T .   Sequential   path   independence   and   social   choice .   Soc   Choice   Welfare ,   1990 ,   7 ( 3 ) ：   209 ～ 220 
 ［ 5 ］ 　 Arrow   K   J , Michael   I . Handbook   in   Mathematical   Economics ,   Vol .   Ⅲ .   Amsterdom :   North - Holland ,   1986 ,   1078 ～ 1181 
 收稿 日期 　 1998 - 03 - 30 
 修稿 日期 　 1999 - 09 - 20 
