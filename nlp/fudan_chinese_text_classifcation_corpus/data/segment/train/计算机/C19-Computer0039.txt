计算机 应用 
 Computer   Applications 
 1999 年   第 19 卷   第 7 期     Vol.19   No.7   1999 
 
 
 
 中间件 及其 在 三层 客户机 / 服务器 模型 中 的 应用 * 
 宋晓梁 　 刘东生 　 许满武 
 　 　 摘 　 要 　 本文 介绍 了 中间件 的 五种 类型 及其 各自 的 特点 ， 并 讨论 了 中间件 在 三层 的 客户机 / 服务器 模型 中 应用 的 一个 实例 。 
 　 　 关键词 　 中间件 ， 客户机 / 服务器 模型 
 　 　 
 MIDDLEWARE   AND   ITS   APPLICATION   
 IN   A   THREE   TIER   C / S   MODEL 
 
 Song   Xiaoliang 　 Liu   Dongsheng 　 Xu   Manwu 
 Computer   Science   and   Technology   Department ,   
 National   Key   Laboratory   for   Computer   Software ,   Nanjing   University ,   Jiangsu * Nanjing   210093 
 
 　 　 Abstract 　 In   this   paper , we   discuss   the   five   kinds   of   the   middleware   and   give   a   sample   of   the   
 middleware ′ s   application   in   a   three   tier   C / S   model . 
 　 　 Keywords 　 Middleware ， Client / server   model 
 
 　 　 随着 以 网络 计算 为 中心 的 应用 系统 规模 的 扩大 和 软硬件 结构 的 日趋 复杂 多样 ， 客户端 和 服务器端 的 负担 也 日益 繁重 ， 并且 传统 软件 的 移植性 、 互操作性 和 重用 性 也 都 不能 满足 现在 的 性能需求 ， 为此 人们 提出 了 一种 介于 客户端 和 服务器端 的 软件 — — 中间件 。 
 　 　 中间件 ( Middleware ) 作为 前端 客户机 和 后 端 服务器之间 的 一个 中间层 ， 为 应用 程序处理 提供 了 如下 功能 ， 它 一般 包含 应用逻辑 ， 负责 接收 客户端 的 应用 请求 ， 对 请求 做出 响应 处理 后 将 请求 交给 后 端 服务器 ， 并 负责 将 服务器 的 处理结果 返回 给 客户端 。 
 　 　 从 概念 上 讲 ， 很 早就 已经 有 了 中间件 的 雏形 ， 在 主机 环境 下 的 TP   Monitor 就是 一种 中间件 。 但是 ， 只有 客户机 / 服务器 以及 downsizing 的 概念 提出 之后 ， 中间件 的 概念 才 被 人们 广泛 地 关注 。 在 客户机 / 服务器 环境 下 ， 一般 将 中间件 放在 位于 客户机 和 服务器之间 的 中间层 ， 负责 应用逻辑 的 处理 ， 从而 使 客户端 变得 精干 。 与此同时 ， 中间件 还 可以 放在 客户机 和 服务器之间 的 多层 应用服务器 中 。 中间件 已经 成为 了 联结 分布式计算 环境 中 各个 相对 独立 的 系统 的 胶合剂 。 
 　 　 中间件 具有 如下 特点 ： 
 　 　 易于 集成 　 中间件 能 无缝 地 连入 应用 开发 环境 中 ， 应用程序 可以 很 容易 地 定位 和 共享 中间件 提供 的 应用逻辑 和 数据 。 
 　 　 易于 移植 　 中间件 使 与 平台 有关 的 细节 对于 应用程序 来说 是 透明 的 ， 因此 可以 在 不 改变 应用 程序代码 的 情况 下 改换 计算机 底层 硬件 、 操作系统 或 通信协议 。 
 　 　 易于 演进 　 中间件 实现 的 功能 对 应用程序 来说 是 透明 的 ， 所以 可以 对 局部 进行 改进 而 不会 影响 到 系统 的 其它 部分 。 
 　 　 高可靠性 　 中间件 应该 是 可靠 的 ， 需要 提供 接管 和 恢复 功能 ， 保证 事务 及 关键性 业务 不 被 丢失 。 
 　 　 易于 使用 　 中间件 能 和 同构 或 异构 环境 下 的 多种 数据源 通信 ， 同时 它 能 管理 数据 间 的 公共 逻辑 约束 。 它 将 用户 从 复杂 的 平台 、 网络 、 数据库 选择 中 解放出来 。 
 1 　 中间件 的 分类 
 　 　 根据 中间件 所起 的 作用 及 采用 的 技术 ， 我们 大致 可 将 其 分为 以下 五种 。 
 1.1 　 基于 数据库 的 中间件 
 　 　 基于 数据库 的 中间件 是 所有 中间件 中 最 普遍 、 最 成熟 的 一种 。 基于 数据库 的 中间件 允许 应用程序 同 本地 或 异地 的 数据库 进行 通信 。 它 提供 了 一系列 应用 程序接口 API ， 通过 中间层 而 不 考虑 操作系统 及 网络 来 访问 数据库 。 并且 在 很多 情况 下 ， API 被 隐藏 在 开发工具 之中 而 不 被 开发者 了解 。 
 　 　 ODBC 、 JDBC 都 是 基于 数据库 的 中间件 标准 。 通过 ODBC 访问 数据库 的 方式 是 绝大多数 应用程序 使用 数据库 的 方式 ， 它 通过 使用 驱动程序 ( driver ) 来 提供 数据库 的 独立性 ， 驱动程序 与 具体 的 数据库 有关 ， 它 是 一个 用以 支持 ODBC 函数调用 的 模块 ( 通常 是 一个 DLL ) ， 应用程序 通过 调用 驱动程序 所 支持 的 函数 来 操作 数据库 ， 若想 使 应用程序 操作 不同 类型 的 数据库 ， 就要 动态 地 链接 到 不同 的 驱动程序 上 。 ODBC 具有 良好 的 数据库 独立性 ， 它 可以 避免 应用程序 对 不同 类型 数据库 使用 不同 的 API ， 通过 ODBC 可以 使得 数据库 的 更改 变得 非常容易 ， 因为 对 应用程序 来说 这 只 需 改换 一下 驱动程序 。 JDBC 定义 了 一个 Java 开发 的 CLI 。 JDBC 实际上 就是 一系列 用于 特定 数据库 的 Java 类库 ， 它 源于 ODBC 体系结构 。 
 　 　 ODBC 的 结构图 如下 ： 　 
 
 
 图 1 　 ODBC 结构图 
 　 　 现在 ， Microsoft 又 提出 了 OLE - DB 。 OLE - DB 提供 了 不同 数据源 的 统一 的 访问 点 。 OLE - DB 的 目标 是 提供 通过 OLE   Automation 来 访问 多种 数据库 ， 或 在 应用程序 和 数据库 之间 提供 一个 COM 层 ， 通过 COM 层 的 对象 访问 数据库 。 
 　 　 在 基于 数据库 中间件 领域 中 ， 目前 还 提出 了 应用 分割 技术 ， 即将 用户 的 一些 应用逻辑 放到 中间层 ， 为 客户机 “ 减肥 ” ， 这 也 为 NC ( Network   Computer ) 等 的 引入 打下 了 基础 ， 并 增强 了 应用程序 的 处理 性能 、 安全性 和 并发 性 。 目前 ， 很多 数据库 前端 开发工具 都 支持 应用 分割 技术 。 
 　 　 但是 ， 在 基于 数据库 的 中间件 模型 中 ， 数据库 作为 信息 的 中心 存储单元 ， 中间件 负责 数据 间 的 同步 及 点到点 通信 。 这种 方式 不 适合 于 高性能 应用 处理 ， 因为 它 需要 大量 的 数据通信 ， 同时 ， 当 网络 发生 故障 时 ， 系统 将 不能 正常 工作 。 
 1.2 　 基于 RPC 的 中间件 
 　 　 RPC 已经 存在 很长 一段时间 了 ， 它 沿用 了 用户 熟悉 的 编程 模式 ， 从 程序员 的 角度 出发 ， RPC 十分 容易 理解 — — 程序代码 调用 远端 过程 并 将 结果 返回 。 当 使用 RPC 时 ， 只 需要 编写 很少 的 网络 程序代码 ， 大部分 代码 由 IDL ( Interface   Define   Language ) 生成 。 
 　 　 RPC 应用 不仅 可以 调用 在 远方 节点 上 的 子程序 ， 甚至 可以 在 不同 操作系统 环境 下 运行 。 它 使 程序员 不必 考虑 网络 的 细节 ， 仍 可 采用 自己 熟悉 的 Call / Return 语法 。 
 　 　 RPC 一般 采用 Call / Return 模式 ， 多 用于 应用程序 之间 的 通信 ， 而且 采用 同步 方式 。 RPC 程序 之间 的 同步 通信 一般 采用 Request - Wait - Reply 方式 ，   因此 ， 对 小型 简单 的 不 需要 采用 异步 通信 方式 的 应用 比较 适合 ， 但 对 大型 复杂 的 应用 不太 适合 ， 因为 它 需要 程序员 考虑 网络 或 系统 的 故障 、 处理 多个 网络连接 、 可移植性 、 缓冲 及 流量 控制 和 进程 之间 的 同步 等 多种 问题 。 
 1.3 　 基于 TP   Monitor   的 中间件 
 　 　 TP   Monitor 是 一种 复杂 的 中间件 产品 ， 它 为 应用 处理 提供 了 一种 通信 机制 ， 它 允许 开发者 在 TP   Monitor 环境 中 定义 事务 服务 。 TP   Monitor 位于 客户机 和 数据库 服务器之间 ， 采用 三层 或 多层 模型 。 客户 通过 Transaction   RPC ( TRPC ) 机制 在 TP   Monitor 中 调用 事务 ， TP   Monitor 运行 事务 来 连接 数据库 ， 并 将 处理结果 返回 给 客户端 。 TP   Monitor 提供 一系列 服务 ， 如 应用 管理 、 管理控制 和 应用 之间 消息传递 等 。 常见 的 属性 包括 全局 事务 协调 、 分布式 两 阶段 提交 、 资源管理 器 支持 、 协调 故障 恢复 、 高可用性 、 安全性 、 网络 负载平衡 等 。 
 　 　 在 TP   Monitor 中 ， 事务 有 一个 明确 的 起止点 ， 如果 事务 失败 ， TP   Monitor 可以 回滚 事务 ， 不会 使 系统 处于 不 完整 、 不 一致 状态 。 TP   Monitor 同时 可以 复用 数据库 请求 。 因为 每个 客户 调用 事务 ， 而 不是 直接 和 数据库 进行 连接 ， 因此 TP   Monitor 可以 协调 数据库 请求 ， 传统 的 Connection - Per - Client 的 限制 ( 在 客户机 / 服务器 环境 中 ) 可以 去掉 ， 如 100 个 客户 可能 只 需要 10 个 数据库 连接 。 并且 TP   Monitor 还 可以 在 同一个 事务 中 读写 异构 数据库 中 的 信息 ， 并 保持 异构 数据库 的 完整性 。 
 　 　 常见 的 TP 产品 有 ： BEA 的 Tuxedo 、 IBM 的 CICS 、 NCR 的 TopEnd 、 Microsoft 的 MTS 等 。 
 1.4 　 基于 ORB ( Object   Request   Broker ) 的 中间件 
 　 　 基于 ORB 的 中间件 主要 是 采用 面向对象 的 技术 ， ORB 可以 看作 是 与 编程语言 无关 的 面向对象 的 RPC 应用 。 它 的 成员 函数 可以 采用 类似 Object - function ( ) 方式 调用 远 端的 对象 。 目前 ， ORB 存在 两个 彼此 竞争 的 标准 ： CORBA   ORB 和 DCOM   ORB 。 
 　 　 当 使用 ORB 时 ， IDL ( Interface   Define   Language ) 用于 定义 对象 之间 的 接口 ， 它 类似 于 RPC 中 的 IDL 定义 过程 的 接口 。 ORB 特别 适用 于 对象 接口 变化 不 频繁 ， 不会 导致 代码 经常 被 重新 编译 及 链接 的 情况 。 ORB 的 总体 框架图 如图 2 所示 。 
 
 
 
 图 2 　 ORB 的 总体 框架图 
 　 　 理想 的 要求 是 ， 一个 ORB 应 赋予 每个 对象 ( 与 其它 对象 特别 是 远程 的 对象 进行 通信 时 ) 以下 的 分布 透明性 ： 
 　 　 位置 ： 无论 其它 对象 是否 处于 同一个 计算机 中 ； 
 　 　 访问 路径 ： 与 其它 对象 交换 消息 经过 的 途径 ； 
 　 　 重 定位 ： 其它 对象 从 一台 计算机 移至 另一台 ； 
 　 　 数据表示 ： 其它 对象 相应 的 数据格式 ； 
 　 　 通信 机制 ： 使用 何种 进程 间 的 通信 机制 和 规程 ； 
 　 　 调用 机制 ： 其它 对象 的 方法 是 如何 执行 的 。 例如 ： 进程 、 线程 和 动态链接库 等 的 细节 ； 
 　 　 存储 机制 ： 其它 对象 任何 可以 或 不可 使用 存储 的 情况 ； 
 　 　 机器 类型 ： 任何 机器 型号 上 的 不同 ； 
 　 　 程序语言 ： 其它 对象 是 以 何种 语言 实现 的 ； 
 　 　 操作系统 ： 任何 操作系统 上 的 不同 ； 
 　 　 安全 机制 ： 其它 对象 本身 所 具有 的 访问控制 机制 。 
 　 　 对 以上 各 方面 的 任何 变更 都 无须 将 这个 特定 对象 重新 编译 ( 或 重新 链接 、 重新 加载 等等 ) ， 其 整体 效果 是 ，   对 任何 一个 对象 的 实现 动态 地 进行 更改 ， 都 将 不会 影响 到 其它 的 对象 ， 无论 它们 是 服务者 还是 请求者 。 
 1.5 　 基于 消息 的 中间件 MOM 
 　 　 基于 消息 的 中间件 MOM 提供 了 一个 完整 的 处理 环境 ， 允许 开发者 及 用户 连接 不同 系统 之间 的 数据 和 代码 ， 或 采用 一致 的 界面 进行 应用 处理 的 互连 。 MOM 提供 了 一个 高层 应用 接口 ， 为 不同 系统 提供 操作 核心 。 MOM 产品 的 工作 主要 是 通过 将 信息 以 消息 的 方式 在 程序 间 传递 来 完成 。 
 　 　 MOM 一般 可以 分为 两种 形式 ： 消息传递 ( Message   Passing ) 和 消息 队列 ( Message   Queuing ) 。 
 　 　 消息传递 在 建立 大型 的 分布式应用 中 比较 常见 。 其 主要 的 模式 是 广播 / 订购 ( Publish - Subscribe ) 方式 。 采用 该 方式 ， 应用程序 既 可以 订购 ， 也 可以 广播 。 该 通信模型 提供 了 位置 透明性 。 程序 只 需要 简单 地 将 消息 以 主题 方式 发送 出去 ， 由 中间件 来 负责 将 消息传递 给 所有 订购 该 主题 的 程序 。 MOM 主要 通过 agents 技术 来 实现 Publish - Subscribe 方式 应用 。 当 程序 广播 消息 时 ， 首先 与 一个 代理 进行 连接 ， 将 消息传递 给 代理 。 代理 负责 路由 消息 给 相应 的 程序 。 由于 代理 可以 实现 消息 的 动态 路由 功能 ， 因此 ， 该 方式 能够 提供 较 好 的 容错性 能 ， 但 它 缺乏 MOM 的 异步 特性 ， 不太 适合 长时间 网络 断开 的 情况 。 
 　 　 消息 队列 方式 允许 程序 无需 直接 建立 起 连接 即可 发送 和 接收 消息 。 程序 只须 简单 地 将 消息 发送给 消息 队列 ， 由 消息 队列 负责 消息 的 传递 ， 对 应用程序 完全 透明 。 消息 队列 采用 异步 方式 ， 为 信息 提供 了 一个 安全 的 存储 方式 ， 特别 适用 于 不是 直接 连接 的 应用 ， 如 移动用户 、 发送 方 或 接收 方 进程 可能 处于 不 活动状态 的 应用 。 它 的 缺点 是 需要 一些 配置 工作 ， 性能 不是 很 高 ， 而且 如果 队列 丢失 ， 整个 系统 将 受到 影响 。 
 　 　 MOM 可以 克服 基于 RPC 的 中间件 的 限制 ， 提供 基于 消息 的 异步 通信 机制 ， 因此 MOM   API 调用 不会 阻塞 应用程序 ， 同时 MOM 不会 占用 大量 的 网络带宽 ， 可以 跟踪 事务 ， 通过 将 事务 存储 在 磁盘 上 ， 可以 恢复 系统 及 网络故障 。 
 　 　 常见 的 MOM 产品 有 ： DEC 的 MessageQ 、 IBM 的 MQSeries 、 Microsoft 的 MSMQ 。 
 2 　 中间件 优点 及 具体 应用 
 　 　 传统 的 客户机 / 服务器 模式 是 一种 双层 模型 。 双层 模型 的 物理 实现 方式 为 ： 一台 桌面 电脑 当做 客户机 使用 ， 而 一台 网络 服务器 则 用于 容纳 后 端 数据库 引擎 。 在 双层 模型 里 ， 程序逻辑 在 客户机 与 服务器 这 两种 物理 位置 之间 分担 ， 应用程序 的 商业 逻辑 必须 物理 性 地 驻留 于 客户机 端 ， 或 在 后 端 DBMS 里 以 触发器 或 存储 过程 的 形式 实现 。 这种 双层 的 客户机 / 服务器 方案 的 优点 在于 实现 数据 访问 相当 简单 ， GUI 可 与 数据源 直接 约束 在 一起 ， 数据 维护 的 所有 细节 都 可以 得到 自动控制 。 但是 它 也 存在 着 很多 的 不利因素 。 尽管 数据 访问 得到 了 简化 ， 但 却 缺乏 灵活性 ， 我们 通常 无法 对 自己 与 数据源 的 交互作用 进行 完全 的 控制 ， 因为 这种 控制 是 自动 的 。 很 明显 ， 额外 的 管理 会 消耗 客户机 资源 ， 并 可能 导致 应用程序 的 性能 下降 。 
 　 　 双层 客户机 / 服务器 模型 存在 以下 三个 方面 的 限制 因素 ： 
 　 　 不可 伸缩 　 双层 模型 无法 超越 客户机 的 物理 界限 ， 而且 服务器 也 会 禁止 这种 模型 的 伸缩 。 
 　 　 不能 管理 　 由于 不能 封装 商业 规则 ， 也 不能 对 这些 规则 进行 集中 配置 ， 所以 常用 程序 的 重用 也 不 方便 。 
 　 　 性能 较差 　 因为 将 图形界面 与 数据源 绑定 在 一起 ， 所以 会 消耗 客户机 的 主要 系统资源 。 这 对 客户机 来说 是 一个 沉重 的 负担 ， 会 导致系统 性能 的 下降 。 
 　 　 正是 由于 双层 客户机 / 服务器 方案 存在 诸多 限制 ， 所以 又 提出 了 一种 新 的 三层 服务器 模型 。 三层 客户机 / 服务器 模型 以 构建 分割 式 应用程序 为 基础 。 对 一个 应用程序 进行 分割 以后 ， 可 将 代码 划分 为 不同 的 逻辑 组件 ， 在 三层 的 客户机 服务器 模型 中 ， 这些 逻辑 组件 分为 三个 逻辑 层 ： 用户服务 、 业务 服务 和 数据服务 ， 它们 共同 组成 一个 应用程序 。 我们 把 这种 三层 的 设计 模型 称为 “ 服务 模型 ” 。 
 　 　 三种 服务 的 属性 如下 ： 
 　 　 用户服务 　 提供 信息 和 功能 、 浏览 定位 ， 保证 用户界面 的 一致性 和 完整性 ； 
 　 　 业务 服务 　 共享 的 业务 政策 ， 从 数据 中 生成 业务 信息 ， 保证 业务 的 一致性 ； 
 　 　 数据服务 　 数据 的 定义 、 永久 数据 的 存储 和 检索 ， 保证数据 的 一致性 。 　 　 
 
 
 图 3 　 服务 模型 结构图 
 　 　 使用 服务 模型 ， 可以 把 应用程序 的 需求 分解成 明确 定义 的 服务 。 在 定义 了 服务 之后 ， 需要 进一步 创建 具体 的 物理 构件 来 实现 它们 。 构件 是 一个 或 几个 服务 在 物理 上 的 封装 ， 可以 通过 构件 的 接口 获得 这些 服务 。 构件 可以 是 . exe 或 . dll 文件 、 数据库 触发器 和 存储 过程 的 集合 ， 或者 任何 几个 其它 物理 软件 实体 。 构件 是 由 它 所 提供 的 服务 以及 它 和 其它 构件 的 相互作用 来 定义 的 。 根据 性能 和 维护 的 需求 、 工作量 、 网络带宽 以及 其它 的 因素 ， 可以 在 网络 上 灵活 地 部署 这些 构件 。 这些 构件 总是 通用 的 ， 并且 遵守 公开 的 接口标准 ， 所以 它们 可以 被 重用 ， 并 能 被 多个 应用程序 所 共享 ， 外界 所 能 知道 的 就是 它们 的 接口 。 实际上 这些 物理 构件 就是 基于 ORB 的 中间件 。 
 　 　 这种 基于 构件 的 三层 客户机 / 服务器 的 优点 可 概括 为 以下 四个 方面 ： 
 　 　 可 重用 性 　 许多 应用程序 可 共享 和 重用 封装 在 构件 中 的 功能 。 
 　 　 灵活性 　 从 桌面 计算环境 到 功能 更强 的 网络 服务器 ， 随处 都 可 分配 工作 ， 这 有利于 协调 性能 和 网络带宽 。 
 　 　 可管理性 　 将 大型 复杂 的 工程 细分 为 简单 、 安全 的 构件 工程 。 
 　 　 易维护性 　 将 业务 逻辑 部署 在 中央 服务器 上 ， 而 不是 分散 在 用户 桌面上 ， 这 有助于 处理 各种 变化 ， 并 缩短 解决方案 的 往返 时间 。 
 　 　 在 某 电视台 资料 管理 及 业务 处理 信息系统 中 ， 我们 采用 了 上述 三层 的 服务 模型 ： 在 客户机 上 的 客户服务 程序 ， 在 构件 服务器 上 的 业务 服务程序 和 在 数据 服务器 上 的 数据 服务程序 。 客户服务 程序 主要 处理 表示 逻辑 ， 也 就是 以 某种 方式 同 用户 进行 交互 ， 它 基本上 是 一种 图形用户界面 。 业务 服务程序 主要 完成 业务 规则 的 控制 和 对 数据库 的 访问 ， 并且 业务 服务程序 是 以 构件 的 形式 提供 给 客户服务 程序 调用 的 。 由于 业务 服务程序 是 以 构件 的 形式 给出 的 ， 所以 一个 构件 能 被 多个 客户服务 程序 调用 ， 例如 节目 资料 检索 构件 就 能 让 其它 各个 子系统 的 客户服务 程序 调用 ， 以便 客户服务 程序 在 检索 结果 集 基础 上 进行 其它 处理 。 数据 服务程序 主要 就是 各种 智能 数据库 所 能 提供 的 功能 ， 例如 存储 过程 、 存储 查询 等等 。 
 　 　 该 系统 的 结构 如图 4 所示 。 
 
 
 图 4 
 　 　 在 这个 三层 客户机 / 服务器 模型 中 ， 我们 把 各种 业务 规则 都 封装 在 各自 相应 的 构件 中 ， 这样 业务 规则 的 实现 和 客户 使用 的 图形用户界面 的 实现 就 相 分离 了 （ 在 传统 的 两层 客户机 / 服务器 模型 中 ， 两者 是 同时 在 客户机 应用程序 中 实现 的 ） ， 当 一方 要 进行 改变 时 ， 只 对 需 改变 的 一方 进行 改变 。 与此同时 ， 在 同 一层 上 的 构件之间 也 可以 相互 调用 ， 这样 也 增加 了 代码 的 可 重用 性 ， 减少 了 编程 量 ， 而且 因为 构件 也 是 相互 独立 的 ， 所以 当 需求 改变 时 也 只 需 对 相应 的 构件 进行 改变 。 如此一来 就 大大减少 了 系统维护 的 负担 ， 并 提高 了 系统 的 适用性 。 
 　 　 宋晓梁 　 硕士 研究生 。 主要 研究 方向 ： 新型 程序语言 设计 。 
 　 　 *   国家 高新技术 研究 发展 （ 863 ） 计划 及 江苏省 自然科学 基金 资助 。 
 　 　 作者 单位 ： 宋晓梁 　 刘东生 　 许满武 （ 南京大学 计算机科学 与 技术 系 ， 计算机软件 新 技术 国家 重点 实验室 　 江苏 ． 南京 210093 ) 
 参考文献 
 ［ 1 ］ 　 Ron   Ben - Natan .   CORBA - A   guide   to   common   object   request   broker   architecture .   McGraw - Hill , 1995 
 ［ 2 ］ 　 D . Box .   Q & A   ActiveX / COM . Microsoft   Systems   Journal , 
 1997 ； ( 3 ) : 93 - 105 
 ［ 3 ］ 　 A . Birrel , B . J . Nelson .   Implementing   Remote   Procedure 
 Calls .   ACM   Transactions   on   Computer   Systems ,   1984 ; 2 ( 1 ) : 39 - 59 
 ［ 4 ］ 　 黄 　 俊 , 许满武 , 陆 剑锋 . 中间件 LSM 及其 在 物资 运输 调配 系统 中 的 应用 . 微型 计算机 ， 1997 ； 17 ( 增刊 2 ) ： 78 - 80 
 ［ 5 ］ 　 Cynthia   McFall ,   IBM   Corporation .   An   Object   Infrastructure   for   Internet   Middleware   IBM   on   Component   Broker .   IEEE   Internet   Computing ,   1998 ; 2 ( 2 ) 
 ［ 6 ］ 　 Object   Management   Group .   CORBA   2.1   Update   Sheet , 
 1997 ， 8   
 　 收稿 日期 : 1999 - 04 - 23 ( 修改稿 ) 
