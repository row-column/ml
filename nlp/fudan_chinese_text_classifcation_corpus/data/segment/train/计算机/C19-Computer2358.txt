计算机 研究 与 发展 
 JOURNAL   OF   COMPUTER   RESEARCH   AND   DEVELOPMENT 
 1999 年   第 36 卷   第 8 期   Vol.36   No.8   1999 
 
 
 
 汇编 系统 中多 平台 支持 技术 的 研究 
 吴海平 　 　 　 罗红兵 
 摘 　 要 　 支持 多语种 、 多 平台 是 当前 编译 技术 的 发展趋势 ， 它 适应 了 当前 计算机系统 迅猛 更新 的 需要 . 汇编 系统 作为 多语种 、 多 平台 编译 中 必不可少 的 重要 组成部分 ， 是 实现 多 平台 支持 的 关键 . 文中 提出 了 一个 适用 于 不同 计算机 平台 的 多 平台 汇编 系统 的 模型 ， 在 此基础 上 讨论 了 汇编 系统 中多 平台 支持 技术 的 3 个 关键 要素 ： 平台 配置 机制 、 指令系统 支持 方式 和 目标 文件 处理 策略 ， 并 描述 了 相应 的 设计 与 实现 方法 . 最后 ， 给出 了 该 汇编 模型 应用 的 一些 实验 结论 . 
 关键词 　 多 平台 汇编 ， 平台 配置 ， 前后 台 界面 
 中图法 分类号 　 TP313 
 RESEARCH   ON   SUPPORTING   MULTI - PLATFORM   IN   ASSEMBLER 
 WU   Hai - Ping   and   LUO   Hong - Bing 
 ( Department   of   Computer   Science , National   University   of   Defense   Technology ,   Changsha   410073 ) 
 Abstract 　 Since   new   computer   systems   appear   more   and   more   rapidly ,   the   current   compiling   technique   is   developed   toward   supporting   multi - language   and   multi - platform .   Assembly   system ,   which   is   an   important   part   of   this   kind   compiler   systems ,   is   the   key   for   compiler   to   implement   multi - platform .   In   the   paper   here ,   an   assembly   model   is   described ,   which   can   support   multi - platform   and   be   used   for   different   computer   systems .   Three   key   factors   of   supporting   techniques   are   presented ,   which   are   mechanisms   of   plateform - configuration ,   supporting   fashions   of   instruction   systems ,   and   processing   strategies   of   object   files .   Some   relevant   methods   of   design   and   implementation   are   presented .   Some   application   results   of   this   assembly   model   are   also   given . 
 Key   words 　 multi - platform   assembly ,   platform   configuration ,   interface   of   front - end   and   back - end 
 1 　 引 　 言 
 　 　 多语种 、 多 平台 编译 技术 是 当前 国际 上 流行 的 、 取代 传统 的 语言 － 编译 － 机器 代码 那种 一对一 方式 的 一种 新 的 编译 技术 . 该 技术 实现 的 主要 途径 是 采用 以 一致性 中间 语言 编译 处理 为 连接区 的 前后 台 机制 . 在 前台 处理 中 ， 各类 高级 语言 经过 各自 对应 的 基本 处理 （ 如 词法 分析 、 生成 语法 树 等 ) 后 形成 一种 规范 结构 的 中间 语言 （ 也 可以 是 某 一种 高级 语言 ， 例如 C语言 ) . 这样 作为 连接区 的 一致性 中间 语言 处理 来说 ， 它 只 面向 一种 语言 的 处理 . 与 传统 编译 处理 结构 不同 的 是 ， 一致性 中间 语言 处理 所 生成 的 输出 语言 是 平台 相关 的 汇编语言 而 不是 生成 目标 机器 上 的 半 目标 代码 . 从 总体 结构 上 看 ， 多语种 、 多 平台 支持 结构 是 由 语言 预处理 工具集 （ 前台 处理 ) 、 一个 一致性 编译系统 （ 中间 语言 处理 ) 和 一个 支持 多 平台 的 汇编 系统 （ 后台 处理 ) 构成 . 
 　 　 汇编 系统对 多 平台 的 支持 意味着 ： 
 　 　 ( 1 )   支持 不同 平台 上 的 汇编语言 处理 ， 包括 不同 平台 上 的 汇编 文法 约定 、 不同 的 机器指令 系统 、 宏 指令集 和 伪指令 集 ； 
 　 　 ( 2 )   支持 不同 平台 上 的 操作系统 界面 描述 ， 包括 不同 的 目标 文件格式 、 不同 的 数据 配置 方式 和 调试 支持 信息 等 ； 
 　 　 ( 3 )   具有 灵活 的 平台 增删 与 配置 机制 和 规范 . 
 　 　 在 本文 中 我们 首先 描述 了 一个 在 平台 配置 机制 管理 下 的 多 平台 汇编 系统 模型 . 然后 基于 该 模型 来 讨论 汇编 系统对 多 平台 支持 的 3 个 关键 要素 ： 平台 配置 机制 、 指令系统 支持 方式 和 目标 文件 处理 策略 . 
 2 　 多 平台 汇编 系统 模型 
 　 　 我们 描述 的 多 平台 汇编 系统 模型 （ 图 1 ) 主要 由 3 个 部分 组成 ： 平台 模板 构件 组 、 规范 文件 结构 处理 和 汇编 内部 处理 . 这些 部分 各自 是 一个 独立 的 整体 ， 它们 必须 在 平台 配置 机制 管理 下 进行 配置 才能 形成 平台 相关 汇编 系统 . 在 该 模型 中 ， 平台 模板 是 平台 相关 汇编 指令集 、 平台 相关 操作系统 接口界面 和 平台 特性 集 的 一个 严密 组合 . 不同 平台 所 对应 的 平台 模板 是 不 相同 的 . 因为 多 平台 汇编 系统 是 在 一致性 的 平台 配置 机制 下 严格管理 ， 因此 平台 模板 构件 组 可以 任意 扩展 . 平台 模板 扩展 时 只 需要 按照 模型 所 规定 的 规范 去 描述 相应 的 模板 并 使用 三元 式 （ 平台 属类 、 平台 厂商 、 操作系统 版本 ) 填充 模型 中 的 平台 配置 表 即可 为 汇编 系统 模型 建立 对 新 平台 的 支持 项 . 
 
 
 图 1 　 多 平台 汇编 系统 模型 
 　 　 多 平台 汇编 系统 模型 本身 并 不是 一个 可 运行 系统 ， 它 对 多 平台 的 支持 主要 反映 在 该 模型 提供 了 平台 配置 所 需要 的 平台 模板 ， 同时 采用 了 一种 前后 台 汇编 处理 策略 ， 即将 不同 平台 的 汇编 指令集 和 基于 汇编 指令集 所 形成 的 目标 文件 在 前台 进行 规范 预处理 ， 然后 进行 一致性 的 后台 处理 . 这样 整个 模型 保持 了 界面 清晰 、 结构 简单 精炼 的 特点 . 
 　 　 在 处理 技术 上 ， 多 平台 汇编 系统 模型 以 传统 的 汇编 方法 为 骨架 ， 扩展 了 如下 几个 关键技术 ： 
 　 　 ( 1 )   平台 模板 技术 . 将 平台 相关 的 指令系统 、 操作系统 界面 描述 、 平台 相关 文件格式 以 模板 结构设计 并 依据 平台 配置 机制 形成 平台 相关 的 汇编 处理 模式 ； 
 　 　 ( 2 )   汇编 的 通用 处理 与 平台 相关 处理 分离 技术 ； 
 　 　 ( 3 )   规范 文件 结构 技术 . 
 3 　 平台 配置 机制 
 　 　 平台 配置 机制 是 汇编 系统 模型 对 多 平台 支持 得以 实现 的 关键 . 我们 在 这里 描述 的 平台 配置 机制 由 两级 配置 构成 ： 
 　 　 ①   平台 模板 配置 ； 
 　 　 ②   平台 处理 系统配置 . 
 　 　 平台 模板 配置 的 目的 是 生成 平台 处理 系统 的 集成 文件 （ 在 UNIX 系统 下 是 Makefile 文件 ) . 因此 在 平台 模板 配置 时要 产生 集成 文件 的 3 个 主要 子 文件 ： 
 　 　 ( 1 )   目标 机系统 平台 描述 文件 . 在 交叉 汇编 环境 下 ， 汇编 系统 的 运行 平台 与 它 所 生成 的 目标 部 指派 . 平台 模板 配置 机制 根据 指派 来 形成 相关 的 平台 描述 文件 ； 
 　 　 ( 2 )   指令 模板 处理 文件 . 因为 多 平台 汇编 系统 模型 中 各 平台 的 指令集 的 处理 是 一致 的 ， 因此 文件 中 ， 从而 形成 相应 平台 的 汇编 指令 处理 文件 ； 
 　 　 ( 3 )   操作系统 界面 文件 . 包括 文件格式 描述 、 目标 文件 生成 机制 、 二进制 文件 操纵 机制 等 . 
 　 　 平台 模板 配置 采用 外部 指派 配置 三元 式 〈 平台 属类 ， 平台 厂商 ， 操作系统 版本 〉 来 牵引 平台 模板 的 方式 进行 . 在 该 三元 式 中 ， 平台 属类 和 操作系统 版本 直接 决定 了 要 配置 的 平台 模板 （ 平台 厂商 只是 用于 标识 平台 模板 的 版本 ) ， 从而 也 决定 了 如何 形成 集成 文件 的 子 文件 . 
 　 　 集成 文件 用来 自动 进行 平台 处理 系统配置 . 换句话说 ， 集成 文件 的 作用 是 形成 一个 具体 平台 的 汇编 系统 . 在 多 平台 汇编 系统 模型 中 ， 集成 文件 的 初始 结构 是 一个 文件 模板 . 该 文件 模板 在 平台 模板 配置 机制 的 驱动 下 ， 通过 插入 处理 子 文件 而 转换 为 一个 可 执行 的 集成 文件 . 该 集成 文件 是 平台 配置 机制 的 最后 一个 执行 步骤 ， 它 的 执行 将 产生 如下 的 结果 ： 
 　 　 ( 1 )   描述 系统 的 执行 序 . 即 按 词法 分析 、 语法分析 、 语法 树 处理 、 目标 代码生成 等 常规 汇编 处理 顺序 集成 相应 的 程序 ； 
 　 　 ( 2 )   集成 前 、 后台 处理程序 . 包括 不同 指令集 的 规范 界面 处理程序 和 一致性 汇编 指令 处理程序 、 不同 目标 文件格式 的 界面 处理程序 和 规范 目标 文件格式 处理 与 转换 程序 等 ； 
 　 　 ( 3 )   操作系统 接口 处理程序 . 包括 文件格式 、 表格 结构 、 参数传递 等 . 
 　 　 多 平台 汇编 系统 模型 的 平台 配置 机制 可以 由图 2 来 直观 表示 . 图中 所示 的 平台 配置 表 决定 了 该 模型 对 平台 的 支持 范围 ， 它 可以 按 模型 的 规则 来 扩展 . 牵引 表 描述 了 平台 模板 配置 机制 在 构造 集成 文件 的 子 文件 时 的 查找 目录 . 
 
 
 图 2 　 多 平台 汇编 系统 模型 的 配置 结构 
 4 　 多 指令系统 的 支持 方式 
 　 　 为了 实现 对 多种 指令系统 的 支持 ， 我们 的 汇编 模型 要求 平台 模板 的 指令集 要 以 规范 形式 编排 . 在 配置 时 组成 指令集 的 伪指令 和 机器指令 分别 用 一种 灵活 的 内部结构 来 存放 . 机器指令 按 操作码 汇编 助记符 的 字典 序 存放 在 一个 转接 数组 中 . 该 数组 的 元素 可以 方便 地 增加 或 删除 ， 从而 使 模型 能 处理 不同 平台 的 任意 大小 的 指令集 . 与 转接 数组 对应 有 一个 大小 一样 的 指令 操作 数组 ， 它 是 在 配置 时 与 转接 数组 一起 同时 形成 的 . 它 的 每个 项由 机器 编码 或 处理 函数指针 构成 . 如果 汇 编码表示 的 操作 要 用 多条 机器指令 实现 ， 那么 该 汇编 码 对应 的 指令 操作 数组 项是 其 扩展 函数 的 指针 ， 否则 就是 该 汇编 码 对应 的 机器指令 内码 . 对于 伪指令 来说 ， 则 按 通用 伪指令 和 机器 相关 伪指令 分别 存放 在 类似 存放 机器指令 那样 的 数组 中 . 机器 相关 伪指令 具有 较 高 的 优先级 ， 即 汇编 内部 处理 时 优先 匹配 机器 相关 伪指令 . 
 　 　 在 汇编 内部 处理 的 初始化 时 ， 通过 Hash 表 的 形式 ， 将 当前 平台 指令系统 的 机器指令 集 和 伪指令 集从 转接 数组 放进 Hash 表并 连接 其 相应 的 处理函数 地址 . 当 汇编 面对 一条 分割 划分 出来 的 指令 时 ， 通过 Hash 表 匹配 找到 相应 的 处理函数 ， 然后 转 去 处理 . 
 　 　 我们 的 汇编 模型 采用 如下 结构 来 保存 每 一条 汇编 机器指令 ： 
 　 　 struct 　   xxxx - code   { 
 　 　 　 　 const   char 　 　 　 * name ； 
 　 　 　 　 const   char 　 　 　 * args ； 
 　 　 　 　 unsigned   long 　 　 match ； 
 　 　 　 　 unsigned   long 　 　 mask ； 
 　 　 　 　 unsigned   long 　 　 pinfo ； 
 　 　 } 
 其中   xxxx 为 平台 名称 ； name 为 指令 名 ； args 为 指令 参数 描述 串 ； match 为 指令 的 基本 操作码 . 当 汇编 时 ， 该 操作码 被 参数 修改 ， 产生 实际 的 操作码 . mask 有 两重 含义 . 当 pinfo 不是 INSN － MARCO ， 这是 一个 反汇编 时 操作码 相应 部分 的 位 屏蔽 . 若 实际 的 操作码 与 匹配 字 段 等于 操作码 字 段 ， 那么 我们 找到 了 正确 的 指令 . 若 pinfo 是 INSN － MACRO ， 它 是 宏 扩展 标识符 ， 表示 该 指令 将 扩展 为 多条 机器指令 . 
 
 文件 头 描述 
 代码 信息 
 数据 信息 
 
 　 
 下面 的 数据结构 保存 伪指令 处理 信息 ： 
 　 　 struct   pseudo - typeS   { 
 　 　 　 　 char   　 　   * poc - name ； 
 　 　 　 　 void 　 　 　 （ * poc － handler ）   PARAMS   （ int ） ； 
 　 　 　 　 intpoc － val ； 
 　 　 } 
 poc － name 为 伪指令 助记符 ； poc － handler 为 伪指令 处理函数 ； poc － val 为 传给 handler 的 值 .   
 5 　 目标 文件格式 的 处理 策略 
 　 　 目前 流行 的 机器 平台 众多 ， 操作系统 版本 繁杂 ， 导致 各种 目标 文件格式 存在 . 例如 ELF ， 
 COFF ， ECOFF ， a . out 等 文件格式 ， 甚至 还有 各种各样 的 自定义 格式 . 我们 的 汇编 模型 采用 规范 文件格式 来 对 不同 文件格式 进行 一致性 处理 . 模型 中 的 二进制 文件 操纵 机制 （ 简称 BFD ) 就是 用来 实现 这一 目的 的 . 
 　 　 BFD 由 前台 界面 处理 和 后台 规范 处理 两 部分 组成 . BFD 的 前台 界面 处理 面向 不同 的 操作系统 界面 描述 和 目标 文件格式 ， 按 要求 组织 文件 信息 、 产生 数据 配置 方式 、 产生 半 目标 文件 代码 等 . BFD 后台 是 一种 规范 文件格式 的 处理 . BFD 自定义 了 一种 规范 文件格式 ( 见 下图 ) . 
 　 　 这个 格式 类似 ELF 文件格式 ， 但 它 不 包含 辅助 信息 . 汇编 系统 按该 格式 的 要求 处理 汇编程序 ， 组织 相应 的 信息 并 形成 有关 文件 ， 然后 转 BFD 的 前台 处理 . 由于 该 规范 文件格式 不 包含 诸如 调试 、 参数 传送 、 日志 标记 等 信息 ， 因此 除 BFD 后台 产生 的 信息 外 ， 汇编 还要 将 BFD 后台 规范 处理 之外 的 平台 相关 信息 组织 在 一个 防 丢失 数据 区中 并 送 BFD 前台 处理 . 
 　 　 BFD 前台 处理 的 工作 是 按 将 规范 文件格式 转换 为 平台 相关 文件格式 ， 并 将 防 丢失 数据 区中 的 信息 补充 到 相关 文件格式 中 . 
 　 　 我们 在 本文 描述 的 多 平台 汇编 模型 具有 包含 范围广 、 结构 层次 简单 清晰 、 扩展性 强 等 特点 . 理论 上 它 可以 支持 几乎 所有 的 平台 . 我们 已经 成功 地 将 该 模型 应用 到 了 诸如 mips ， powerpc ， sun ， IBMPC 等 平台 上 . 结果 证明 ， 我们 的 模型 对 新 平台 支持 所 需要 增加 的 程序 量 大约 是 模型 在 裸 平台 状态 时 程序 量 的 1 / 15 ～ 1 / 20 ， 并且 大部分 工作 只是 简单 直观 的 平台 指令集 的 编排 . 想象 一下 如果 要 从头到尾 为 一个 新 平台 设计 汇编 系统 ， 那 将 会 有 多 大 的 工作量 啊 ！ 
 基金项目 ： 本 课题 得到 国防科技大学 预研 基金 资助 . 
 作者简介 ： 吴海平 ， 男 ， 1962 年 2 月生 ， 副教授 ， 长期 从事 并行 语言 、 并行 编译 、 软件 环境 集成 和 软件 可视化 的 研究 . 罗红兵 ， 男 ， 1968 年 1 月生 ， 讲师 ， 主要 从事 并行 编译 和 办公自动化 研究 . 
 作者 单位 ： 吴海平 　 罗红兵 　 国防科学技术大学 计算机科学 系 　 长沙 　 410073 
 参考文献 
 1 　 Mary   Lou   Nohr .   Understanding   ELF   Object   Files   and   Debugging   Tools .   Englewood   Cliffs ,   NJ :   Prentice   Hall ,   1994 
 2 　 Erin   Farquhar ,   Philip   Bunce .   The   Mips   Programmer ' s   Handbook .   San   Francisco ， California :   Morgan   Kaufmann   Publishers ,   1994 
 3 　 夏仁霖 等 .   RISC 技术 参考手册 .   上海 :   长江 计算机 集团 联合 公司 ， 1992 
 ( Xia   Renlin .   RISC   Technique   Reference   Handbook ( in   Chinese ) ,   Shanghai :   Changjiang   Computer   Association   Company ,   1992 ) 
 4 　 Constantine   D   Polychronopoulos .   Parallel   programming   and   compilers .   Boston :   Kluwer   Academic   Publishers ,   1988 
 收到 日期 ： 1997 - 11 - 19 
 修改 日期 ： 1998 - 06 - 29 
