　 自动化 学报 
 ACTA   AUTOMATICA   SINICA 
 1997 年   第 23 卷   第 3 期   vol.23   No.3   1997 
 
 
 
 避免 死锁 调度 的 数学 建模 与 求解 
 杨 　 盛 　 吴 　 澄 
 　 　 摘 　 要 　 通过 引入 “ 资源分配 函数 ” 的 概念 建立 了 以 最 短 加工 时间 为 目标 函数 的 制造 系统 避免 死锁 调度 的 数学模型 ，   给出 了 该 模型 在 两 进程 情况 的 最优 解 算法 和 多 进程 情况 的 可行 解 算法 .   
 　 　 关键词 　 死锁 ， 调度 ，   制造 系统 .   
 MATHEMATICAL   MODELING   AND   SOLUTION   OF   SCHEDULING 
 FOR   DEADLOCK   AVOIDANCE 
 YANG   SHENG   WU   CHENG 
 ( Department   of   Automation ,   Tsinghua   University ,   Beijing   100084 ) 
 　 　 Abstract   This   paper   presents   the   mathematical   model   of   optimal   scheduling   for   deadlock   avoidance   in   manufacturing   ysstems   based   on   the   conception   of   resource   allocation   function ,   aimed   at   reducing   the   system   total   processing   time .   Two   algorithms   are   proposed   for   the   optimal   solution   in   the   case   of   two   processes   and   the   feasible   solution   in   the   case   of   multi - processes ,   respectively . 
 　 　 Key   words   Deadlock ,   scheduling ,   manufacturing   system . 
 　 　 1 　 引 　 言 
 　 　 死锁 现象 广泛 存在 于 计算机 操作系统 ［ 1 ］ 、 网络系统 ［ 2 ］ 、 生产 制造 系统 ［ 3 － 4 ］ 等 多 进程 、 多 作业 的 复杂 系统 .   产生 死锁 的 原因 在于 系统资源 的 有限 和 进程 推进 顺序 的 不合理 .   死锁 的 产生 将 严重 损害 系统 的 性能 ， 因此 处理 死锁 是 多 进程 系统 的 一个 重要 方面 .   
 　 　 文 ［ 1 ］ 论述 了 计算机 操作系统 中 产生 死锁 的 充要条件 和 消除 死锁 的 主要 方法 .   由于 生产 制造 系统 与 操作系统 相比 有 其 自身 的 特点 ， 两者 的 行为 、 约束 和 优化 目标 都 不尽相同 .   本文 以 生产 制造 系统 为 背景 研究 避免 死锁 调度 的 数学 建模 与 求解 .   
 　 　 2 　 数学 建模 与 求解 
 　 　 在 复杂 的 生产 制造 系统 中 往往 同时 存在 多 类 生产 资源 和 多个 生产 任务 .   一个 生产 任务 的 一次 实现 称为 该 任务 的 一个 进程 .   
 　 　 定义 1 . 设 生产 系统 Σ 中 存在 n 类 资源 ，   其中 第 i 类 资源 的 数目 为 ki ，   i = 1 , 2 , … , n .   定义 系统 的 资源 向量 k = [ k1 , k2 , … , kn ] T .   这个 系统 用 二元 组 ( Σ , k ) 表示 .   
 　 　 定义 2 .   已知 系统 ( Σ , k ) .   在 任意 时刻 t ， 某个 进程 p 对 第 i 类 资源 的 占用 数为 ri ( t ) , i = 1 , 2 , … , n .   定义 该 进程 的 资源分配 函数 r ( t ) = [ r1 ( t ) , r2 ( t ) , … , rn ( t ) ] T , r ( t ) k . 
 　 　 进程 p 的 资源分配 函数 ( RAF ) 可以 分为 两种 ：   无 延迟 资源分配 函数 ( NRAF ) 和 可 延迟 资源分配 函数 ( DRAF ) .   前者 是 进程 p 在 零 等待 无 延迟 情况 下 的 资源分配 函数 ； 后者 是 系统 中 存在 多个 并发 的 进程 ， 进程 p 对 资源 的 申请 可能 需要 等待 情况 下 的 资源分配 函数 . 前者 是 后者 一个 特例 .   
 　 　 定义 单位 阶跃 函数 u ( t0 ) = 1 , u ( t ＜ 0 ) = 0 .   由于 进程 p 对 资源 的 占用 和 释放 均 是 在 一系列 离散 时间 点上 进行 的 ，   有 如下 性质 . 
 　 　 性质 1 .   已知 系统 ( Σ , k ) .   以 进程 p 首次 占用 资源 的 时间 点 作为 时间 零点 ， 则 进程 p 的 无 延迟 资源分配 函数 r ( t ) 可以 表示 为 其中 t0 = 0 ,   tj ＞ tj - 1 ,   j = 1 , 2 , … , m ; 向量 aj ≠ 0 而且 
 　 　 性质 2 .   已知 进程 p 的 无 延迟 资源分配 函数 则 它 的 可 延迟 资源分配 函数 s ( t ) 可以 表示 为 其中 t ′ 00 , t ′ i - ti - 1ti - ti - 1 , i = 1 , 2 , … , m . 
 　 　 性质 3 .   如果 则 s1 ( t ) + s2 ( t ) 可以 表示 为 s1 ( t ) + s2 ( t ) = , 其中 min ( m1 , m2 ) m3m1 + m2 + 1 . 
 　 　 定义 3 . 已知 资源分配 函数 , 定义 s ( t ) 的 第 j 个 资源 状态 为 ，   其 持续时间 Δ j ( s ( t ) ) = tj + 1 - tj ,   j = 0 , 1 , 2 , … , m - 1 .   s ( t ) 总 的 持续时间 定义 为 
 　 　 以 系统 总 的 加工 持续时间 最短 为 目标 函数 的 避免 死锁 调度 的 数学模型 为 ： 设 系统 ( Σ , k ) 中 存在 n 个 进程 ， 其中 第 j 个 进程 pj 的 无 延迟 资源分配 函数 rj ( t ) = a ( j ) ku ( t - α ( j ) k ) , j = 1 , 2 , … , n .   要求 pj 的 可 延迟 资源分配 函数 , 使 之 满足 ( 可行 解 条件 ) 和 ( 最优 解 条件 ) . 
 　 　 对于 n = 2 的 情况 可以 通过 如下 的 区域 算法 获得 系统 的 最优 解 . 
 　 　 区域 算法 . 
 　 　 1 )   构造 平面 直角坐标 系 ， 其中 横轴 t1 代表 r1 ( t ) 的 各个 资源 状态 ai 的 持续时间 ， 纵轴 t2 代表 r2 ( t ) 的 各个 资源 状态 bi 的 持续时间 .   两个 坐标轴 采用 同样 的 比例尺 . 
 　 　 2 )   求出 r1 ( t ) 和 r2 ( t ) 的 冲突 区 Conflict ( r1 ( t ) , r2 ( t ) ) = { P ｜ ( t1 , t2 ) ∈ P , r1 ( t1 ) + r2 ( t2 ) ＞ k } .   具体 求法 是 ， 考查 r1 ( t ) 的 第 i 个 资源 状态 ak 与 r2 ( t ) 的 第 j 个 资源 状态 bi 在 坐标系 中 对应 的 小 矩形 Uij , 如果 ak + bk ＞ k ,   则 Uij ( r1 ( t ) , r2 ( t ) ) . 
 　 　 3 )   由 冲突 区求 出 死锁 区 Deadlock ( r1 ( t ) , r2 ( t ) ) .   坐标系 中 两个 相邻 接 冲突 区 的 左下角 区域 构成 死锁 区 ， 如图 1 中 的 D1 和 D2 . 
 
 图 1 　 区域 算法 
 　 　 4 )   两个 进程 的 加工过程 在 坐标系 中 可以 用 水平线 、 垂直线 和 45 ° 线 三种 连续 线段 表示 ，   从 ( 0 ， 0 ) 开始 到 ( a ( 1 ) m1 , a ( 2 ) m2 ) 结束 .   其中 水平线 表示 p1 运行 ， p2 等待 ； 垂直线 表示 p2 运行 ， p1 等待 ； 45 ° 线 表示 p1 和 p2 同时 运行 .   三种 加工 线段 都 不得 进入 冲突 区 和 死锁 区 .   与 其它 解 相比 ， 最优 解 对应 的 加工 路径 中 45 ° 线 占 的 比例 最大 .   这样 从 原点 出发 ， 只要 有 可能 ， 就 以 45 ° 线 向 ( a ( 1 ) m1 , a ( 2 ) m2 ) 推进 .   如果 遇到 冲突 区 或 死锁 区 ， 则 改为 沿 冲突 区 或 死锁 区 的 下 或 左 边界 水平 或 垂直 推进 .   
 　 　 5 )   根据 步骤 4 ) 求出 的 最优 路径 ， 求 最优 解 s1 ( t ) 和 s2 ( t ) . 
 　 　 对于 两 进程 的 情况 ，   如果 指定 进程 p1 较 进程 p2 有 资源 优先权 ， 它 可以 不 受 阻碍 地 运行 ， 即 s1 ( t ) = r1 ( t ) ， 则 可以 进一步 将 区域 算法 简化 为 一维 算法 的 水池 算法 ， 其 基本 思想 是 ， 在 保证 p1 无 延迟 运行 情况 下 ， 求出 p2 的 每个 资源 状态 在 时间 区间 [ 0 , a ( 1 ) m1 + a ( 2 ) m2 ) 上 的 允许 区间 集 .   如果 p2 能够 从 第一个 资源 状态 连续 地 过渡 到 最后 一个 资源 状态 ， 并且 每个 资源 状态 的 持续时间 能够 满足要求 ， 则 系统 存在 可行 解 ， 其中 最先 过渡 到 最后 一个 资源 状态 的 路径 对应 系统 的 最优 解 .   这 好比 在 m2 个 水平 面上 分布 着 若干个 水池 .   每个 水池 能够 向下 一个 水平 面上 与 之 相邻 的 水池 排水 .   从 最上层 水池 经过 中间 各层 水池 最后 流到 最 下层 水池 中 的 流水 所 形成 的 路径 对应 可行 解 .   
 　 　 水池 算法 . 
 　 　 1 )   在 时间 [ 0 , a ( 1 ) m1 + a ( 2 ) m2 ) 上求 出 p2 的 第 j 个 资源 状态 bk 的 允许 区间 集 Fj = { [ a , b ) ｜ b - a Δ j ( r2 ( t ) ) ∧ t [ a , b ) , k - r1 ( t ) bk } , j = 0 , 1 , 2 , … , m2 - 1 .   指定 Fj 中 的 元素 从小到大 排列 . 
 　 　 2 )   由 允许 区间 集 Fj 求 有效 区间 集 Vj ,   j = 0 , 1 , 2 , … , m2 - 1 .   下面 给出 以 C 伪码 形式 描述 的 递推 求解 算法 . 
 输入 ：   允许 区间 集 序列 　   { F0 , F1 , … , Fm2 - 1 } ; 
 　 　 　 　 持续时间 序列 { Δ 0 , Δ 1 , … , Δ m2 - 1 } . 
 输出 ： 有效 区间 集 序列 { V0 , V1 , … , Vm2 - 1 } . 
 {   Let   set   V0 = F0 ; 
 　 for   ( i = 1 ;   i  m2 - 1 ;   i ++ ) 
 　 {   let   set   Vi = φ ; 
 　 　 for   ( j = 1 , k = 1 ;   j ｜ Vi - 1 ｜ ; j ++ ) 
 　 　 {   get   the   j - th   element   [ a , b )   of   set   Vi - 1 ;   
 　 　 　 while   ( k ｜ Fi ｜ ) 
 　 　 　 {   get   the   k - th   element   [ c , d )   of   set   Fi ; 
 　 　 　 　 if (   [ c , d ) ＜ [ a + Δ i - 1 , b ) )   { k ++ ;   continue ; } 
 　 　 　 　 if   (   [ c , d ) ＞ [ a + Δ i - 1 , b ) )   break ; 
 　 　 　 　 let   [ p , q ) = [ c , d ) ∩ [ a + Δ i - 1 , b ) ; 
 　 　 　 　 if   ( q - p  Δ i ) Vi = Vi ∪ { [ p , q ) } ; 
 　 　 　 　 k ++ ;   }   }   } 
 　 　 return   the   sequence   of   valid - interval   sets   { V0 , V1 , … , Vm2 - 1 } 
 　 　 3 )   从 Vm2 - 1 开始 回 推 最优 解 s2 ( t ) .   有效 区间 集 Vm2 - 1 中 的 每个 元素 对应 一个 可行 解 ，   其中 第一个 元素 [ a , b ) 对应 最优 解 . 系统 的 最 短 持续时间 Δ ( r1 ( t ) + s2 ( t ) ) = a + Δ m2 - 1 .   V0 ,   V1 , … , Vm2 - 1 中 每 一个 不 在 可行 解 路径 上 的 区间 都 必定 对应 一个 死锁 状态 . 
 　 　 对于 n ≠ 2 的 一般 避免 死锁 调度 问题 ， 由于 计算 复杂度 为 NP 难 的 ， 其 最优 解 往往 难于 获得 .   下面 给出 一种 求 可行 解 的 方法 . 
 　 　 首先 对 r1 ( t ) 和 r2 ( t ) ，   由 区域 算法 求出 其 最优 解 s1 ( t ) 和 s2 ( t ) .   然后 令 r ′ 2 ( t ) = s1 ( t ) + s2 ( t ) .   对 r ′ 2 ( t ) 和 r3 ( t ) ，   由 区域 算法 求出 其 最优 解 s ′ 2 ( t ) 和 s3 ( t ) .   再令 r ′ 3 ( t ) = s ′ 2 ( t ) + s3 ( t ) ， … ， 直到 最后 对 r ′ n - 1 ( t ) 和 rn ( t ) ，   由 区域 算法 求出 其 最优 解 s ′ n - 1 ( t ) 和 sn ( t ) .   根据 函数 序列 sn ( t ) ,   s ′ n - 1 ( t ) ,   sn - 1 ( t ) ,   s ′ n - 2 ( t ) , … , s ′ 2 ( t ) , s2 ( t ) ,   s1 ( t ) 可以 构造 出 系统 的 一个 可行 解 . 
 　 　 例 .   已知 系统 ( Σ ,   k ) , k = [ 1 , 1 , 1 ] T .   进程 p1 和 p2 的 无 延迟 资源分配 函数 分别 为 
 
 图 1 是 由 区域 算法 求出 的 两条 最优 路径 ，   其 解析 式 分别 为 
 　 　 　 　 　 ( 1 ) 
 　 　 　 　 　 ( 2 ) 
 系统 的 最 短 持续时间 Δ ( s1 ( t ) + s2 ( t ) ) = min = 7 .   图 2 是 由 水池 算法 求出 的 最优 路径 ， 其 解析 式 同 上面 的 ( 1 ) 式 .   
 
 图 2 　 水池 算法 
 作者 单位 ： 清华大学 自动化系 　 北京 　 100084 
 参考文献 
 　 　 [ 1 ]   Peterson   J   L ,   silberschatz   A .   Operating   System   Concepts ,   second   edition ,   Addison - Wesley   Publishing   Company ,   Inc . ,   1985 : 271 - 306 . 
 　 　 [ 2 ]   Diaz   M .   Modelling   and   analysis   of   communication   and   cooperation   protocols   using   petri   net   based   models .   Computer   Networks ,   1982 ,   6 ( 6 ) : 419 - 441 . 
 　 　 [ 3 ]   Banaszak   Z   A ,   Krogh   B   H .   Deadlock   avoidance   in   flexible   manufacturing   systems   with   concurrently   competing   process   flows .   IEEE   Trans .   Robotics   Automat . ,   1990 ,   6 ( 6 ) : 724 - 734 . 
 　 　 [ 4 ]   Viswanadham   N ,   Narahari   Y ,   Johnson   T   L .   Deadlock   prevention   and   deadlock   avoidance   in   flexible   manufacturing   systems   using   petri   net   models .   IEEE   Trans .   Robotics   &   Automat . ,   1990 ,   6 ( 6 ) : 713 - 723 . 
 收稿 日期   1994 - 06 - 03 
