软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 10 卷   第 12 期     Vol.10   No.12   1999 
 
 
 
 一个 计算 凸 多面体 间 碰撞 点 的 快速 算法 
 王兆其 　 赵沁平 　 汪 成为 
 摘要 　 计算 两个 物体 之间 的 碰撞 点 是 碰撞 响应 的 基础 ， 也 是 一项 系统 开销 很大 的 任务 . 因此 ， 研究 碰撞 点 快速 求解 算法 对 碰撞 响应 的 实时性 具有 重要 意义 . 该文 提出 了 一个 算法 ， 当 在 虚拟环境 中 检测 到 碰撞 时 ， 应用 此 算法 可以 在 碰撞 响应 之前 快速 计算 出 两个 物体 之间 的 准确 碰撞 时间 ， 并 能 计算 出 此时 两个 物体 之间 的 碰撞 点 . 
 关键词 　 碰撞 点 ， 碰撞 响应 ， 碰撞检测 ， 虚拟现实 . 
 中图法 分类号 　 TP391 
 A   Fast   Algorithm   to   Calculate   Collision   Point   Between   Convex   Polygons 
 WANG   Zhao - qi1 　 ZHAO   Qin - ping2 　 WANG   Cheng - wei3 
 　 1 ( Institute   of   Computing   Technology   The   Chinese   Academy   of   Sciences   Beijing   100080 ) 
 　 2 ( Department   of   Computer   Science   and   Engineering   Beijing   University   of   Aeronautics   and   Astronautics   Beijing   100083 ) 
 　 3 ( Science   and   Technology   Committee   General   Department   PLA   Beijing   100034 ) 
 Abstract 　   Collision   point   is   basic   information   to   physically - based   collision   response ,   but   collision   point   finding   is   a   burden   task ,   which   make   real - time   collision   response   very   difficult .   In   this   paper ,   the   authors   give   an   algorithm   to   find   the   very   fast   collision   time   and   the   collision   points   between   two   objects   represented   by   convex   polygon   prior   to   collision   response . 
 Key   words 　 Collision   point ,   collision   response ,   collision   detection ,   virtual   reality . 
 　 　 当 在 虚拟环境 中 检测 到 两个 物体 碰撞 后 ， 进行 碰撞 响应 之前 ， 需要 获知 以下 信息 ［ 1 ］ ： ①   两个 物体 之间 的 准确 碰撞 时间 ； ②   碰撞 时 两个 物体 之间 的 所有 碰撞 点 . 
 　 　 在 已有 的 一些 方法 ［ 2 , 3 ］ 中 ， 常用 检测 到 的 碰撞 时间 作为 发生 碰撞 的 时间 . 实际上 ， 这 两者之间 存在 着 差别 . 如图 1 所示 ， 在 ti 时刻 ， 如图 1 ( a ) 所示 ， O1 与 O2 分离 ； 在 t ′ 时刻 ， 如图 1 ( b ) 所示 ， O1 与 O2 开始 接触 ， 其中 ti < t ′ < ti + 1 ； 在 ti + 1 时刻 ， 如图 1 ( c ) 所示 ， O1 与 O2 之间 发生 了 穿透 . 即 当 在 ti + 1 时刻 检测 到 碰撞 时 ， 早 在 t ′ 时刻 两个 物体 之间 便 发生 了 碰撞 . 当 碰撞检测 的 时间 步长 dt = ( ti + 1 - ti ) 较大 时 ， 得到 的 碰撞 时间误差 也 会 较大 ， 从而 引起 碰撞 点 计算结果 很 不 准确 . 为了 提高 计算精度 ， 常 需要 增加 碰撞检测 次数 ， 这 不利于 实时 碰撞 响应 的 实现 . 另外 ， 两个 物体 之间 的 碰撞 点仅 在 两个 物体 开始 接触 时有 意义 ， 而 当 两个 物体 已经 发生 穿透 时 ， 求解 两个 物体 之间 的 碰撞 点 是 一个 不确定性 问题 . 因此 ， 快速 而 准确 地 计算 出 物体 之间 的 碰撞 时间 t ′ ， 并 求解 此时 物体 之间 的 碰撞 点 是 进行 实时 碰撞 响应 的 重要 内容 . 
 
 图 1 
 　 　 James   K .   Hahn 的 方法 ［ 2 ］ 是 将 时间 步长 dt = ( ti + 1 - ti ) 取值 非常 小 ， 并 假设 dt 时间 区域 内 物体 的 角速度 为 0 . 取 dt 太小 则 难以 满足 虚拟环境 的 实时 交互 要求 . 取 dt 较大 时 ， 则 不能 假设 物体 的 角速度 为 0 . Madhav   K .   Ponamgi 等 人 通过 计算 两个 物体 的 最 短距离 来 确定 两个 物体 是否 发生 了 碰撞 ［ 3 ］ . 当 两个 多面体 的 距离 为 0 时 ， 两个 物体 最早 相交 . 为了 保证 每次 检测 到 的 碰撞 物体 之间 的 距离 近似 为 0 ， 我们 仍然 需要 减小 时间 步长 dt ， 因此 会 影响 碰撞 响应 的 实时性 . 为了 找到 准确 的 碰撞 时间 与 碰撞 点 ， Harmut   Keller 等 人 将 环境 中 的 物体 限制 为 规则 几何体 ， 如 立方体 、 球体 等 ， 但 这种 方法 的 通用性 受到 了 限制 . 
 　 　 本文 提出 了 一种 计算 凸 多面体 间 碰撞 时间 与 碰撞 点 的 快速 算法 FCPF ( fast   collision   points   finding ) . 当 检测 到 虚拟环境 中 某 两个 物体 间 在 ti + 1 时刻 发生 了 碰撞 时 ， FCPF 算法 可以 根据 两个 物体 的 速度 v1 ， v2 和 角速度 ω 1 ， ω 2 快速 计算 出 两 物体 间 最早 发生 碰撞 的 时间 t ′ ， 并 找出 此时 两个 物体 之间 的 所有 碰撞 点 . 
 1 　 计算 凸 多面体 间 碰撞 点 的 FCPF 算法 
 1.1 　 基本 假设 
 　 　 假设 O1 与 O2 是 虚拟环境 中 的 两个 凸 多面体 ， O1 与 O2 在 t0 时刻 不 碰撞 ， 而 在 t1 时刻 碰撞 ， 且 在 ( t0 ， t1 ］ 内 两个 物体 只 发生 一次 碰撞 . 设 O1 与 O2 中心 的 线速度 分别 为 v1 和 v2 ， 角速度 分别 为 ω 1 和 ω 2 . 假设 v1 ， v2 ， ω 1 和 ω 2 在 ( t0 ， t1 ］   时间 内均 为常 向量 . 
 1.2 　 理论 基础 
 　 　 定义 1 .   当给 一个 平面 F 指定 一个 法 向量 n 后 ， 这个 平面 称为 有 向 平面 . 其法 向量 所指 的 一面 称为 该 平面 的 正面 ， 另一面 称为 负面 . 对于 多面体 的 面 ， 我们 作 如下 约定 ， 其法 向量 均 指向 多面体 的 外部 . 
 　 　 定理 1 .   O1 与 O2 是 符合 第 1.1 节中 基本 假设 的 两个 多面体 . 设 l = P1P2 是 O1 的 一条 边 ， F 是 O2 的 一个 面 ， l 与 F 在 ( t0 ， t1 ］ 内 相交 ， 则 l 与 F 最早 相交 时刻 tc ∈ ( t0 ， t1 ］ ， 且 最早 相交 必 是 下列 情形 之一 ， 如图 2 所示 . 
 
 图 2 
 　 　 ( 1 )   l 的 一个 端点 Pi 与 F 的 内部 相交 ( l 不 与 F 的 边 相交 ) ； 
 　 　 ( 2 )   l 与 F 的 一条 边 相交 于 一点 P ； 
 　 　 ( 3 )   l 与 F 相交 于 一线 段 P1 ′ P2 ′ . 
 　 　 定理 2 .   O1 与 O2 是 符合 第 1.1 节中 基本 假设 的 两个 多面体 ， 最早 相交 时刻 为 Tc ∈ ( t0 ， t1 ］ . 设 l = P1P2 是 O1 的 一条 边 ， F 是 O2 的 一个 面 . 如果 l 与 F 在 ( t0 ， t1 ］ 内 的 最早 相交 时刻 为 tc ， 则 必有 tc ≥ Tc . 若 tc > Tc ， 则 ： 
 　 　 ( 1 )   如果 l = P1P2 的 一个 端点 Pi （ i = 1 , 2 ） 最早 在 tc 时刻 与面 F 相交 于 F 内部 ， 则 ： 
 　 　 〈 a 〉   当 l 的 另 一 顶点 Pj 位于 F 正面 时 ， 则 O1 在 顶点 Pi 处 的 其他 邻边 中必 有 一条 边 l ′ ， 与 F 的 最早 相交 时刻 tc ′ < tc ； 
 　 　 〈 b 〉   当 l 的 另 一 顶点 Pj 位于 F 负面 时 ， 则 O2 中 存在 另 一个 面 F ′ ≠ F ， Pi 与 F ′ 的 最早 相交 时刻 tc ′ < tc . 
 　 　 ( 2 )   如果 l 最早 在 tc 时刻 与 F 的 一条 边 l ′ 相交 于点 P ， 则 下列 3 种 情形 必有 一种 成立 ： 
 　 　 〈 a 〉   O2 在 P 处 存在 一 相邻 的 面 F ′ ≠ F ， l 与 F ′ 的 最早 相交 时刻 tc ′ < tc ； 
 　 　 〈 b 〉   O1 在 P 处 存在 一 相邻 的 面 F ′ ， l ′ 与 F ′ 的 最早 相交 时刻 tc ′ < tc ； 
 　 　 〈 c 〉   如果 〈 a 〉 与 〈 b 〉 都 不 成立 ， 则 l 与 l ′ 相交 于 l 的 一个 端点 Pi ， 且 l 的 另一端 点 Pj 在 O2 于 P 处 所有 邻面 的 负面 . 此时 O2 存在 一个 面 F ′ ≠ F ， Pi 与 F ′ 的 最早 相交 时刻 tc ′ < tc . 
 　 　 ( 3 )   如果 l 最早 于 tc 时刻 与 F 相交 于 一条 线段 P1 ′ P2 ′ ， 则 下列 3 种 情形 必有 一 成立 ： 
 　 　 〈 a 〉   O2 在 P1 ′ 或 P2 ′ 处 存在 一个 相邻 的 面 F ′ ， l 与 F ′ 的 最早 相交 时刻 tc ′ < tc ； 
 　 　 〈 b 〉   O2 在 P1 ′ 或 P2 ′ 存在 F 的 一条 边 l ′ ， O1 在 l 处 存在 一个 相邻 的 面 F ′ ， l ′ 与 F ′ 的 最早 相交 时刻 tc ′ < tc ； 
 　 　 〈 c 〉   如果 〈 a 〉 与 〈 b 〉 都 不 成立 ， 则 必有 一 交点 Pi ′ 是 l 的 端点 ， 如 Pi ′ = P1 . 存在 O2 的 一个 面 F ′ ≠ F ， P1 与 F ′ 的 最早 相交 时刻 tc ′ < tc . 
 1.3 　 FCPF 算法 
 　 　 当 检测 到 虚拟环境 中有 两个 物体 之间 发生 了 碰撞 时 ， 如果 这 两个 物体 分别 由 凸 多面体 O1 与 O2 表示 ， 则 可以 取 到 一个 物体 的 一条 边 l 与 另 一个 物体 的 一个 面 F ， 设 l ∈ O1 ， F ∈ O2 ， l 与 F 相交 . 求 l 与 F 的 最早 相交 时刻 tc 及 l 与 F 相交 的 情形 . 由 定理 1 可知 ， l 与 F 相交 只 可能 有 3 种 情形 . 根据 每种 情形 ， 检测 是否 有 使 tc > Tc 成立 的 情形 ， 即 是否 有 tc ′ < tc ， O1 与 O2 在 tc ′ 时刻 相交 . 如果 没有 ， 则 tc 即 是 O1 与 O2 的 最早 相交 时刻 Tc . 否则 ， 以 tc ′ 为 新 的 tc ， 并 寻找 更 小 的 tc ′ . 求出 Tc 后 ， 便 可以 求 出 两个 多面体 间 所有 相交 的 点 ， 这些 点 即 为 两个 多面体 间 的 碰撞 点 . 算法 1 给出 了 FCPF 算法 . 
 　 　 算法 1 .   FCPF 算法 . 
 　 　 ( 1 )   初始化 ： 
 　 　 tc = t1 + 1 ;   ∥ 取 一个 比 t1 大 的 值 
 　 　 R = ψ ; ∥ R   表示 碰撞 结果 . 含 碰撞 类型 、 碰撞 点集 等 
 　 　 S = { 〈 l , F , O1 〉 } ; ∥ S 中 存放 了 尚需 检测 的 情形 ， 初始 时为 一个 已知 的 边面 相交 实例 
 　 　 ( 2 )   当 S 为 空时 ， 结束 ； 
 　 　 ( 3 )   取出 S 的 第 1 个 元素 e ； 
 　 　 ( 4 )   如果 e = 〈 l , F , O1 〉   ∥ 需求 边 与 面 的 最早 相交 时刻 
 　 　 　 　 　 　 求 O1 中 的 l 与 O2 中 的 F 相交 的 最早 时刻 tc ′ ; 
 　 　 　 　 　 　 如果 tc ′ > tc , 转 ( 2 ) ; 
 　 　 　 　 　 　 如果 tc ′ = tc , 更新 R （ 加入 新 的 碰撞 点 ） , 转 ( 2 ) ; ∥ 此时 无需 修改 S ！ 
 　 　 　 　 　 　 ∥ 　 tc ′ < tc , 
 　 　 　 　 　 　 tc = tc ′ ; 更新 R ； ∥ 先 清空 R ， 再 加入 新 的 碰撞 点 
 　 　 　 　 　 　 Case   1 :   ∥ l 的 端点 P1 与 F 相交 于 F 中央 （ 不 与 F 的 边 相交 ） 
 　 　 　 　 　 　 　 　 　 　 如果 l 的 另一端 点 P2 位于 F 正面 
 　 　 　 　 　 　 　 　 　 　 　 　 L = { O1 在 P1 处 的 边集 } ； 
 　 　 　 　 　 　 　 　 　 　 　 　 S = { 〈 l , F , O1 〉 | l ∈ L } ; 
 　 　 　 　 　 　 　 　 　 　 否则 ： S = { 〈 l , P2 , O2 〉 } 
 　 　 　 　 　 　 Case   2 :   ∥ l 与 F 的 一条 边 l ′ 交于 点 P 
 　 　 　 　 　 　 　 　 　 　 Γ 2 = { O2 在 P 处 的 邻面 } ； 
 　 　 　 　 　 　 　 　 　 　 Γ 1 = { O1 在 P 处 的 邻面 } ； 
 　 　 　 　 　 　 　 　 　 　 如果 交点 P 是 l 的 一个 顶点 P1 ， 且 l 的 另 一个 顶点 P2 在 P 处 O2 所有 邻面 负面 S ′ = { 〈 l , P1 , O2 〉 } 
 　 　 　 　 　 　 　 　 　 　 否则 ： S ′ = ψ ; S = { 〈 l , F , O1 〉 | F ∈ Γ 2 } ∪ { 〈 l ′ , F , O2 〉 | F ∈ Γ 1 } ∪ S ′ ; 
 　 　 　 　 　 　 Case   3 :   ∥ l   与 F 相交 于 一线 段 P1 ′ P2 ′ 
 　 　 　 　 　 　 　 　 　 　 设 l 与 F 的 边 l1 相交 于点 P1 ′ （ 若 P1 ′ 是 l 与 F 内部 的 交点 ， 则 l1 = ψ . 此时 ， 设 P1 ′ = = P1 ） ; 
 　 　 　 　 　 　 　 　 　 　 l 与 F 的 边 l2 相交 于点 P2 ′   （ 若 P2 ′ 是 l 与 F 内部 的 交点 ， 则 l2 = ψ . 此时 ， 设 P2 ′ = = P2 ） ; 
 　 　 　 　 　 　 　 　 　 　 S1 ′ = ( l1 = = ψ ) ? { 〈 l , P1 , O2 〉 } : ψ ; 
 　 　 　 　 　 　 　 　 　 　 S2 ′ = ( l2 = = ψ ) ? { 〈 l , P2 , O2 〉 } : ψ ; 
 　 　 　 　 　 　 　 　 　 　 Γ 22 = { O2 在 P2 ′ 处 的 其他 面 } ; 
 　 　 　 　 　 　 　 　 　 　 Γ 21 = { O2 在 P1 ′ 处 的 其他 面 } ; 
 　 　 　 　 　 　 　 　 　 　 Γ 12 = { O1 在 P2 ′ 处 的 其他 面 } ; 
 　 　 　 　 　 　 　 　 　 　 Γ 11 = { O1 在 P1 ′ 处 的 其他 面 } ; 
 　 　 　 　 　 　 　 　 　 　 S = { 〈 l , F , O1 〉 ｜ F ∈ Γ 21 ∪ Γ 22 } ∪ { 〈 l1 , F , O2 〉 ｜ F ∈ Γ 11 } ∪ { 〈 l2 , F , O2 〉 ｜ F ∈ Γ 12 } ∪ S1 ′ ∪ S2 ′ ; 
 　 　 ( 5 )   否则 ∥ e = 〈 l , P , O 〉   ∥ 需求 点 与 多面体 的 最早 相交 时刻 
 　 　 　 　 　 　 　 PO 过程 ： 求 P 与 O 最早 相交 时刻 tc ′ 及 与 之 相交 的 多面体 面 F 
 　 　 　 　 　 　 　 若 tc ′ < tc ， 则 S = { 〈 l , F , O1 〉 } ∪ S ; tc = tc ′ ; R = ψ ; 
 　 　 ( 6 ) 
 转 （ 2 ） . 
 1.4 　 PO 算法 
 　 　 在 上述 FCPF 算法 中 ， 第 ( 5 ) 步需 要求 一个 多面体 （ 如 O1 ） 上 的 顶点 P 与 另 一个 多面体 O （ 如 O2 ） 的 最早 相交 时刻 tc ′ 及 O 发生 相交 的 面 . PO 算法 是 这 一 过程 的 详细 算法 . 
 　 　 ( 1 )   tmax = tc   ∥ tc 为 当前 已知 的 最早 相交 时刻 ； 
 　 　 ( 2 )   取 O2   的 一个 面 F ， P 在 F 的 正面 ； 
 　 　 ( 3 )   求 P 在 （ t0 , tmax ） 时域 内 与 F 所在 平面 的 最早 相交 时刻 t ′ ， 并求 交点 P ( t ′ ) ；   ∥ P 一定 与 F 相交 ， 否则 ， P 不 与 O2 相交 ； 
 　 　 ( 4 )   取 L 为面 F 的 边集 ； 
 　 　 ( 5 )   WHILE   L 不空 
 　 　 　 　 　 　 　 取 l ∈ L 
 　 　 　 　 　 　 　 求 l 与 P ( t ′ ) 的 关系 
 　 　 　 　 　 　 　 如果 P ( t ′ ) 在 l 外 
 　 　 　 　 　 　 　 　 　 取 F 因 l 而 毗邻 的 面为 F 
 　 　 　 　 　 　 　 　 　 tmax = t ′ 
 　 　 　 　 　 　 　 　 　 转 ( 3 ) ； 
 　 　 ( 6 )   END   WHILE ； 
 　 　 ( 7 )   P 最早 与 O2 的 F 相交 ， 且 相交 时刻 为 t ′ . 
 2 　 算法 分析 
 　 　 FCPF 算法 中 求解 l 与 F 的 最早 相交 时刻 的 过程 及 PO 算法 中 求解 P 与 F 所在 平面 最早 相交 时刻 的 过程 可 由 数值 计算 完成 ， 且 时间 复杂性 与 多面体 的 复杂性 无关 . 
 2.1 　 算法 的 可 终止 性 ( 收敛性 ) 
 　 　 在 FCPF 算法 中 会 生成 多个 不同 的 tc ， 我们 将 所有 这些 tc 按 其 产生 的 顺序 为序 组成 一个 序列 { tcn } . 由 FCPF 算法 的 终止 条件 可知 ， 该 算法 的 可 终止 性 等价 于 该 算法 中 { tcn } 到 Tc 的 收敛性 . 下面 我们 证明 { tcn } 可以 在 有限 步内 收敛 到 Tc . 
 　 　 命题 1 .   对于 同一个 tc ， 该 算法 只 检测 有限 个 状态 . 
 　 　 证明 ： FCPF 是 一个 循环 过程 ， 对于 同一个 tc ， 算法 所 需 循环 的 步骤 数是 与 该 tc 对应 的 集合 S 的 元素 个数 . S 的 元素 个数 是 一个 有限 数 . 当 FCPF 算法 循环 时 ， 如果 tc 不 发生变化 ， 则 必 减少 S 中 的 一个 元素 . 因此 ， 对于 同一个 tc ， FCPF 算法 只 需 循环 有限 步 . 也就是说 ， 对于 同一个 tc ， 该 算法 只 检测 有限 个 状态 . 
 　 　 命题 2 .   { tcn } 收敛 . 
 　 　 证明 ： 设 当前 tc = ti . 由 FCPF 算法 的 第 （ 4 ） 步 可知 ， 如果 tc ′ < tc ， 则 用 tc ′ 替代 原来 的 tc ， 即 生成 ti + 1 . 因此 ， 对于 所有 的 i ， 都 有 ti > ti + 1 ， 即 { tcn } 单调 下降 . 另外 ， 对于 所有 的 ti ， 均 有 ti > t0 ， 即 { tcn } 有 下界 t0 . 所以 ， { tcn } 是 一个 单调 下降 且 有 下界 的 序列 ， 必 收敛 . 
 　 　 命题 3 .   { tcn } 必在 有限 步内 收敛 . 
 　 　 证明 ： 在 FCPF 算法 中 ， 一个 tc 是 O1 （ 或 O2 ） 的 一条 边 l 与 O2 （ 或 O1 ） 的 面 的 最早 相交 时刻 . 不同 的 tc 对应 于 不同 的 边 面对 . 因此 tc 的 个数 不会 多于 O1 与 O2 之间 的 边 面对 数 . 而 O1 与 O2 均 为 确定 的 多面体 ， 其边数 与 面数 都 是 确定 的 、 有限 的 ， 所以 ， O1 与 O2 之间 的 边 面对 数 也 是 一个 有限 数 . 由此 可以 知道 ， tc 的 个数 是 有限 的 ， 即 { tcn } 是 一个 有限 序列 ， 其 收敛 自然 在 有限 步内 完成 . 
 　 　 由 以上 3 个 命题 可知 , { tcn } 在 有限 步内 收敛 到 Tc . 
 2.2 　 算法 的 时间 复杂性 
 　 　 FCPF 算法 从 第 （ 2 ） ～ （ 6 ） 步 组成 一个 循环 . 整个 循环 过程 是 { tcn } 到 Tc 的 收敛 过程 ， 循环 步数 是 { tcn } 到 Tc 的 收敛 步数 Nt . 因为 每个 tc 对应 于 一个 相交 的 边 面对 ， 因此 ， { tcn } 到 Tc 的 收敛 步数 Nt 不会 超过 已 相交 的 边 面对 数 . 设 检测 到 碰撞 时 ， 两个 碰撞 物体 O1 和 O2 发生 相交 的 边数 与 面数 分别 为 n1 ， m1 和 n2 ， m2 ， 则 已 相交 的 边 面对 数 不 超过 （ n1 × m2 + n1 × m2 ） . 所以 ， Nt < （ n1 × m2 + n1 × m2 ） . 设 n = max ( n1 , n2 ) ， m = max ( m1 ,   m2 ) ， 则 整个 算法 在 最坏 情况 下 的 时间 复杂性 为 O ( n × m ) . 
 　 　 一般来说 ， 碰撞检测 的 时间 步长 dt = （ t1 - t0 ） 较 小 ， 所以 两个 物体 之间 发生 相交 的 边和面 自然 也 很少 ， 因而 Nt 很小 . 即使 在 dt 较大 时 ， FCPF 算法 仍然 可以 准确 地 计算 出 碰撞 时间 t ′ 及 所有 碰撞 点 ， 而且 可以 有效 地 利用 凸 多面体 的 特性 ， 使用 PO 算法 加速 收敛 . 
 3 　 实现 细节 
 　 　 FCPF 算法 中 以下 两个 求解 过程 可 由 数值 方法 完成 ： （ 1 ）   求解 O1 中 一条 边 AB 与 O2 中 一个 面 F 的 最早 相交 时刻 ； （ 2 ）   求解 O1 的 顶点 P 与 O2 一个 面 F 的 最早 相交 时刻 . 假设 O1 与 O2 是 符合 第 1.1 节中 基本 假设 的 两个 凸 多面体 . AB 是 O1 的 一条 边 ， F 是 O2 的 一个 面 . 
 3.1 　 坐标系 
 　 　 绝对 坐标系 ： 设 绝对 坐标系 的 原点 为 O ， 3 个 单位 坐标 向量 分别 为 ： i , j 和 k . 
 　 　 参考 坐标系 ： 参考 坐标系 的 原点 取 O2 的 重心 （ 仍记 为 O2 ） . 当 ω 2 = 0 时 ， 参考 坐标系 的 3 个 单位向量 不变 ： i ′ = i ， j ′ = j ， k ′ = k ； ω 2 ≠ 0 时 ， 取 k ′ 为 ω 2 方向 的 单位向量 ， 即 K ′ = ω 2 / ｜ ω 2 ｜ ， i ′ 与 j ′ 则 分别 取 与 k ′ 垂直 的 两个 单位向量 ， 且 i ′ , j ′ 和 k ′ 构成 右手 坐标系 . 我们 用 上标 （ R ） 表示 向量 或点 在 参考 坐标系 中 的 表示 . 如 ： r ( R ) ， P ( R ) 即 为 向量 和 点 在 参考 坐标系 中 的 表示 . 
 　 　 当 ω 2 = 0 时 ， 参考 坐标系 为 绝对 坐标系 的 平移 坐标系 . 当 ω 2 ≠ 0 时 ， 参考 坐标系 则 为 绝对 坐标系 绕 平移 轴 的 旋转 坐标系 . i ′ , j ′ 和 k ′ 实际上 是 t 的 函数 ， 我们 记 i ′ t , j ′ t 和 k ′ t 为 t 时刻 参考 坐标系 的 3 个 单位 坐标 向量 . 并用 i ′ 0 , j ′ 0 和 k ′ 0 表示 t0 时刻 参考 坐标系 的 3 个 单位 坐标 向量 . 
 　 　 设 ： ［ i ′ 0 , j ′ 0 ,   k ′ 0 ］ T = A0 ［ i ,   j ,   k ］ T ， 其中 ： 
 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 1 ) 
 3.2 　 P , AB 及 F 在 参考 坐标系 中 的 方程 
 　 　 多面体 O1 的 顶点 P 在 参考 坐标系 中 的 运动 方程 为 
 　 　 　 　 　 　 　 　 ( 2 ) 
 A , B 两个 顶点 在 参考 坐标系 中 的 运动 方程 分别 为 
 　 　 　 　 　 　 　 　 　 　 ( 3 ) 
 　 　 　 　 　 　 　 　 　 　 ( 4 ) 
 线段 AB 于 t 时刻 所在 的 直线 在 参考 坐标系 中 的 方程 为 
 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 5 ) 
 其中 t ∈ ( t0 , t1 ］ , u ∈ ［ 0 , 1 ］ , 取 n 为 O2 的 面 F 的 法 向量 ， Q 为 F 的 一个 顶点 ， 则 F 在 参考 坐标系 中 的 方程 为 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 6 ) 
 3.3 　 AB 与 F 的 最早 相交 时刻 
 　 　 AB 与 F 的 最早 相交 时刻 即式 ( 5 ) 与 式 ( 6 ) 联 立式 在 区间 （ t0 , t1 ） 上 使得 u ∈ ［ 0 ,   1 ］ 的 最小 解 t ′ . 
 3.4 　 求 P 与 F 所在 平面 的 最早 相交 时刻 
 　 　 P 在 （ t0 ,   tmax ） 内 与 F 所在 平面 的 最早 相交 时刻 t ′ 是 式 ( 2 ) 与 式 ( 6 ) 联 立式 在 （ t0 , tmax ） 内 的 最小 解 t ′ . 
 4 　 总结 
 　 　 本文 提出 了 一种 计算 凸 多面体 间 碰撞 点 的 快速 算法 . 该 算法 可以 快速 求解 出 首次 相碰 的 两个 凸 多面体 间 的 精确 碰撞 时间 和 碰撞 点 ， 完成 了 基于 物理 特性 的 实时 碰撞 响应 的 一部分 重要 内容 . 本 算法 还有 以下 特点 ： ( 1 )   检测 到 碰撞 时 ， 即使 物体 之间 已 发生 很深 的 穿透 ， 本 算法 仍能 计算 出 物体 之间 的 准确 碰撞 时间 和 碰撞 点 ; ( 2 )   当 两个 物体 之间 有 多个 碰撞 点时 ， 本 算法 可以 找出 所有 的 碰撞 点 ； ( 3 )   求解 碰撞 点时 ， 不仅 考虑 了 物体 的 平移 ， 而且 考虑 了 物体 的 旋转 ； ( 4 )   因为 一般 的 多面体 都 可以 分解 为 若干 凸 多面体 的 组合 ， 因此 ， 本 算法 可以 经过 适当 修改 ， 应用 于 一般 多面体 的 情形 ， 具有 很 好 的 通用性 . 
 * 本文 研究 得到 国家 863 高科技 项目 基金 和 国家科技部 “ 九五 ” 攻关项目 基金 资助 . 
 作者简介 ： 王兆其 ， 1966 年生 ， 博士 ， 主要 研究 领域 为 虚拟现实 . 
 　 　 　 　 　 赵沁平 ， 1948 年生 ， 博士 ， 教授 ， 博士生 导师 ， 主要 研究 领域 为 计算机软件 ， 人工智能 ， 虚拟现实 . 
 　 　 　 　 　 汪 成为 ， 1933 年生 ， 教授 ， 博士生 导师 ， 中国工程院 院士 ， 主要 研究 领域 为 模拟 计算机 ， 数字 计算机 ， 系统 仿真 ， 人工智能 ， 虚拟现实 . 
 本文 通讯联系 人 : 王兆其 ， 北京 100080 , 北京 2704 信箱 
 作者 单位 ： 王兆其 　 中国科学院计算技术研究所 　 北京 　 100080 
 　 　 　 　 　 赵沁平 　 北京航空航天大学 计算机科学 与 工程系 　 北京 　 100083 
 　 　 　 　 　 汪 成为 　 中国人民解放军 总装备部 科学技术委员会 　 北京 　 100034 
 E - mail :   zqwang @ ict . ac . cn 
 参考文献 
 　 1 　 王兆其 ， 赵沁平 ， 汪 成为 . 虚拟环境 中 物体 物理 特性 的 表示 与 处理 . 计算机 研究 与 发展 . 1998 ， 35 （ 2 ） ： 97 ～ 101 ( Wang   Zhao - qi ,   Zhao   Qin - ping ,   Wang   Cheng - wei .   Study   on   representing   and   handling   physical   properties   of   objects   in   a   virtual   environment .   Computer   Research   and   Development ,   1998 ， 35 （ 2 ） ： 97 ～ 101 ) 
 　 2 　 Hahn   J   K .   Realistic   animation   of   rigid   bodies .   ACM   SIGGRAPH ,   1988 , 22 ( 4 ) : 299 ～ 308 
 　 3 　 Lin   Ming   C .   Efficient   collision   detection   for   animation   and   robotics   ［ Ph . D .   Thesis ］ .   Department   of   Electrical   Engineering   and   Computer   Sciences ,   University   of   California ,   Berkeley ,   199 
 本文 1998 - 10 - 14 收到 原稿 , 1999 - 01 - 11 收到 修改稿 
