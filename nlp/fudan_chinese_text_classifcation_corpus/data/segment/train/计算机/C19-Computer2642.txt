软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 10 卷   第 8 期   Vol.10   No.8   1999 
 
 
 
 基于 Z39.50 的 联机 书目 检索服务 
 杨晓江 　 张福炎 
 摘要 　 联机 书目 检索服务 是 在 网络 环境 下 图书馆 应当 向 读者 提供 的 重要 服务 . 基于 Telnet 或者 Web 的 联机 书目 检索服务 存在 检索 接口 不 一致 的 问题 , 而 Z39.50 协议 为 这种 问题 提供 了 解决办法 . 文章 描述 了 一个 基于 Z39.50 的 联机 书目 检索服务 系统 . 该 系统 支持 中文 检索 和 包括 CNMARC 在内 的 多种 MARC ( machine - readable   cataloguing ) 类型 , 具有 灵活 的 可 配置 性 和 可伸缩性 . 文章 还 给出 了 系统 的 主要 技术 设计 , 并 与 已有 的 相关 系统 进行 了 简单 的 比较 . 
 关键词 　 Z39.50 , 联机 书目 检索 , MARC ( machine - readable   cataloguring ) , PDU ( protocol   data   unit ) , 线程 安全 . 
 中图法 分类号 　 TP391 
 Online   Bibliographic   Retrieval   Service   Based   on   Z39.50 
 　 YANG   Xiao - jiang 　 ZHANG   Fu - yan 
 （ Department   of   Computer   Science   and   Technology 　 Nanjing   University 　 Nanjing 　 210093 ） 
 Abstract 　 　 The   online   bibliographic   retrieval   service   ( OBRS )   is   a   main   service   which   should   be   provided   by   libraries   on   network   environment .   Every   OBRS   provided   via   Telnet   or   Web   has   its   own   access   procedures   and   a   special   user   interface   and   query   language .   The   Z39.50   protocol   offers   a   solution   to   heterogeneity   problem .   In   this   paper ,   a   system   that   provides   OBRS   based   on   Z39.50   is   described .   The   system   supports   Chinese   retrieval   and   multi - MARC   ( machine - readable   cataloguing )   including   CNMARC ,   and   is   highly   configurable   and   scaleable .   Main   technical   design   and   simple   comparison   with   related   systems   are   given   in   this   paper . 
 Key   words 　 Z39.50 ,   online   bibliographic   retrieval ,   MARC   ( machine - readable   cataloguing ) ,   PDU   ( protocol   data   unit ) ,   thread   safety . 
 　 　 联机 书目 检索服务 是 在 网络 环境 下 图书馆 应当 向 读者 提供 的 一个 重要 服务 . 传统 上 , 图书馆 利用 Unix 主机 , 通过 Telnet 提供 这种 服务 . 这种 方式 不但 界面 不够 友好 （ 大多 为 字符 界面 ） , 而且 由于 每家 图书馆 的 检索服务 都 有 自己 的 检索 接口 , 并 要求 使用 专用 的 检索 程序 , 给 用户 带来 很大 的 不便 . 目前 , 一些 图书馆 已经 实现 了 基于 Web （ 或 HTTP ） 的 联机 书目 检索 . 这种 检索 由于 使用 浏览器 , 用户界面 大为改观 , 但 由于 HTTP 固有 的 无态性 , 在 Web 上 只能 实现 较为简单 的 检索 功能 . 另外 , Web 检索 虽然 只 要求 用户 使用 Web 浏览器 , 但 用户 在 检索 每 一家 图书馆 时所 面临 的 仍然 是 各种 不同 的 检索 界面 . 
 　 　 Z39.50 协议 ［ 1 ］ 是 网络 信息检索 的 标准 , 最初 由 图书 情报界 开发 , 现已 成为 ISO 标准 . 利用 Z39.50 提供 联机 信息检索 服务 的 优点 是 , Z39.50 不但 支持 各种 高级 检索 功能 （ 如 , 查询 结果 的 重用 和 细化 ） , 而且 能够 将 每个 服务提供者 的 数据库 之间 的 异构 性 屏蔽掉 , 使 用户 可以 使用 同一个 Z39.50 客户 检索 程序 和 相同 的 检索 界面 去 检索 分布 于 Internet 上 的 每 一个 Z39.50 服务器 . 
 　 　 Z39.50 目前 仍然 主要 应用 于 图书 情报界 . 国外 一些 大型 图书馆 已经 或 正在 积极 地 支持 Z39.50 , 其中 最为 普遍 的 就是 提供 基于 Z39.50 的 联机 书目 检索服务 . 在 国内 , 支持 Z39.50 也 已经 被 公认 为 是 评价 一个 图书馆 自动化 系统 的 重要 指标 , 但 大陆 目前 还 没有 一家 图书馆 、 一套 图书馆 自动化 系统 支持 Z39.50 . 
 　 　 我们 结合 “ 江苏省 高校 图书馆 自动化 系统 ” 的 研制 , 在 大陆 率先 实现 了 基于 Z39.50 的 联机 书目 检索系统 , 包括 Z39.50 服务器 ZServer 和 客户机 ZClient 两个 子系统 , 实现 了 Z39.50 版本 3 的 核心 功能 . ZServer 运行 于 PC / Windows   95 / NT 和 Sun / Unix 两种 平台 之上 ； ZClient 运行 于 PC / Windows   95 / NT 之上 . 经过 几个 月 的 试运行 , 整个 系统 性能 稳定 , 效率 优良 , 在 某些 重要 的 性能指标 上 , 此 系统 明显 优于 国外 现有 的 一些 典型 系统 , 如 , Innopac ［ 2 ］ , Sirsi ［ 3 ］ , BookWhere ［ 4 ］ 等 . 
 1 　 服务器 的 主要 技术 设计 
 1.1 　 对 Z39.50 的 基本 支持 
 　 　 Z39.50 是 一个 庞大 而 复杂 的 标准 , 虽然 实现 它 的 所有 功能 很难 , 但 一个 基于 Z39.50 的 联机 书目 检索服务 至少 应该 满足 如下 条件 ： 
 　 　 ( 1 )   支持 InitRequest , SearchRequest 和 PresentRequest 这 3 类 请求 , 即 支持 Z39.50 核心 服务 . 
 　 　 ( 2 )   支持 MARC （ machine - readable   cataloguing ） ［ 5 ］ 记录 语法 , 因为 MARC 是 书目 数据 的 标准 格式 . 在 我国 , 至少 应该 同时 支持 USMARC 和 CNMARC 两种 MARC 类型 . 可用 Z39.50 支持 的 UNIMARC 替代 CNMARC , 因为 CNMARC 与 UNIMARC 兼容 . 
 　 　 ( 3 )   支持 RPN （ reverse   polish   notation ） 查询 , 因为 它 是 Z39.50 标准规定 的 唯一 的 必须 支持 的 查询 . 
 　 　 ZServer 首先 实现 了 对 Z39.50 的 上述 基本 支持 , 目前 正在 对 功能 作 进一步 扩充 . 本文 的 讨论 主要 针对 上述 基本 支持 . 
 1.2 　 PDU 的 分层 处理 
 　 　 PDU （ protocol   data   unit ） 的 处理 是 实现 Z39.50 服务 中 最为 复杂 的 任务 之一 . 借鉴 ISO / OSI 模型 中 的 分层 思想 , 我们 对 Z39.50   PDU 的 处理 也 采用 了 分层 的 模型 , 图 1 说明 了 该 模型 . 
 
 图 1 　 PDU 处理 的 分层 模型 
 　 　 ( 1 )   表示层 
 　 　 表示层 封装 Z39.50 协议 规范 , 提供 了 表示 （ 构造 ） 各种 Z39.50   PDU 的 功能 , 它 将 Z39.50   PDU 从 ASN.1 ［ 6 ］ 表示 映射 到 系统 的 内部 表示 . 
 　 　 为了 系统 处理 上 的 方便 , 从 PDU 的 ASN.1 表示 到 内部结构 表示 有 可能 增加 必要 的 字 段 . 例如 , 对于 SearchRequest   PDU , 增加 一个 字段 numberOfDatabasenames 用以 记录 数据库 的 数量 是 必要 的 , 因为 这 从 PDU 本身 在 直观 上 是 得不到 该 信息 的 , 但 它 却 相当 有用 . 
 　 　 ( 2 )   编码 / 解码 层 
 　 　 编码 / 解码 层 通过 将 数据 从 本地 表示 转换成 一种 公共 的 标准 （ 编码 ） 或者 反过来 （ 解码 ） , 协调 不同 主机 或 应用程序 间 的 连接 . 
 　 　 Z39.50   PDU 按照 BER （ basic   encoding   rules ） ［ 7 ］ 进行 编码 / 解码 . 由 表示层 得到 的 PDU 在 这里 被 编码 , 并且 通过 传输层 发送 出去 ； 来自 客户 的 PDU 在 这里 被 解码 , 变成 PDU 的 表示层 形式 . 由于 编码 / 解码 的 使用 频率 高 , 内存 使用 频繁 , 通过 系统 调用 频繁 分配 、 释放 内存 显得 效率 不高 . 为了 提高 编码 / 解码 的 效率 , 应该 在 编码 / 解码 层 维护 自己 的 “ 堆 ” , 只有 当有 必要 扩大 堆 的 大 小时 , 才 利用 系统 调用 . 
 　 　 ( 3 )   传输层 
 　 　 传输层 负责 完成 PDU 在 两台 机器 之间 的 传输 任务 . 该层 通过 封装 SOCKET 运行库 中 的 常用 函数 , 如 , send ( ) , recv ( ) , accept ( ) , 来 实现 对 PDU 的 无 阻塞 （ non - blocking ） 传输 . 
 1.3 　 书目 数据库 设计 
 　 　 ZServer 后端 连接 的 数据库 是 一个 SQL （ structured   query   language ） 数据库 , ZServer 对后 端 数据库 的 访问 通过 ODBC （ open   database   connectivity ） 来 实现 . 由于 提供 联机 检索 用 的 后 端 数据库 , 其 信息 必须 不断更新 以 反映 最新 的 变化 , 这样 才 有 最大 的 服务 价值 , 因此 我们 的 后 端 数据库 直接 使用 了 图书馆 自动化 系统 中 的 采编 流 书目 数据库 . 
 　 　 数据库 中 与 书目 检索服务 密切相关 的 表是 那些 保存 MARC 数据 的 表 以及 与 这些 表 相关 的 索引 表 . 这里 给出 一组 简化 了 的 保存 MARC 数据 和 索引 信息 的 数据库 表 的 设计 , 它 由 一个 MARC 数据表 和 一个 可检 词表 组成 . MARC 数据表 和 可检 词表 之间 的 关系 是 一对 多 的 关系 . 图 2 给出 了 书目 数据库 的 MARC 表 设计 , 其中 MARC － ID 和 MARC 类型 含义 是 显然 的 , MARC 数据 块 保存 MARC 数据 . 由于 MARC 数据 具有 不定 长 性 , 我们 将 一条 MARC 数据 以 若干条 记录 存储 ； 又 根据 绝大多数 CNMARC 长度 在 2   000 字节 以下 这个 事实 , 每 一条 记录 保存 长度 为 255 × 7 的 数据 块 . 图 2 中 的 MARC 计数 正是 为此 目的 而 设计 的 . 
 
 图 2 　 书目 数据库 的 MARC 表 设计 
 
 　 　 可检词 是从 书目 数据 中 抽取 出来 的 可供 检索 的 关键词 , 一般 由 编目 人员 在 对 书目 文献 进行 加工 编目 时 提取 而 得 的 , 也 有的是 在 有 了 书目 数据库 后 , 成批 地 从中 抽取 而 得 的 . 可检词 将 作为 数据库 中 按 关键词 检索 时 匹配 成功 的 依据 . 
 　 　 每 一个 可检词 一般 都 有 检索 属性 与 之 相关 连 . Z39.50 标准 定义 了 书目 检索 属性 集 Bib - 1 , 其中 Use 类型 包含 了 大约 100 种 检索 属性 . 由于 MARC 类型 的 多样性 , Z39.50 没有 使用 MARC 的 字 段 / 子字段 代码 来 注册 检索 词 的 属性 , 而是 只 使用 了 一个 自然数 序列 , 而且 这些 属性 并 不是 互相 排斥 的 , 这 和 MARC 中 的 字 段 / 子字段 类似 . 为了 避免 数据库 服务器 执行 的 SQL 语句 过于 复杂 并 影响 效率 , 在 为 每 一个 可检词 标识 字 段 / 子 字段名 称 的 同时 , 还 为 它 标识 了 一个 “ 本地 检索 属性 ” , 比如 , 用 “ 01 ” 标识 “ 日期 ” , “ 02 ” 标识 “ 题名 ” , 等等 . 本地 属性 一般 是 对 若干个 MARC 字段 / 子字 段 的 概括 . 使用 本地 属性 使得 数据库 管理系统 大大提高 了 对 常见 属性 进行 检索 的 速度 . 图 3 说明 了 书目 数据库 的 可检 词表 设计 .   
 
 图 3 　 书目 数据库 的 可检 词表 设计 
 
 1.4 　 查询 请求 的 分析 
 　 　 ( 1 )   属性 - 字 段 映射 表 
 　 　 为了 将 接收 到 的 Z39.50 查询 请求 中 的 查询 属性 映射 成 MARC 的 一个 或 多个 字 段 / 子字段 或者 本地 检索 属性 , 需要 在 服务器端 建立 一张 “ 属性 - 字 段 映射 表 ” . 映射 表 应该 针对 不同 的 MARC 类型 作 不同 的 映射 . 图 4 显示 了 该 映射 表 的 一个 部分 , 其中 , 左边 一栏 的 数字 是 Z39.50 标准 中 的 Bib - 1 属性 集 的 Use 类型 的 属性 代码 , 第 2 栏中 的 “ N ” , “ U ” 等 表示 MARC 类别 （ 这里 分别 表示 UNIMARC 和 USMARC ） , 数字 “ 01 ” 、 “ 02 ” 表示 Z39.50 属性 被 映射 成 的 本地 属性 代码 , 而 200f , 225f 等 则 表示 映射 成 的 字 段 / 子字段 . 在 映射 表中 , Z39.50 中 有些 查询 属性 被 直接 映射 到 本地 属性 , 而且 不管 MARC 类别 是 哪 一种 . 如 , Bib - 1 / Use 的 属性 代码 4 （ Title ） 就 被 直接 映射 成本 地 属性 代号 “ 02 ” . 但 大部分 的 Z39.50 属性 值 需要 映射 到 不同 MARC 的 不同 字 段 / 子字段 , 如 , Bib - 1 / Use 的 属性 值 1 （ personal   name ） 被 映射 到 UNIMARC 的 字 段 / 子字段 200f , 701a , 702a , 映射 到 USMARC 的 字 段 / 子字段 100a , 110a , 111a . 
 
 图 4 　 属性 － 字 段 映射 表 的 一部分 
 　 　 映射 表以 文件 的 形式 存在 于 服务器端 , 使 系统 具有 灵活 的 可 配置 性 和 可伸缩性 . 当 服务 系统启动 时 , 映射 表 被 读入 内存 , 一旦 接收 到 来自 客户端 的 查询 请求 , 服务端 将 依照 该 映射 表 和 数据库 设计 , 快速 地 生成 SQL 语句 . 如果 服务器 暂时 不 支持 某些 Bib - 1 / Use 类型 的 属性 , 则 映射 表中 这 一行 空缺 . 
 　 　 ( 2 )   SQL 语句 的 构造 
 　 　 来自 客户机 的 RPN 查询 必须 在 服务器端 被 动态 地 翻译成 SQL 语句 . 将 RPN 查询 请求 转换 到 SQL 语句 的 过程 是 一个 不断 消耗 内存 、 组合成 更长 的 新 语句 的 过程 , 所 需 内存 的 大小 与 数量 都 不 容易 预先 知道 , 管理 好 内存 分配 与 释放 是 其中 一个 重要 的 任务 . 因为 RPN 中 可能 包含 着 一个 递归 式 的 复合 查询 , 转换 需要 递归 地 将 两个 操作数 （ 也 是 RPN 查询 ） 所 生成 的 SQL 条件 用 逻辑关系 组合 起来 . 需要 每次 为 组合 起来 的 SQL 条件 分配 一个 新 的 存储空间 , 其 长度 为 两个 子 SQL 条件 的 长度 之 和 再 加上 适当 的 长度 以 容纳 逻辑 连接符 、 空格 等 . 这样 , 分配 新 的 存储空间 的 任务 就 陷入 一个 递归 的 过程 之中 , 并且 只有 当 整个 递归 过程 完成 以后 , 那些 分配 的 存储空间 才能 释放 . 
 　 　 我们 使用 链表 来 管理 被 分配 的 内存 , 即 在 递归函数 中 分配 存储空间 后 , 将 获得 的 指针 加入 一个 链表 , 等到 SQL 语句 使用 完 之后 , 遍历 链表 并 释放 所有 分配 的 内存 . 
 　 　 除了 管理 好 内存 使用 , 这一 阶段 的 另 一个 重要 任务 是 解释 好 来自 客户端 的 任意 复杂 的 RPN 查询 请求 . 查询 请求 中 如果 包含 有 服务 系统 暂时 不 支持 的 查询 属性 , 必须 将 它们 过滤 掉 ； 如果 包含 有 除了 Bib - 1 / Use 类型 属性 以外 的 属性 , 如 , 截词 检索 （ truncation ） 和 关系 检索 （ relation ） 等 , 则 应该 在 构造 的 SQL 语句 中 反映 出来 ； 如果 包含 有 不 指明 属性 的 查询 , 则 应该 视作 关键字 查询 , 即 应该 构造 一个 可 检索 任意 属性 的 查询 语句 . 
 1.5 　 线程 安全性 考虑 
 　 　 当 多个 线程 对 同一个 对象 进行 操作 时 , 必须 避免 发生冲突 而 破坏 了 数据 的 完整型 . 例如 , 数据库 前端 可能 会 有 多个 线程 在 并发 地 处理 客户 的 查询 请求 , 系统 应 保证 对 每 一个 客户 请求 使用 不同 的 数据 对象 执行 操作 , 否则 , 某一 客户 的 查询 结果 则 可能 被 另 一 客户 的 查询 结果 所 覆盖 . 所以 , 需要 根据 为 每 一个 连接 客户 所 分配 的 唯一 的 标识 , 来 动态 地 管理 一个 客户 数据 区表 , 每 一个 客户 的 数据 区 主要 包括 用作 执行 SQL 语句 时 的 绑定 参数 . 
 　 　 不但如此 , 很多 ODBC 驱动程序 也 并 不是 线程 安全 的 , 即 不能 利用 同 一组 ODBC 环境 和 句柄 来 为 不同 的 线程 服务 . 事实上 , 一个 应用程序 如果 需要 由 多线程 并发 地 处理 SQL 操作 , 可以 只 分配 一个 ODBC 环境 （ HENV ） , 但 对于 每 一个 线程 则 必须 分配 不同 的 连接 句柄 （ HDBC ） 和 语句 句柄 （ HSTMT ） . 虽然 这些 分配 了 的 句柄 可以 被 该 线程 重用 , 但 由于 服务器 不 知道 一个 客户 的 下 一次 请求 会 在 什么 时候 到来 , 如果 许多 客户 一直 占用 着 各自 的 这些 句柄 , 必然 导致 服务器 没有 办法 为 后面 连接 过来 的 客户 执行 查询 , 这就是说 会 造成 一部分 客户 占据 着 一部分 句柄 不用 , 而 另 一部分 客户 无 句柄 可用 . 
 　 　 我们 采用 了 句柄 集中管理 的 方式 来 解决 上述 问题 . 所有 句柄 由 一个 链表 来 维护 , 对 每个 线程 实行 “ 需要 即 申请 , 用 完即 回收 ” 的 策略 . 每当 某 线程 需要 执行 SQL 语句 时 , 就 由 系统 首先 试图 分配 一组 连接 句柄 和 语句 句柄 , 只有 分配 成功 才能 执行 SQL 操作 , 并 把 分配 成功 的 一组 句柄 加入 到 句柄 表中 ； 一旦 该 语句 执行 完毕 , 立即 释放 它 所 占有 的 句柄 , 并 将 它们 从 句柄 表中 删除 . 由于 释放 句柄 速度 相当 快 , 所以 使用 该 方法 的 效果 相当 令人满意 . 为了 提高 线程 申请 ODBC 环境 和 句柄 时 成功 的 可能性 , 我们 设置 了 一个 合理 的 时间 范围 （ 比如 10s ） 和 间隔 （ 比如 0.5 s ） , 在 这个 时间 范围 内 如果 申请 失败 , 则 每隔 该 时间 间隔 再 申请 一次 , 直到 超过 该 时间 范围 才 给 客户 一个 “ 查询 者 太 多 , 请 稍后 再查 ” 的 诊断 信息 . 
 1.6   查询 执行 和 结果 提取 
 　 　 服务器 构造 好 SQL 语句 后 , 调用 过程 ExecUserSearch ( ) 来 执行 数据库 查询 , 生成 结果 集 视图 , 并 将 记录 个数 作为 SearchResponse 的 一部分 返回 给 客户 . 
 　 　 由于 客户 提取 结果 时 , 指定 的 记录 数目 可能 很大 , 系统 不 可能 为 每个 客户 一次性 分配 足够 大 的 数据 绑定 区域 , 所以 在 处理 提取 查询 结果 的 请求 时 , 很 有 可能 要 分段进行 . 为了 使 查询 结果 能够 分段 地 提取 而 又 不 影响 速度 , 我们 设计 了 3 个 相关 的 函数 , 避免 每 提取 一次 结果 都 要 重新分配 一组 ODBC 句柄 . 在 申请 提取 结果 之前 执行 PreBulkFetch ( ) , 它 分配 ODBC 句柄 、 从 结果 集 视图 中 选择 记录 、 执行 参数 绑定 ； 提取 结果 使用 ExecUserFetch ( ) , 它 根据 客户 请求 的 记录 位置 和 个数 将 记录 从 结果 集中 提取 出来 , 并 按照 客户 请求 的 格式 将 记录 返回 给 客户端 . Z39.50 标准 版本 3 还 支持 分段 连续 提取 查询 结果 的 请求 , ExecUserFetch ( ) 函数 被 设计 成 非常适合 于 处理 该 请求 ； 提取 完 结果 之后 , 使用 EndBulkFetch ( ) , 释放 ODBC 句柄 . 
 　 　 由于 MARC 数据 是 分段 存放 的 , ExecUserFetch ( ) 是 组合 MARC 数据 最好 的 地方 . 如果 需要 在 ExecUserFetch ( ) 函数 中 执行 复杂 的 数据库 查询 以 获得 更 多 的 记录 构造 信息 , 一组 ODBC 句柄 可能 会 不够 . 在 这种 情况 下 , 可以 在 PreBulkFetch ( ) 中 申请 多组 ODBC 句柄 , 然后 将 它们 作为 参数 传给 ExecUserFetch ( ) . 
 2 　 结束语 
 　 　 我们 用 自己 设计 的 Z39.50 客户 软件 ZClient 和 免费 试用 软件 BookWhere ［ 4 ］ 对 ZServer 进行 了 测试 . 测试 在 一个 运行 Windows   NT   4.0 （ 中文版 ） 操作系统 的 HP2500 服务器 （ 处理器 为 Pentium   200 ） 上 进行 ,   关系数据库 使用 Microsoft   SQL   Server   6.5 , 测试 数据库 中 含有 大约 120   000 条 书目 MARC 数据 . 经过 测试 , 对于 单 检索 项 查询 , 响应 时间 一般 为 1 ～ 3s ； 对于 通过 布尔 运算符 连接 的 含 多 检索 项 的 查询 , 响应 时间 的 增加 一般 与 检索 项 个数 的 增加 成正比 . 
 　 　 我们 还 没有 发现 支持 CNMARC （ 或 UNIMARC ） 和 中文 检索 的 其他 Z39.50 服务器 , ZServer 在 这 一点 上 首先 就 优越 于 Innopac ［ 2 ］ 和 Sirsi ［ 3 ］ 等 国外同类 系统 . 例如 , 将 一个 带有 中文 和 西文 检索 项 的 布尔 查询 请求 提交 给 Innopac , 则 检索 不到 记录 , 甚至 会 得到 错误信息 . 另外 , ZServer 很 好 地 支持 带有 截词 检索 和 关系 检索 的 查询 请求 , 但是 通过 对 Innopac 和 Sirsi 等 Z39.50 服务器 的 查询 得知 , 它们 基本上 不 支持 这些 检索 特性 . 
 注 ： 本文 研究 得到 江苏省 教委 重点 攻关项目 基金 资助 . 
 本文 通讯联系 人 ： 杨晓江 , 南京 210093 , 南京大学 计算机科学 与 技术 系 
 作者简介 ： 杨晓江 , 1965 年生 , 博士 , 副教授 , 主要 研究 领域 为 多媒体技术 , 中文信息处理 , 网络 信息 服务 . 
 张福炎 , 1939 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 多媒体技术 , 图形处理 技术 , 中文信息处理 . 
 作者 单位 ： 南京大学 计算机科学 与 技术 系 　 南京 　 210093 
 参考文献 
 　 1 　 ANSI .   Information   Retrieval   ( Z39.50 ) :   Application   Service   Definition   and   Protocol   Specification ,   ANSI / NISO   Z39.50 - 1995 .   Bethesda ,   MD :   NISO   Press ,   1995 
 　 2 　 Innovative   Interfaces   Inc ..   Z39.50   Server   ( Innopac ) .   Australia ,   Murdoch   University .   IP : 〈 134.115 . 152.130 :   210 〉 
 　 3 　 Sirsi   Corporation .   Z39.50   Server   ( UNICORN ) .   America ,   Lehigh   University .   IP : 〈 128.180 . 2.47 :   210 〉 
 　 4 　 Sea   Change   Corp .   Book   where   2000   evaluation   copy .   http :   / / www . bookwhere . com 
 　 5 　 北京 图书馆 自动化 发展部 . 中国 机读目录 通讯 格式 . 北京 : 书目 文献 出版社 , 1991 
 ( Department   of   Automation   Development   of   Beijing   Library .   China   Machine   Readable   Cataloguing   Format .   Beijing :   Bibliographic   Press ,   1991 ) 
 　 6 　 ISO .   Information   Processing   Systems   — —   Open   Systems   Interconnection   — —   Specifications   for   Abstract   Syntax   Notation   One   ( ASN.1 ) .   Vienna ,   VA :   Omnicom   Inc . ,   1987 
 　 7 　 ISO .   Information   Processing   Systems   — —   Open   Systems   Interconnection   — —   Specifications   of   Basic   Encoding   Rules   ( BER )   for   Abstract   Syntax   Notation   One .   Vienna ,   VA :   Omnicom   Inc . ,   1987 
 本文 1998 - 03 - 13 收到 原稿 , 1998 - 09 - 04 收到 修改稿 
