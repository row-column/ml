软件 学报 
 JOURNAL   OF   SOFTWARE 
 2000 　 Vol.11 　 No.4 　 P.507 - 514 
 
 
 
 
 CC - NUMA 并行 系统 通信 优化 的 变换 技术 
 陈渝 　 李春江 　 杨学军 　 陈福接 
 　 摘要 　 减少 通信 开销 是 并行 编译 优化 的 主要 目标 之一 . 该文 针对 具有 cache 一致性 的 非 一致 存储 访问 并行 系统 ( CC - NUMA ) 的 特点 , 提出 通过 结合 计算 变换 和 数据 变换 , 在 统一 的 代数 框架 下 对 并行程序 进行 通信 优化 的 策略 和 方法 . 通过 实验 测试 , 验证 了 此 策略 和 方法 是 行之有效 的 . 
 　 关键词 　 并行 编译 , 通信 优化 , 计算 变换 , 数据 变换 , 具有 Cache 一致性 的 非 一致 存储 访问 . 
 　 中图法 分类号 　 TP311 
 Transformation   Methods   for   Communication   Optimization   on   CC - NUMA   Parallel   System 
 CHEN   Yu 　 LI   Chun - jiang 　 YANG   Xue - jun 　 CHEN   Fu - jie 
 （ School   of   Computer 　 National   University   of   Defense   Technology 　 Changsha 　 410073 ） 
 Abstract 　 　 Reducing   communication   overhead   is   one   of   the   goals   of   parallel   compiling   optimization .   According   to   the   characteristics   of   CC - NUMA   parallel   architecture ,   the   authors   propose   some   strategies   and   methods   to   optimize   the   communication   of   parallel   programs   by   combining   computing   transformation   and   data   transformation   based   on   unified   algebraic   representation   in   this   paper .   Experimental   results   of   optimization   are   presented ,   and   the   efficiency   of   the   optimization   policies   and   the   methods   is   proved .   
 Key   words 　 Parallel   compiling ,   communication   optimization ,   computing   transformation ,   data   transformation ,   CC - NUMA   ( cache   coherent - non   uniform   memory   access ) . 
 　 　   具有 cache 一致性 的 非 一致 存储 访问 CC - NUMA ( cache   coherent - non   uniform   memory   access ) 并行 系统 , 比 对称 多 处理 SMP ( symmetric   multi - process ) 共享 存储系统 有着 更好 的 可扩展性 , 而且 它 在 硬件 上 提供 了 cache 的 一致性 维护 和 全局 地址 空间 的 访问 , 简化 了 并行 编程 . 这些 使得 它 在 技术 角度 和 商业 角度 上 都 有 很 好 的 发展前景 , 正 逐渐 成为 超级 计算 的 主流 之一 . 因此 , 如何 通过 并行 编译 优化 提高 并行程序 在 CC - NUMA 并行 系统 中 的 执行 效率 , 有着 重要 的 理论 和 实际意义 . 
 　 　 在 SMP 系统 中 ， 内存 是 全局 统一 编址 , 具有 一致 的 内存 存取时间 , 不 存在 远地 内存 数据 访问 的 问题 , 但 由于 自身 结构 的 限制 , 使得 它 的 可扩展性 差 . CC - NUMA 系统 在 硬件 上作 了 很大 的 革新 , 在结构上 突破 了 在 SMP 中 可扩展性 差 的 缺点 . 它 在 硬件 上 实现 了 统一 的 全局 编址 , 所有 的 内存空间 可以 被 任意 节点 访问 . 远地 节点 内存 的 数据 可以 被 本地 节点 的 cache 缓存 , 由 硬件 保证 cache 的 一致性 . 
 　 　 目前 ， 有 不少 学者 试图 通过 计算 变换 开发 数据 的 局部性 . 例如 , Wolf 和 Lam ［ 1 ］ 在 定义 和 分析 了 数据 局部性 的 基础 上 , 通过 单模 ( unimodular ) 变换 来 开发 程序 的 并行性 和 减小 通信 开销 , 但 却 没有 考虑 计算 变换 的 局限性 和 数据 变换 的 特点 . Wei   Li 和 Pingali ［ 2 ］ 使用 线性变换 技术 来 进行 数据 局部性 优化 , 他们 统一 考虑 了 计算 变换 和 数据 变换 , 但 所 考虑 的 仅 是 简单 的 线性变换 , 没有 对 计算 扭曲 变换 和 数据 扭曲 变换 进行 分析 . Bugnion 等 人 ［ 3 ］ 提出 用 page   color 技术 来 提高 SMP 系统 中 的 cache 利用率 , 但 由于 内存 页 的 粒度 比 cache 行 的 粒度 大 , 所以 不能 精确 地 分析 出 cache 的 使用 情况 并 加以改进 . 
 　 　 综上所述 , 大多数 学者 在 计算 变换 方面 进行 了 深入 的 研究 , 但 对 数据 变换 的 研究 还 不够 . 而且 , 目前 关于 数据 局部性 的 研究 主要 是 针对 SMP 共享 存储 并行 系统 ( 不 考虑 数据 的 分布 ) 和 非 共享 存储 并行 系统 ( 对远 地 数据 不能 进行 本地 cache ) , 关于 CC - NUMA 并行 系统 的 数据 局部性 的 研究 还 很少 . 因此 , 有 必要 对 CC - NUMA 以及 数据 变换 进行 深入 的 研究 . 
 　 　 本文 主要 考虑 在 CC - NUMA 系统 中 , 如何 通过 变换 技术 来 开发 数据 的 局部性 , 减少 访存 冲突 通信 开销 , 特别 是 ， 由于 cache 和 内存 页 访问 冲突 引起 的 通信 开销 . 由于 在 CC - NUMA 系统 中 , cache 和 内存 页 存在 着 对 同一 内存 单元 的 多个 拷贝 , 同时 也 存在 着 远 地 内存 访问 . 因此 , 影响 并行程序 性能 的 主要 访存 通信 开销 包括 ： cache 真 共享 冲突 开销 、 cache 假 共享 冲突 开销 、 内存 页 的 假 共享 冲突 、 cache 不 命中 开销 、 页 不 命中 开销 和 远 地 访存 开销 ［ 4 ］ . 
 　 　 本文 减少 访存 开销 的 出发点 是 通过 分析 并行程序 的 访存 模式 , 在 统一 的 代数和 集合 表示 框架 下 把 计算 变换 和 数据 变换 结合 起来 , 解决 CC - NUMA 中 存在 的 cache 冲突 . 至于 减少 远地 访存 开销 的 技术 , 许多 学者 对此 都 进行 了 较为 深入 的 研究 ， 而且 在 CC - NUMA 系统 中 , 如果 远地 内存 的 数据 能 被 本地 cache 存储 , 并且 有 良好 的 重用 性 和 局部性 , 则 数据通信 开销 就 可以 较 好 地 得到 控制 . 
 1 　 计算 变换 、 数据 变换 的 代数和 集合 表示 框架 
 　 　 为了 表示 嵌套循环 , 本文 定义 n 层 嵌套循环 的 迭代 空间 IZn 和 一个 m 维 数组 的 数据 空间 AZm . 设 n 层 嵌套循环 中 第 k 层 是 并行 循环 ( 假设 并行 系统 实际 只 并行执行 1 层 并行 循环 , 其他 并行 循环 串行 执行 ) , 它 的 取值 范围 是 1 ～ Nk , 则 可定义 并行 迭代 子 空间 集合 Ip ( 为了 简化 定义 , 本文 假设 嵌套循环 中 只 存取 1 个 数组 空间 ) 如下 ： 
 　 　 定义 1.1 .   并行 迭代 子 空间 集合 ： 
 Ip = { Ipik ｜ Ipik ＝ ｛ （ * , ... , ik , ... , * ) } , 1 ≤ ik ≤ Nk } . 
 其中 ik 是 第 k 个 循环 迭代 向量 元素 的 值 , * 表示 相应 迭代 向量 元素 的 所有 可能 取值 . 具有 相同 的 i1 , i2 , ... , ik - 1 值 的 Ipik 迭代 子 空间 可 并行执行 , 但 在 并行执行 后 可能 要 进行 同步 , Ip 内 迭代 是 串行 执行 的 . 
 　 　 定义 1.2 .   迭代 空间 对 数据 空间 的 访问 模式 映射 h ( I ) → A , 即 
 h ( I ) = { a = i * T + c | i ∈ I , a ∈ A } . 
 其中 a 是 m 维 数据 向量 , i 是 n 维 迭代 向量 , T 是 n * m 维 存取 矩阵 , c 是 m 维 偏移 向量 . 
 　 　 定义 1.3 .   并行 迭代 子 空间 集合 Ip 的 访问 集合 ： 
 Gp = { Gpik = | Gpik = { h ( Ipik ) ｜ Ipik ∈ Ip ｝ ， 1 ≤ ik ≤ Nk } . 
 所有 Gpik 的 并 是 A 的 一个 子集 . 
 　 　 定义 1.4 .   迭代 空间 变换 的 表示 I ′ = I * R + r , R 是 变换 矩阵 , r 是 偏移 向量 . 
 　 　 定义 1.5 .   数据 空间 变换 的 表示 A ′ = A * S + s , S 是 变换 矩阵 , s 是 偏移 向量 . 
 　 　 定理 1.1 .   如果 Ip 中 的 Ip1 , ... , IpNk 相应 的 访问 数据 集 Gp1 , ... , GpNk 两 两 相交 为空 , 那么 就 没有 cache 真 共享 冲突 ( 不 考虑 由于 cache 容量 有限 所 带来 的 影响 ) . 
 　 　 证明 : Cache 真 共享 冲突 是 由于 并行执行 的 Ipi 和 Ipj 对 同一个 内存 单元 进行 了 写 操作 而 造成 的 . 由题 设 可知 , 对 Ip 中 任意 Ipi 和 Ipj 的 相应 访问 数据 集 Gpi , Gpj 有 Gpi ∩ Gpj = Φ , 则 不 存在 Ipi 和 Ipj 对 同一个 内存 单元 进行 写 操作 , 即 不 存在 cache 真 共享 冲突 .   
 □ 
 　 　 假设 存在 一个 迭代 变换 矩阵 R 和 相应 的 迭代 偏移 向量 r , 通过 它们 对 迭代 空间 进行 变换 可 消除 cache 真 共享 冲突 . 同时 , 假设 存在 一个 数据 变换 矩阵 S 和 相应 的 数据 偏移 向量 s , 通过 它们 对 数据 空间 进行 变换 可 减少 或 消除 cache 假 共享 冲突 . 这样 就 可以 把 它们 结合 起来 , 同时 进行 变换 , 以 减少 或 消除 cache 冲突 . 
 　 　 首先 , 通过 计算 变换 改变程序 的 循环 索引 的 表示 ： I ′ ＝ I * R + r . 这时 , 新 的 存取 模式 为 h ( I ′ ) = ( ( I ′ - r ) * R - 1 ) * T + c , 再 计算 出 通过 数据 变换 产生 的 新 的 存取 模式 ： h ′ ( I ′ ) = ( ( ( I ′ - r ) * R - 1 ) * T + c ) * S + s . 最后 , 根据 新 的 存取 模式 修改 数组 的 索引 下标 . 这样 就 可以 统一 地用 代数 方法 消除 cache 冲突 ( 下面 的 变换 都 是 以 Fortran 语言 作为 参考 的 ) . 
 2 　 用 计算 变换 消除 cache 真 共享 冲突 
 2.1 　 并行 计算机系统 模型 
 　 　 为了 简化 讨论 , 本文 考虑 全局 统一 编址 的 CC - NUMA 的 多层次 存储 结构 , 它 的 内存 层次 可 分成 3 层 ： 远地 内存空间 、 本地 内存空间 和 本地 cache . 处理机对 远地 内存空间 的 访问 开销 比 本地 内存 要 大 . 同时 , cache 可以 保存 本地 或远 地 内存空间 的 数据 , 并 通过 写回 策略 来 保证 cache 的 一致性 . 由于 只 考虑 真 共享 引起 的 冲突 , 本文 假设 本地 cache 具有 无限大 的 容量 来 排除 由于 cache 容量 有限 所 带来 的 其他 开销 . 同时 , 假设 每个 cache 行只 含 一个 字 ， 以 忽略 假 共享 引起 的 冲突 . 
 2.2 　 程序 模型 
 　 　 本文 仅 考虑 最 外层 循环 为 串行 循环 的 嵌套循环 ( 下面 的 分析 也 适用 于 有 串行 关系 的 多个 并行 循环体 ) . 为了 简化 讨论 , 本文 假设 忽略 并行 循环 内 语句 间 的 相关 关系 , 循环 的 下限 和 增量 步长 都 是 1 , 所有 数组 下标 表达式 为 线性 函数 . 嵌套 并行 结构 中仅 含 一层 并行 循环 , 它 可能 包含 一个 串行 循环 ， 并 被 包含 在 一个 串行 循环 中 , 如果 存在 多层 并行 循环 , 则 仅 并行执行 其中 一层 ［ 5 ］ . 
 基于 上面 的 假设 , 本文 重点 考虑 三层 嵌套循环 结构 ： 一个 并行 循环 , 它 包含 一个 串行 循环 , 同行 它 也 被 一个 串行 循环 包含 . 如下 所示 : 
 　 　 DO   I1 = 1 , N1 
 　 　 　 　 ... 
 　 　 　 　 　 　 DOALL   I2 = 1 , N2 
 　 　 　 　 　 　 　 　 　 ... 
 　 　 　 　 　 　 　 　 　 　 　 DO   I3 = 1 , N3 
 　 　 　 　 　 　 　 　 　 　 　 　 　 ... 
 　 　 　 　 　 　 　 　 　 　 　 　 　 A1 ( h1 ( I1 , I2 , I3 ) ) = ... 
 　 　 　 　 　 　 　 　 　 　 　 　 　 ... = A1 ( h2 ( I1 , I2 , I3 ) )   
 　 　 　 　 　 　 　 　 　 　 　 　 　 ... 
 　 　 　 　 　 　 　 　 　 　 　 ENDDO 
 　 　 　 　 　 　 　 　 　 ... 
 　 　 　 　 　 　 　 ENDDOALL 
 　 　 　 　 ... 
 　 　 ENDDO 
 2.3 　 优化 策略 
 　 　 为了 更好 地 说明 问题 , 本文 首先 讨论 简单 的 单个 二维 数组 A . 它 的 内存 布局 是 列 优先 的 , 其 下标 表达式 为 单个 线性 函数 . 对于 多个 数组 或 多 线性 函数 的 情况 可以 此 为 基础 进行 推广 . 下面 是 一个 具体 的 例子 . 
 　 　 例 1 : REAL   A ( M , M ) 
 　 　 　 　 　 　 DO   I1 = 1 , N 
 　 　 　 　 　 　 　 　 DOALL   I2 = 1 , N 
 　 　 　 　 　 　 　 　 　 　 　 DO   I3 = 1 , N 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 A ( I2 + I3 - 1 , I1 + I3 - 1 ) = ... 
 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ... = A ( I2 + I3 - 1 , I1 + I3 - 1 )   
 　 　 　 　 　 　 　 　 　 　 　 ENDDO 
 　 　 　 　 　 　 　 　 ENDDOALL 
 　 　 　 　 　 　 ENDDO 
 　 　 例 1 中 的 迭代 空间 I = ( i1 , i2 , i3 ) , 1 ≤ i1 , i2 , i3 ≤ N , 数据 空间 A = ( a1 , a2 ) , 1 ≤ a1 , a2 ≤ M , 迭代 空间 到 数据 空间 的 映射 为 h ( I ) , 通过 分析 我们 可以 得到 存取 矩阵 
 
 　 　 根据 Z . Shen ［ 6 ］ 对 12 个 大型 科学 应用程序 的 统计 结果 ， 存取 矩阵 T 中 的 元素 值 往往 很小 ， 其 绝对值 大于 1 的 只有 2.05% ， 最大 系数 绝对值 为 2 . 因此 ， 本文 的 例子 具有 一定 的 普遍性 . 
 　 　 根据 定义 1.1 ， 可以 得到 并行 迭代 子 空间 Ipk ＝ ｛ （ * , k , * ） ｝ ， 1 ≤ k ≤ N ， 根据 定义 1.3 ， Ipk 的 访问 数据 集 Gpk ＝ ｛ A （ h （ i ） ） ｜ i ∈ Ipk ） ｝ . 通过 对 Gpk 的 分析 ， 我们 可以 发现 它们 的 交集 不为 空 ， 而且 交 集中 元素 个数 很大 . 例如 
 Gp1 ＝ ｛ ( I3 , I1 + I3 - 1 ) | 1 ≤ I1 , I3 ≤ N } ,   Gp2 = { ( I3 + 1 , I1 + I3 - 1 ) | 1 ≤ I1 , I3 ≤ N } , 
 则 
 Gp1 ∩ Gp2 ＝ ｛ （ I3 ， I1 ＋ I3 － 2 ） ｜ 2 ≤ I1 , I3 ≤ N } . 
 　 　 为了 使 Gpk 之间 的 交集 为空 ， 需要 对 循环 进行 重组 ， 使得 重组 后 Ip ′ k 之间 的 访问 数据 集 不 相交 . 
 　 　 定理 2.1 .   对于 Ipk 中 的 迭代 子 空间 { ( k1 , k , * ) } , 把 它 移入 另 一个 并行 迭代 子 空间 Ipj 中 ， 只要 保证 在 同步 点上 的 同步 和 迭代 顺序 ， 则 重构 后 的 Ip ′ 子 空间 并行执行 不 影响 程序执行 的 准确性 . 证明 略 . 
 　 　 在 例 1 中 可以 明显 地 看到 , 每 执行 I1 的 一次 循环 ， 就要 完成 一次 同步 . 这样 ， 对于 一个 确定 的 I1 ， I2 的 N 个 循环 可以 任意 分布 在 P 个 处理机 上 执行 ( 假设 不 考虑 负载平衡 ) . 如果 通过 对 Ip 中 的 迭代 子 空间 进行 重新 分布 ， 使 Ip 子 空间 之间 满足 定理 1.1 ， 那么 就 可以 消除 cache 真 共享 冲突 了 . 为此 ， 本文 给出 如下 定义 和 定理 . 
 　 　 定义 2.1 .   对于 I 中 迭代 子 空间 I1 { ( e1 , k1 , * ) } 和 迭代 子 空间 I2 { ( e2 , k2 , * ) } , ( e1 , k1 ) ≠ ( e2 , k2 ) , 令 它们 的 数据 访问 集 分别 为 G1 和 G2 . 如果 G1 ∩ G2 ≠ Φ , 则 记为 I1 δ Ι 2 . 
 　 　 定理 2.2 .   对于 I 中 迭代 子 空间 I1 { ( e1 , k1 , * ) } 和 I 中 迭代 子 空间 I2 { ( e2 , k2 , * ) } , e1 ≠ e2 , 则 I1 δ I2 当且 仅 当 存在 j1 和 j2 ( 1 ≤ j1 , j2 ≤ N ) , 满足 ： ( e1 , k1 , j1 ) * T = ( e2 , k2 , j2 ) * T . 
 　 　 证明 : 如果 I1 δ I2 , 则 根据 定义 2.1 ， 有 相应 的 G1 ∩ G2 ≠ Φ , 根据 定义 1.2 ， 存在 i1 = ( e1 , k1 , j1 ) , i2 = ( e2 , k2 , j2 ) , 使 a = i1 * T = i2 * T ; 反之亦然 . 
 □ 
 　 　 定义 2.2 .   对于 I 中 迭代 子 空间 I1 { ( e1 , k1 , * ) } 和 迭代 子 空间 I2 { ( e2 , k2 , * ) } , e1 ≠ e2 , 如果 I1 δ I2 , 则 I1 ， I2 ∈ Ip ′ k . 
 　 　 下面 介绍 如何 构造 满足 定义 2.2 的 Ip ′ 并行 迭代 子 空间 . 以例 1 为例 ， 通过 对 定理 2.2 的 进一步 分析 计算 ， 发现 满足 I1 δ I2 的 情况 可简化 为 下面 的 形式 ： 
 令 
 i1 = ( e1 , k1 , j1 ) ,   i2 = ( e2 , k2 , j2 ) ,   Δ i = i1 - i2 = ( e1 - e2 , k1 - k2 , j1 - j2 ) , 
 则 定义 2.2 的 条件 可简化 为 
 Δ i * T = 0 . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 1 ) 
 令 Δ e = e1 - e2 , Δ k = k1 - k2 , Δ j = j1 - j2 , 解式 ( 1 ) 可以 得到 
 Δ e = Δ j ,   Δ k = Δ j ,   Δ e = Δ k ,   0 ≤ Δ j ≤ N - 1 . 
 即 对于 迭代 子 空间 I1 = { ( e , k , * ) } 和 任意 迭代 子 空间 I2 = { ( e2 , k2 , * ) } , 只要 满足 
 r = e2 - e = k2 - k ,   且 0 ≤ r ≤ N - 1 , 
 它们 就 同 属于 一个 Ip ′ i . 本文 定义 它 包含 在 并行 迭代 子 空间 Ip ′ i 中 ， 表示 为 
 Ip ′ i = { ( e + r , k + r , * ) | r ∈ Z , 1 ≤ e + r ≤ N , 1 ≤ k + r ≤ N } , 
 其中 Z 为 整数 集合 . 
 　 　 如果 用 迭代 变换 矩阵 和 迭代 偏移 向量 来 表示 变换 后 的 Ip ′ k = { ( N - k + r , r , * ) , 1 ≤ r ≤ N 且 1 + k - N ≤ r ≤ k } , 1 ≤ k ≤ 2N - 1 , 则 
 
 　 　 显然 , 所有 的 Ip ′ 可 并行执行 ， 而且 相互之间 不 存在 真 共享 冲突 . 但 在 CC - NUMA 系统 中 ， Ip ′ 间 可能 产生 大量 的 远 地 数据 访问 和 伪 共享 冲突 . 因此 ， 本文 下 一步 将 采用 数据 变换 技术 ， 以 消除 cache 假 共享 冲突 和 减少 远地 数据 访问 . 
 3 　 用 数据 变换 消除 cache 假 共享 冲突 
 　 　 本 节 取消 了 第 2 节中 对系统 模型 的 部分 假设 ， 认为 cache 行 包含 多个 字 ， 即 存在 cache 假 共享 冲突 ， 这样 更 符合实际 的 CC － NUMA 系统 . 在 CC － NUMA 系统 中 ， 数组 的 布局 应 尽量 提高 并行程序 的 局部性 ， 将 并行程序 所 需 的 数据 尽量 放置 在 本地 内存 . 但是 在 例 1 中 ， Ip ′ 中 的 迭代 子 空间 I ′ ij 的 存取 模式 是 沿着 对角线 方向 访问 的 ， 因此 采用 标准 的 Block , Cyclic 或 Block ( n ) 方式 来 放置 数组 ， 都 不能 消除 cache 伪 共享 冲突 . 但是 ， 通过 数据 变换 却 可以 解决 这个 问题 . 我们 首先 介绍 多维 数组 线性 地址 的 代数 表示 和 数据 变换 的 代数 表示 . 
 3.1 　 数组 的 线性 地址 代数 表示 
 　 　 为了 反映 出 多维 数组 在 内存 的 实际 放置 , 需要 对 数组 进行 线性 表示 ［ 7 ］ . 对 一个 n 维 数组 , 建立 一个 ( n + 1 ) 维 定位 向量 P , 一个 ( n + 1 ) 维 索引 向量 m , 以 二维 数组 A ( n , n ) 为例 , 它 的 元素 A ( i , j ) 的 索引 向量 m 为 ( i , j , 1 ) , 它 的 定位 向量 P 为 ( 1 , n , - ( n + 1 ) ) . 设 起始 地址 为 0 , 则 A ( i , j ) 的 线性 地址 可 表示 为 
 　 　 　 　 　 　 　 　 　 　 ( 2 ) 
 　 　 这里 , m 和 P 的 最后 一个 元素 是 用来 表示 地址 偏移量 的 , 所以 m 的 最后 一个 元素 值为 1 . 为了 更 清晰 地 表示 迭代 子 空间 对 数组 的 访问 模式 , 本文 定义 了 迭代 的 线性 地址 访问 模式 ： 
 Addr ( I ) = P * ( h ( I ) ) T . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 3 ) 
 　 　 由于 间隔 访问 距离 与 数组 线性 地址 的 偏移量 无关 , 所以 , 可 把 定位 向量 P 的 最后 一个 表示 偏移量 的 元素 去掉 , 用 P ′ 表示 . P ′ 实际上 表示 了 数组 索引 下 标的 相邻 变化 在 数组 线性 地址 中 的 间隔 . 同时 , 为了 反映 出 迭代 子 空间 相邻 元素 对 数组 线性 地址 的 访问 距离 , 本文 定义 了 间隔 向量 iv ( interval   vector ) ： 
 ivT = T * P ′ T . 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( 4 ) 
 　 　 间隔 向量 iv 实际上 反映 了 程序 对 数据 访问 的 间隔 距离 . 对于 n 层 嵌套循环 , 可以 得到 一个 n 维 向量 , 其中 第 i 个 元素 的 绝对值 表示 了 相应 的 第 i 层 循环 对 数据 访问 的 间隔 距离 . 特别 是 最后 一个 元素 的 绝对值 表示 了 最 内层 循环 对 数据 访问 的 间隔 距离 . 
 　 　 定理 3.1 .   设 一个 cache   line 的 长度 为 m , 有 一个 n 维 间隔 向量 iv ( v1 , v2 , ... , vn ) , 其中 第 k 个 向量 元素 | vk | 是 可 并行执行 的 循环 对 数据 访问 的 步长 , 称 iv 的 空间 局部性 是 优良 的 , 如果 ： 
 　 　 ( 1 )   | vk | > m ; 
 　 　 ( 2 )   | v ( j + 1 ) | ≤ | vj | , 1 ≤ j ≤ n - 1 且 j ≠ k ;   
 　 　 ( 3 )   | vn | < m . 
 　 　 定义 3.1 .   设 一个 cache   line 的 长度 为 m , 设有 两个 n 维 间隔 向量 iv1 ( v11 , v12 , ... , v1n ) 和 iv2 ( v21 , v22 , ... , v2n ) , 其中 第 k 个 向量 元素 v1k , v2k 是 可 并行执行 的 循环 对 数据 访问 的 步长 , 称 iv1 的 空间 局部性 优于 iv2 , 如果 ： 
 　 　 ( 1 )   
 　 　 ( 2 )   令 niv ′ 1 = ( | v1n | , ... , | v1 ( k + 1 ) | ) , niv ′ 2 = ( | v2n | , ... , | v2 ( k + 1 ) | ) , 则 表示 按 字典 序 小于 ) . 
 3.2 　 数据 变换 的 代数 表示 
 　 　 在 Fortran 或 C语言 中 , 对 多维 数组 在 内存 中 的 线性 地址 存放 有 直接 的 规定 . 对于 某些 程序 而言 , 由于 其 嵌套循环 中 的 数据 访问 模式 的 特点 , 可能 使 其 局部性 受到 很大 的 损失 , 因此 需要 通过 数据 变换 来 提高 数据 访问 的 局部性 . 目前 , 数据 变换 的 类型 ［ 1 ］ 主要 有 3 类 : 转置 ( permutation ) 变换 、 扩维 ( extension   dimension ) 变换 和 扭曲 ( skew ) 变换 . 当然 ， 还 存在 其他 类型 的 数据 变换 , 但 这 3 种 数据 变换 更 具有 通用性 和 实用性 . 
 3.2 . 1   转置 变换 
 　 　 一个 n 维 转置 变换 矩阵 S 可以 改变 一个 n 维 数组 的 线性 地址 空间 , 它 用来 改变 n 维 数组 中 各维 的 优先 次序 . 以 二维 数组 为例 , 它 的 转置 变换 矩阵 只有 一种 ： 
 
 　 　 它 实际上 是 把 以列 优先 的 二维 数组 变成 以行 优先 的 二维 数组 . 通过 分析 可以 发现 , 对于 一个 n 维 数组 , 它 的 转置 方式 有 n ! - 1 种 , 即 它 有 n ! - 1 种 转置 矩阵 , 而且 这些 矩阵 都 是 unimodula 矩阵 . 因为 通常 的 应用软件 很少 有 超过 5 维 的 数组 , 大部分 都 是 2 维和 3 维 数组 , 所以 转置 变换 矩阵 的 数目 不会 很大 . 
 3.2 . 2 　 扩维 变换 
 　 　 一般而言 , 扩维 变换 只 针对 n 维 数组 的 某 一维 . n * ( n + 1 ) 或 n * ( n + 2 ) 维扩维 变换 矩阵 可 改变 一个 n 维 数组 , 使 之 变成 一个 ( n + 1 ) 或 ( n + 2 ) 维 数组 , 它 本身 不 改变 数组 的 空间布局 , 但 再 通过 数据分布 , 就 可以 改变 数组 的 物理 线性 地址 空间 . 由于 在 CC - NUMA 系统 中 , 数据 的 分配 是 以 内存 页 为 单位 的 , 如果 对 数据 的 分布 间隔 小于 一页 , 那么 在 支持 页 复制 的 CC - NUMA 系统 中 就 会 产生 在 页 这 一级 的 伪 共享 或 远程 存取 . 同理 , 如果 对 数据 的 分布 间隔 小于 一个 cache 行 , 就 会 产生 cache 一级 的 伪 共享 . 因此 ， 可以 通过 扩维 变换 , 使 数据 的 分布 间隔 大于 一页 或 一个 cache 行 . 以 一维 数组 A ( N ) 为例 , 设 对于 不同 的 分布 策略 , 有 不同 的 扩维 变换 矩阵 ［ 8 ］ ： 
 
 其中 P 是 处理机 个数 ， b 等于 N / p ， k 是 block ( k ) 分布 的 块 大小 . 虽然 在 变换 矩阵 中 存在 整数 除 和 整数 取模 的 计算 , 但 在 实际 的 变换 中 可以 通过 各种 优化 技术 来 消除 或 尽量减少 这 两种 计算 . 
 3.2 . 3 扭曲 变换 
 　 　 一个 n 维 扭曲 变换 矩阵 实际上 是 用来 偏移 一个 n 维 数组 某 几维 的 数据 . 以 二维 数组 为例 , 如果 要 把 一个二维 数组 的 列 向量 左 偏移 , 它 的 扭曲 变换 矩阵 则 是 
 
 虽然 这样 产生 的 矩阵 会 有 很大 的 空间 被 浪费 掉 , 但 在 实际 问题 中要 用到 数组 扭曲 变换 的 , 一般 是 处理 带状 数组 ( banded   matrix ) 的 科学计算 . 而 带状 数组 经过 扭曲 变换 后 , 增加 的 数据量 只 占 整个 数组 的 一小部分 . 
 　 　 对于 稠密 数组 , 本文 采取 了 另 一种 扭曲 变换 矩阵 . 它 利用 循环 偏移 保证 了 变换 后 的 矩阵 不会 增加 内存 开销 , 本文 称之为 循环 扭曲 变换 矩阵 . 以 二维 数组 A ( N , M ) 为例 , 如果 要 把 一个二维 数组 的 列 向量 向 左 循环 偏移 , 它 的 代数 表示 为 A ′ ( i ′ , j ′ ) = A ( i , ( j - i )   mod   ( M ) + 1 ) , 它 的 扭曲 变换 矩阵 可 表示 为 
 
 其中 , 下标 向量 元素 值 表示 相应 维要 做 的 模 操作 . 
 　 　 在 实际 应用 中 , 通常 只 需 对 多维 数组 的 某 一维 进行 扭曲 变换 . 每 一维 的 扭曲 变换 类型 又 可 分为 4 种 , 以 二维 数组 为例 , 如果 对列 向量 进行 扭曲 , 则 分别 是 左 偏移 、 右 偏移 、 左 循环 偏移 、 右 循环 偏移 . 对于 n 维 数组 , 则 一般 有 4n 种 扭曲 变换 形式 . 下面 将 结合 例 1 来 具体 说明 如何 通过 数据 变换 来 改善 程序 的 空间 局部性 , 并 消除 cache 伪 共享 冲突 . 
 3.3 　 优化 策略 
 　 　 这里 我们 只 对 扭曲 变换 进行 分析 . 虽然 例 1 通过 计算 变换 使 重构 后 的 Ip ′ 之间 存取 的 数据 集 的 交为 空 ， 但 通过 对 Ip ′ 中 的 迭代 子 空间 的 存取 模式 进行 分析 就 会 发现 问题 . 通过 分析 可以 得到 经过 计算 重构 后 的 访问 模式 为 
 
 　 　 根据 式 ( 4 ) , 可 得到 间隔 向量 ： 
 ivT = T ′ * P ′ T = ( M + 1 , 1 , M + 1 ) T . 
 　 　 它 的 间隔 向量 iv 不 满足 定义 3.1 , 这样 可 导致 大量 的 伪 共享 冲突 和 远 地 内存 访问 . 通过 分析 我们 发现 , 采用 数据 变换 可以 很 好地解决 这个 问题 . 为了 不 增加 额外 的 数据 空间 , 本文 采用 左 循环 转移 扭曲 变换 , 令 扭曲 变换 矩阵 为 
 
 则 重构 后 的 数组 下标 ( i ′ , j ′ ) = ( i , j ) * S + s . 直接 用 S 来 对 iv 进行 代数 表示 比较 困难 , 但 通过 分析 重构 后 的 代数 下标 , 把 取模 操作 用 代数 表达式 和 条件 语句 可以 重新 表示 如下 ： 
 　 　 令 
 　 　 ( 1 )   ( i ′ , j ′ ) = ( i , j ) * S ′ + ( 0 , 1 ) , j ≥ i ; 
 　 　 ( 2 )   ( I ′ , j ′ ) = ( i , j ) * S ′ + ( 0 , M + 1 ) , j < i . 
 可以 发现 , 实际上 , 循环 转移 变换 的 变换 矩阵 在 各种 条件 下 都 可以 认为 是 相同 的 , 只是 在 不同 的 约束条件 下 , 偏移 向量 是 不 一样 的 . 这样 就 可以 用 S ′ 表示 变换 后 的 定位 向量 P ″ ： 
 
 而 间隔 向量 iv ′ 可 表示 为 
 
 可以 看出 , 变换 后 的 间隔 向量 满足 定义 3.1 , 所以 它 的 空间 局部性 是 优良 的 , 而且 不会 增加 内存 开销 . 在 实际 的 数据 变换 中 , 为了 节省 数据 变换 的 时间 , 通过 优化 , 我们 取消 了 模 运算 , 使 数组 变换 的 开销 更 小 . 
 　 　 通过 上述 分析 , 我们 可以 发现 , 如果 单独 使用 计算 变换 或 数据 变换 , 对 并行程序 的 优化 都 有 一定 的 局限性 . 通过 统一 的 代数 框架 , 我们 可以 将 两种 变换 技术 很 好 地 结合 起来 , 简化 并行程序 的 变换 步骤 , 降低 编译器 的 开销 , 进一步提高 并行程序 在 CC - NUMA 系统 中 的 执行 效率 . 
 4 　 试验 结果 
 　 　 由于 条件 限制 , 无法 在 CC - NUMA 并行 计算机系统 下 进行 测试 . 我们 的 测试 是 在 4 个 CPU 的 SGI   Power   Challenge 上 进行 的 , 它 的 主存 是 128MB , 每个 CPU 有 1MB 的 二级 cache . 由于 它 是 具有 一致 共享 主存 的 紧 耦合 并行 计算机系统 , 与 CC - NUMA 系统 一样 都 具有 统一 的 共享 地址 空间 , 并且 所有 的 内存 单元 都 能 被 cache . 因此 , 它 在 一定 程度 上 可以 体现 CC - NUMA 内存 子系统 的 特性 . 我们 使用 了 本机 提供 的 并行 编译器 , 进行 显式 并行 编译 . 同时 ， 为了 更好 地 对 各种 变换 进行 比较 , 没有 给 编译器 加 优化 开关 . 我们 对 4 个 程序 进行 了 测试 , 它们 分别 是 本文 中 的 例 1 , Banded   SYR2K , MatrixTranspose , Vpenta . BandedSYR2K 是 求解 带状 对称 矩阵 的 Rank - 2K   更新 ( update ) 的 计算 程序 ； MatrixTranspose 是 求解 二维 数组 转置 的 计算 程序 ； Vpenta 是 测试 程序包 NASA - kernel 中 的 一个 测试程序 . 测试 结果 见表 1 . 
 Table   1 　 Speedup   of   transformation 
 表 1 　 不同 变换 的 加速 比 
 
 Program ① Number   of 
 processors ②   Base 
 speedup ③ Base + Comp 
 transform   speedup ④ Base + Comp + Data 
 transform   speedup ⑤ 
 Example   1 ⑥   2 
 41.53 
 2.561 . 73 
 2.752 . 37 
 4.71 
 Banded   SYR2K2 
 41.59 
 2.802 . 51 
 4.816 . 41 
 13.83 
 Matrix   Transpose2 
 41.82 
 3.101 . 89 
 3.101 . 88 
 3.03 
 Vpenta   2 
 41.55 
 2.671 . 79 
 2.971 . 82 
 3.25 
 
 ① 程序 , ② 处理机 数 , ③ 一般 并行 加速 比 , ④ 一般 并行 ＋ 计算 变换 加速 比 , 
 ⑤ 一般 并行 ＋ 计算 变换 ＋ 数据 变换 加速 比 , ⑥ 例 1 . 
 　 　 例 1 的 数据 存取 模式 是从 二维 数组 的 左上角 到 右下角 沿 对角线 方向 进行 的 , 通过 计算 变换 , 可以 消除 程序 的 真 共享 冲突 ； 通过 数据 变换 可以 消除 假 共享 冲突 , 并 提高 数据 重用 性 . 因为 假 共享 冲突 在 例 1 中 占据 通信 开销 的 主要 部分 , 因此 得到 了 超 线性 加速 比 . BandedSYR2K 的 读数据 存取 模式 是从 二维 数组 的 右上角 到 左下角 沿 对角线 方向 进行 的 , 它 虽然 没有 cache 伪 共享 冲突 , 但 却 造成 大量 的 TLB 不 命中 , 大大 影响 了 程序 的 性能 . 通过 数据 变换 提高 了 数据 访问 的 局部性 , 减少 了 在 页 这 一层 的 开销 , 因此 也 得到 超 线性 加速 比 . 通过 计算 变换 和 数据 转置 变换 不能 解决 MatrixTranspose 中 两个 数组 相反 的 数据 线性 地址 , 但 通过 数据 扩维 变换 , 可以 减少 在 页 这 一级 的 伪 共享 冲突 , 同时 改善 了 cache 的 利用率 . 但 由于 我们 进行 试验 的 计算机 是 SMP 系统 , 故 不 存在 页 这 一级 的 伪 共享 冲突 , 所以 通过 数据 扩维 变换 只能 改善 cache 的 利用率 . 通过 计算 变换 或 数据 转置 变换 可以 使 Vpenta 程序 中 的 二维 数组 和 三维 数组 的 访问 模式 沿 数组 的 列 方向 进行 , 提高 了 数据 的 局部性 . 由于 它 具有 和 Matrix - transpose 一样 的 特性 , 因此 ， 通过 数据 的 扩维 变换 ， 可以 改善 cache 的 利用率 . 
 5 　 结   论 
 　 　 由于 CC - NUMA 具有 物理 分布 的 全局 共享 主存 , 并且 能 cache 所有 的 共享内存 单元 . 所以 , 减少 在 内存 页 一级 和 在 cache 一级 的 真假 共享 冲突 并 提高 它们 的 局部性 , 能够 有效 地 提高 并行程序 的 性能 . 本文 论述 了 如何 结合 计算 变换 和 数据 变换 来 减少 程序 的 通信 开销 的 问题 . 实践 表明 , 二者 结合 起来 能 得到 更好 的 效果 . 下 一步 , 我们 还 将 对 计算 变换 和 数据 变换 的 理论 基础 、 计算 变换 和 数据 变换 的 其他 类型 作 更 深入 的 研究 . 同时 ， 我们 准备 在 即将 完成 的 DSM 模拟器 上 进行 更 精确 的 实验 和 评测 . 
 陈渝 （ 国防科学技术大学 计算机 学院 　 长沙 　 410073 ） 　 
 李春江 （ 国防科学技术大学 计算机 学院 　 长沙 　 410073 ） 　 
 杨学军 （ 国防科学技术大学 计算机 学院 　 长沙 　 410073 ） 　 
 陈福接 （ 国防科学技术大学 计算机 学院 　 长沙 　 410073 ） 
 参考文献 
 1 ， Wolf   M   E ,   Lam   M .   A   data   locality   optimizing   algorithm .   In :   Proceedings   of   the   SIGPLAN ' 91   Conference   on   Programming   Language   Design   and   Implementation .   Toronto ,   Canada ,   ACM   SIGPLAN   Notice ,   1991 , 26 ( 6 ) : 30 ～ 44 
 2 ， Li   Wei .   Compiler   cache   optimizations   for   banded   matrix   problems .   Technical   Report ,   Department   of   Computer   Science ,   University   of   Rochester ,   1995 
 3 ， Bugnion   E ,   Anderson   J   M ,   Mowry   T   C   et   al .   Compiler - Directed   page   coloring   for   multi - processors .   In :   Proceedings   of   the   7th   International   Conference   on   Architecture   Support   for   Programming   Languages   and   Operating   Systems .   Boston ,   MA :   ACM   SIGPLAN   Notice ,   1996 , 31 ( 9 ) : 244 ～ 255 
 4 ， Chen   Yu ,   Yang   Xue － jun ,   Chen   Fu － jie .   Communication   optimization   for   NUMA   parallel   system .   In :   Li   Xiao － ming   ed .   Workshop   on   the   Frontier   of   Supercompiler   and   Parallel   Computing   Environment .   Beijing :   Beijing   University   Press ,   1998 .   18 ～ 29 
 ( 陈渝 , 杨学军 , 陈福接 . 基于 NUMA 结构 的 通讯 优化 技术 . 见 ： 李晓明 编 . 并行 编译 和 并行计算 环境 前沿技术 研讨会 . 北京 ： 北京大学出版社 ,   1998.18 ～ 29 ) 
 5 ， Jin   Guo － hua .   Program   parallelizing   techniques   and   tools   ［ Ph . D .   Thesis ］ .   Changsha :   National   University   of   Defense   Technology ,   1993 
 ( 金国 华 . 程序 并行 化 技术 及其 工具 的 研究 ［ 博士学位 论文 ］ . 长沙 : 国防科学技术大学 , 1993 ) 
 6 ， Shen   Z ,   Li   Z ,   Yew   P .   An   empirical   study   of   Fortran   programs   for   paralleling   compilers .   IEEE   Transactions   on   Parallel   and   Distributed   Systems ,   1990 , 1 ( 3 ) : 45 ～ 53 
 7 ， Cierniak   M ,   Li   Wei .   Unifying   data   and   control   transformations   for   distributed   shared - memory   machines .   In :   Proceedings   of   SIGPLAN ' 95   Conference   on   Programming   Language   Design   and   Implementation .   ACM   SIGPLAN   Notice ,   1995 , 30 ( 6 ) : 205 ～ 217 
 8 ， Chandra   R ,   Chen   D   K ,   Cox   R   et   al .   Data   distribution   support   on   distributed   shared   memory   multiprocessors .   In :   Proceedings   of   the   SIGPLAN ' 97   Conference   on   Programming   Language   Design   and   Implementation .   ACM   SIGPLAN   Notice , 1997 , 32 ( 5 ) : 334 ～ 345 
 
  
