软件 学报 
 JOURN   AL   OF   SOFTWARE 
 1999 年 　 第 10 卷 　 第 10 期 　 Vol.10 　 No.10 　 1999 
 
 
 
 基于 CCS 的 加密协议 分析   
 丁一强 
 
 摘要 　 加密协议 的 分析 需要 形式化 的 方法 和 工具 . 该文 定义 了 加密协议 描述语言 PEP   ( principals + environment = protocol ) , 并 说明 对于 一类 加密协议 , 其 PEP 描述 可以 转化 为 有 穷 的 基本 CCS 进程 , 由此 可以 在 基于 CCS 的 CWB ( concurrency   workbench ) 工具 中 分析 加密协议 的 性质 . 此 方法 的 优点 在于 隐式 地 刻画 攻击者 的 行为 , 试图 通过 模型 检查 ( model   checking ) 发现 协议 潜在 的 安全漏洞 , 找到 攻击 协议 的 途径 . 
 关键词 　 加密协议 , 协议 分析 , 形式化 方法 , CCS , 模型 检查 . 
 中图法 分类号 　 TP309 
 
 CCS - based   Cryptographic   Protocol   Analysis 
 DING   Yi - qiang 
 ( Laboratory   of   Computer   Science   Institute   of   Software   The   Chinese   Academy   of   Sciences   Beijing   100080 ) 
 Abstract   Formal   methods   and   tools   are   key   aspects   for   the   analysis   of   cryptographic   protocols .   In   this   paper ,   a   formal   language   PEP   ( principals + environment = protocol )   for   the   specification   of   cryptographic   protocols   is   proposed .   For   some   cryptographic   protocols ,   their   PEP   specifications   can   be   translated   into   finite   basic   CCS   processes ,   so   it   is   possible   to   analyze   the   security   properties   using   CCS - based   tools   such   as   CWB   ( concurrency   workbench ) .   The   advantage   of   the   mothod   proposed   in   this   paper   is   that   the   actions   of   the   attacker   can   be   implicitly   specified ,   and   if   the   potential   back   door   of   the   protocol   analyzed   exists ,   the   attacking   action   trace   can   be   explicitly   found   out   by   model   checker . 
 Key   words   Cryptographic   protocols ,   protocol   analysis ,   formal   methods ,   CCS ,   model   checking . 
 1 　 加密协议 及其 形式化 分析 
 　 　 网络 加密协议 的 目的 在于 运用 加密技术 保证 开放 网络 的 安全性 . 在 加密协议 中 , 加密技术 是 非常 重要 的 因素 , 但 另一方面 , 如果 协议 逻辑设计 不当 , 则 无异于 在 坚固 的 堡垒 中留 了 个 后门 , 攻击者 根本 不用 费事 去 解密 就 可以 达到 其 目的 . 为了 保证 加密协议 设计 的 正确性 , 避免 发生 潜在 的 错误 , 就 需要 形式化 的 工具 来 精确 地 描述 协议 的 行为 以及 协议 所 要 达到 的 目标 , 并 帮助 分析 此 协议 能否 达到 其 预定 目标 . 事实 已经 证明 , 形式化 方法 是 有效 的 . 
 　 　 本文 定义 加密协议 描述语言 PEP ( principals + environment = protocol ) , 说明 对于 一类 加密协议 , 其 PEP 描述 可以 转化 为 有 穷 的 基本 CCS [ 1 ] 进程 , 由此 可以 在 基于 CCS 的 CWB ( concurrency   workbench ) 工具 [ 2 ] 中 分析 加密协议 的 性质 . 本文 提出 的 方法 的 优点 在于 隐式 地 刻画 攻击者 的 行为 , 可以 通过 模型 检查 ( model   checking ) [ 3 ] 来 发现 协议 潜在 的 安全漏洞 , 从而 找到 攻击 协议 的 途径 . 
 　 　 本文 第 2 节 介绍 加密协议 的 诸 要素 . 第 3 节 定义 加密协议 描述语言 PEP 的 语法 和 语义 . 第 4 节 举例 分析 Needham - Schroeder 公开密钥 协议 . 第 5 节是 结论 . 
 2 　 加密协议 的 模型 
 2.1   消   息 
 　 　 主体 之间 发送 和 接收 的 消息 有 如下 几种 : 主体 标识 、 正文 、 随机 量 ( nonce ) 、 密钥 、 加密 消息 和 复合 消息 . 
 　 　 主体 标识 唯一 标明 了 主体 的 身份 , 在 开放 网络 环境 中 , 主体 标识 一般 是 公开 的 . 正文 是 一个 字串 . 随机 量 是 主体 随机 产生 的 , 其他 主体 无法 通过 猜测 得到 它 . 在 加密协议 中 , 消息 发送者 在 要 传送 的 消息 中 加入 随机 量 , 以后 , 当 他 接收 到 包含 此 随机 量 的 消息 时 , 就 可以 断定 此 消息 是 新近 生成 的 . 因此 , 正确 运用 随机 量 可以 防止 重 放 ( replay ) 攻击 . 
 　 　 当前 的 密钥 体制 分为 两种 . 一种 是 秘密 密钥 体制 , 也 称 对称 密钥 体制 , 其 加密 密钥 与 解密 密钥 是 同一个 密钥 , 除非 密钥 体制 被 攻破 , 用 一个 密钥 加密 的 消息 只有 用此 密钥 才能 解密 . 除了 用于 保证 信息 的 保密性 之外 , 主体 通过 辨认 加密 信息 , 还 可以 判断 此 信息 的 来源 , 因为 有 能力 用此 密钥 加密 信息 的 主体 是 确定 的 . 另 一种 是 公开密钥 体制 , 其 密钥 成 对 存在 , 一个 是 公开密钥 , 另 一个 是 私有 密钥 , 消息 发送者 可以 用 接收者 的 公开密钥 加密 消息 , 只有 拥有 对应 私有 密钥 的 接收者 才能 解密 此 消息 . 
 　 　 复合 消息 是 消息 的 复合 , 主体 很 容易 把 复合 消息 分解 为 其 组成部分 . 
 2.2   主   体 
 　 　 加密协议 的 主体 可以 是 人 、 机器 或 进程 . 主体 行为 包括 发送 和 接收 消息 以及 内部 运算 ( 包括 加密 、 解密 、 逻辑 判断 等 ) . 主体 之间 是 并发 运行 的 . 
 　 　 我们 假设 主体 有 区分 各类 消息 的 能力 , 并且 对 不 符合 协议 的 消息 拒绝 接收 . 例如 , 按照 协议 , 主体 A 应该 从 主体 B 接收 密钥 k , 那么 此时 主体 A 就 拒绝 接收 除 密钥 以外 的 其他 消息 . 另外 , 主体 也 能 辨别 同类 消息 的 不同 值 . 例如 , 主体 可以 辨别 接收 到 的 随机 量 是否是 该 主体 刚才 产生 的 . 
 2.3 　 环   境 
 　 　 在 开放 的 网络 环境 中 , 潜在 的 攻击者 可能 控制 整个 环境 , 对 网络 上 传送 的 消息 侦听 、 篡改 和 重播 . 在 本文 中 , 我们 可以 把 环境 看作 攻击者 的 知识库 . 一方面 , 随着 协议 的 运行 , 知识库 在 增长 ; 另一方面 , 协议 主体 的 行为 也 由 当前 的 环境 所 决定 . 
 2.4   加密协议 的 性质 
 　 　 各种 加密协议 要 达到 的 目的 不同 , 要 满足 的 性质 也 不同 . 本文 讨论 主体 认证 ( authentication ) 协议 , 但 本文 提出 的 方法 不仅仅 局限于 认证 协议 . 
 　 　 认证 协议 是 加密协议 中 很 重要 的 一类 . MIT 的 雅典娜 计划 提出 的 Kerberos 协议 就是 使用 共享 密钥 的 认证 协议 . 认证 协议 的 目的 是 用来 确认 协议 中 主体 的 身份 , 防止 攻击者 假冒 其他 主体 访问 资源 . 
 　 　 Woo 和 Lam 在 文献 [ 4 ] 中 提出 了 认证 协议 要 满足 的 两个 性质 : 对应性 ( correspondence ) 和 保密性 ( secrecy ) . 本文 分析 对应性 . 非 形式 地说 , 对应性 是 指 认证 协议 中 的 主体 的 动作 有着 对应 关系 . 例如 , 当 协议 应答 方 B 结束 协议 时 , 对应 的 协议 发起方 A 必须 已 开始 进行 此 协议 . 我们 用 
 T   authenticate   R 
 表示 动作 T 之前 一定 有 动作 R , 则 
 end _ response   authenticate   begin _ init 
 就 反映 了 上述 对应 关系 . 
 3 　 加密协议 描述语言 PEP 
 　 　 CCS 是 一种 用于 描述 和 分析 并发 和 通信 系统 的 形式 体系 [ 1 ] . 并发 和 通信 系统 通常 可 描述 为 CCS 进程 , 系统 的 性质 则 可用 模态逻辑 来 刻画 . 检查 一个 CCS 进程 是否 满足 其 模态 性质 称为 模型 检查 ( model   checking ) . 基本 CCS ( basic   CCS ) 有 很 成熟 的 理论 结果 以及 相应 的 工具 , 如 Concurrency   WorkBench [ 2 ] . 但用 它 来 描述 协议 中 常见 的 传值 进程 时 , 数据 域 的 无穷 会 导致 状态 迁移 图 的 无穷 分叉 , 工具 对于 这种 情况 就 无法 处理 了 . 
 　 　 我们 现在 考察 如何 基于 CCS 来 描述 和 分析 加密协议 . 
 　 　 根据 上 一节 的 协议 模型 , 协议 主体 之间 可以 传递 各种 消息 , 因此 协议 是 传值 进程 , 其 值域 是 整个 消息 空间 , 显然 是 无穷的 . 这 给 加密协议 的 分析 带来 了 困难 . 另外 , 对于 加密协议 的 环境 也 必须 给出 合适 的 刻画 . 我们 希望 隐式 地 刻画 环境 ( 攻击者 ) 的 行为 , 分析 协议 时 , 如果 协议 有 安全漏洞 , 我们 的 方法 应该 能 推导 出 攻击 的 路径 . 
 　 　 考察 加密协议 中 主体 和 环境 的 行为 可以 发现 , 协议 主体 对于 由 环境 传递 的 由 其他 主体 ( 可能 是 攻击者 ) 发送 的 消息 可 看作 是 有 选择地 接受 的 . 这样 , 对于 许多 加密协议 来说 ( 其中 包括 著名 的 Needham - Schroeder 公开密钥 协议 ) , 在 任何 状态 , 主体 可 做 的 动作 是 有限 的 , 这 一点 对于 用 CCS 来 分析 加密协议 带来 了 方便 . 但 另一方面 , 主体 的 行为 也 是 受 环境影响 的 . 随着 协议 的 运行 , 主体 之间 传送 的 消息 越 多 , 主体 受 攻击 的 可能性 就 越 大 . 因此 , 同样 的 协议 在 第 2 遍 运行 时 产生 的 状态 分叉 就 比 第 1 遍 运行 时要 多 . 
 　 　 协议 模型 的 上述 特点 , 标准 CCS 是 无法 直接 刻画 的 . 因此 , 本文 基于 CCS 定义 PEP 语言 , 以 达到 描述 和 分析 加密协议 的 目的 . 
 3.1   消息 空间 
 　 　 由 上节 所述 , 消息 包括 主体 标识 、 正文 、 随机 量 、 密钥 、 加密 消息 和 复合 消息 . 在 本文 中 , 我们 用 uval ( a ) 表示 主体 标识 值 , uvar ( x ) 表示 主体 标识 变量 ; 用 nval ( n ) 表示 随机 量值 , nvar ( x ) 表示 随机 量 变量 ; 用 kpub ( a ) , kpvt ( a ) , kshd ( a ) 分别 表示 公开密钥 、 私有 密钥 和 共享 密钥 ; 用 text ( t ) 表示 正文 ; 用 enc ( k , m ) 表示 加密 的 消息 ; 用 ( m1 , m2 ) 表示 消息 的 复合 . 
 　 　 为了 避免 状态 迁移 图 的 无穷 分叉 , 我们 限制 消息 空间 中 不 允许 出现 消息 变量 , 只 允许 出现 主体 标识 变量 和 随机 量 变量 . 如何 放宽 这个 限制 , 使得 本文 提出 的 方法 应用 更 广泛 是 我们 将来 的 努力 方向 . 但 即使 有 此 限制 , 我们 仍然 可以 用 它 来 刻画 一大 类 的 加密协议 . 
 3.2   消息 推理 引擎 
 　 　 环境 ( 攻击者 ) 的 消息 推理 可 由 如下 的 二元关系 ├ 来 刻画 . 
 　 　 R1 :   如果 m ∈ S , 则 S ├ m . 
 　 　 R2 :   如果 S ├ m , 并且 S ├ k , 则 S ├ enc ( k , m )   . 
 　 　 R3 :   如果 S ├ enc ( k , m ) , 且 S ├ k － , 则 S ├ m . 其中 , ( kpub ( a ) ) － = kpvt ( a ) , ( kshd ( a ) ) － = kshd ( a ) . 
 　 　 R4 :   如果 S ├ m1 , S ├ m2 , 则 S ├ ( m1 , m2 )   . 
 　 　 R5 :   如果 S ├ ( m1 , m2 ) , 则 S ├ m1 , 且 S ├ m2 . 
 3.3   加密协议 描述语言 PEP 
 3.31   动   作 
 　 　 协议 主体 能 做 的 动作 是 send ( m ) 和 recv ( m ) . 在 协议 运行 的 任何 状态 , 主体 只能 发送 封闭 的 消息 , 即 消息 内部 无 变量 出现 . 对于 接收 动作 , 它 可 接收 的 消息 是 一个 消息 模式 , 其中 可以 出现 变量 . 只有 满足 此 模式 的 消息 主体 才 接收 .   
 3.32   主体 + 环境 = 协议 
 　 　 PRINCIPALS   ∷ =   stop   　 　 　 　 　 　 　 　 　 　 ;   终止 
 　 　 　 　 　 　 　 　 　 |   ACTION .   PRINCIPALS 　 　   ; 　 前缀 
 　 　 　 　 　 　 　 　 　 |   PRINCIPALS   +   PRINCIPALS   ;   选择 
 　 　 　 　 　 　 　 　 　 |   PRINCIPALS   |   PRINCIPALS   ;   并发 
 　 　 ENVIRONMENT   ∷ =   { MESSAGE , … , MESSAGE }   ;   消息 集合 
 　 　 PROTOCOL   ∷ =   PRINCIPALS   in   ENVIRONMENT 
 　 　 在 PEP 中 , 主体 进程 的 描述 与 CCS 的 进程 非常 类似 , 只是 其 行为 与 环境 有着 相互作用 . 我们 定义 协议 的 操作 语义 : 
 
 
 　 　 
 　 
 其中 P [ / ] 是 指用 替换 P 中 的 得到 的 结果 . 
 　 　 根据 协议 的 操作 语义 , 我们 可以 由 协议 的 PEP 描述 得到 其 状态 迁移 图 , 然后 再 转化 为 基本 CCS 进程 描述 . 并且 , 由于 我们 限制 recv 动作 中 的 消息 只 含有 主体 标识 变量 和 随机 量 变量 , 因此 集合 { M ( ) | S ├ M ( ) } 是 有 穷 的 , 对应 的 CCS 转化 是 有 穷 分叉 的 . 另外 , 我们 也 不 允许 主体 进程 的 递归 定义 , 这样 , 协议 模型 的 CCS 转化 就是 有 穷 的 进程 . 
 3.4   对应性 
 　 　 我们 用 模态逻辑 公式 [ 3 ] : 
 T   authenticate   R = ν X . ( [ T ] false ∧ [ － R ] X ) 
 来 刻画 协议 主体 动作 的 对应性 , 意即 进程 开始 不能 做 T 动作 , 并且 对于 做 任何 除 R 以外 的 其他 动作 之后 得到 的 进程 , 也 不能 做 T 动作 , 而且 这 以后 对于 做 任何 除 R 以外 之后 得到 的 进程 , 也 不能 做 T 动作 , 等等 . 
 3.5   模型 检查 与 协议 分析 
 　 　 在 上 文中 , 我们 定义 了 加密协议 描述语言 PEP , 并且 说明 PEP 描述 可以 转化 为 基本 CCS 进程 . 另外 , 我们 用 模态逻辑 中 的 ν 公式 刻画 了 主体 动作 的 对应性 . 
 　 　 在 CCS 中 , 一个 进程 模型 是否 满足 模态 公式 , 可以 用 模型 检查 算法 来 检验 . 我们 因此 就 可以 验证 协议 是否 满足 对应性 了 . 目前 , 有 许多 工具 都 可以 作此 验证 , 并且 当 验证 失败 时 , 工具 往往 可以 给出 导致 性质 不 成立 的 动作 序列 , 对于 我们 分析 的 加密协议 来说 , 此 动作 序列 正是 对应 了 攻击者 进攻 的 路径 . 
 4 　 Needham - Schroeder 公开密钥 协议 的 分析 
 　 　 我们 现在 举例说明 如何 应用 本文 提出 的 方法 来 分析 加密协议 . 我们 的 协议 例子 是 简化 的 Needham - Schroeder 公开密钥 协议 [ 5 ] . 
 　 　 ( 1 ) A → B : 　 A , B , { Na , A } kb 
 　 　 ( 2 ) B → A : 　 B , A , { Na , Nb } ka 
 　 　 ( 3 ) A → B : 　 A , B , { Nb } kb 
 　 　 在 此 协议 中 , 首先 , 协议 发起方 A 选择 一个 随机 量 Na 与其 标识 一起 用 响应 方 B 的 公开密钥 kb 加密 后 发送给 B ; B 接收 到 消息 并 解密 后 , 就 得到 了 Na , 随之 也 生成 一个 随机 量 Nb , 并 与 Na 一起 用 A 的 公开密钥 ka 加密 后 发送给 A ; A 从 解密 后 得到 的 Na 试图 判断 与其 通信 的 正是 主体 B , 同样 地 , A 把 Nb 加密 后 返回 给 B ; B 解密 后 试图 判断 与其 通信 的 是 主体 A . 
 　 　 这里 , 协议 发起方 A 与 协议 响应 方 B 可以 与 多个 主体 通信 . 为 简单 起 见 , 我们 考虑 A 与 B , C 通信 的 情况 . 
 　 　 用 PEP 语言 , 此 协议 可 描述 如下 : 
 　 　 A1 =   send ( uval   a , uval   b , enc ( kpub   b , nval   na1 , uval   a ) ) . 
 　 　 　 　 recv ( uval   a , uval   b , enc ( kpub   a , nval   na1 , nvar   x ) ) . 
 　 　 　 　 send ( uval   a , uval   b , enc ( kpub   b , nvar   x ) ) . 
 　 　 　 　 stop 
 　 　 A2 =   send ( uval   a , uval   c , enc ( kpub   c , nval   na2 , uval   a ) ) . 
 　 　 　 　 recv ( uval   a , uval   c , enc ( kpub   a , nval   na2 , nvar   x ) ) . 
 　 　 　 　 send ( uval   a , uval   c , enc ( kpub   c , nvar   x ) ) . 
 　 　 　 　 stop 
 　 　 B   =   recv ( uval   b , uval   a , enc ( kpub   b , nvar   y , uval   a ) ) . 
 　 　 　 　 send ( uval   b , uval   a , enc ( kpub   a , nvar   y , nval   nb ) ) . 
 　 　 　 　 ecv ( uval   b , uval   a , enc ( kpub   b , nval   nb ) ) . 
 　 　 　 　 stop 
 这里 , 我们 用 A1 , A2 分别 表示 A 与 B , A 与 C 的 局部 通信协议 . 
 　 　 初始 环境 为 
 S0 = { uval   a , uval   b , uval   c , kpub   a , kpub   b , kpub   c , kpvt   c } . 
 我们 这里 假设 初始 环境 中 包含 主体 C 的 私有 密钥 kpvt   c , 这 对应 于 主体 C 作为 攻击者 或者 主体 C 的 私有 密钥 泄露 的 情况 . 
 　 　 协议 的 说明 可写 为 
 Spec = ( A1 + A2 ) | B   in   S0 . 
 　 　 主体 B 意想 的 通信 对象 是 A , 因此 当 它 做 最后 一个 动作 : 
 recv ( uval   b , uval   a , enc ( kpub   b , nval   nb ) ) 　 　 　 　 　 　 　   ( 1 ) 
 时 , 他 必须 确信 此 协议 正是 A 发起 的 , 即 A 做过 
 send ( uval   a , uval   b , enc ( kpub   b , nval   na1 , uval   a ) ) 　 　 　 　 　   ( 2 ) 
 动作 . 用 对应性 描述 表示 为 
 ( 1 )   authenticate   ( 2 ) . 
 　 　 我们 用 ML 语言 实现 了 PEP 到 CWB 的 CCS 语言 的 转换 程序 . 然后 在 CWB 中 , 模型 检查 协议 是否 满足 对应性 , 其 结果 是 否定 的 , 并且 很 容易 就 得到 了 攻击 的 途径 : 
 　 　 　 　 　 　 　 　 　 　 send ( uval   a , uval   c , enc ( kpub   c , nval   na2 , uval   a ) ) 
 　 　 　 　 　 　 　 　 　 　 recv ( uval   b , uval   a , enc ( kpub   b , nval   na2 , uval   a ) ) 
 　 　 　 　 　 　 　 　 　 　 send ( uval   b , uval   a , enc ( kpub   a , nval   na2 , nval   nb ) ) 
 　 　 　 　 　 　 　 　 　 　 recv ( uval   a , uval   c , enc ( kpub   a , nval   na2 , nval   nb ) ) 
 　 　 　 　 　 　 　 　 　 　 send ( uval   a , uval   c , enc ( kpub   c , nval   nb ) ) 
 　 　 　 　 　 　 　 　 　 　 recv ( uval   b , uval   a , enc ( kpub   b , nval   nb ) ) 
 5 　 结   论 
 　 　 我们 定义 了 加密协议 描述语言 PEP 用于 刻画 一类 不 含 消息 变量 的 加密协议 , 避免 了 状态 迁移 图 的 无穷 分叉 . 这样 , 协议 的 PEP 描述 就 可以 转化 为 有 穷 的 基本 CCS 进程 , 并且 可以 在 基于 CCS 的 CWB 工具 中 分析 加密协议 的 性质 . 本文 提出 的 方法 与 同类 工作 相比 , 其 优点 在于 隐式 地 刻画 攻击者 的 行为 , 可以 通过 模型 检查 发现 协议 潜在 的 安全漏洞 , 找到 攻击 协议 的 途径 . 
 注释 ： 本文 研究 得到 国家自然科学基金 和 国家教育部 留学 回国 人员 启动 基金 资助 。 
 作者简介 ： 丁一强 ： 1970 年生 , 博士 , 主要 研究 领域 为 形式化 方法 ， 网络安全 协议 分析 
 作者 单位 : 中国科学院 软件 研究所 计算机科学 开放 研究 实验室   北京   100080 
 参考文献 
 1 　 Milner   R .   Communication   and   Concurrency .   New   York :   Prentice   Hall ,   Inc . ,   1989 
 2 　 Bruns   G .   Distributed   Systems   Analysis   with   CCS .   London :   Prentice   Hall ,   Inc . ,   1997 
 3 　 Stirling   C .   Modal   and   temporal   logics   for   processes .   Technical   Report ,   ECS - LFCS - 
 　 　 92 - 221 ,   Department   of   Computer   Science ,   University   of   Edinburgh ,   1992 
 4 　 Woo   T   Y   C , Lam   S   S .   A   semantic   model   for   authentication   protocols .   In :   Proceedings 
 　 　 of   IEEE   Symposium   on   Research   in   Security   and   Privacy .   Oakland ,   CA : IEEE   Computer 
 　 　 Society   Press ,   1993 
 5 　 Lowe   G .   Breaking   and   fixing   the   Needham - Schroeder   public - key   protocol   using   FDR .   
 　 　 In :   Margaria   T ,   Steffen   B   eds .   Tools   and   Algorithms   for   the   Construction   and   
 　 　 Analysis   of   Systems ,   vol   1055 .   Lecture   Notes   in   Computer   Science .   
 　 　 Springer - Verlag ,   1996 .   147 ～ 166 
 收稿 日期 ； 1998 - 04 - 30 修稿 日期 ： 1998 - 10 - 22 
