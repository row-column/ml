软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 2 期   No.2   1999 
 
 
 
 工程 数据库 管理系统 的 体系结构 
 陈 　 俊   孙建伶   董金 祥 
 　 　 摘要 　 设计 工程 数据库 管理系统 的 体系结构 需要 在 两个 重大 问题 上 作出 选择 : ① 采用 何种 客户 / 服务器 结构 , 以便 在 客户机 和 服务器之间 寻求 一个 合适 的 功能 分配 点 ; ② 采用 何种 并发 控制策略 来 保证 客户端 缓冲 数据 的 一致性 . 首先 讨论 3 种 不同 的 客户 / 服务器 结构 （ 即 对象 服务器 、 页面 服务器 和 文件 服务器 ） , 比较 它们 之间 的 差别 和 各自 的 优缺点 ; 其次 讨论 了 实现 缓冲 一致性 的 各种 并发 控制策略 ; 最后 介绍 了 工程 数据库 管理系统 OSCAR 的 体系结构 . 
 　 　 关键词 　 工程 数据库 管理系统 , 体系结构 , 缓冲 一致性 , 并发 控制 . 
 　 　 中图法 分类号 　 TP391 
 The   Architectures   of   Engineering   Database   Management   Systems 
 CHEN   Jun   SUN   Jian - ling   DONG   Jin - xiang 
 　 　 Abstract 　   There   are   two   issues   involved   in   designing   the   architectures   of   engineering   database   management   systems .   The   first   is   which   kind   of   client / server   structure   is   to   be   employed   to   make   a   proper   distribution   of   functions   between   client   and   server .   And   the   second   is   which   kind   of   concurrency   control   algorithm   is   to   be   used   to   guarantee   the   consistency   of   the   caching   data   at   clients .   Three   client / server   architectures ( i . e .   Object - server ,   Page - server ,   File - server )   are   dicussed ,   the   differences   among   them   are   designated ,   the   advantages   and   disadvantages   of   each   are   pointed   out   in   this   paper .   The   various   concurrency   control   algorithms   for   cache   consistency   are   also   studied .   Finally ,   the   architecture   of   OSCAR ,   an   engineering   database   management   system ,   is   introduced . 
 　 　 Key   words 　 Engineering   database   management   system ,   architecture ,   cache   consistency ,   concurrency   control . 
 　 　 工程 数据库 的 应用环境 具有 与 商业 数据库 的 应用环境 所 不同 的 特点 . 商业 应用 的 特点 是 事务 短 、 事务 吞吐量 大 、 并发 度 要求 高 . 工程 应用 的 特点 是 事务长 、 客户 处理 的 数据 局部性 好 、 大部分 应用 在 客户端 完成 . 工程 数据库 为了 适应 工程 应用 的 特点 , 在 体系结构 上 就 不同于 商业 数据库 . 
 　 　 工程 数据库 一般 采用 客户 / 服务器 （ Client / Server ） 模式 , 但 和 商业 数据库 的 客户 / 服务器 模式 是 有 区别 的 . 
 　 　 客户 / 服务器 DBMS 可 分为 两大类 : 传送 查询 （ Query - shipping ） 与 传送数据 
 （ Data - shipping ） ［ 1 ］ . 两者 的 区别 在于 传送 查询 系统 中 客户 向 服务器 发 的 是 查询 请求 , 客户 与 服务器之间 传送 的 是 查询 请求 和 查询 结果 ; 传送数据 系统 中 客户 向 服务器 请求 的 是 具体 的 数据 , 而 不是 查询 结果 . 在 传统 的 关系数据库 中 , 传送 查询 的 体系结构 很 好 地 满足 了 商务 方面 的 应用 要求 . 作为 适应 大型 工程 应用环境 而 出现 的 面向对象 数据库 管理系统 （ OODBMS ） ［ 2 ］ , 在 很大 程度 上 不同于 关系数据库 . 几乎 所有 产品化 的 OODBMS （ 包括 O2 ［ 3 ］ , ObjectStore ［ 4 ］ , ORION ［ 5 ］ ） 采用 了 传送数据 的 体系结构 . 传送数据 的 体系结构 又 可 分为 3 类 ［ 6 ］ : 对象 服务器 （ Object - server ） 、 页面 服务器 （ Page - server ） 和 文件 服务器 （ File - server ） . 
 　 　 随着 高性能 工作站 的 日益 普及 和 网络 传输速率 的 提高 , 计算 工作量 从 服务器 到 客户机 的 下载 已 成为 未来 计算环境 发展 的 趋势 , 传送数据 的 3 种 体系结构 实际 就是 在 考虑 了 应用 要求 和 硬件 发展 的 基础 上 , 为了 在 客户机 和 服务器之间 寻求 一个 合适 的 功能 分配 点 而 形成 的 3 种 方案 . 
 　 　 本文 第 1 节 分别 介绍 客户 / 服务器 的 3 种 结构 , 讨论 它们 的 结构 、 功能 、 特点 、 性能 比较 . 第 2 节 讨论 在 客户 / 服务器 DBMS 中 存在 的 缓冲 一致性 （ Cache   Consistency ） 问题 及 相应 的 并发 控制 方法 . 第 3 节 介绍 我们 自主 开发 的 工程 数据库 管理系统 OSCAR 在 体系结构 上 的 特点 . 最后 是 总结 . 
 1   工程 数据库 的 3 种 客户 / 服务器 结构 
 1.1   对象 服务器 （ Object - server ） 
 　 　 （ 1 ）   对象 服务器 的 结构 与 基本功能   对象 服务器 的 结构 如图 1 所示 . 工作站 与 服务器之间 传送 的 是 对象 , 工作站 实际 把 服务器 看成 一个 对象 存储器 , 它 不 知道 任何 有关 对象 的 物理 存储 的 细节 . 工作站 与 服务器 重复 了 对象 管理 功能 . 
 
 图 1 
 　 　 工作站 端的 对象 缓冲区 并 不是 必须 的 , 但是 为了 性能 上 的 考虑 , 在 客户端 设置 缓冲区 是 可取 的 . 在 客户端 和 服务器 同时 存在 缓冲区 会 带来 缓冲 一致性 问题 . 后面 将 看到 , 同样 的 问题 在 页面 服务器 中 也 有 . 有关 缓冲 一致性 的 问题 将 在 第 2 节 集中 讨论 . 
 　 　 当 客户端 需要 一个 对象 时 , 它 先 查看 本地 的 对象 缓冲区 , 若 没 找到 , 就 向 服务器 发 一个 需要 该 对象 的 请求 . 服务器 收到 请求 后 , 或 直接 将 其 缓冲区 中 的 对象 返回 给 客户 , 或 在 尚未 缓冲 该 对象 的 情况 下先 从 磁盘 缓冲 该 对象 （ 服务器 也 可能 将 磁盘 上 的 对象 不 经 缓冲 直接 读出 返回 给 客户 , 这 取决于 服务器 采取 的 缓冲 策略 ） ［ 7 ］ . 
 　 　 （ 2 ）   对象 服务器 的 特点   对象 服务器 的 核心 特点 是 服务器端 也 有 对象 的 模式 信息 , 并且 它 提供 给 客户 的 也 纯粹 是 对象 服务 . 对象 服务器 具有 的 所有 实现 上 和 性能 上 的 细节 特征 全部 基于 这个 特点 . 
 　 　 服务器端 保留 有 对象 信息 意味着 方法 可以 在 服务器端 运行 , 在 一个 大 集合 中 查询 一小部分 对象 时 , 该 特点 意味着 查询方法 可先 在 服务器端 运行 , 这样 就 大大降低 了 网络 传输 的 负担 . 
 　 　 对象 服务器 的 并发 控制 实现 很 方便 . 因为 服务器 有 对象 的 模式 信息 , 所以 , 并发 控制 可以 是 完全 集中式 的 , 而且 对象 级锁 的 实现 也 很 自然 , 这 在 并发 度高 的 应用环境 中是 一个 相当 有 竞争力 的 特点 . 日志 的 实现 也 很 灵活 . 日志 的 类型 可以 是 物理 的 , 也 可以 是 逻辑 的 （ 在 后面 可以 看到 , 页面 服务器 和 文件 服务器 只能 采用 物理 日志 ） . 这种 体系结构 下 的 恢复 方案 实现 可以 有 多种 选择 : 工作站 可以 在 自己 的 缓冲区 中 操纵 数据 和 生成 日志 , 然后 把 两者 都 传送 给 服务器 ; 也 可以 只 生成 日志 , 修改 的 工作 由 服务器 来 做 . 
 　 　 客户 向 服务器 请求 的 数据 单位 是 对象 . 这 虽然 给 客户端 的 应用 带来 方便 , 但 也 有 不足之处 , 即 在 最坏 的 情况 下 , 客户 每 请求 一个 对象 都 要 进行 一次 网络 传输 , 这种 频繁 的 昂贵 操作 会 迅速 成为 整个 系统 的 瓶颈 . 
 　 　 对象 服务器 的 工程 数据库系统 在 服务器端 的 模块 相对 庞大 和 复杂 , 在 工作站 功能 日益 强大 的 今天 , 这是 一个 不 符合 体系结构 发展趋势 的 特点 . 
 　 　 （ 3 ）   对象 服务器 的 性能 分析   总体 上 看 , 对象 服务器 在 局部性 好 （ 或 较 好 ） 的 操作 时 性能 很 好 , 随机 访问 （ 特别 是 随机 更新 ） 性能 不错 , 但 局部性 差 的 操作 比 页面 服务器 和 文件 服务器 慢 很多 , 特别 在 顺序 访问 大量 小 对象 时 更是如此 . 
 　 　 对象 服务器 受聚 簇 的 影响 非常 微小 , 在 各种类型 的 访问 中 , 聚簇率 （ Clustering   Factor :   是 一个 百分数 . 若聚 簇率 是 f , 则 对象 A 引用 的 所有 对象 中 , 有 f%   的 对象 聚簇 在 对象 A 的 附近 ） 的 大幅度提高 几乎 不会 带来 任何 性能 上 的 改进 . 原因 是 当聚 簇 针对 服务器 的 磁盘 尽可能 紧凑 地 存储 相关 对象 的 同时 , 工作站 与 服务器之间 的 数据传输 机制 却 没有 利用 这个 有利 的 特性 . 实际上 , 当 对象 在 服务器端 从 Page   Buffer 转到 Object   Buffer 时 , 就 已 失去 了 这 一聚 簇 信息 . 工作站 的 缓冲区 大小 对 对象 服务器 的 顺序 操作 没有 影响 , 而 对 随机 读 操作 性能 的 提高 会 有 一个 阈值 . 缓冲区 大小 在 该 阈值 以下 时 , 缓冲区 的 增大 带来 较 明显 的 性能 改进 , 但 大于 该 阈值 后 性能 不再 提高 . 原因 是 低于 阈值 时 影响 性能 的 瓶颈 是 缓冲区 的 替换 动作 , 高于 阈值 时 , 瓶颈 成为 每次 请求 对象 时 的 RPC 调用 . 在 随机 修改 时 , 当聚 簇率 较 低 、 工作站 缓冲区 较 小时 , 对象 服务器 比 页面 服务器 和 文件 服务器 要 好得多 , 这 是因为 它 没有 写 任何 “ 多余 ” 的 数据 . 和 随机 读 相同 , 在 客户端 的 缓冲区 大到 一定 程度 后 性能 不再 改进 , 所以 , 随着 聚簇率 的 提高 和 缓冲区 的 增大 , 后 两种 体系结构 （ 特别 是 页面 服务器 ） 的 性能 超过 了 对象 服务器 . 
 　 　 把 所有 的 操作 综合 起来 , 对象 服务器 确实 随 工作站 缓冲区 的 增大 而 性能 有 平缓 的 改进 , 但 受 其 影响 程度 不如 后 两者 . 在 聚 簇率 和 客户端 缓冲区 这 两个 因素 好 到 一定 程度 后 , 它 的 性能 落 在 了 后面 . 
 1.2   页面 服务器 （ Page - server ） 
 　 　 （ 1 ）   页面 服务器 的 结构 和 基本功能   页面 服务器 的 结构 如图 2 所示 . 可以 看到 , 在 页面 服务器 中 , 服务器 没有 对象 管理 模块 , 这使 页面 服务器 和 对象 服务器 有 某种 “ 本质 ” 上 的 区别 , 因为 服务器 不再 知道 任何 有关 对象 的 逻辑 模式 信息 . 在 这种 情况 下 , 服务器 实际上 充当 了 一个 有 并发 控制 和 恢复 功能 的 虚拟 页面 存储器 , 工作站 和 服务器之间 传输 的 也 不再 是 对象 , 而是 页面 ［ 8 ］ . 
 
 图 2 
 　 　 页面 服务器 中 服务器 基本上 由 一个 I / O 层 、 一个 大 的 页面 缓冲器 以及 上层 的 并发 控制 和 恢复 模块 构成 . 当 工作站 向 服务器 请求 一页 时 , 服务器 先给 页面 上 合适 的 锁 , 然后 从 缓冲区 将 页面 传回 （ 若 页面 未 被 缓冲 , 则 先要 从 磁盘 读入 ） , 工作站 的 对象 缓冲区 也 可以 不设 , 依 设计 上 的 需求 而定 . 
 　 　 （ 2 ）   页面 服务器 的 特点   在 页面 服务器 中 , DBMS 中 的 相当 一部分 工作 移到 了 工作站 上 , 服务器 只 管理 页面 缓冲 和 并发 控制 、 恢复 , 这使 工作站 的 独立性 大大 增强 . 同时 , 服务器 负担 的 下降 意味着 一个 服务器 可以 带 许多 客户 节点 , 虽然 即使 只 请求 一个 几十 字节 的 小 对象 也 要 传送 一页 , 但 实际上 传 4K 字节 比传 几十个 字节 多花 不了 多少 时间 , 而且 传 过去 的 “ 多余 ” 的 数据 恰恰 是 聚 簇起 巨大作用 的 前提 . 
 　 　 在 这些 诱人 的 特性 之外 , 页面 服务器 也 为 其 服务器端 设计 上 的 简单 性 付出 了 代价 . 一个 页面 服务器 的 设计 很大 程度 上 就是 如何 利用 其他 的 补偿 手段 来 降低 这 类 代价 的 过程 . 
 　 　 因为 方法 不 可能 在 服务器端 运行 , 所以 一次 只 查询 几个 小 对象 的 操作 有 可能 需要 一大群 页面 , 引入 索引 可以 减少 这 类 开销 . 另外 , 由于 服务器 没有 对象 的 模式 信息 , 所以 , 对象 级锁 很 难 实现 . 因而 , 大多数 页面 服务器 对 数据 采用 粒度 为页 的 严格 二 阶段 锁 协议 , 放弃 了 对象 级锁 . 在 锁 的 粒度 为页 的 情况 下 , 放 有 全局 索引 的 页面 有 可能 成为 系统 性能 的 瓶颈 , 如何 用 其他 手段 来 提高 索引 页 的 并发 度 是 系统 设计 上 必须 考虑 的 一个 重点 . 
 　 　 恢复 问题 需 重新考虑 ［ 1 ］ . 在 页面 服务器 中 , 日志 由 客户端 生成 , 而 由 客户端 传回 的 日志 页 和 脏 数据 页 之间 的 对应 关系 原则上 是 无法 精确 跟踪 的 （ 这个 问题 在 对象 服务器 中是 不 存在 的 ） , 但 这个 问题 并 不如 想象 的 那么 难 , 使用 某种 算法 能 保证 类似 保守 先写 日志 的 协议 . 还有 , 由于 服务器 不 知道 对象 的 模式 , 而 恢复 又 要 在 服务器端 执行 , 所以 , 逻辑 日志 在 这种 体系结构 中是 不 可能 实现 的 . 3 
 　 　 另外 , 注意 到 模式 信息 在 客户端 解释 并 不 意味着 数据库 容易 被 破坏 , 因为 客户端 的 应用程序 对 数据库 的 操作界面 是 由 客户端 的 系统 模块 向上 提供 的 , 并 不能 直接存取 数据库 的 模式 信息 . 
 　 　 （ 3 ）   页面 服务器 的 性能 分析   在 顺序 访问 时 , 若 页面 间 的 数据 （ 对象 ） 没有 交叉 引用 , 其 性能 非常 好 , 接近 单用户 的 DBMS ; 若有 交叉 引用 , 则 性能 有所 下降 . 
 　 　 随机 读时 , 在 聚 簇率 很 低时 , 页面 服务器 很 慢 , 逊于 其他 二者 , 原因 是 它 频繁 地 使用 代价 高 的 RPC 操作 （ 它 比 文件 服务器 慢 是因为 NFS 读比 RPC 读要 快 ） . 但是 , 随着 聚簇率 的 提高 , 页面 服务器 性能 提高 很快 , 迅速 超过 了 对象 服务器 . 这 和 页面 服务器 更 多 依赖于 页面 内 数据 的 局部性 有关 . 
 　 　 随机 更新 时 , 页面 服务器 的 性能 虽然 随聚 簇率 的 上升 而 提高 , 但 总体 上 仍 不如 对象 服务器 （ 但 比 文件 服务器 快 , 因为 NFS 写 是 很 慢 的 ） , 原因 如前所述 , 即 对象 服务器 不写 “ 多余 ” 的 数据 . 
 　 　 页面 服务器 对 聚簇 范围 （ Cluster   Region : 是 一个 页面 数 . 若聚 簇 范围 是 r , 且 对象 A 引用 了 对象 B , 对象 B 存储 在 对象 A 周围 的 r 个 页面 范围 内 , 则 称 对象 B 聚簇 在 对象 A 的 附近 ） 和 客户端 的 缓冲区 大小 非常 敏感 , 页面 服务器 的 结构 表明 其 性能 很大 程度 上 依赖于 数据 的 局部性 . 所以 , 上述 两个 因素 在 页面 服务器 中是 起 关键作用 的 , 适度 改进 聚簇 算法 和 加大 客户端 缓冲区 可以 为 页面 服务器 带来 性能 上 的 飞跃 . 
 1.3   文件 服务器 （ File - server ） 
 　 　 （ 1 ）   文件 服务器 的 结构 与 基本功能   文件 服务器 的 结构 如图 3 所示 . 文件 服务器 实际上 是 页面 服务器 的 一种 变型 , 工作站 使用 某种 远程 文件 服务 （ 如 NFS ） 来 直接 读写 服务器 的 一页 , 所以 , 文件 服务器 的 服务器端 模块 变得 异常 简单 , 甚至 比 页面 服务器 还 简单 得 多 , 在 NFS 包办 一切 物理 操作 的 前提 下 , 文件 服务器 略去 了 缓冲 管理 和 物理 I / O 层 . 
 
 图 3 
 　 　 （ 2 ）   文件 服务器 的 特点   文件 服务器 因为 其 结构 上 与 页面 服务器 具有 相似性 , 所以 它 有 页面 服务器 的 所有 特点 . 另外 , 它 的 独特 在于 使用 了 某种 绕过 DBMS 的 数据 读 / 写 手段 . 这种 “ 绕过 ” 的 特性 使 文件 服务器 除了 具有 页面 服务器 的 优缺点 外 又 有 自己 的 长处 和 短处 . 
 　 　 由于 文件 服务器 使用 了 直接 对 操作系统 内核 操作 的 NFS 服务 , 它 完全避免 了 用户 态 进程 间 的 切换 , 这 使得 NFS 读 非常 快 ; 但是 , 基于 UDP 的 NFS 写 是 非常 慢 的 , 所以 页面 的 写 操作 很 容易 成为 系统 的 瓶颈 . 
 　 　 （ 3 ）   文件 服务器 的 性能 分析   文件 服务器 的 性能 曲线 在 所有 情况 下 都 类似 于 页面 服务器 . 在 不 需要 写 的 操作 中 , 其 性能比 页面 服务器 略 好 , 写 的 操作 比 页面 服务器 差 许多 , 所以 其 总体 性能 逊于 页面 服务器 . 
 　 　 同 页面 服务器 一样 , 文件 服务器 对聚 簇率 、 聚簇 范围 、 客户端 缓冲区 大小 很 敏感 . 在 这 三者 条件 不好 的 情况 下 , 文件 服务器 比 页面 服务器 慢 , 但 随着 这 3 个 条件 的 改善 , 其 性能 逐渐 接近 页面 服务器 , 直到 几乎 一样 为止 . 
 1.4   工程 数据库 的 3 种 客户 / 服务器 结构 比较 
 　 　 页面 服务器 和 文件 服务器 的 主要 优点 是 服务器端 模块 设计 简单 , 大部分 复杂 工作 放到 工作站 上去 做 , 符合 当前 硬件 的 发展趋势 . 其 主要 缺点 是 粒度 小 的 多级 锁 难以实现 , 关于 索引 页 的 非 二 阶段 锁 也 是 一个 难点 ; 对象 服务器 需要 更 复杂 的 服务器 模块 设计 , 虽然 其 数据 传送 效率 不高 , 可能 请求 一个 对象 就要 调用 一次 RPC , 但 它 比 前者 优越 的 地方 在于 粒度 小 的 多级 锁 实现 简单 , 而且 服务器端 可以 执行 方法 . 
 　 　 页面 服务器 比 对象 服务器 还 需要 多 考虑 的 一点 是 安全性 问题 . 首先 , 页面 服务器 通过 网络 向 客户 提供 的 是 页面 服务 , 所以 , 实际上 服务器 对 客户端 的 页面 存取 是 无法 进行 权限 控制 的 , 但 从 另 一个 角度看 , 客户端 和 服务器端 的 模块 共同 组成 了 一个 系统 , 客户端 通过 网络 的 页面 存取 是 系统 内部 的 操作 , 数据库 的 正常 操作 应该 建立 在 客户端 模块 正确 操作 的 基础 上 ; 其次 , 对于 外来 的 网络 上 的 破坏 （ 或 窃取 ） 操作 , 系统 本身 没有 办法 防止 , 因此 , 页面 服务器 的 环境 中 对 网络通信 模块 的 安全性 要求 就 提高 了 . 
 　 　 总之 , 3 种 体系结构 中 没有 绝对 的 优胜者 , 页面 服务器 在 客户端 缓冲区 足够 大 , 聚簇 效率高 的 时候 是 一个 很 好 的 选择 ; 对象 服务器 在 局部性 差 的 操作 时 很慢 , 但 其 性能 在 客户端 缓冲区 不大 的 情况 下比 页面 服务器 要 好 ; 文件 服务器 若 纯粹 依赖于 NFS 进行 读写操作 , NFS 写会 成为 整个 系统 的 瓶颈 . 
 2   客户 / 服务器 环境 下 的 缓冲 一致性 问题 及 并发 控制 方法 
 　 　 客户 / 服务器 的 DBMS 为了 提高 数据 存取 效率 , 一般 在 客户端 设置 一定 大小 的 缓冲区 . 在 页面 服务器 和 对象 服务器 环境 中 , 同时 在 客户端 与 服务器端 缓冲 数据 会 带来 数据 一致性 问题 . 这样 , 就 需要 采用 某种 并发 控制 方法 来 保证 缓冲 数据 的 一致性 . 
 2.1   保证 缓冲 一致性 的 并发 控制 方法 
 　 　 Basic   2PL ［ 9 ］ （ 以下 简称 B2PL ） 作为 一种 经典 的 并发 控制 方法 在 传统 的 中心 数据库 中 广为 采用 . 在 新 的 传送数据 的 客户 / 服务器 环境 中 , 这种 算法 经过 改进 , 利用 了 事务 间 的 局部性 （ Inter - transaction   Locality , 即 相邻 事务 访问 的 对象 往往 有 很大 一部分 是 相同 的 ） 之后 , 称为 Cached   2PL ［ 10 ］ （ 以下 简称 C2PL ） . C2PL 的 一种 扩充 是 Callback   2PL （ 以下 简称 CB2PL ） , 它 实际 是 在 C2PL 的 基础 上 加入 了 Callback   Locking ［ 11 ］ 的 思想 . 另外 , 2PL 的 变型 还有 乐观 的 二 阶段 锁 Optimistic   2PL ［ 10 ］ （ 以下 简称 O2PL ） . 它们 的 特点 如下 . 
 　 　 B2PL :   传统 的 2PL , 事务 分为 上锁 和 释放 锁 两个 阶段 . 上锁 阶段 不能 释放 锁 , 释放 锁 阶段 不能 上锁 ［ 9 ］ . 在 客户 / 服务器 环境 中 的 B2PL 实现 中 , 在 上锁 阶段 , 客户端 向 服务器 发 上锁 请求 并 下载 页面 , 在 释放 锁 阶段 , 客户端 回送 页面 并 释放 锁 . 
 　 　 C2PL :   同 B2PL 所 不同 的 是 , 客户端 的 事务 结束 后 , 其 页面 仍 留在 客户端 的 缓冲区 中 , 后来 的 事务 可以 存取 这些 缓冲 的 页面 , 但是 要 先 向 服务器 发 上锁 请求 . 服务器 判断 客户端 的 页面 是否 “ 过时 ” , 若 “ 过时 ” , 则 需要 向 客户 传送 更新 的 页面 , 否则 , 传输 页面 的 工作 可以 省去 . 
 　 　 CB2PL :   客户端 的 事务 结束 后 不但 保留 其 页面 , 而且 保留 页面 的 锁 （ 为了 避免 过多 的 锁 冲突 , 一般 只 保留 读锁 ） , 当 客户 应用 需要 更强 的 锁 或 新 的 锁 时 才 向 服务器 发 上锁 请求 , 服务器 广播 要求 其他 的 客户端 归还 相应 的 锁 , 所有 的 归还 动作 结束 后 服务器 才 允许 请求者 上锁 成功 . 
 　 　 O2PL :   客户端 的 事务 可以 只上 局部 锁来 更新 其 缓冲区 中 的 页面 , 但 进入 提交 阶段 前 不 允许 将脏 页面 传回 服务器 . 根据 开始 提交 时 采取 的 不同 动作 又 可 将 O2PL 分为 : O2PL - I （ 一旦 开始 提交 , 服务器 将 所有 持有 更新 页面 的 客户端 的 页面 置 Invalidate 标志 ） ; O2PL - P （ 提交 时 直接 将 所有 客户端 的 相应 旧 页面 一次 全部 更新 ） ; O2PL - D （ 根据 不同 的 环境 负担 , 动态 使用 O2PL - 0I 或 O2PL - P ） . 
 2.2   各种 并发 控制 方法 的 比较 
 　 　 B2PL 由于 没有 利用 事务 间 的 局部性 , 因而 不能 很 好 地 胜任 客户 / 服务器 的 计算环境 . 在 客户 数少 的 情况 下 , B2PL 无 优势 可言 , 而且 由于 其 频繁 的 I / O 操作 , 它 的 事务 吞吐量 随着 客户 数 的 增多 很快 达到 了 最大值 并 回落 . 
 　 　 剩下 的 几种 方法 都 利用 了 事务 间 的 局部性 , 所以 比 B2PL 好 , 这 几种 方法 其实 可 大致 分为 两大类 : 悲观 的 和 乐观 的 . C2PL 和 CB2PL 属于 前者 , 而 O2PL 的 几种 变型 属于 乐观 的 算法 . 
 　 　 悲观 的 并发 控制 与 乐观 的 并发 控制 有 不同 的 行为 , 主要 就是 在 冲突 不多 的 情况 下 , 乐观 方法 比 悲观 方法 好得多 , 但 事务 和 冲突 一旦 频繁 , 乐观 方法 性能 的 下降 是 非常 快 的 . 这里 讨论 的 C2PL , CB2PL 与 各类 O2PL 的 区别 也 有 这个 特点 . 
 　 　 在 参考文献 ［ 10 ］ 中 , 作者 测试 的 结果 是 在 大多数 情况 下 O2PL 表现 比 C2PL 好 . 但是 , 应 注意 到 , 在 客户端 缓冲 25% 的 数据库 页面 在 大型 应用 中是 不可思议 的 , 而且 作者 的 测试 最大 客户 数 只有 25 个 , 从 性能 曲线 的 走向 看 , O2PL 的 性能 将 继续 下降 , 而 C2PL 则 稳定 在 一个 适中 的 值 . 所以 , 这种 测试 结果 的 前提 是 硬件 环境 和 应用环境 足够 宽松 . 对于 建立 一个 实用 的 DBMS , 纯粹 乐观 的 并发 控制 是 不够 的 . 
 　 　 虽然 O2PL 的 性能 在 负荷 重 的 环境 中 下降 很快 , 而且 也 可以 说 C2PL 的 性能 稳定 得 多 , 但 事实 是 , 一直 在 达到 很重 的 负荷 以前 , O2PL 确实 比   C2PL 性能 好得多 （ 这 在 局部性 很强 的 CAD 应用环境 中 尤其 明显 ） . 所以 , 如何 向 C2PL 加入 一些 “ 乐观 ” 的 特性 , 使 之 在 负荷 不 重 、 局部性 好 的 环境 中 性能 有所提高 是 值得 思考 的 . CB2PL 是 其中 的 一个 算法 . 参考文献 ［ 10 ］ 没有 测试 CB2PL , 在 参考文献 ［ 11 ］ 中 比较 了 CB2PL 与 C2PL , 结果表明 , CB2PL 的 这种 扩充 是 成功 的 . 
 　 　 在 现实 的 系统 中 , 不 可能 一种 并发 控制 在 所有 应用环境 都 有 出色 表现 . C2PL 和 CB2PL 是 较 折衷 和 稳定 的 方案 . 在 非常 特定 的 应用环境 中 , 如高 配置 的 小组 CAD 设计 环境 、 O2PL 及其 变型 是 相当 有 竞争力 的 . 
 3   OSCAR 的 体系结构 
 　 　 OSCAR 是 我们 自主 开发 的 面向对象 的 工程 数据库 管理系统 , 新 版本 的 总体设计 目标 是 简单 性 、 层次性 和 鲁棒性 . 我们 认为 系统 的 总体 性能 应该 由 体系结构 来 保证 , 而 在 系统 的 实现 上 不必 拘泥于 某些 性能 改进 有限 而 实现 代价 高昂 的 方案 . 
 　 　 在 对 各种 体系结构 经过 广泛 深入 的 了解 和 比较 之后 , 我们 决定 采用 页面 服务器 的 体系结构 . 这种 方案 的 主要 优点 是 简化 了 服务器端 模块 , 支持 更 多 的 客户 数 , 而且 其 性能 上 的 优越性 在 硬件 不断 发展 的 情况 下会 更加 显著 地 体现 出来 . 
 　 　 OSCAR 在 服务器端 的 模块 由 底向上 分为 4 层 : I / O 层 封装 了 所有 需要 的 物理 文件 操作 ; 物理层 屏蔽 了 物理 文件 的 概念 ; 缓冲 层 屏蔽 了 内存 和 外存 的 区别 ; 事务 层 提供 了 基于 页面 的 并发 控制 和 恢复 功能 , 通过 网络 向 客户端 提供 页面 级 的 数据库 访问 服务 . 其中 事务 层 是 设计 的 重点 . 
 　 　 我们 使用 了 CB2PL 来 保证 缓冲 一致性 . 我们 认为 , CB2PL 比 B2PL 增加 的 实现 上 的 复杂度 是 有限 的 （ 比起 在 页面 服务器 上 实现 对象 级锁 要 简单 得 多 ） , 但 性能 的 提高 是 显著 的 . 
 　 　 OSCAR 的 并发 控制 粒度 是 页面 . 虽然 页面 锁 使 并发 度 有所 下降 , 但 在 这里 换取 实现 上 的 简单 性是 值得 的 . 因为 在 页面 服务器 上 实现 对象 级锁 不仅 会 大大增加 并发 控制 模块 实现 上 的 复杂性 , 而且 恢复 模块 也 会 因此 更加 庞大 . 所以 , 我们 在 降低 锁 粒度 之外 还 寻求 提高 并发 度 的 其他 手段 , 比如 对 索引 页 采取 多 版本 的 二 阶段 锁 协议 （ MV2PL ） 来 提高 索引 页 的 读写 并行 能力 . 
 　 　 数据库 恢复 采用 了 ARIAS ［ 12 ］ 策略 , 这是 一种 比较 成熟 的 恢复 策略 . OSCAR 的 恢复 策略 扩充 了 经典 的 ARIAS , 使 之 适用 于 页面 服务器 的 体系结构 . 我们 在 一些 关键环节 对 ARIAS 进行 了 修改 , 并 论证 了 扩充 方案 的 正确性 . 其 主要 的 修改 在于 分配 LSN 和 客户 / 服务器 环境 下 WAL （ 先写 日志 协议 ） 的 实现 . 日志 方法 采用 基于 页面 的 物理 日志 , 这 在 服务器端 没有 模式 信息 而 恢复 又 在 服务器端 执行 的 页面 服务器 体系结构 中是 必需 的 . OSCAR 的 恢复 策略 保留 了 ARIAS 原有 的 一些 像 模糊 检查点 （ 做 检查点 时 只 记脏 页表 ） 等 特性 , 继承 了 ARIAS 在 性能 上 的 优越性 . 
 4   结   论 
 　 　 本文 论述 了 设计 工程 数据库 管理系统 的 体系结构 需要 考虑 的 两个 重大 问题 : 客户 / 服务器 结构 和 并发 控制策略 . 介绍 和 分析 比较 了 3 种 客户 / 服务器 体系结构 及 传送数据 客户 / 服务器 环境 中 的 缓冲 一致性 问题 , 也 介绍 了 我们 自主 开发 的 工程 数据库 管理系统 OSCAR 所 采取 的 方案 . 
 本文 研究 得到 国家自然科学基金 和 浙江省 自然科学 基金 资助 . 
 作者 介绍 ： 陈俊 , 1974 年生 , 硕士生 , 主要 研究 领域 为 工程 数据库 . 
 　 　 　 　 　 孙建伶 , 1964 年生 , 博士 , 副教授 , 主要 研究 领域 为 数据库 . 
 　 　 　 　 　 董金 祥 , 1945 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 工程 数据库 , CAD . 
 本文 通讯联系 人 : 孙建伶 ， 杭州   310027 , 浙江大学 计算机科学 与 工程系 
 作者 单位 ： 陈 　 俊   孙建伶   董金 祥 　 浙江大学 计算机科学 与 工程系   杭州   310027 　 浙江大学 CAD   &   CG 国家 重点 实验室   杭州   310027 
 参考文献 
 　 ［ 1 ］ Franklin   M   et   al .   Crash   recovery   in   client / server   EXODUS .   In :   Stonebraker   M   ed .   Proceedings   of   the   ACM   SIGMOD   International   Conference ' 92   on   Management   of   Data .   San   Diego :   ACM   Press ,   1992 .   165 ～ 174 
 　 ［ 2 ］ Kemper   A ,   Moerkotte   G .   Object - oriented   Database   Management :   Applications   in   Engineering   and   Computer   Science .   New   Jersey :   Prentice - Hall ,   1994 
 　 ［ 3 ］ Deux   O   et   al .   The   story   of   O2 .   IEEE   Transactions   on   Knowledge   and   Data   Engineering ,   1990 , 2 ( 1 ) : 91 ～ 108 
 　 ［ 4 ]   Object   Design   Inc ..   ObjectStore   Tutorial   Release   1.1   for   UNIX - Based   Systems .   Burli   gton :   Object   Design   Inc . ,   1991 
 　 ［ 5 ］ Kim   W   et   al .   The   architecture   of   the   ORION   next - generation   database   system .   IEEE   Transactions   on   Knowledge   and   Data   Engineering ,   1990 , 2 ( 1 ) : 109 ～ 124 
 　 ［ 6 ］ Dewitt   D   et   al .   Three   alternative   workstation - server   architectures .   In :   Bancilhon   F   ed .   Building   an   Object - oriented   Database   System — — The   Story   of   O2 .   San   Mateo :   Morgan   Kaufmann   Publishers ,   1992 .   411 ～ 446 
 　 ［ 7 ］ Effelsberg   W ,   Haerder   T .   Principle   of   database   buffer   management .   ACM   Transactions   on   Database   Systems ,   1984 , 9 ( 4 ) : 560 ～ 595 
 　 ［ 8 ］ Chou   H   T ,   Dewitt   D   J   et   al .   Design   and   implementation   of   the   wisconsin   storage   system .   Software :   Practice   and   Experience ,   1985 , 15 ( 10 ) : 943 ～ 962 
 　 ［ 9 ］ Bernstein   P ,   Hadzilacos   V ,   Goodman   N .   Concurrency   Control   and   Recovery   in   Database   Systems .   Menlo   Park :   Addison - Wesley ,   1987 
 　 ［ 10 ］ Carey   M ,   Franklin   M ,   Livney   M .   Data   caching   tradeoffs   in   client - server   DBMS   architecture .   In :   Proceedings   of   the   ACM   SIGMOD   International   Conference ' 91   on   Management   of   Data .   Denver :   ACM   Press ,   1991 .   357 ～ 366 
 　 ［ 11 ］ Wang   Y ,   Rowe   L .   Cache   consistency   and   concurrency   control   in   a   client / server   DBMS   architecture .   In :   Clifford   J   ed .   Proceedings   of   the   ACM   SIGMOD   International   Conference ' 91   on   Management   of   Data .   Denver :   ACM   Press ,   1991 .   367 ～ 376 
 　 ［ 12 ］ Mohan   C ,   Haderle   D   et   al .   ARIAS :   a   transaction   recovery   method   supporting   fine - granularity   locking   and   partial   rollback   using   write - ahead   logging .   ACM   Transactions   on   Database   Systems ,   1992 , 17 ( 1 ) : 94 ～ 162 
 本文 1997 - 12 - 23 收到 原稿 , 1998 - 02 - 25 收到 修改稿   
