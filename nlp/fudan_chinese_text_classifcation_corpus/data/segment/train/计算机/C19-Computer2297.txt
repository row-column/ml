计算机 研究 与 发展 
 JOURNAL   OF   COMPUTER   RESEARCH   AND   DEVELOPMENT 
 1999 年   第 36 卷   第 5 期   Vol.36   No.5   1999 
 
 
 
 多 智能 体 系统 支撑 环境 MAS / TH - 5 
 李 　 毅 　 石 纯一 
 摘 　 要 　 MAS / TH - 5 系统 是 具有 一定 开放性 的 支持 MAS 构造 与 集成 的 支撑 环境 ， 它 将 开发 与 运行 环境 集 为 一体 ， 形成 整体 解决方案 . 同时 ， 文中 所 构造 的 具有 实际 应用 价值 的 Agent 模型 ， 为 支撑 环境 提供 了 理论 和 技术 基础 . 这种 模型 具有 理性 平衡 的 特点 . 该 模型 还 为 用户 提供 了 建立 其他 Agent 模型 的 一般性 框架 ， 可以 满足 MAS 系统 中 Agent 交互 的 需求 . 在 支撑 环境 上 ， 文中 所 设计 的 Agent 语言 具有 描述 BDI 等 思维 状态 的 能力 ， 可 处理 较 复杂 的 实际 应用 问题 . 
 关键词 　 MAS ， BDI ， Agent 语言 ， KQML , 运输 调度 
 中图法 分类号 　 TP18 
 MAS / TH - 5 : A   MULTI - AGENT   SYSTEM   SUPPORTING   ENVIRONMENT 
 LI   Yi   and   SHI   Chun - Yi 
 ( Department   of   Computer   Science , Tsinghua   University , Beijing 　 100084 ) 
 Abstract 　 MAS / TH - 5   system   is   a   partly   open   supporting   environment   for   construction   and   integration   of   MAS .   The   system   integrates   environments   for   development   and   for   operation   and   brings   about   a   total   solution .   In   the   paper   here ,   an   applicable   agent   model   is   established .   The   agent   model   provides   theoretical   and   technical   basis   for   the   supporting   environment .   The   model   features   balance .   It   also   provides   general   frame   for   customers   for   establishing   other   agent   models   and   satisfies   the   demand   of   communication   between   agents   within   the   MAS   system .   Since   the   agent   language   designed   in   the   supporting   environment   is   capable   of   describing   BDI ' s   mental   state   and   dealing   with   complicated   problems ,   the   agent   based   on   the   language   is   valuable   in   solving   practical   problems . 
 Key   words 　 MAS , BDI , Agent   language , KQML , transportation   dispatch 
 1 　 引 　 　 言 
 　 　 多 Agent 系统 由 多个 自主 或 半 自主 的 智能 体 ( Agent ) 组成 ， 在 Agent 之间 以及 Agent 与 环境 之间 都 是 并发 的 ， 需要 进行 交互 . MAS 研究 的 主要 内容 就是 这些 并发 Agent 的 构造 、 协调 、 协作 等 问题 . 
 　 　 如何 结合 社会 组织 理论 、 建模 与 实现 理论 ， 来 研究 适应 开放 环境 的 Agent 框架 及 以 对象 程序设计 为 基础 的 面向 Agent 的 程序设计 技术 ， 支持 应用 系统 的 开发 ， 是 当前 MAS 研究 面临 的 重要 课题 ［ 1 ］ . 面向 Agent 的 程序设计 框架 AOP 是 这方面 研究 的 成功 实例 之一 ［ 2 ］ . Shoham 以 Agent 为 基元 ， 以 语言 活动 建立 Agent 的 交互 ， 以 Belief , Desire 和 Intention 等 概念 描述 Agent 的 思维 状态 ， 并 建立 了 语言 Agent0 . 但是 Shoham 对 社会 组织 理论 的 引入 是 有限 的 ， 还 难于 实际 应用 . 关于 Agent 交互 语言 的 研究 有 较 多 的 展开 ， 如 KQML , KIF 以及 由此 建立 的 系统 ABSE 和 PACT ， 但 仍 未 见 有 完整 的 MAS 实验 与 开发 环境 的 出现 . 
 　 　 在 MAS 中 ， Agent 的 行为 必须 具有 合理性 ， 这 使得 我们 不仅 要 关注 推理 、 感知 等 某种 特殊 能力 ， 还应 研究 Agent 的 思维 状态 模型 . 为 使 Agent 的 思维 状态 模型 适用 于 系统 的 动态分析 、 设计 与 运行 ， 应以 可 计算 为 原则 ， 从 系统 行为 （ 算法 ） 角度 来 讨论 Agent 思维 状态 BDI 间 的 相互作用 与 演化 ， 以使 Agent 具有 合理 的 可 合作 的 行为能力 . 
 　 　 为此 ， 我们 建立 了 MAS / TH - 5 系统 ， 它 是 一个 具有 开放性 的 支持 MAS 构造 与 集成 的 支撑 环境 . MAS / TH - 5 将 开发 与 运行 环境 集 为 一体 ， 形成 了 MAS 开发 的 整体 解决方案 . 我们 建立 了 可 计算 的 Agent 模型 ， 该 模型 可以 实现 Agent 思维 状态 BDI 间 的 自动 演变 与 转化 ， 具有 理性 平衡 的 特点 . 在 支撑 环境 上 ， 我们 设计 的 Agent 语言 具有 描述 BDI 等 思维 状态 的 能力 ， 可 处理 较 复杂 的 实际 问题 . 同时 ， 我们 对 KQML 语言 做 了 改进 ， 使得 系统 可以 提供 灵活 、 有效 的 Agent 通信 机制 . 基于 MAS - TH / 5 系统 ， 我们 还 实现 了 分布 卡车 运输 调度 系统 . 
 2 　 MAS / TH - 5 的 组成 
 　 　 MAS / TH - 5 支撑 环境 如图 1 所示 ， 由 用户 、 系统 界面 、 OS / NETWORK 、 VDCE 、 Agent 开发 平台 、 Agent 模型 、 通信 Agent 和 用户 Agent 等 多 部分 构成 . 
 
 
 图 1 　 MAS / TH - 5 系统 结构图 
 　 　 MAS / TH - 5 通过 系统 界面 与 用户 进行 交互 ， 交互 可 分为 3 个 层次 ： 首先 ， 用户 可以 与 系统 中 的 Agent 进行 交互 ， 如 ： 输入 任务 ， 观察 结果 ； 其次 ， 用户 可以 根据 自己 的 需求 利用 系统 已有 的 Agent 模型 构造 Agent 加入 到 系统 中 ； 另外 ， 用户 可以 通过 与 VDCE 的 交互 ， 实时控制 和 查看 系统 的 状态 ， 以利于 系统 运行 和 方法 实验 的 进行 . 
 　 　 系统 界面 利用 友善 的 、 可视化 的 用户界面 ， 帮助 用户 实现 与 系统 的 各种 交互 ， 以 提高 系统 的 可用性 . 
 　 　 OS / NETWORK 为 系统 提供 底层 支持 . 
 　 　 虚拟 分布 计算环境 VDCE 为 MAS 以 Agent 为 单位 的 计算 提供 支持 . MAS 可 在 VDCE 上以 实际 和 模拟 两种 状态 运行 . 在 实际 状态 下 ， Agent 在 运行 中 直接 使用 OS / NETWORK 资源 ， VDCE 不 进行 干预 . 在 模拟 状态 下 ， VDCE 则 要 根据 MAS 的 环境 和 资源 描述 ， 控制 Agent 的 执行 ， 使 MAS 完全 处于 模拟 的 分布 环境 中 ， 保证系统 运行 结果 在 预期 条件 下 可 重现 . 
 　 　 开发 平台 提供 了 利用 Agent 语言 建立 用户 Agent 的 机制 . 
 　 　 做 为 支撑 环境 的 核心 ， 我们 向 用户 提供 了 具有 理性 思维 的 Agent 模型 ， 以供 用户 构造 实际 MAS 系统 . 
 　 　 通信 Agent 为 MAS 中 所有 Agent 提供 通信 支持 . 
 　 　 用户 Agent 是 用户 利用 系统 开发 平台 和 Agent 模型 所 建立 的 Agent ， 它们 具有 特定 求解 能力 ， 可以 完成 用户 需求 . 
 3 　 Agent 的 理性 可 计算 模型 
 　 　 理性 ( Rationality ) 涉及 信知 ( Belief ) 、 愿望 ( Desire )   、 意图 ( Intention ) 和 行为 ( Action ) 等 概念 ， 它们 描述 了 Agent 的 思维 状态 的 基本特征 和 相互 关系 . 理性 平衡 指 愿望 信知 、 意图 、 目标 和 行为 的 相互 约束 和 平衡 ， 是 MAS 合作 和 求解 的 基础 ［ 3 ］ . 一般 将 Agent 的 思维 状态 分为 信知 、 愿望 和 意图 3 部分 ( 简记 为 BDI ) ， 进而 可 与 Agent 的 感知 、 推理 以及 规划 、 行动 集成 起来 ， 使 Agent 的 各自 行为 在 统一 的 框架 下 展开 ， 以 愿望 的 满足 为 目标 ， 使 Agent 行为 具有 明确 的 目的性 ， 从根本上 保证 行为 的 合理性 ， 以 适应 于 实际 的 动态 开放 环境 . 
 　 　 目前 已有 的 关于 思维 状态 的 理论 着重 讨论 理性 平衡 的 有关 概念 和 相应 约束 ， 但 这些 理论 是 静态 的 ， 没有 给出 Agent 的 行为 与 思维 状态 之间 的 相互 关系 与 演化 规则 ， 使 思维 状态 诸 因素 在 演化过程 中 相互 脱节 .   另外 ， 已有 理论 缺乏 可 计算 模型 ， 没有 给出 思维 状态 的 产生 以及 相互 演化 的 算法 ， 难以 应用 于 实际 的 MAS 的 设计 、 实现 和 运行 ［ 4 ］ . 
 3.1 　 Agent 的 BDI 描述 
 　 　 依 可计算性 为 原则 ， 我们 给出 对 Agent 的 BDI 内涵 和 相互 关系 的 一种 描述 . 
 　 　 Belief 是 Agent 对 世界 的 认知 ， 包含 描述 环境 特性 的 数据 . 从 Belief 出发 可以 做出 对 环境 的 判断 ， 提出 达到 一定 目标 的 行为 规划 .   Belief 分为 4 种 基本 类型 ： SURE ， ASUM ， WILL ， POSS ， 分别 表示 确切 、 假设 、 必然 和 可能 . 其中 ， SURE 和 WILL 为 确定性 信知 ； ASUM 和 POSS 为 不确定性 信知 . 确切 、 假设 是 对 当前 环境 的 信知 ， 必然 与 可能 则 是 对 未来 而言 . Agent 的 Belief 可 由 设计者 直接 加入 ， 从 观察 中 得到 ， 从 通信 中 得到 ， 也 可以 从 推导 中 得到 . Belief 集合 中 ， 存在 一致性 维护 问题 . 
 　 　 Desire 是 系统 的 目标 ， 由此 目标 将会 激发 系统 的 规划 和 行动 . 一般而言 ， 目标 可以 表达 为 对 环境 状态 的 一种 期待 ( 一种 判断 ) ， 系统 可以 测试 此 判断 是否 成立 ， 成立 则 表明 目标 已 实现 ， 否则 ， 系统 需 采取行动 以 实现目标 . Desire 在 完成 后 ， 被 取消 . 当 系统 时间 超过 Desire 的 目的 时刻 后 ， 不管 Desire 是否 得到 满足 ， 均 应 被 取消 . 
 　 　 Agent 可 提出 各种 可能 的 行动 组合 来 达成 需求 ， 做出 实现需求 的 规划 行为 . 
 　 　 Intention 是 Agent 对 自己 在 未来 时间 内 行动 的 预先安排 ， Intention 不能 脱离 Desire 而 独立 存在 ， 是 可以 到达 Desire 的 规划 中 的 一部分 ， 要 将 Desire 转化 为 现实 ， 则 Intention 应 触发 行动 ( Action ) . Intention 在 有限 资源 的 情况 下 ， 是 Agent 理性 平衡 所 必须 的 . 
 　 　 与 上述 描述 相适应 ， 我们 建立 的 Agent 模型 由 4 元组 构成 ： 〈 B , D , I , A 〉 
 　 　 B 为 Agent 所 具有 的 Belief ， 表示 为 〈 Prop ， Time ， Mode ， Source 〉 
 　 　 D 为 Agent 所 具有 的 Desire ， 表示 为 〈 Prop ， Time ， FirstSon ， NextBrother 〉 
 　 　 I 为 Agent 所 具有 的 Intention ， 表示 为 〈 Prop ， Time ， A 〉 
 　 　 A 为 Agent 所 具有 的 行为能力 . 
 　 　 Prop 为 一个 命题 ， 表示 某一 特定 状态 ， 定义 为 〈 Name ， Value ， Time 〉 
 　 　 B 中 ， Time 表示 该 Belief 加入 信知集 的 时间 ， Mode 表示 Belief 类型 ， 分为 SURE ， ASUM ， WILL ， POSS ， Source 为 Belief 所 对应 的 Desire . 
 　 　 Desire 集为 树型 结构 ， 子 节点 代表 为 实现 父 节点 Desire 而 产生 的 子 Desire ， 子 Desire 间 为 逻辑 与 的 关系 . D 中 ， Time 表示 该 Desire 加入 愿望 集 的 时间 ， FirstSon 表示 该 Desire 的 第一个 子 Deisre ， NextBrother 表示 该 Desire 后继 兄弟 Desire . 
 　 　 I 中 ， Time 表示 该 Intention 加入 意图 集 的 时间 ， A 为 该 Intention 对应 的 Action . 
 3.2 　 Agent 模型 的 逻辑 流程 
 　 　 Init (   ) ; 
 　 　 While ( Status _ Run ) 
 　 　 { 　 　 
 B _ Manage (   ) ; 
 D _ Manage (   ) ; 
 I _ Manage (   ) ; 
 　 　 } 
 　 　 Exit (   ) ; 
 　 　 其中 ， Belief 管理 模块 B _ Manage 主要 实现 Belief 库 的 一致性 维护 功能 ， 要求 SURE 类型 的 Belief 间 不能 冲突 ； SURE 与 ASUM 类型 的 Belief 间 不能 冲突 ； WILL 类型 的 Belief 间 不能 冲突 ； WILL 与 POSS 类型 的 Belief 间 不能 冲突 . 同时 ， 当 Belief 对应 Desire 不 存在 时 ， 管理 模块 还应 删去 该 Belief ； 为了 便于 实现 ， Belief 管理 模块 本身 不 具有 Belief 的 推导 能力 . 
 　 　 Desire 管理 模块 D _ Manage 是 整个 模型 的 核心 部分 ， 其 主要 功能 为 维护 Desire ， 其 逻辑 流程 为 ： Desire 所 对应 时刻 超过 系统 时刻 或 Desire 与 SURE 类型 Belief 一致 ， 则 Del   Desire ； Desire 与 ASUM 类型 Belief 一致 ， Desire 与 WILL 类型 Belief 一致 或 Desire 与 POSS 类型 Belief 一致 ， 则 保持 该 Desire ； Desire 为 SURE 类型 Belief 矛盾 或 Desire 为 WILL 类型 Belief 矛盾 ， 则 Reset 其父 Desire ；   否则 ， 对 Desire 产生 对应 的 Intention 和 Belief . 
 　 　 为了 加快 BDI 的 转化 效率 ， 我们 定义 了 Del   和 Reset   两个 对 Desire 的 操作 . 
 　 　 Del   Desire ： 删除 该 Desire 和 对应 的 Belief 和 Intention ， 及其 所有 子 Desire 及 对应 的 Belief 和 Intention ； 
 　 　 Reset   Desire ： 删除 对应 Belief 和 Intention ， 及其 所有 子 Desire 和 对应 的 Belief 和 Intention ； 
 　 　 Intention 的 管理 模块 I _ Manage 功能 是 ： 与 Desire 库 的 一致性 维护 ， 当某 Intention 对应 的 Desire 不 存在 时 ， 删去 该 Intention ， 执行 与 Intention 对应 的 动作 ； 当 动作 是 规划 行为 动作 ， 产生 新 的 子 Desire . 
 　 　 Init ( ) 函数 实现 Agent 的 初始化 操作 ， 向 通信 Agent 注册 ； 读入 初始 的 信念 库 、 愿望 库和意 图库 . 
 　 　 Exit ( ) 函数 实现 Agent 的 注销 工作 . 
 　 　 通信 模块 具有 接收 外界 消息 到 Agent 消息 队列 中 以及 消息 发送 的 功能 . Agent 在 运行 中 与 通信 相关 的 Desire 形成 Intention ， 最终 触发 该 模块 相应 函数 的 执行 . 此外 ， 该 模块 还 具有 将 信息 在 KQML 格式 和 BDI 格式 间 转化 的 能力 . 
 4 　 Agent 语言 与 通信 机制 
 　 　 在 Agent 模型 的 基础 上 ， 我们 设计 了 Agent 描述语言 ， 建立 了 Agent 开发 平台 ， 为 整体 MAS 支撑 环境 的 建立 奠定 基础 . 
 　 　 通过 平台 ， 可以 进行 填充 式 的 Agent 设计 ： 用户 根据 Agent   语言 的 语法 格式 描述 Agent 的 信念 库 、 知识库 、 愿望 库 . 
 　 　 语言 描述 如下 ： 
 　 　 　 　 信念 ∶ 　 = （ 〈 事实 〉   〈 类型 〉 ） 
 　 　 　 　 愿望 ∶ 　 = （ 〈 事实 〉 ） 
 　 　 　 　 意图 ∶ 　 = （ 〈 事实 〉 ） 
 　 　 　 　 事实 ∶ 　 = （ 〈 谓词 〉   〈 参数 〉   〈 时间 〉 ） 
 　 　 　 　 类型 ∶ 　 = SURE | POSS | WILL | ASUM 
 　 　 　 　 谓词 ∶ 　 = 〈 alphanumeric _ string 〉 
 　 　 　 　 参数 ∶ 　 = 〈 alphanumeric _ string 〉 | number | { 参数 } 
 　 　 利用 Agent 语言 及 开发 平台 ， 可以 迅速 ， 有效 地 建立 起 实际 Agent ， 并 能 在 Agent 运行 中 ， 通过 语言 改变 Agent 的 BDI 库 ， 进而 达到 控制 Agent 运行 的 目的 . 
 　 　 通信 机制 是 MAS 支撑 环境 的 一个 重要 组成部分 . 
 　 　 在 MAS / TH - 5 中 ， 我们 将 通信 分为 物理 通信 层 、 语法 层 和 语义 层 等 3 个 层次 . 
 　 　 在 物理 通信 层中 ， 即 系统 的 OS / NETWORK 部分 ， 利用 Socket 编程 接口 实现 基本 通信 机制 . 
 　 　 在 语法 层 ， 利用 KQML 语言 作为 语法 规范 . KQML 是 一种 知识 查询 与 操作 语言 ， KQML 既 是 消息 的 格式 ， 又 是 一种 用于 支持 Agent 运行 期间 知识 共享 的 消息 处理 的 协议 ， 它 可以 作为 应用程序 与 智能 系统 间 交互 的 语言 ， 以 支持 Agent 间 消息 的 传递 . 
 　 　 我们 选用 KQML 作为 Agent 通信 语言 ， 有 以下 两点 理由 ： 首先 ， 它 具有 灵活 的 结构 ， 且 具有 可扩充性 ， 能够 满足 Agent 间 信息 传递 的 基本 需求 ； 其次 KQML 作为 一种 Agent 通信 语言 ， 受到 广泛 的 支持 ， 正在 成为 一种 规范 ， 这 使得 MAS / TH - 5 系统 中 的 Agent 有 可能 与 其他 系统 中 的 Agent 进行 交互 . 
 　 　 具体 实现 中 ， 根据 具体 需求 及 MAS 系统 的 特点 ， 我们 对 KQML 语言 做 了 一定 的 完善 和 扩充 .   KQML 语言 目前 提供 的 通信 机制 只有 点到点 和 广播 两种 方式 ， 而 在 实际 信息 交换 过程 中 ， 用户 往往 希望 某些 信息 能够 在 特定 的 范围 内 传播 和 共享 ， 为此 ， 我们 提出 了 Agent   组 的 概念 ， 使得 Agent   发送 消息 时 ， 可以 针对 某一 Agent   组 . 这样 ， Agent   就 同时 具有 了 Agent   名 和 Agent   组名 两种 名称 ； 在 KQML 中 ， Agent 间 的 信息 交换 是 异步 的 ， 但 在 很多 情况 下 ， 用户 也 希望 能够 做到 等待 回答 ， 根据 回答 信息 的 内容 进行 下 一步 的 动作 . 为此 ， 我们 提供 了 同步 与 异步 两种 通信 方式 ， 供 用户 选择 . KQML 缺乏 一种 描述 网络 物理 分布 的 原语 ， 而 这种 功能 在 MAS 系统 的 资源管理 及 通信 效率 方面 十分 重要 ， 为此 我们 提出 了 一些 测量 网络通信 距离 的 原语 ， 使得 用户 选择 通信 方式 和 与 之 通信 的 Agent 时有 更 多 的 依据 . 
 　 　 在 语义 层 ， 我们 将 Agent 的 思维 状态 BDI 模型 引入 通信 交互 过程 ， 由此 可以 实现 在 基本 交互 行为 之上 的 多种类型 的 协商 交互 ， 以 解决 Agent 间 的 信知 、 行动 等 方面 的 冲突 . 
 　 　 按照 Agent 的 思维 状态 划分 ， 我们 将 通信 内容 分为 信知 和 意图 两个 基本 类型 . 
 　 　 信知 的 传递 可以 实现 两种 基本 作用 ： 在 一般 情况 下信知 的 传递 是 一种 Agent 间 的 信息 交流 ， 因为 当 发送者 将 信知 发送给 另 一 Agent 时 ， 就 实际上 扩展 了 接收者 的 观察 能力 和 范围 ， 对 它 的 活动 会 有 支持 与 帮助 作用 . 在 某些 情况 下 ， 尤其 是 发送 出 的 信知 与 接收 方 的 信知 具有 逻辑 冲突 时 ， 信知 的 传递 就 成为 双方 辩论 过程 的 一部分 ， 其 目的 往往 是 为了 改变 另一方 的 信知 ， 并 进而 改变 其 行动 方案 和 意图 . 
 　 　 意图 的 传递 可用 来 进行 Agent 间 行为 协调 ， 对 Agent 行为 具有 直接 的 影响 ， 在 MAS 系统 中有 重要 作用 . 意图 传递 到 某 Agent 后 ， 该 Agent 应 决定 是否 将 其 作为 自己 的 意图 并 着手 进行 规划 和 行动 .   从 自主 Agent 的 自利 原则 出发 ， Agent 采纳 其他 Agent 的 意图 应 有助于 提高 自己 的 效用 . 在 Agent 以 何种 标准 选择 可 接受 的 意图 上 可以 有 多种 选择 ［ 5 ］ . 
 　 　 可以 看出 ， 通过 信知 和 意图 的 传递 ， 可以 有效 的 实现 语义 层次 上 的 Agent 交互 . 
 5 　 分布 卡车 运输 调度 系统 
 　 　 在 卡车 运输 调度 问题 中 ， 含有 若干 车场 ， 每个 车场 有 若干 车辆 ， 通过 不同 的 方法 ， 实现 运输 任务 的 合理 分配 ， 以 减少 空驶 . 在 系统 中 ， 车场 间 、 车辆 间 都 存在 着 竞争 和 协作 的 关系 ， 是 一个 典型 的 MAS 问题 . 
 　 　 我们 在 MAS / TH - 5 支撑 环境 上 ， 利用 MAS 方法 引入 市场 、 价格 机制 ［ 6 ］ 和 一定 的 协商 方法 进行 运输 规划 ， 实现 了 分布 卡车 运输 调度 系统 ， 最终 达到 提高 里程 利用率 、 减少 空驶 的 目的 .   运输 调度 是 一个 应用 范围 较广 的 问题 ， 在 求解 之前 ， 需要 做 一些 限定 . 为此 ， 我们 以 北京市 运输 公司 为例 ， 总结 出 运输 调度 中 的 基本 限制 条件 如下 ： 
 　 　 ( 1 )   每辆车 均 属于 某一 车场 . 
 　 　 ( 2 )   车辆 每天 都 由 所属 车场 出发 ， 完成 任务 后 回原 车场 ； 
 　 　 ( 3 )   每辆车 一天 的 工作 时间 为 T ( 允许 误差 Δ t ) ； 
 　 　 ( 4 )   某些 业务 要求 有 确定 的 车型 和 必须 完成 的 运量 ； 
 　 　 ( 5 )   不同 的 业务 因 品名 等 方式 的 不同 直接 影响 可 组合 性 ； 
 　 　 ( 6 )   运输 的 合理 调度 ， 依赖于 所 涉及 的 市区 地 图库 . 
 　 　 系统 中 的 Agent 有 以下 类型 ： 
 　 　 ( 1 )   车场 Agent ， 负责 车场 的 调度 事物 并 实现 与 其它 车场 的 协作 ； 
 　 　 ( 2 )   车辆 Agent ， 负责 车辆 的 自我 规划 ； 
 　 　 ( 3 )   距离 求解 Agent ， 利用 地图 数据 和 启发式 规则 进行 最 短距离 的 计算 ； 
 　 　 ( 4 )   市场 Agent ， 管理 任务 市场 ， 监督 各 车场 ， 并 协调 各 车场 间 的 关系 ； 
 　 　 ( 5 )   输入 Agent ， 接收 各种 系统 输入 ， 如 任务 集 ， 车场 数据 等 ； 
 　 　 ( 6 )   输出 Agent ， 将 系统 结果 输出 ， 如 每辆车 完成 的 运输 过程 ， 系统 里程 利用率 . 
 　 　 系统 有效 地 解决 了 运输 调度 问题 ， 使 里程 利用率 较 手工 调度 有 显著 提高 . 同时 ， 以 MAS / TH - 5 为 支撑 环境 建立 并 运行 该 系统 ， 简化 了 Agent 和 Agent 交互 策略 的 设计 过程 ， 缩短 了 系统 开发 时间 ， 且 使 系统 具有 良好 的 开发性 ， 能 满足 运输 业务 不确定性 较强 的 特点 . 
 6 　 结 　 　 语 
 　 　 我们 所 建立 的 MAS / TH - 5 系统 是 具有 一定 开放性 的 支持 MAS 构造 与 集成 的 支撑 环境 ， 与 AOP ， ABSE 和 PACT 等 框架 或 系统 相比 ， 更具 开发性 和 实用性 ， 并 将 开发 与 运行 环境 集 为 一体 ， 形成 整体 解决方案 . 
 　 　 同时 ， 我们 克服 了 以往 BDI 理论 在 可计算性 方面 的 缺陷 ， 建立 了 具有 实际 应用 价值 的 模型 ， 为 支撑 环境 提供 了 理论 和 技术 基础 . 这种 Agent 模型 ， 具有 理性 平衡 的 特点 . 模型 还 为 Agent 提供 了 建立 其他 Agent 的 模型 的 一般性 框架 ， 满足 了 MAS 系统 中 Agent 交互 的 需求 . 
 　 　 与 已有 的 AGENT0 等 Agent 语言 相比 ， 我们 设计 的 语言 具有 描述 BDI 等 思维 状态 的 能力 ， 可 处理 较 复杂 的 问题 ， 从而 使得 用 这种 语言 建造 的 Agent 可 用于 解决 实际 的 应用 问题 （ 如 运输 调度 问题 ） . 
 　 　 当然 ， 该 系统 仍 有 若干 不足之处 ， 如 ： 尚 不 具备 对 Belief 的 推理 能力 ， 系统 运行 中 的 监控 手段 尚 不 丰富 . 这些 问题 都 有待于 在 以后 的 研究 工作 中 进行 改进 . 
 本 课题 得到 国家自然科学基金 资助 ( 项目编号   69773026 ， 69733020 ) . 
 作者简介 ： 李毅 ， 男 ， 1974 年 4 月生 ， 博士 研究生 ， 主要 研究 领域 为 分布式 人工智能 . 石 纯一 ， 男 ， 1935 年 8 月生 ， 教授 ， 博士生 导师 ， 主要 研究 领域 为 人工智能 . 
 作者 单位 ： 清华大学 计算机科学 系 　 北京 　 100084 
 参考文献 
 　 1 　 石 纯一 等 .   分布式 人工智能 进展 .   模式识别 与 人工智能 ,   1996 ， 8 ( 增刊 ) ： 72 ～ 92 
 ( Shi   Chunyi .   The   advances   of   distributed   artificial   intelligence .   Pattern   Recognition   and   Artificial   Intelligence ( in   Chinese ) , 1996 , 8 ( Supp ) : 72 ～ 92 
 　 2 　 Shoham .   Agent - oriented   programming .   Artificial   Intelligence ,   1993 , 60 ( 1 ) : 51 ～ 92 
 　 3 　 Bratman   M   E .   Intentions ， Plan ， and   Practical   Reason .   Hardvard   Univ   Press ， 1987 
 　 4 　 Konolige   K ,   Pollack   M   E .   A   representationalist   theory   of   intention .   In : Proc   IJCAI - 93 .   California :   Morgan   Kaufmann   Publishers , 1993.390 ～ 395 
 　 5 　 Haddadi   A ,   Sundermeyer   K .   Belief - Desire - Intention   Agent   Architectures . In :   O ' Hare   G   M   P , Jennings   N   R   eds .   Foundations   of   Distributed   Artificial   Intelligence .   New   York : John   Wiley   &   Sons   Inc , 1996.169 ～ 185 
 　 6 　 Sandholm   T .   Limitations   of   vickrey   auction   in   computational   multiagent   system .   In : Second   Int ' l   Conf   on   Multi - Agent   Systems . Tokyo , 1996.299 ～ 307 
 　 7 　 Lejter   M ,   Dean   T .   A   framework   for   the   development   of   multiagent   architectures .   IEEE   Expert ,   1996 , 11 : 47 ～ 59 
 原稿 收到 日期 ： 1998 - 07 - 20 
 修改稿 收到 日期 ： 1999 - 01 - 28 
