计算机 工程 
 COMPUTER   ENGINEERING 
 1999 年   第 25 卷   第 12 期   vol.25   No.12   1999 
 
 
 
 快速 查询 TMN 系统 中 实现 
 候方 男 　 戴 　 蔡 　 窦 　 文 
 TMN ( 电信 管理网络 ) 系统 是 保证 电信 网络 正常 、 高效 运转 必不可少 的 手段 。 目前 应用 以及 建设 中 的 TMN 系统 ， 功能 比较 全面 ， 但 都 存在 一个 突出 的 问题 ， 即 话务 数据 查询 的 性能 不够 理想 。 本文 就 这 一 问题 提出 了 一种 独特 的 设计方案 ， 可 使 查询 速度 得到 大幅度提高 。 为了 说明 问题 方便 ， 着重 讨论 一个 具有 代表性 的 问题 ， 即 有关 本地网 去 话务 查询 。   
 1   现有 TMN 系统对 本地网 去 话务 的 处理 
 　 　 在 电信网 管 系统 中 ， 主要 的 监控 对象 为 交换机 。 每台 交换机 配置 有 若干 中继 群 ， 交换机 每隔 一 小时 吐出 所配 各 中继 群在 本 小时 内 的话 务 数据 。 现有 系统 一般 采用 结构 如表 1 的 数据表 存储 去 话务 数据 。 我们 将 其 称为 原始数据 表 。 
 表 1   原始数据 表 结构 
 原始数据 - - BD _ QHW 
 统计 时刻 
 THSK - pkey 中继 群 编号 
 ZJQBH - pkey 交换机 编号 
 JHJBH - phe 试呼 次数 
 HSCS ( int ) 接通 次数 
 JTCS ( int ) 其它 指标 
 ...... ( int ) 
 1999 - 1 - 1   0 : 0ZJQ _ A1JHJ _ A10002000 ...... 
 1999 - 1 - 1   0 : 0ZJQ _ A2JHJ _ A9001900 ...... 
 1999 - 1 - 1   0 : 0ZJQ _ B1JHJ _ B6001000 ...... 
 1999 - 1 - 1   0 : 0ZJQ _ A1JHJ _ A11002000 ...... 
 1999 - 1 - 1   0 : 0ZJQ _ A2JHJ _ A9501900 ...... 
 
 　 　 在 表 1 中 ， " TJSK + ZJQBH + JHJBH " 构成 表 的 主键 ， 且 为 聚簇 索引 。 第一行 表示 交换机 " JHJ _ A " 所属 中继 群 " ZJQ _ A1 " 在 " 1999 - 1 - 1   0 : 00 ～ 1999 - 1 - 1   0 : 59 : 59 " 这一 小时 内 的 各 话务 数据 ， 第四行 表示 同一 中继 群在 " 1999 - 1 - 1   1 : 00 ～ 1999 - 1 - 1   1 : 59 : 59 " 这一 小时 内 的 各 话务 数据 。 数据 存储 以 一年 为 一个 统计 周期 ， 即 一年 后 所有 数据表 被 清空 。 
 　 　 对 去 话务 数据 的 查询 需求 主要 有 如下 4 种 ： 
 　 　 ( 1 ) 小时 段 查询 ， 如 查询 " 1999 - 2 - 1 " 至   " 1999 - 2 - 10 "   每天   9   点 这 一 小时 段 的 某 交换机 所属 各 中继 群去 话务 数据 ( 求 累加 或 平均 ) ， 使用 频率 约 占 60% ； 
 　 　 ( 2 ) 连续 日 查询 ， 如 查询   " 1999 - 2 - 1   " 至   " 1999 - 2 - 10   "   这一 连续 10 日内 某 交换机 所属 各 中继 群去 话务 数据 ( 求 累加 或 平均 ) ， 使用 频率 约 占 20% ； 
 　 　 ( 3 ) 连续 时间 查询 ， 如   " 1999 - 2 - 1   8 : 00 " 至   " 1999 - 2 - 10   18 : 00 "   这一 连续 时间 内 某 交换机 所属 各 中继 群去 话务 数据 ( 求 累加 或 平均 ) ， 使用 频率 约 占 10% ； 
 　 　 ( 4 ) 单点 查询 ， 如   " 1999 - 2 - 1   8 : 00 "   这一 小时 内 某 交换机 所属 各 中继 群去 话务 数据 ， 使用 频率 约 占 10% 。   
 2   快速 查询 方案 对 本地网 去 话务 的 处理 
 　 　 新 的 设计方案 力求 提高 查询 速度 ， 特别 是 提高 " 小时 段 查询 " 的 速度 ， 因为 这 是 最 常用 的 查询 。 
 　 　 在 数据库系统 中 ， 查询 的 速度 既 是 优化 的 问题 ， 更是 设计 的 问题 。 在 软 、 硬件 环境 达到最佳 配置 的 时候 ， 良好 的 数据表 设计 就 成为 提高 性能 的 根本途径 。 研究 表明 ， 80% 的 性能 改进 来自 于 IO 的 改善 。 因此 ， 减少 IO 操作 ， 特别 是 磁盘 IO ， 是 新 方案 的 设计 出发点 。 
 　 　 为了 达到 这一 目的 ， 新 方案 对 数据 存储 作 了 如下 两项 关键 的 改进 。 
 　 　 ( 1 ) 将 " 范围 查询 " 转化 为 " 点 查询 " 原 系统 将 交换机 吐出 的 数据 逐行 存储 ， 存储 的 是 " 步进 " 数据 。 新 系统 中 ， 表 的 第一行 存储 本 统计 周期 第一 小时 的 数据 ， 第二行 存储 的 数据 为 第一 小时 的 数据 加上 第二 小时 的 数据 ， 其余 类推 ， 也就是说 ， 改为 存储 合计 数据 ， 如表 2 所示 。 
 表 2   存储 方式 对比 
 统计 时刻 原   系   统新   系   统 
 1999 - 1 - 1   0 : 0010001000 
 1999 - 1 - 1   1 : 009001000   +   900   =   1900 
 1999 - 1 - 1   2 : 0010501900   +   1050   =   2950 
 
 　 　 这样 ， 跨越 几天 甚至 几月 的 查询 都 不必 扫描 所 跨 时间 范围 ， 只须 查询 时间 起点 和 终点 处 的 数据 ， 从而 将 " 范围 查询 " 转化 为 " 点 查询 " 。 
 　 　 ( 2 ) 时间 切片 式 处理 为了 与 实际 业务 配合 ， 并 不能 简单 地 按照 表 2 所示 随 小时 累加 ， 而须 将 逐步 汇总 的 过程 在 25 个 时间 片上 进行 ， 如图 1 所示 ：   
 
 图 1   时间 切片 
 　 　 图 1 中 ， " 小时 0 合计 " 为 整个 时间 范围 内 的 第 0 小时 切片 ， 对应 数据表 为 " 速查 小时 表 0 " 。 在 " 速查 小时 表 0 " 里面 ， 第一 行为 " 1999 - 1 - 1   0 : 00 ～ 0 : 59 : 59 " 的话 务 数据 ； 第二 行为 " 1999 - 1 - 2   0 : 00 ～ 0 : 59 : 59 " 的话 务 数据 ， 再 加上 第一行 即 " 1999 - 1 - 1   0 : 00 ～   0 : 59 : 59 " 的话 务 数据 ， 其余 类推 。 这样 ， 一天 24 小时 就 有 24 个 时间 片 ， 分别 对应 数据表 " 速查 小时 表 0 " ， 直至   " 速查 小时 表 23 " ， 共 24 个表 ， 结构 如表 3 所示 。 
 表 3   速查 小时 表 
 速查 小时 0 - - BD _ QHWHOUR0 
 统计 起始 时刻 
 TJSK - pkey 中继 群 编号 
 ZJQBH - pkey 交换机 编号 
 JHJBH - pkey 试呼 次数 
 SHCS ( int ) 接通 次数 
 JTCS ( int ) 其它 
 ( int ) 计数 ( int ) 
 COUNT 
 1999 - 1 - 1   0 : 00ZJQ _ A1JHJ _ A10002000 ... 1 
 1999 - 1 - 1   0 : 00ZJQ _ A2JHJ _ A9001900 ... 1 
 1999 - 1 - 2   0 : 00ZJQ _ A1JHJ _ A21004000 ... 2 
 1999 - 1 - 2   0 : 00ZJQ _ A2JHJ _ A18503800 ... 2 
 
 　 　 表 3 中 ， " TJSK + ZJQBH + JHJBH " 构成 表 的 主键 ， 且 为 聚簇 索引 。 
 　 　 需 说明 一点 ， 实际 运行 中 ， 由于 意外 的 原因 交换机 可能 会 缺失 某个 小时 的 数据 ， 为 使 平均值 计算 正确 ， 用字 段 " 计数 - COUNT " 记录 交换机 吐出 的 每 一 中继 群 实际 数据 次数 。 除 各 速查 小时 表外 还有 一 " 速查 日表 " ， 其 结构 与表 3 相同 。 其中 ， 第一行 存储 " 1999 - 1 - 1 " 全天 24 小时 累加 的 结果 ； 第二行 存储 " 1999 - 1 - 2 " 全天 24 小时 累加 的 结果 ， 再 加上 第一行 ， 即 " 1999 - 1 - 1 " 全天 的 数据 ， 其余 类推 。   
 3   查询 性能 对比 
 　 　 如前所述 ， 性能 的 提高 主要 来自 于 IO 的 改善 ， 因此 ， 查询 所 需 引用 的 数据 页 数目 越 少 ， 则 所 需 的 IO 就 越少 ， 查询 完成 的 时间 就 越短 。 在 实际 对比 中 ， 数据库 为 Sybase11.5 ， 原始数据 表有 50 万条 记录 ， 时间 从 " 1999 - 1 - 1   0 : 00 " 至 " 1999 - 7 - 1   0 : 00   " 。 
 　 　 ( 1 ) 小时 段 查询 
 　 　 例如 ， 查询 交换机 JHJ _ A 从 " 1999 - 1 - 10 " 至 " 1999 - 1 - 20 " 每天 9 点 的 去 话务 数据 合计 值 。 
 　 　 1 )   从 原始 表中 查询 
 　 　 select   ZJQBH ,   sum ( SHCS ) ,   sum ( JTCS )   from   BD _ 
 QHW 
 　 　 where   JHJBH   =   ' JHJ _ A '   
 　 　 　 　 and   (   TJSK   >   ' 1999 - 1 - 10   0 : 00 ' and   TJSK   <   ' 1999 - 1 - 20   23 : 59   '   )   
 　 　 　 　 and   datepart ( hour ,   TJSK )   =   9   
 　 　 group   by   ZJQBH   
 　 　 2 )   从 速查表 中 查询 
 　 　 . 取 时间 起点 各 数据 
 　 　 select   ZJQBH ,   SHCS ,   JTCS   from   BD _ 
 QHWHOUR9 
 　 　 where   JHJBH   =   ' JHJ _ A '   
 　 　 　 　 and   (   TJSK   >   ' 1999 - 1 - 9   0 : 00 ' and   TJSK   <   ' 1999 - 1 - 9   23 : 59   '   ) 
 　 　 . 取 时间 终点 各 数据 
 　 　 select   ZJQBH ,   SHCS ,   JTCS   from   BD _ QHWHOUR9   
 　 　 　 　 where   JHJBH   =   ' JHJ _ A '   
 　 　 　 　 and   (   TJSK   >   ' 1999 - 1 - 20   0 : 00 ' and   TJSK   <   ' 1999 - 1 - 20   23 : 59   '   )   
 　 　 . 相减 
 　 　 即 终点 各值 减去 起点 各 中继 群 对应 值 。 
 　 　 3 ) 性能 对比 
 　 　 比较 两种 方案 完成 查询 所 需 读取 的 数据 页数 ( 不 含 工作 表处理 ) ， 可 绘制 出如图 2 的 性能 曲线 ： 
 
 图例 ─ ─ ─ ─ ─ ─ ─ 速查表 查询 性能 曲线 
 - - - - - - - - - - - - - - 原始 表 查询 性能 曲线 
 
 　 　 从图 2 可以 看出 ， 速查表 查询 具有 良好 的 性能 且 保持稳定 ； 原始 表 查询 随着 时间跨度 的 增大 ， 需 读取 越来越 多 的 数据 页 ， 响应 时间 明显 加长 。 
 　 　 ( 2 ) 连续 日 查询 
 　 　 原始 表 查询 将 读取 整个 时间跨度 内 的 数据 页 ， 速查表 查询 则 只 需 读取 " 速查 日 合计 " 中 的 起点 和 终点 处 的 数据 ， 性能 明显提高 。 
 　 　 ( 3 ) 连续 时间 查询 
 　 　 例如 ， 查询 如   " 1999 - 2 - 1   8 : 00 " 至   " 1999 - 2 - 10   18 : 00 "   的话 务 数据 之 和 ， 将 其 拆解 为 三段 ， 即 " 1999 - 2 - 1   8 : 00 ～ 1999 - 2 - 1   23 : 00 " 、 " 1999 - 2 - 10   0 : 00 ～ 1999 - 2 - 10   18 : 00 " 和 整日 段 " 1999 - 2 - 2 ～ 1999 - 2 - 9 " 。 其中 ， 整日 段 将 从 " 速查 日 合计 " 表中 取出 ， 性能 亦 得到 提高 。 
 　 　 ( 4 ) 单点 查询 
 　 　 该类 查询 不能 从 速查表 中 得到 明显改善 。 
 4   对 快速 查询 方案 的 进一步 探讨 
 　 　 速查表 的 维护 由 系统 自动 完成 ， 每 插入 一条 记录 ， 则 触发 速查表 维护 过程 。 通过 事物 提交 或 回退 确保 原始 表 数据 与 速查表 数据 的 一致性 。 
 　 　 建立 速查表 的 方案 在 原始 表 的 基础 上 增加 了 24 个 小时 合计 及 1 个 日 合计 表 ， 由于 小时 合计 表和日 合计 表 的 大小 均 为 原始 表 的 1 / 24 ， 所以 系统 增加 了 25 / 24 的 存储空间 。 在 目前 磁盘 容量 、 价格 的 情况 下 ， 以 空间 为 代价 换取 的 性能 提高 是 值得 的 。 另外 ， 还 起到 了 数据备份 的 作用 ， 因为 速查表 的 数据 逆向 计算 可 得到 原始 表 数据 。 
 　 　 速查表 使 数据 分散 分布 ， 从而 减小 了 锁 冲突 的 概率 。 
 　 　 前面 的 讨论 中 ， 我们 只是 比较 了 读取数据 页 的 多少 ， 并 没有 指出 是 磁盘 读 还是 逻辑 读 。 SQL   Server   的 优化 器 认为 磁盘 读 的 代价 为 18 ， 逻辑 读 的 代价 为 2 。 由于 原始 表 的 巨大 性 ， 无法 将 其 全部 绑定 在 高速缓存 上 ， 因此 ， 大量 的 数据 页 需 从 磁盘 读取 。 而 速查表 则 小得多 。 根据 用户 的 查询 习惯 ， " 小时 段 查询 " 往往 只 针对 话务 忙 时 ， 如 上午 9 点 、 下午 3 点 等 少数 小时 段 进行 ， 因此 ， 可以 将 忙 时 对应 的 小时 速查表 绑定 在 高速缓存 上 ， 从而 具有 很 高 的 Cache 命中率 。 
 5   结束语 
 　 　 良好 的 数据库 设计 以及 运行 过程 中 的 系统 调优 ， 是 数据库系统 高效 运行 的 重要 保证 。 本文 所述 的话 务 数据 存储 与 快速 查询 方案 ， 成功 运用 于 湖南 邮电 TMN 系统 中 。 从 这 一 方案 的 设计 与 实现 过程 中 ， 深深 体会 到 将 系统 的 特性 与 应用 的 实际 融合 在 一起 ， 是 应用 成功 的 重要 保证 。 
 参考文献 
 1   本地 电信网 综合 网管 监控 系统 ( 内部资料 ) . 湖南省 邮电 管理局 ，   创智 软件园 ， 1996 
 2   王珊 . Sybase 原理 : 高级 系统管理 与 性能 调优 . 北京 ： 中国 水利水电   出版社 ， 1998 
 3   [ 美 ] Paulsell   K . Sybase   SQL   Server11   性能 及其 优化 技术 . 北京 希望   电脑公司 ， 1998 
