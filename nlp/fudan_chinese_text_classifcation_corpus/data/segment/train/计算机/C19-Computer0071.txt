计算机 应用 
 Computer   Applications 
 1999 年   第 19 卷 　 第 8 期   Vol.19 　 No.8   1999 
 
 
 
 一个 升迁 工具 的 设计 和 实现 
 左春荣 
 　 　 摘 　 要 　 针对 VFP 中 升迁 向导 的 局限性 ， 本文 介绍 了 一个 自定义 的 升迁 工具 的 功能 结构 、 设计 方法 和 实现 过程 。 
 　 　 关键词 　 SQL ， 存储 过程 ， 触发器 ， MIS 
 1 　 概述 
 　 　 Mircosoft   SQL   Server   是 为 Windows   NT   操作系统 的 数据库 应用 专门 设计 的 , 作为 数据处理 的 后台 服务 , 这种 后 端 可以 提高 安全性 和 事务处理 的 鲁棒性 , 可以 实现 强大 的 数据管理 功能 , 处理速度 快 , 容量 可以 随时 扩充 。 它 对 数据 存储空间 的 自由 分配 ， 并且 有 数据处理 的 实时性 和 远程 数据处理 能力 。 Visual   FoxPro   ( VFP ) 和   SQL   Server 是 黄金搭档 , 它 支持 本地 和 远程 两种 视图 ， 而且 可以 将 视图 与 报表 联系 起来 , 有利于 程序 的 运行 效率 , 并 尽可能 简化 事务 处理过程 。 因此 ， VFP 和 SQL   Server 越来越 广泛 地 被选为 管理信息系统 的 前端 开发工具 和 数据库 管理系统 。 
 　 　 为此 ， 我们 用 VFP 和 结构化 查询语言 开发 了 一个 升迁 工具 — —   v — uprise 。 
 
 
 图 1 　 v — uprise 的 功能 结构 
 　 　 图 1 为 v — uprise 的 功能 结构 示意图 。 
 2 　 v — uprise 的 设计 与 实现 
 　 　 v — uprise 的 实现 流程 是 先 将 后台 数据库 和 后台 表 的 各 部分 升迁 属性 定义 到 本 地表 中 ， 然后 通过 VFP 提供 的 SQL   pass - through 函数 实现 将 这些 属性 创建 到 SQL   Server 上 。 下面 分别 介绍 各 部分 的 设计 和 实现 过程 。 
 2.1 　 表 结构 维护 
 　 　 包括 新增 表 结构 、 修改 表 结构 、 删除 表 结构 、 创建 后台 表 、 摘除 后台 表等 功能 。 表 结构 信息 存储 在 本 地表 table — fld 中 ， 其 结构 如下 ： 
 字 段 　 字段名 　 　 　 　 类型 　 长度 　 注释 
 　 1TABLENAMEC16 表名 
 　 2FIELDNAMEC16 字段名 
 　 3DATATYPEC16 字段 类型 及 长度 
 　 4NULLFLAGL1 是否 关键字 段 
 　 5DEFAVALUEC10 默认值 
 　 6CHECKC40 合法性检查 表达式 
 　 7FLDMEMOC60 字段 说明 
 　 　 TABLENAME 、 FIELDNAME 、 DATATYPE 、 DEFAVALUE 、 CHECK 等 信息 的 定义 都 必须 符合 Transact - SQL 的 句法 ， 如 长度 为 4 的 字符 型 字 段 类型 及 长度 DATATYPE 定义 为 Char ( 4 ) 。 建立 新 的 后台 表 步骤 如下 ： 首先 通过 新增 表 结构 功能 定义 表 结构 信息 ， 然后 选择 创建 后台 表 功能 建立 后台 表 。 修改 后台 表 的 结构 时 ， 首先 通过 修改 表 结构 功能 修改 表 的 结构 信息 ， 然后 选择 创建 后台 表 功能 对 后台 表 结构 进行 维护 ， 此 功能 保持 后台 表 的 原有 数据 不 丢失 。 
 　 　 升迁 一个 新表时 ， 通过 往后 台 发送 CREATE   TABLE 命令 创建 ， 如果 创建 不 成功 ， 则 新表 定义 可能 有 错 ； 升迁 一个 后台 已 存在 的 表即 进行 后台 表 结构 维护 时 ， 为了 保证 后台 表 中原 有 信息 不 丢失 及 升迁 成功 ， 第一步 ， 创建 一个 基于 原表 的 远程 视图 ， 通过 此 视图 将 后台 表中 数据 下载 到 本地 临时 表中 保存 ； 第二步 ， 检查表 间 参照 完整性 ， 如果 原 后台 表中 有 字 段 为 其他 表 的 外码 ， 则 摘除 掉表间 参照 完整性 ； 第三步 ， 先 摘除 原 后台 表 ， 然后 发送 CREATE   TABLE 命令 创建 基于 新 结构 的 后台 表 ； 第四步 ， 恢复 后台 表 中原 有 数据 及表间 参照 完整性 。 通过 往后 台 发送 DROP   TABLE 命令 摘除 后台 表 。 
 2.2 　 表 索引 维护 
 　 　 对 后台 表 进行 索引 维护 ， 包括 定义 索引 、 创建 索引 和 摘除 索引 等 功能 。 索引 的 有关 信息 存储 在 本 地表 table — idx 中 ， 其 结构 如下 ： 
 字 段 　 字段名 　 　 　 　 类型 　 长度 　 注释 
 　 1TABLENAMEC16 表名 
 　 2INDNAMEC16 索引 名 
 　 3FIELDLISTC80 索引 表达式 
 　 4CLUSTERL1 是否 簇 索引 
 　 5UNIQUEL1 是否 唯一 索引 
 　 　 索引 名 INDNAME 和 索引 表达式 FIELDLIST 的 定义 必须 符合 Transact - SQL 的 句法 。 进行 后台 表 的 索引 维护 时 ， 先 定义 索引 的 有关 信息 ， 然后 选择 创建 索引 功能 建立 后台 表 的 索引 。 
 　 　 创建 索引 和 摘除 索引 分别 通过 往后 台 发送 CREATE   INDEX 命令 和 DROP   INDEX 命令 来 实现 。 
 2.3 　 参照 完整性 定义 
 　 　 参照 完整性 控制数据 一致性 ， 尤其 是 不同 表 的 主 关键字 和 外部 关键字 之间 关系 的 规则 。 参照 完整性 定义 完成 建立 表 之间 的 联系 ， 控制 记录 在 相关 表中 的 插入 、 更新 或 删除 。 表间 联系 的 有关 信息 存储 在 本 地表 table — rlt 中 ， 其 结构 如下 ： 
 字 段 　 字段名 　 　 　 　 类型 　 长度 　 注释 
 　 1TABLENAMEC16 表名 
 　 2FORKEYNAMEC16 外码 名 
 　 3FIELDLISTC80 外 码字 段 
 　 4PARTABNAMEC16 参照 表名 
 　 5PARKEYFLDC80 参照 字 段 
 　 　 外码 名 FORKEYNAME 的 定义 必须 符合 Transact - SQL 的 句法 。 进行 参照 完整性 定义 时 ， 先 定义 表间 的 联系 信息 ， 然后 选择 创建 外码 功能 建立 后台 表 之间 的 联系 。 
 　 　 创建 和 摘除 表间 参照 完整性 分别 通过 往后 台 发送 ALTER   TABLE   ADD   CONSTRAINT 命令 和 ALTER   TABLE   DROP   CONSTRAINT 命令 来 实现 。 
 2.4 　 存储 过程 创建 
 　 　 SQL   SERVER 中 ， 存储 过程 是 保存 在 一个 数据库 中 一个 名称 下 的 语句 集合 。 在 后台 用 存储 过程 实现 一些 任务 时有 它 独特 的 特点 和 优越性 ， 可以 显著 提高 处理 效率 。 存储 过程 是 经过 预先 定义 和 编译 过 的 事务 ， 这 就 意味着 它 与 普通 的 SQL 语句 不同 ， 当 首次 运行 一个 存储 过程 时 ， SQL   SERVER 的 查询 处理器 对 其 进行 语法 语义 分析 ， 在 排除 了 错误 之后 ， 形成 存储 在 系统 中 的 可 执行 方案 ， 下次 再 执行 时 ， 就 不 需要 再 进行 语句 分析 ， 因而 执行 速度 较 快 ； 存储 过程 和 待处理 的 数据 都 放在 同一 台 SQL   SERVER 上 ， 由 数据库 管理系统 来 存储 和 管理 这些 存储 过程 ， 效率 自然 提高 ； 存储 过程 的 调用 一般 是 由 客户端 通过 存储 过程 名 进行 引用 ， 在 网上 传播 的 只是 过程 名 和 参数 ， 而 不是 形成 存储 过程 的 SQL 语句 串 ， 减少 了 网络 的 传输 量 ； 存储 过程 具有 函数 的 特性 ， 有形 参和 返回值 。 因而 ， 在 设计 时应 规划 好 哪些 任务 在 客户端 实现 方便 ， 哪些 任务 在 后台 实现 方便 。 存储 过程 定义 的 有关 信息 存储 在 本 地表 table — pro 中 ， 其 结构 如下 ： 
 字 段   字段名 　 　   类型   长度   注释 
 　 1PROCNAMEC20 存储 过程 名 
 　 2PROCPARAC100 存储 过程 参数 
 　 3PROCSQLM4 组成 存储 过程 的 SQL 语句 
 　 4CREFLAGL1 是否 已 创建 
 　 　 PROCNAME 、 PROCPARA 、 PROCSQL 的 定义 都 必须 符合 Transact - SQL 句法 。 创建 存储 过程 时 ， 首先 定义 存储 过程 的 上述 信息 ， 然后 选择 创建 功能 即可 创建 存储 过程 到 后台 数据库 中 。 
 　 　 创建 和 摘除 后台 数据库 存储 过程 分别 通过 发送 CREATE   PROCEDURE 命令 和   DROP   PROCEDURE 命令 来 实现 。 
 2.5 　 触发器 创建 
 　 　 SQL   SERVER 中 ， 触发器 是 一种 特殊 的 存储 过程 ， 保存 在 数据库 一个 表中 的 一个 名称 下 的 SQL 语句 集合 。 在 表 的 插入 、 更新 或 删除 操作 之后 自动 运行 。 经常 用作 加强 事务 级 规则 和 数据完整性 。 触发器 的 运行 开销 通常 很 低 。 触发器 定义 的 有关 信息 存储 在 本 地表 table — tri 中 ， 其 结构 如下 ： 
 字 段   字段名 　 　 　   类型   长度   注释 
 　 1TRINAMEC20 触发器 名 
 　 2TABLENAMEC16 对应 的 后台 表名 
 　 3TRISETC20 触发器 类型 集合 
 　 4TRISQLM4 组成 触发器 的 SQL 语句 
 　 5CREFLAGL1 是否 已 创建 
 　 　 TRINAME 、 TRISET   、 TRISQL 的 定义 必须 符合 Transact - SQL 句法 ， TRISET 的 内容 为 集合 { INSERT , UPDATE , DELETE } 的 子集 。 创建 触发器 时 ， 首先 定义 触发器 的 上述 信息 ， 然后 选择 创建 功能 即可 创建 触发器 到 后台 表中 。 
 　 　 创建 和 摘除 后台 表 触发器 分别 通过 发送 CREATE   TRIGGER 命令 和   DROP   TRIGGER 命令 来 实现 。 
 3 　 结束语 
 　 　 本 系统 实现 了 数据库 表 结构 等 的 升迁 功能 ， 为 开发者 提供 了 一个 灵活 的 维护 工具 。 特别 是 在 系统 的 试运行 阶段 ， 由于 项目 开发者 与 用户 之间 存在 通信 鸿沟 及 系统 需求 的 不稳定性 ， 往往 对表 结构 的 维护 量 比较 大 ， 通过 v — uprise 升迁 工具 ， 维护 人员 可 直接 在 前台 操作 ， 方便快捷 ， 不必 通过 发送 SQL 命令 或 到 后台 SQL   Server 服务器上进行 操作 ， 加强 了 系统 数据 的 安全性 。 另外 ， 由于 后台 数据库 和表 的 升迁 属性 都 保存 在 本 地表 中 ， 便于 系统 完成 后 进行 软件 文档 的 统一 编制 和 输出 。 我们 将 该 工具 用于 多个 管理信息系统 的 实践证明 ， 该 系统 比 VFP 自身 提供 的 升迁 工具 更为 方便 实用 。 
 作者 单位 ： 左春荣 　 合肥工业大学 计算机网络 研究所 　 安徽 . 合肥 ( 230009 ) 
 参考文献 
 　 ［ 1 ］ 　 许振宇 . Visual   FoxPro   5.0 高级 程序设计 指南 . 北京 ： 海洋 出版社 ， 1998 , 4 
 　 ［ 2 ］ 　 Microsoft . Microsoft   SQL   Server   6.5   Transact - SQL 参考 指南 . 北京 ： 科学出版社 ， 1997 , 8 
 　 ［ 3 ］ 　 颜洪忠 . IS 中 的 数据库 设计 与 性能 . 第十三届 全国 管理信息系统 学术年会 论文集 . 机械 工业 出版社 ， 1998.10 , 3 : 7 
 　 　 收稿 日期 : 1999 - 02 - 19 
