微型机 与 应用 
 MICROCOMPUTER   &   ITS   APPLICATIONS 
 1999 年   第 18 卷   第 2 期   Vol.18   No.2   1999 
 
 
 
 分布式 WEB 组件 模型 分析 
 张 　 钧 　 姜永炅 　 侯文永 
 　 　 摘 　 要 ： 分析 了 组件 模型 的 规范 和 CORBA 、 DCOM 两种 工业 标准 的 组件 模型 ， 探讨 了 组件 模型 的 体系结构 和 分布式计算 等 问题 。 
 　 　 关键词 ： 组件 　 分布式计算 　 三层 体系结构 　 ActiveX / DCOM 模型 　 JavaBeans / CORBA 模型 
 　 　 进入 90 年代 以来 ， 组件 方法 已 成为 工业界 普遍 接受 的 提高 软件 质量 、 可靠性 与 软件 生产力 的 行之有效 的 方法 和 技术 。 组件 方法 是 指用 装配 可 重用 软件 组件 的 方法 来 构造 应用程序 。 软件 组件 又 称为 软件 构件 ， 是 具有 特殊 计算 功能 的 、 自主 的 软件 模块 ， 这种 软件 模块 遵照 一定 的 接口 规范 可以 实现 互操作 。 与 对象 相比 ， 组件 是 自主 的 ， 软件 组件 化 不 需要 代码 的 重新 编译 和 联接 ， 而 直接 作为 功能模块 在 二进制 级 用于 软件系统 的 装配 。 软件 组件 化 思想 和 代码 重用 优势 以及 组件 用于 WEB 应用 所 形成 的 Object   WEB 、 three - tier 体系 和 分布式 处理 ， 给 软件工程 带来 了 新 的 活力 。 
 1 　 组件 模型 
 1.1 　 组件 模型 的 共性 
 　 　 组件 模型 为 开发者 定义 软件 组件 建立 了 一套 体系结构 和 API 集 ， 它 主要 由 组件 ( Component ) 和 容器 ( Container ) 构成 。 组件 是 软件 的 具有 可 重用 特性 的 基本 部件 ， 容器 类似 于 装配车间 ， 是 一种 存放 相关 组件 的 “ 器皿 ” ， 用于 安排 组件 、 实现 组件 间 的 交互 ， 其 形式 可以 是 表格 、 页面 、 框架 和 外壳 ， 同时 容器 可以 作为 另 一个 容器 的 组件 。 
 　 　 一般 组件 模型 提供 以下 6 种 服务 ： 
 　 　 1 . 组件 接口 暴露 与 显示 。 在 组件 模型 中 ， 为 实现 组件 之间 以及 组件 与 容器 之间 的 交互 ， 组件 就 必须 将 自身 的 接口 公开 。 因此 ， 不论 组件 是 使用 何种 工具 构建 的 ， 都 可以 通过 该 机制 实现 组件 间 的 动态 交互 。 
 　 　 2 . 组件 特性 。 指 1 个 组件 的 公共 属性 ， 或者 直接 反映 组件 的 状态 ， 或者 直接 影响 组件 的 状态 ， 可以 通过 方法 调用 来 获取 或 修改 这些 属性 。 
 　 　 3 . 事件处理 。 事件处理 机制 的 作用 是 激活 事件 、 广播 事件 ， 将 事件 传递 给 相应 的 组件 。 
 　 　 4 . 持久性 。 持久性 是 将 组件 的 状态 存储 在 一个 较 稳定 的 地方 ， 如 容器 的 相关 描述 中 和 其它 组件 的 相互 关系 描述 中 ， 有利于 快速 及 正确 地 保存 和 访问 这些 状态 。 
 　 　 5 . 应用 构造 器 支持 。 是 组件 向 应用 开发工具 显示 自身 属性 和 行为 的 机制 ， 利用 此 接口 ， 开发工具 可以 决定 组件 的 属性 和 行为 ， 修改 组件 的 状态 和 外观 ， 建立 组件 间 的 联系 。 
 　 　 6 . 组件 打包 。 是 指 将 分布 在 网络 各处 的 资源 “ 打包 ” 成 1 个 组件 的 机制 ， 该 组件 仅 有 1 个 入口 。 
 1.2 　 ActiveX / DCOM 模型 
 　 　 在 ActiveX / DCOM 模型 中 ， COM 是 DCOM 的 基础 ， 由 1 组 规范 和 1 个 系统 级 实现 构成 ， 这组 规范 包括 COM 核心 、 结构化 存储 、 统一 数据传输 以及 智能 命令 。 其中 COM 核心 定义 了 软件 组件 的 对象 与其 使用者 如何 通过 二进制 接口标准 进行 交互 的 规格 说明 ； 结构化 存储 定义 了 符合 文档 的 存储 格式 ， 以及 创建 文档 的 接口 ； 统一 数据传输 定义 了 一套 组件 间 数据交换 的 标准接口 ； 智能 命名 给 对象 1 个 系统 可 识别 的 名字 。 
 　 　 COM 采用 COM   IDL 描述 组件 接口 ， 支持 多 接口 可 用于 解决 版本 问题 ， COM 定义 了 1 个 所有 组件 都 支持 的 特殊 接口 IUnknown ， 其它 接口 都 可以 从 这个 接口 继承 ； COM 采用 OSF   DCE 定义 通用 单值 标识符 ( UUID ) 类似 的 方法 定义 全局 唯一 标识符 ( GUID ) ， 它 是 1 个 128 位 整数 ， 生成 GUID 的 算法 保证 了 标识 的 唯一性 ； COM 还有 1 个 关键 部分 — — 注册 数据库 ， 每个 存在 于 给定 系统 的 组件 服务器 都 在 注册 数据库 中 注册 ， 数据库 存储 了 组件 服务器 的 标识 以及 服务器 类型 和 路径 。 
 　 　 在 COM 模型 中 ， 有 2 类 服务器 ， 即 进程 内 服务器 和 进程 外 服务器 。 进程 内 服务器 是 本地 机上 的 DLL ， 进程 外 服务器 可以 是 本地 EXE 可执行程序 或 远程 机 的 DLL 和 EXE 。 1 个 服务器 内部 包括 2 部分 ， 即 组件 的 实现 体和类 工厂 。 类 工厂 的 功能 是 生产 组件 对象 。 并 把 对象 的 接口 指针 返回 给 客户 。 
 　 　 COM 库 在 操作系统 内 完成 查找 注册 数据库 、 定位 组件 服务器 以及 返回 对象 指针 的 工作 。 客户 收到 接口 指针 时 ， COM 自动 退出 ， 由 客户 和 服务器 直接 通信 。 COM 可 让 客户 透明 地 和 组件 进行 通信 ， 而 不必 考虑 其 具体位置 。 这种 透明性 由 服务 控制 机制 SCM 完成 ， 如果 组件 位于 进程 内 ， 则 可 直接 调用 ， 当 组件 位于 进程 外时 ， 调用 先 到达 SCM 提供 的 Proxy ， 再 由 Proxy 生成 服务 对象 的 PRC 来 实现 。 
 
 图 1     COM 工作 机制 
 　 　 DCOM 是 对 COM 网络 技术 的 改进 ， 把 组件 软件应用 推向 了 Internet ， 它 支持 多种 通信协议 ， 为 Java 提供 分布 能力 ， 支持 多种 开发 语言 ， 其 底层 实现 仍然 基于 DCE   RPC 。 
 　 　 ActiveX 建立 在 DCOM 模型 上 ， 它 包括 控制 、 文档 、 脚本 3 种 最 常用 的 技术 ， 同时 也 包括 Java 虚拟机 和 服务器 框架 。 它 缩小 了 组件 尺寸 以便 加快 组件 下载 的 速度 ， 置于 WEB 页面 中 ， 用于 开发 基于 WEB 的 应用 系统 ( 包括 数据库 应用 ) 。 
 1.3 　 JavaBeans / CORBA 模型 
 　 　 CORBA ， OMG 的 公共对象 请求 代理 体系结构 ， 定义 了 如何 在 网络 上 通过 ORB 进行 互操作 ， CORBA 不仅 是 1 种 对象 请求 的 中介 工具 ， 也 是 1 个 分布式 对象 平台 。 纯 CORBA 可以 支持 任何 语言 和 操作系统 的 访问 。 
 　 　 CORBA 通过 将 自己 的 对象 模型 映射 到 客户 和 服务器 所用 语言 的 具体 对象 模型 ， 实现 接口定义 和 服务 实现 的 对应 关系 。 这一 独立 的 组件 模型 体现 在 IDL 上 ， IDL 语言 描述 服务 边界 及 接口 ， 根据 该 接口定义 ， 客户程序 就 可以 提出 服务 请求 。 ORB 负责 为 对象 请求 寻找 能 提供 相应 服务 的 对象 ， 从而 提供 了 应用 系统 实现 的 分布 能力 。 
 　 　 JavaBeans 是 Sun 公司 提出 的 基于 Java 的 组件 模型 ， 采用 纯 Java 编写 、 独立 于 平台 ， Bean 可以 是 可视化 组件 ， 也 可以 是 实现 一些 基础性 工作 的 非 可视 对象 。 JavaBeans 在 本地 的 活动 是 在 与其 容器 相同 的 地址 空间 内 进行 的 ； 在 网络 范围 内 ， JavaBeans 原先 主要 采用 Java   RMI ( Java   Remote   Method   Invocation ) 进行 组件 间通信 ， 应用 的 客户端 和 服务器 都 是 参照 分布式系统 接口 实现 的 ， 而 分布式系统 接口 能 被 自动 地 、 透明 地 从 客户端 传送 到 服务器端 。 
 　 　 CORBA 和 Java 的 结合 使 JavaBeans 组件 间 的 通信 以 CORBA / IIOP 作为 基础设施 ， Java   ORB 完全 采用 Java 编写 ， 所有 的 系统 接口 都 是 采用 Java   IDL 定义 的 ， Java   Stub 可以 由 IDL 接口 产生 。 通过 JDK 这样 的 包含 Java   ORB 的 组件 开发 环境 ， JavaBeans 使用 Java   IDL 规范 定义 组件 的 接口 ， 这 使得 JavaBeans 能够 通过 IIOP 与 IDL 服务器 相互 调用 。 
 　 　 下面 是 在 基于 WEB 计算 的 体系结构 中 ， JavaBeans / CORBA 组件 模型 的 工作 机制 。 
 　 　 1 . 从 WEB 服务器 下载 HTML 页面 ， 包括 内嵌 的 Java 小 程序 的 索引 。 
 　 　 2 . 浏览器 从 HTTP 服务器 检索 Java 组件 ， HTTP 服务器 在 找到 所 需 的 索引 后 ， 以 字节 码 的 形式 下载 给 浏览器 。 
 　 　 3 . 浏览器 加载 组件 ， 首先 要 经过 Java 运行 安全检查 ， 然后 进入 客户机 内存 。 
 　 　 4 . Java 组件 中 按照 IDL 生成 的 客户机 程序段 遵循 IIOP 调用 ORB 服务器 中 的 对象 ， 这种 对话 将 一直 持续 下去 ， 直到 其中 一方 申请 终止 。 
 　 　 5 . 服务器 对象 也 可以 为 客户机 生成 下 1 个 HTML 页面 ， 告诉 客户机 下面 该 从 哪儿 下载 什么 URL 。 在 基于 WEB 数据库 的 应用 中 ， 服务器 JavaBeans 组件 往往 通过 JDBC 访问 SQL 数据库 ， 这些 数据库 可以 放在 远程 数据库 服务器 上 。 与 HTTP / CGI 不同 ， 用户 可以 通过 CORBA 嵌入 在 HTML 页面 的 任何 组件 与 服务器 通信 ， 而 不必 从 页面 内容 中 调出 。 
 　 　 图 2 为 CORBA 组件 模型 的 工作 机制 示意图 。 
 
 图 2     CORBA 组件 模型 工作 机制 
 2 　 分布式计算 
 　 　 在 分布式计算 模型 中 ， 需要 涉及 到 许多 地理分布 的 资源 ， 参与 的 计算 任务 在 事务 失败 的 情况 下 往往 会 发生 数据 不 一致 情况 ， 因此 提供 服务 的 健壮性 、 可靠性 及 服务质量 就 非常 重要 。 
 　 　 与 传统 大型机 运算 相似 ， 在 基于 服务 的 网络 环境 中 ， 分布式计算 也 需要 TP   monitor 的 协调 ， TP   monitor 管理 所有 参与 运算 的 进程 ， 对 客户端 提供 消息 传送 、 负载平衡 和 故障 恢复 ， 并 保持 整个 任务 是 1 个 原子 事务 。 对 消息 传送 来说 ， 通常 需要 消息 队列 中间件 来 保证 它 在 网络 环境 中 的 正确性 和 无 重复 。 这种 中间件 按照 同步 、 异步 或 存储转发 3 种 机制 在 不同 的 操作系统 中 按 不同 的 通信 情况 连接 ， 在 连接 失败 时 ， 队列 中 的 消息 将 在 连接 恢复 时 重新 发送 。 对于 比 大型机 环境 更为 复杂 的 连接 ， 往往 需要 多个 TP   monitor 和 消息中间件 来 提供 服务 。 
 　 　 此外 ， 参与 分布式计算 的 服务 组件 和 资源 在 网络 中是 分布 存在 的 ， 由 组件 协调 器 提供 负载 均衡 的 能力 。 客户 浏览器 中 的 组件 发出 了 对象 请求 ， 通过 代理 ， 在 网络 中 搜寻 并 定位 服务 对象 ( 组件 ) 的 位置 ， 并 使 之 提供 所 需 的 服务 。 
 　 　 在 DCOM 模型 中 ， MTS 担任 了 事务 监控 和 组件 协调 的 角色 。 要 使 ActiveX 组件 事务 化 ， 只 需 在 应用程序 中将 其 Transaction   Required 属性 置 为 真 ， 在 事务处理 中 调用 SetComplete 或 SetAbort 例程 让 MTS 提交 或 回滚 1 个 事务 。 通过 MTS ， 服务器端 组件 注册 到 WEB 服务器 后 ， 可以 动态 地 分布 到 网络 的 站点 上 运行 ， 透明 地为 申请 服务 的 组件 完成 数据 访问 、 计算 或 其它 任务 ， 提高 此类 WEB 应用 系统 的 网络 运行 效率 。 相应 地 ， 在 CORBA / ORB 模型 中 ， JavaBeans 组件 的 分布 和 通信 由 Java   ORB 通过 IIOP 协议 进行 ， 而 事务管理 则 需要 像 IBM   Component   Broker 或 BEA   Tuxedo / Iceberg 这样 的 TP   monitor 来 完成 。 
 3 　 WEB 组件 模型 的 体系结构 
 　 　 Intranet 的 发展 使得 WEB 成为 取代 传统 C / S 体系 的 应用 系统 开发 手段 ， 它 在 传统 2 层 C / S 模型 中 加入 新 的 1 层 — — WEB 组件 服务 ， 从而 形成 three - tier 体系结构 。 
 　 　 在 客户端 ， 浏览器 从 WEB 服务器 下载 HTML 页面 ， 作为 应用程序 与 用户 交互 的 接口 ， 页面 中 的 客户机 组件 可以 和 其它 客户机 组件 或 服务器 组件 通信 。 
 　 　 服务器端 组件 通过 IDL 封装 起来 ， 作为 中间层 在 WEB 端 运行 ， 把 应用程序 的 表示 逻辑 与 事务 逻辑 、 应用逻辑 分开 ， 提供数据 计算 、 数据库 访问 等 服务 。 如 在 CORBA 模型 中 ， JavaBeans 组件 通过 JDBC 访问 数据库 ， 通过 Java   ORB 相互 通信 ， IIOP 充当 了 通用 数据总线 的 角色 。 TP   monitor 也 同样 包含 在 中间层 中 ， 保证 由 众多 组件 参与 运算 的 事务 的 数据完整性 。 
 　 　 在 后 端 ， 所有 组件 能够 访问 的 空间组成 了 第 3 层 ， 如 数据库系统 、 邮件系统 和 群件 服务器 等 。 与 传统 2 层 C / S 结构 不同 的 是 ， 这些 服务 没有 直接 面向 客户端 服务 ， 而是 由 服务器 组件 完成 ， 为 客户端 返回 执行 的 结果 。 
 　 　 ActiveX / DCOM 和 JavaBeans / CORBA — — 这 2 种 组件 模型 使 基于 WEB 的 three - tier 体系 方法 真正 成熟 ， 它们 不但 解决 了 WEB 数据库 应用 效率 的 问题 ， 同时 组件 方法 和 软件 组件 化 技术 使 应用 系统 的 事务 逻辑 、 应用逻辑 和 表示 逻辑 可以 分层 实现 和 层 内 组件 化 ； three - tier 体系 在 Intranet 上 的 构建 可以 通过 代码 重用 技术 充分利用 业务 无关 的 软件 组件 来 构建 新 的 系统 ， 提高 软件生产率 。 
 　 　 组件 思想 自 VB 中 的 控件 、 Delphi 的 特色 数据库 访问 组件 以来 逐渐 在 客户端程序 开发 中 变得 成熟 ， 同时 在 基于 WEB 数据库 的 应用 中 ， 也 从 CGI 、 服务器 API 而 最终 采用 了 组件 模型 。 尽管 目前 ActiveX / DCOM 和 JavaBeans / CORBA 之间 存在 着 标准 之争 ， 但 组件 方法 是 大势所趋 ， 组件 模型 将 是 软件开发 、 构造 应用 系统 的 最为 行之有效 的 方法 。 
 作者 单位 ： 上海交通大学 计算机科学 与 工程系 ( 200030 ) 
 参考文献 
 1 　 Pountain   D . The   Component   Enterprise . Byte , 1997 ; ( 5 ) 
 2 　 Pountain   D , Montgomery   J . Web   Components . Byte , 1997 ; ( 8 ) 
 3 　 Chappell   D , Lintbicum   D   S . ActiveX   Demystified . Byte , 1997 ; ( 9 ) 
 4 　 Montgomery   J . Distributing   Components . Byte , 1997 ; ( 4 ) 
 5 　 Pompeii   J . Programming   with   CORBA   and   DCOM . Byte.1997 ; ( 4 ) 
 6 　 麦中 凡 . 从 OLE 到 DCOM — — 微软 的 构件 软件技术 分析 . 中国 计算机用户 ， 1997 ； ( 5 ) 
 ( 收稿 日期 ： 1998 - 08 - 15 ) 
