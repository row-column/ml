软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 10 卷   第 8 期   Vol.10   No.8   1999 
 
 
 
 一种 并行 分布 对象 的 互操作 模型 
 王晨 　 周颖 　 张德富 
 摘要 　 并行 软件设计 本身 的 复杂性 使 它 的 复用 成为 一个 引人注目 的 问题 . 分布 对象 技术 不仅 可以 将 并行 软件 封装 成 相应 的 构件 , 而且 提供 了 利用 各种 异构 系统 进行 并行计算 的 可能性 , 但 这样 往往 会 使 这些 构件 的 互操作 的 效率 有所 降低 . 文章 提出 的 并行 分布 对象 互操作 模型 试图 解决 这一 问题 . 这个 模型 与 分布 对象 的 旧有 模型 兼容 , 并且 实际 测试 结果表明 , 它 还 能 挖掘出 并行 分布 对象 间 的 更 多 并行性 . 
 关键词 　 并行计算 , 分布 对象 , 互操作 , 数据 并行 , 任务 并行 . 
 中图法 分类号 　 TP311 
 A   Model   for   Interoperability   of   Distributed   Objects '   Parallel   Implementations 
 WANG   Chen   ZHOU   Ying   ZHANG   De - fu 
 ( State   Key   Laboratory   for   Novel   Software   Technology   Nanjing   University   Nanjing   210093 ) 
 ( Department   of   Computer   Science   and   Technology   Nanjing   University   Nanjing   210093 ) 
 Abstract 　   The   complexity   of   developing   parallel   software   makes   it   attractive   to   research   their   reusability .   The   distributed   object   technology   provides   some   benefits   in   this   field   because   it   can   encapsulate   parallel   programs   to   components   and   exploit   the   parallelism   in   the   various   
 heterogeneous   systems .   However ,   the   drawback   to   use   this   technology   to   do   parallel   computing   is   
 obvious   because   of   the   limit   interoperability   among   those   components .   A   model   of   interoperability   is   proposed   in   this   paper .   This   model   keeps   compliant   with   the   common   distributed   object   model   while   gaining   more   parallelism   from   the   interoperability   of   distributed   objects . 
 Key   words 　 Parallel   computing ,   distributed   object ,   interoperability ,   data   parallelism ,   task   parallelism . 
 　 　 随着 计算机网络 在 人们 生活 中 的 地位 越来越 重要 , 也 随着 软件 工业 的 迅速 发展 , 分布 对象 的 思想 和 技术标准 （ OMG 的 CORBA ［ 1 ］ ） 已 日渐 为 人 所 接受 , 但 要 使 这种 思想 和 技术标准 真正 并且 充分 地 发挥作用 却 需要 使 它们 适应 尽可能 多 的 应用领域 , 满足 这些 领域 的 特定 需求 . 这方面 的 研究 是 当前 分布 对象 技术 的 主要 研究 方向 , 涉及 内容 包括 CORBA 的 实时性 ［ 2 ］ 、 容错性 ［ 3 ］ 和 对 移动 计算 ［ 4 ］ 的 支持 等 . 近年来 , 基于 分布 对象 的 并行计算 也 引起 了 较 多 关注 ［ 5 ～ 7 ］ , 这 主要 有 以下 几个 原因 . 
 　 　 ( 1 )   面向对象 技术 是 改变 旧有 并行程序 设计 方法 粗糙 状况 的 一种 有效 手段 .   
 　 　 ( 2 )   分布 对象 技术 本身 的 特征 是 解决 并行 软件 互操作 问题 的 一种 有效 手段 .   
 　 　 ( 3 )   使用 分布 对象 技术 能够 将 分散 在 异构 系统 中 的 处理 资源 组织 起来 并 发挥 它们 的 并行计算 能力 , 这样 的 异构 系统 可能 是 大规模 的 并行 计算机 处理 机群 , 也 可能 是 高速 网络连接 的 工作站 网络 . 
 　 　 一些 基于 异构 大型 计算机 的 协作 计算 展示 了 分布 对象 技术 在 这方面 的 前景 ［ 8 ］ . 
 　 　 对于 通常 的 分布 对象 来说 , 接口定义 语言 （ interface   definition   language , 简称 IDL ） 所 描述 的 接口 方法 提供 了 客户 足够 的 信息 来 满足 自己 的 需要 . 但 如果 这些 分布 对象 采用 并行 方式 来 实现 , 而 客户 出于 效率 的 考虑 要 直接 与 并行 实现 体中 的 某 一个 进程 或 线程 协作 完成 一项 工作 时 , 接口定义 语言 就 很 难 给出 令 客户 满意 的 信息 了 . 为此 , 我们 给出 了 一种 并行 分布 对象 的 互操作 模型 , 使 分布 对象 的 并行 实现 之间 能够 比较 充分 地 互相 连接 , 保持 比较 好 的 并行 效率 . 
 　 　 与此相关 的 研究 有 两类 . 一类 是 解决 CORBA 本身 的 实现 效率 , 如 RT   ORB ［ 4 ］ , 工作 做 在 底层 . 另一类 试图用 CORBA 来 解决 数据 并行程序 的 互操作 , 如 PARDIS ［ 5 ］ , POOMA ［ 9 ］ , 这 类 工作 都 才 开始 进行 . 与 之 相比 , 我们 的 模型 概括 了 任务 并行 和 数据 并行 两种 方式 , 提出 了 一种 统一 的 互操作 模式 , 也就是说 , 这种 模型 具有 更强 的 互操作 能力 . 
 1   分布 对象 的 并行 实现 
 　 　 现在 较为 常用 的 并行程序 设计模式 以多 程序 多数据流 （ multi - program   multi - data , 简称 MPMD ） 和 单 程序 多数据流 （ single   program   multi - data , 简称 SPMD ） 为主 , 前者 发掘 任务 并行性 （ task   parallelism ） , 后者 发掘 数据 并行性 （ data   parallelism ） , 两者 组合 应用 于 并行程序 设计 也 比较 常见 . 任务 并行性 通过 几个 任务 并发 计算 不同 的 数据 集合 来 获取 , 每 一个 集合 上 的 运算 被 称为 一个 任务 , 相反 地 , 数据 并行性 通过 并发 计算 同一个 数据 集合 的 不同 部分 而 获得 . 几个 数据 并行 的 任务 的 组合 可以 成为 一个 任务 并行 模式 , 几个 任务 并行 的 任务 的 组合 也 可以 构成 更大 的 任务 并行 模式 , 而 几个 数据 并行 的 任务 和 几个 任务 并行 的 任务 之间 也 能 组成 一种 任务 并行 模式 . 这种 组合 是 现在 并行计算 实际 应用 中 很 常见 的 现象 , 因为 计算 问题 通常 不是 很 单一 的 , 各种 组合 都 能够 发掘出 更 多 的 并行性 . 但 并行 计算机 、 并行 计算机 群 或者 并行 支撑 环境 之间 的 差异 使得 在 很多 情况 下 的 组合 并行计算 变得 十分复杂 , 很难 做到 有 良好 的 扩展性 . 而 分布 对象 技术 正好 可以 弥补 并行 软件 在 这方面 的 不足 , 它 可以 通过 一种 中介 语言 （ IDL ） 将 各种 异构 分布 对象 无缝 地集 成为 一个 系统 , IDL 通过 编译器 映射 成 各种 具体 的 实现 语言 . 
 　 　   为了 描述 的 严密 和 进一步 探讨 的 方便 , 我们 借助 CCS ( calculus   of   communicating   system ) ［ 10 ］ 来 描述 分布 对象 的 并行 实现 . 分布 对象 可以 表示 成 如下 形式 ［ 11 , 12 ］ ： 
 O = ( ( V1 | V2 ... | Vn | M1 | M2 ... | Mk ) ＼ ACC ( V1 ) ＼ ... ＼ ACC ( Vn ) | OB ) ＼ ACC ( M1 ) ... ＼ ACC ( Mk ) , 
 其中 Vi 表示 域 变量 , Mi 表示 对象 中 的 接口 方法 . OB 表示 一种 进程 间 消息传递 到 方法 调用 的 映射 方式 , 在 实现 中 通常 是 一个 调度 器 （ scheduler ） . ACC ( Vi ) 表示 方法 对 变量 的 存取 , ACC ( Mi ) 表示 调度 器 对 方法 的 激活 . “ | ” 是 并发 代理 的 组合 （ compose ） 操作符 , “ ＼ ” 是 限制 操作符 （ restriction ） , 用于 对外部 观察者 隐藏 相应 的 内部 事件 . 
 　 　 这里 , V = putvx . Locv ( x ) , 其中 Locv ( y ) = putvx . Locv ( x ) +. Locv ( y ) . “ + ” 表示 一种 或 关系 , Loc ( y ) 是 存放 y 的 地址 . 这个 定义 表明 , 首次 使用 变量 前 必须 对 其 进行 初始化 . 
 M = callMj . argMj1x1 .   ...   . argMjnxn . BodyMj ( x1 , ... , xn ) | M .   
 　 　 对于 方法 间 互斥 执行 的 分布 对象 而言 , 其 调度 器 定义 为 
 OBO = ( callC , O , M , ja1 ... an ...... 
 x . replyC . O . M , jx .. OBO ) , 
 其中 下标 C 标志 调用 对象 O 的 客户 , M 标志 C 所 调用 的 对象 O 中 的 方法 , j 标志 同一 客户 对此 对象 方法 的 各次 调用 . 这 表明 了 每次 调度 器 收到 客户 的 调度 请求 后 （ callC , O , M , ja1 ... an ） 将 调度 请求 传递 给 相应 的 方法 （ ） , 它 总是 等待 方法 执行 完 返回 之后 才 接收 另外 的 客户 请求 . 
 　 　 对于 方法 间 可以 并行执行 的 分布 对象 而言 , 其 调度 器 定义 为 
 OB ′ O = ( callC , O , M , 1a1 ... an ...... 
 replyM , 1 . x . replyC , O , M , jx .. OBO ) | OB ′ O ［ fo , M ］ , 
 其中 fo , M 是 个 替换 函数 . 
 fo , M = { callC , O , M , i + 1 / callC , O , M . i , callM , i + 1 / callM , i , argM , i + 1ak / argM , iak , doneM , i + 1 / 
 doneM , i , replyC , M , i + 1x / replyC , M , ix } . 
 　 　 通过 替换 , 调度 器 可以 标志 出来 自 不同 客户 的 多个 请求 , 并 同时 处理 它们 , 由此 可以 得到 一种 对象 内 方法 间 的 并行性 , 这是 一种 任务 间 的 并行 . 但 上面 给出 的 V 的 定义 中 并 不能 保证 并行执行 的 顺序 性 , 如果 第 i 次 方法 调用 中会 写 变量 Vi , 这个 结果 未必 能 反应 到 随后 执行 的 第 i + 1 次 方法 调用 中 , 因为 第 i + 1 次 方法 与 第 i 次 方法 并行执行 , 而且 可能 在 第 i 次 方法 写 变量 之前 就 使用 了 变量 Vi . 下面 的 定义 通过 一个 方法 依赖 关系 分析器 给出 两个 消息 nordep ( j ) 和 rdep ( j ) , 这 两个 消息 分别 表示 方法 j 和 j 之前 执行 的 方法 对 变量 V 不 存在 和 存在 依赖 关系 , 由此 保证 方法 间 并行执行 的 顺序 性 . 当 并行执行 的 方法 j 存取 变量 V 时 发现 与 前面 启动 的 方法 存在 读写 依赖 关系 , 并且 前面 方法 尚未 完成 对 变量 V 的 写入 , 则 阻塞 等待 前面 启动 方法 写入 的 完成 消息 . 改进 后 的 变量 定义 如下 ： 
 Locv ( y ) = （ putv , jx . ( nordepvj .. Locv ( x ) .+ rdepvj . blockvj . Locv ( x ) ) + 
 . Locv ( y )   ） | Locv ( y ) . 
 　 　 从 上面 给出 的 分布 对象 并行执行 方式 我们 可以 看出 , 对于 以 任务 并行 方式 实现 的 分布 对象 , 客户 请求 完全 通过 调度 器 散发 到 各个 方法 执行 , 各个 方法 的 执行 结果 也 通过 调度 器 回收 并 转发给 客户 , 这 不仅 增加 了 通信 开销 , 而且 使 调度 器 成为 通信 的 瓶颈 , 会 导致 分布 对象 协作 起来 后 效率 降低 . 对于 数据 并行 方式 实现 的 分布 对象 , 客户 提供 的 原始数据 也 需要 通过 调度 器 传递 给 某个 方法 , 由 这个 方法 将 数据 传递 到 各个 结点 , 结果 的 返回 也 有 一个 调度 器 的 回收 过程 , 这 也 形成 了 一个 瓶颈 . 
 　 　 要 解决 这个 问题 , 需要 对 并行 分布 对象 作 一些 特殊 处理 , 使得 各个 并行执行 体 能够 为 客户 所 感知 , 同时 又 要 保持 它 与 CORBA 等 分布 对象 框架 的 兼容性 . 
 　 　 对 分布 对象 中 数据 并行 的 实现 , 可以 将 分布 数据表示 为 DSeq . 
 DSeq = Vi1 | Vi2 ... | Vin | Mi1 | Mi2 ... | Min ＼ ACC ( Vi1 ) ＼ ACC ( Vi2 ) ... ＼ ACC ( Vin ) , 
 其中 Vi1 , ... , Vin 是 变量 Vi 分散 在 各个 结点 上 的 部分 , Mi1 , ... , Min 则 是 Mi （ 存取数据 的 方法 ） 运行 在 各个 结点 上 的 部分 . 事实上 , 可以 把 DSeq 看做 一组 由 Mik 组成 的 并行 的 任务 .   
 　 　 我们 将 任务 并行 的 分布 对象 表示 为 PObj . 
 PObj = ( ( V1 | V2 ... | Vn | M1 | M2 ... | Mk ) ＼ ACC ( V1 ) ＼ ... ＼ ACC ( Vn ) | OB ′ |   M1 ′ | M2 ′ ... | Mk ′ ) ＼ 
 ACC ( M1 ) ... ＼ ACC ( Mk ) , 
 其中 M ′ j =   callC , O , Mj , port , 1 . a1 ... an . x . 
 replyC , O , Mj , j . x .. M ′ j . 
 　 　 外部 消息 call  C , O , Mj , port . a1 ... an 与 call  C , O , M , 1 . a1 ... an 略有不同 , 需要 给出 某个 方法 对应 的 端口号 , 也 可以 将 后者 （ 递交 给 OB 的 消息 ） 看做 对 某个 特殊 端口 的 调用 , 这个 端口 可以 处理 所有 的 方法 调用 请求 , 是 一个 通用 端口 . 而 前者 是 专用 端口 , 只能 处理 对 绑定 它 的 方法 的 请求 . 由于 方法 的 调度 是 动态 的 , 端口 信息 也 时常 变化 , 我们 给出 一个 port 对象 来 刻画 这种 变化 . 
 Portmj ( y )   = putpmjx . Portmj ( x ) +. Portmj ( y ) . 
 　 　 如图 1 ( a ) 所示 , 当 某个 方法 mj 被 调度 器 在 某个 处理 结点 启动 之后 , PObj 设置 相应 方法 的 端口 信息 , 客户 需要 使用 端口 直接 请求 该 方法 的 服务 时 , 从 Port 获取 这个 信息 , 然后 向 这个 端口 送出 call 请求 , 不 需要 直接 通过 端口 获取 服务 时 , 客户 可以 把 端口 设 为 一个 特殊 值送 出 调用 请求 , 这个 请求 会先 传递 给 PObj 的 调度 器 , 然后 由 调度 器分 发给 相应 方法 . 为 保持 与 原有 分布 对象 调用 方式 的 兼容 , 我们 将 port 服务 从 ( a ) 转换 到 ( b ) . 容易 知道 , 对于 客户 来说 （ 外部 观察者 ） , 即 两种 表示 方法 对 观察者 等价 . 首先 , getpmj 也 可以 看成 是 一种 call 调用 , 因为 不 改变 PObj 状态 , 不 影响 其他 调用 的 结果 ； 其次 , 调度 器 OB 的 转发 消息 对外部 是 透明 的 , 属于 内部 状态 转换 ； 另外 , 在 把 port 视为 一个 参数 的 情况 下 , M ′ 1 | M ′ 2 ... | M ′ k 和 OB 的 入口 消息 相同 ； 再次 , 通过 M ′ i 通道 传递 到 Mi 的 消息 最终 得到 的 状态 与 通过 OB 通道 传递 到 Mi 的 消息 是 一致 的 （ 因为 Mi 的 消息 接口 对 OB 和 M ′ i 是 相同 的 ） , 这 就 意味着 通过 M ′ 1 | M ′ 2 ... | M ′ k 通道 的 消息 使 分布 对象 本身 能 达到 的 状态 与 这些 消息 通过 OB 通道 使 分布 对象 达到 的 状态 对外部 观察者 是 等价 的 . 
 　 　 　 　 　 
 ( a ) 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( b ) 
 图 1 　 Port 与 client 和 PObj 的 关系 
 　 　 下面 , 我们 将 详细 说明 这个 模型 的 实现 . 
 2   互操作 模型 
 　 　 为 实现 数据 并行 对象 和 任务 并行 对象 的 互操作 , 我们 给出 了 两个 类 ： DSeq 和 PObj . 前者 是 数据 并行程序 中 分布 数据 的 一种 统一 接口 , 可以 作为 任务 并行 实现 的 分布 对象 的 父类 ； 后者 对 并行 实现 的 对象 的 互操作 接口 进行 了 抽象 . 
 2.1   以 任务 并行 方式 实现 的 分布 对象 的 互操作 
 　 　 图 2 ( b ) 中 给出 了 PObj 的 结构 . 黑色 箭头 代表 通常 的 分布 对象 将 网络 消息 映射 到 对象 方法 的 消息传递 途径 , 白色 箭头 代表 并行程序 间 的 互操作 通道 . PObj 中 定义 了 一个 类型 port , port 中 包含 了 客户 直接 调用 PObj 中 已 被 调度 器 调度 运行 于 某个 处理器 的 方法 的 相应 信息 . 
 
 　 　 　 　 　 　 　 ( a ) 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ( b ) 
 图 2 　 任务 并行 分布 对象 的 互操作 模型 
 　 　 class   port 
 　 　 { 
 　 　 private : 
 　 　 　 　 addr － t 　 　 　 　 addr ; 　 　 　 　 　 　 　 / / 该 方法 依附 的 进程 地址 
 　 　 　 　 int 　 　 　 　 　 　 occupier ; 　 　 　 　 　 / / 当前 使用 此 端口 的 客户 id 
 　 　 　 　 para － list 　 　 　 pl ; 　 　 　 　 　 　 　 　 / / 输入 此 端口 的 参数表 
 　 　 　 　 ret － type 　 　 　 rt ; 　 　 　 　 　 　 　 　 / / 返回 类型 
 　 　 　 　 int 　 　 　 　 　 　 ret － len ; 　 　 　 　 　 / / 返回 数据 长度 
 public : 
 　 　 　 　 int 　 　 　 　 　 　 in ( VAL   * arg ) ; 　 　 　 / / 向 端口 写入 相应 的 数据 
 　 　 　 　 int 　 　 　 　 　 　 out ( VAL   * ret ) ; 　 　 　 / / 从 端口 取出 相应 的 数据 
 　 　 　 　 int 　 　 　 　 　 　 bind ( port   p ) ; 　 　 　 / / 与 另外 的 端口 相连 
 　 　 } ; 
 其中 的 地址 部分 由 全局 进程 通信地址 （ 主机名 和 进程 号 ） 、 对象 名 和 方法 名 这 3 部分 构成 . 这个 定义 既 包含 了 输入 又 包含 了 返回 , 实际上 是 一个 双向 端口 , 可以 表示 上面 所说 的 call 和 reply 消息 . 相应 于 port 的 操作 是 in , out 和 bind . in 传递 对 方法 的 调用 请求 和 调用 参数 , out 则 从 端口 取出 返回值 , bind 可以 将 端口 串连 起来 . 由图 2 可以 看出 , 方法 可以 被 多个 port 和 调度 器 传递 来 的 调用 请求 同时 激活 , 产生 并发 执行 . 我们 限制 了 这种 在 同一个 处理器 上 的 并发 , 以 减少 用于 同步 的 额外 开销 . 方法 的 端口 在 一个 客户 释放 之前 对 其他 请求 关闭 ； 只有 调度 器能 生成 互相 并行 的 对象 方法 执行 体 . 
 　 　 PObj 分别 为 调度 器 和 客户 提供 了 一个 调用 接口 ： 
 　 　 class   PObj 
 　 　 { 
 　 　 protected : 
 　 　 　 　 int 　 　 　 bind － port ( int   method － id ) ; 　   　 / / 供 调度 器 记录 并行执行 方法 的 端口 信息 
 　 　 　 　 void 　 　 　 unbind － port ( int － method － id ) ; 　 / / 供 调度 器 释放 端口 
 　 　 　 　 int 　 　 　 dispatch ( int   method － id ,   int   node － id ) ;   / / 将 方法 分布 到 某个 处理 结点 
 　 　 public : 
 　 　 　 　 id － list 　 get － method － id ( String   str － method － call ) ; 
 　 　 　 　 port 　 　 get － port ( int   str － method － id ) ; 　 　 / / 供 客户 根据 方法 号 获取 相应 端口 信息 
 　 　 } ; 
 这里 的 method － id 对应 于 方法 的 每 一个 并行执行 体 , 通过 get － method － id 可以 从 方法 的 调用 形式 （ 方法 名 加上 参数 格式 , 返回 类型 的 串 ） 获得 相应 的 method － id 值 . 一个 调用 形式 可能 对应 于 多个 method － id , 因为 同一个 方法 可能 被 调度 器 同时 指派 到 多个 处理器 上 运行 . 客户 可以 从中 任意 选取 一个 发送 请求 , 也 可以 调用 运行 系统 提供 的 负载 评价 机制 以 获取 负载 最轻 的 结点 发送 请求 . 
 　 　 客户 请求 到达 之后 , 调度 器 将 它 所 请求 的 方法 运行 在 空闲 处理器 上 , 并 调用 bind － port 将 方法 的 端口 信息 记录下来 . 端口 信息 表 的 变化 通过 分布 对象 事件 服务 ［ 13 ］ 的 形式 通知 客户 , 以后 当 客户 需要 直接 向 这些 已经 启动 的 方法 请求 服务 时 , 再 通过 端口 操作 发出请求 并 传递 参数 . 当 调度 器 传递 的 请求 执行 完且 端口 中 没有 其他 请求 的 情况 下 , 方法 执行 体 消亡 , 相应 的 端口 通过 unbind － port 被 调度 器 释放 .   
 　 　 对于 客户 方 同时 也 含有 另 一个 或 多个 任务 并行 对象 的 情况 来说 , 端口 的 绑定 是 很 有 用处 的 . 如图 2 ( a ) 所示 , 两个 对象 可以 将 一些 方法 执行 体 的 端口 连接起来 , PObj1 中 的 方法 m0 可以 与 PObj2 中 的 方法 m1 在 某 一个 端口 相连 , 这样 , m0 端口 的 输出 就 成为 m1 端口 的 输入 , 而 其 输入 也 就是 m1 端口 的 输出 . 同时 , 客户 （ client ） 也 可以 有 两条 途径 来 获取 分布 对象 的 服务 . 通过 这种 方式 , 我们 可以 使 任务 并行 分布 对象 间 获得 比较 全面 的 互操作 能力 . 
 2.2 　 以 数据 并行 方式 实现 的 分布 对象 的 互操作 
 　 　 数据 并行 方式 实现 的 分布 对象 的 互操作 主要 提供 分布 数据 的 互操作 , 也就是说 提供 这些 数据 的 多种 传输 途径 , 这些 数据 为 并行 语句 使用 . 我们 把 这些 分布 的 数据 看做 一个 对象 , 图 3 给出 了 相应 的 类 结构 , 这个 结构 跟 图 2 相似 , 因为 分布 数据 对象 也 可以 看做 在 各个 结点 上 向 应用程序 提供数据 服务 的 任务 并行 对象 . 与 图 2 不同 的 是 , 这个 DSeq 对象 融合 了 许多 数组 操作 和 数据分布 函数 , 另一方面 , DSeq 的 方法 不由 调度 器 动态分配 到 各个 处理器 , 而是 在 对象 构造 时随 数据分布 到 各个 处理 结点 （ 通过 dispatch ） 并 向 数据 并行程序 提供 服务 . 从 DSeq 中 还 获得 数据分布 的 信息 （ get － part － info ） . Partition 允许 客户 给出 数据 的 划分 比例 （ 如 part . strsplit = “ 1 : 2 : 2 : 4 ” 表示 将 数据 按 1 : 2 : 2 : 4 的 比例 分布 到 4 个 处理 结点 上 ） , 也 可以 给出 按行 或列 划分 的 说明 （ 如 part . rowsplit = BLOCK 表示 将 数据 按行 依次 放置 到 各个 处理 结点 , 行 的 长度 为 BLOCK ） , 每 一个 数据 块 包含 一个 端口 倾听 应用程序 的 数据 请求 , 并 向 它们 发送 相应 数据 , 还 包含 一个 与 调度 器 的 接口 , 允许 客户 向 其 分发 数据 . 
 
 图 3 　 数据 并行 分布 对象 的 互操作 模型 
 　 　 DSeq 的 接口 部分 如下 ： 
 　 　 class   DSeq 
 　 　 { 
 　 　 public : 
 　 　 　 　 DSeq ( T   data ,   int   len ,   Partitions   part ) ;   　 　 / / 根据 part 初始化 数据 的 分布 
 　 　 　 　 ～ DSeq ( ) ; 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 / / 终止 各个 结点 的 服务程序 执行 
 　 　 　 　 DSeq &   operatore = ( const   DSeq   & d ) ; 
 　 　 　 　 Port 　 operator ［ ］ ( int   index ) ; 　 / / 重载 下标 操作符 , 使 之 返回 相应 数据 结点 的 端口 
 　 　 　 　 T * 　 local － data ( Port ) ; 　 　 　 　 　 　 　 　 　 　 　 / / 从 本地 端口 读取数据 
 　 　 　 　 Int 　   local － length ( Port ) ; 　 　 　 　 　 　 　 　 　 / / 获取 本地 数据 长度 
 　 　 public : 
 　 　 　 　 Partitions   get － part － info ( ) ; 　 　 　 　 　 　 　 　 / / 获取数据 分布 信息 
 　 　 　 　 Int   updatedata ( T   data ,   int   len ,   Partition   part ) ;   / / 更新 数据 对象 的 数据 
 　 　 } ; 
 　 　 这个 类 重载 了 相应 的 操作符 , 使 并行 语句 存取数据 资源 时能 获取数据 所在 结点 的 端口 , 从而 通过 端口 读写 对 数据 进行 操作 . 
 3   实例 及 性能 分析 
 　 　 我们 使用 上面 提出 的 模型 构造 了 2D - FFT 算法 , 并 在 Ethernet 连接 的 4 台 SGI   indy 工作站 网络 上 测出 实际 运算 结果 , 把 这些 结果 与 通常 的 做法 进行 了 比较 . 
 　 　 如图 4 所示 , 通常 的 2D - FFT 并行算法 先由 master 将 数据 按行 分布 到 各个 处理 结点 , 各个 结点 上 的 slave 同时 计算 各行 的 FFT 变换 值 , 然后 搜集 计算结果 到 master , 再 将 结果 矩阵 转置 , 把 转置 矩阵 再 按行 分到 各个 slave 计算 , 最后 回收 的 结果 就是 整个 矩阵 的 二维 快速 傅里叶 变换 . 显然 , 回收 发送 的 过程 是 并行计算 的 瓶颈 , 网络 传输 时间 无法 被 计算所 重叠 . 
 
 图 4 　 2D - FFT 的 并行计算 示意 ： 黑色 部分 表示 放在 处理 结点 0 上 的 数据 
 　 　 为了 使 网络 传输 最大 限度 地为 计算 时间 所 覆盖 , 我们 将 4 台 工作站 分为 两组 , 每 一组 上 运行 一个 分布 对象 , 第 1 组 并行计算 一个 512 × 512 矩阵 每 一行 的 FFT , 计算 完后 回收 结果 进行 转置 , 然后 传递 到 第 2 组 的 分布 对象 每 一个 运行 方法 的 端口 , 第 2 个 对象 的 再 方法 并行计算 这些 值 的 FFT , 并 输出 结果 . 两个 分布 对象 的 互操作 构成 了 一种 流水线结构 , 部分 覆盖 了 网络 传输 时间 . 表 1 给出 了 这种 方法 的 计算 时间 、 使用 一个 分布 对象 计算 的 时间 , 以及 使用 两个 分布 对象 通过 调度 器 传递数据 计算 时间 的 比较 , 表 2 给出 了 相应 加速 比 的 比较 . 
 表 1 　 计算 时间 比较 
 
 计算 
 次数 使用 一个 分布 对象 的 
 并行计算 时间 （ μ s ） 使用 两个 分布 对象 的 并行计算 
 时间 （ 通过 调度 器 通信 ） ( μ s ) 使用 两个 分布 对象 的 并行计算 
 时间 （ 通过 端口 通信 ） ( μ s ) 
 458   522   95347   210   62143   866   150 
 8118   216   291103   456   45294   836   858 
 
 
 表 2 　 并行 加速 比 比较 
 
 
 计算 
 次数 使用 一个 分布 对象 的 
 并行计算 加速 比 使用 两个 分布 对象 的 并行计算 
 加速 比 （ 通过 调度 器 通信 ） 使用 两个 分布 对象 的 并行计算 
 加速 比 （ 通过 端口 通信 ） 
 41.431 . 761.90 
 81.381 . 581.72 
 
 
 　 　 从表中 可以 看出 , 使用 两个 分布 对象 的 互操作 模型 计算 2D \ | FFT 比 只 使用 一个 分布 对象 并行计算 的 加速 比高 , 而 通过 端口 通信 减少 了 通过 第 2 个 分布 对象 调度 器 传递数据 的 时间 , 因而 能 获得 比仅 通过 调度 器 进行 互操作 更 高 的 加速 比 . 这 也 表明 , 我们 的 互操作 模型 是 有效 的 .   
 4   结   论 
 　 　 并行 软件设计 本身 的 复杂性 使 它 的 复用 成为 一个 引人注目 的 问题 . 分布 对象 技术 不仅 可以 将 并行 软件 封装 成 相应 的 构件 , 而且 提供 了 利用 各种 异构 系统 进行 并行计算 的 可能性 , 但 这 往往 使得 这些 构件 的 互操作 的 效率 有所 降低 . 我们 提出 的 并行 分布 对象 互操作 模型 试图 解决 这一 问题 . 这个 模型 , 如 第 1 节 所述 , 是 与 分布 对象 的 旧有 模型 观察 等价 的 ； 如 第 3 部分 的 实例 所示 , 这个 模型 能够 挖掘出 并行 分布 对象 间 更 多 的 并行性 . 
 注 ： 本文 研究 得到 国家 863 高科技 项目 基金 资助 . 
 本文 通讯联系 人 ： 张德富 , 南京 210093 , 南京大学 计算机科学 与 技术 系 
 作者简介 ： 王晨 , 1971 年生 , 博士 , 主要 研究 领域 为 分布 对象 技术 . 
 周颖 , 女 , 1973 年生 , 硕士 , 主要 研究 领域 为 分布 对象 技术 , Internet 计算 . 
 张德富 , 1937 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 并行处理技术 . 
 作者 单位 ： 南京大学 计算机软件 新 技术 国家 重点 实验室 　 南京 　 210093 
 张德富 　 南京大学 计算机科学 与 技术 系 　 南京 　 210093 
 E - mail :   zhangdf @ nju . edu . cn 
 参考文献 
 　 1   OMG .   The   common   object   request   broker :   architecture   and   specification .   February   1998 ,   http : / / www . omg . org 
 　 2   Schmidt   D   C   et   al .   A   high - performance   end   system   architecture   for   real - time   CORBA .   IEEE   Communications   Magazine ,   1997 , 35 ( 2 ) : 72 ～ 77 
 　 3   Maffeis   S   et   al .   Constructing   reliable   distributed   communication   systems   with   CORBA .   IEEE   Communications   Magazine ,   1997 , 35 ( 2 ) : 56 ～ 60 
 　 4   Chen   Larry   T ,   Suda   Tatsuya .   Designing   mobile   computing   systems   using   distributed   objects .   IEEE   Communications   Magazine ,   1997 , 35 ( 2 ) : 62 ～ 70 
 　 5   Keahey   Katarzyna ,   Gannon   Dennis .   PARDIS :   a   parallel   approach   to   CORBA .   Technical   Report ,   ftp : / / ftp . cs . indiana . edu / pub / techreports / TR475 . ps . Z 
 　 6   Nierstrasz   Oscar .   Regular   types   for   active   objects .   In :   Nierstrasz   O ,   Tsichritzis   D   eds .   Object - oriented   Software   Composition .   London :   Prentice   Hall ,   Inc . ,   1995 .   99 ～ 121 
 　 7   Keahey   Katarzyna .   CORBA   compliance   and   parallel   supercomputing .   http : / / www . acl . lanl . gov 
 　 8   Norman   M   L ,   Beckman   P   et   al .   Galaxies   collide   on   the   I - WAY :   an   example   of   heterogeneous   wide - area   collaborative   supercomputing .   International   Journal   of   Supercomputer   Applications   and   High   Performance   Computing ,   1997 , 10 ( 2 ) : 132 ～ 144 
 　 　 9 　 Williams   T   J ,   Reynders   J   V   W   et   al .   POOMA   User   Guide .   http : / / www . acl . lang . gov / pooma / doc / userguide / pooma - 
 UserGuide . ps 
 　 　 10   Milner   R .   Communication   and   Concurrency .   London :   Prentice   Hall ,   1989 
 　 　 11   Nierstrasz   Oscar .   Towards   an   object   calculus .   In :   Tokoro   M ,   Nierstrasz   O ,   Wegner   P   et   al   eds .   Proceedings   of   the   ECOOP ' 91   Workshop   on   Object - Based   Concurrent   Computing .   LNCS612 ,   Geneva ( Switzerland ) :   Springer - Verlag ,   1992 .   1 ～ 20 
 　 　 12   Nierstrasz   Oscar ,   Papathomas   Michael .   Towards   a   type   theory   for   active   objects .   ACM   OOPS   Messenger ,   1991 , 2 ( 2 ) : 89 ～ 93 
 　 　 13   OMG .   CORBA   services :   common   object   service   specification .   November   1997 ,   http : / / www . omg . org 
 本文 1998 - 05 - 21 收到 原稿 , 1998 - 09 - 21 收到 修改稿 
