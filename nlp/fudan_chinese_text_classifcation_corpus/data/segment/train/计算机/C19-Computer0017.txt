计算机 应用 
 COMPUTER   APPLICATIONS 
 1999 年   第 19 卷   第 6 期   Vol.19   No.6   1999 
 
 
 
 用 OpenGL 开发 虚拟 制造 环境 （ 一 ） 
 周杰 韩 　 杜润生 　 吴波 
 　 　 摘 　 要 　 本文 介绍 了 几何图形 信息 的 数据结构 、 存储 与 显示 基本原理 。 从 应用程序 角度 论述 Windows 图形 设备 接口 GDI 的 客户服务器 本质 及 虚 屏幕显示 技术 。 最后 讲述 OpenGL 图形库 在 虚拟 制造 仿真 的 应用 基础 。 
 　 　 关键词 　 虚拟 制造 ， 客户 / 服务器 ， OpenGL 图形库 
 1 　 计算机 图形 
 1.1 　 几何图形 信息 的 数组 结构 
 　 　 图形 显示 是从 点 的 显示 开始 的 。 线段 是 所有 在 它 上面 的 点 的 集合 。 几何学 上 的 点 是 没有 大小 的 。 线段 的 显示 实际上 用 有限 个点 来 产生 图形 ， 因而 每个 点 都 有 一定 的 大小 。 此时 的 点 不再 是 真正 的 几何 点 ， 而是 像素 （ 图像 基本 元素 ） 。 每个 像素 是 显示屏 上 可以 编址 的 最小 单元 ， 也 是 在 显示屏 上 能够 被 控制 的 最小 部分 。 显示屏 如同 由 像素 组成 的 二维 数组 。 每个 像素 对应 数组 的 一个 元素 。 每个 像素 有 一个 地址 ， 对应 数组 的 下标 。 像素 亮度 值 对应 元素 值 。 设定 显示屏 上 每 一 像素 的 亮度 可以 产生 一幅 图像 。 
 1.2 　 几何图形 信息 的 存储 
 
 图 1 　 帧 缓冲器 与 图像 显示 
 　 　 一幅 图像 是 由 有限 数量 的 像素 组成 。 一个 分辨率 较 高 的 显示 设备 若 在 x 和 y 方向 各有 1000 个 像素 ， 则 这个 显示屏 将 含有 100 万个 像素 。 为了 显示 每 一点 的 亮 暗 ， 每一 像素 至少 需要 1 比特 的 亮度 信息 ， 其 存储空间 至少 需要 100 万 / 8 个 字节 。 用来 存储 像素 亮度 数组 的 存储器 称为 帧 缓冲器 。 帧 缓冲器 是 指 显视 卡上 的 显视 存储器 。 
 1.3 　 几何图形 信息 的 显示 
 　 　 光栅 显示 是 用 得 较 多 的 图形 显示 方法 。 光栅 显示 是 利用 扫描 发生器 每秒钟 扫描 帧 缓冲器 30 到 60 次 ， 将 代表 像素 亮度 的 信息 一行 一行 取出 ， 然后 送往 显示器 。 帧 缓冲器 的 存取 地址 与 光栅扫描 信号 同步 地 产生 。 帧 缓冲器 的 内容 用来 输出 视屏 信号 控制 阴极射线管 电子束 强度 。 强度 大小 决定 像素 的 显示 明暗 。 帧 缓冲器 地址 用来 输出 水平 与 垂直 偏转 信号 控制 阴极射线管 电子束 的 偏转 。 电子束 的 偏转 决定 像素 的 屏幕 坐标 （ x ， y ） 。 每 一次 扫描 帧 缓冲器 都 使 屏幕 得到 刷新 。 由于 光栅 显示 系统 利用 直接 存储器 存取 （ DMA ） 硬件 不断 地 扫描 帧 缓冲器 ， 并 把 图形 显示 出来 ， 因而 图像 生成 不 受 中央处理器 （ CPU ） 控制 。 
 1.4 　 显示 设备 驱动程序 与 应用程序 的 可移植性 
 　 　 应用 中 ， 应用程序 编写 的 几何图形 信息 不是 直接 改变 帧 缓冲器 的 内容 而是 作为 标准 显示 指令 存入 显示文件 中 ， 然后 利用 显示 设备 驱动程序 解释 显示 指令 以 产生 需要 的 图象 。 显示文件 驱动程序 形成 图形 应用程序 与 显示 设备 之间 的 接口 。 若 应用程序 可以 产生 标准 显示文件 代码 ， 那么 每个 带有 驱动程序 的 具体 显示 设备 就 能 正确 地 运行 应用程序 ， 从而 提高 了 应用程序 的 可移植性 。 显示 设备 与 显示 驱动程序 通常 由 硬件 商 一起 提供 。 
 1.5 　 应用程序 图形 显示 步骤 
 　 　 帧 缓冲器 数组 直接 与 显示屏 内容 相对 应 ， 并且 以 亮度 编码 的 形式 保存 了 被 显示 的 图形 。 图形 应用程序 的 实现 步骤 包括 ： 首先 由 初始化 程序 分配 显示 设备 和 存储器 。 其次 应用程序 把 图形 信息 写入 帧 缓冲器 ， 由 帧 缓冲器 直接 传送 到 显示 设备 。 空帧 缓冲器 对应 空白 的 显示屏 。 最后 由 结束 图形 程序 释放 显示 设备 包括 重新分配 存储器 。 
 2 　 Windows 环境 下 的 图形 显示 
 2.1 　 Windows 环境 下 的 虚屏 显示 
 　 　 在 MS - DOS 应用 中 ， 图形 和 文本 程序 不仅 常常 直接 写 到 视屏 上 ， 而且 这样 做时 经常 绕过 BIOS 屏幕 调用 。 然而 在 Windows 环境 下 避免 了 这种 状况 。 首先 在 多任务 Windows 环境 下 物理 视屏 是 一个 共享资源 。 所有 应用程序 的 显示 活动 ， 都 必须 通过 Windows   API 函数 来 操作 。 任何 试图 绕过 API 函数 都 视为 扰乱 系统 的 行为 。 其次 在 Windows 环境 下 屏幕 操作 根本 不写 到 物理 视屏 上 ， 即使 使用 API 函数 时 也 是 这样 。 应用程序 请求 写 文本 或 图形 的 操作 ， 都 是 将 信息 写 到 虚拟 屏幕 也 称为 设备 环境 DC 。 最后 Windows 把 虚拟 屏幕 映像 到 物理 显示屏 上 。 
 2.2 　 图形 用户 接口 （ GDI ） 的 客户 / 服务器 本质 
 　 　 Windows 将 应用程序 从 具体 输出设备 中 分离出来 。 在 MS - DOS 中 ， 应用程序 负责 为 所有 输出设备 编程 。 Windows 应用程序 不 负责 对 输出设备 编程 。 图形 用户 接口 GDI 为 应用程序 提供 了 一套 独立 于 设备 的 标准 绘图 指令集 。 对于 添加 的 新 硬件 ， 由 硬件 制造商 提供 驱动程序 ， 而 应用程序 则 通过 GDI 创建 并 维护 设备 环境 （ DC ） 。 Win32 应用程序 在 Windows95 环境 下 都 被 分隔 成 了 用户 模式 与 核心 模式 。 在 用户 模式 下 禁止 直接 取用 图形 设备 资源 ， 而是 交给 操作系统 核心 模式 来 完成 。 这种 模式 称为 GDI 的 客户 / 服务器 模式 如图 2 。 GDI 的 客户 / 服务器 模式 有效 地 将 应用程序 彼此 分离 ， 从而 提高 了 Windows   环境 的 安全 特性 。 而且 任何 访问 输出设备 的 函数 都 留在 GDI 的 服务器 方 ， 从而 保证 了 入侵 应用程序 不能 直接 访问 到 其它 应用程序 的 屏幕 数据 。 
 
 图 2 
 3 　 OpenGL 应用程序 的 图形 支持 
 3.1 　 OpenGL 图形 软件 在 应用 中 的 地位 
 　 　 OpenGL 是 SGI 公司 的 IRIS   GL 图形工作站 的 分支 。 近年来 ， 作为 工业 标准 图形 程序库 ， 在 CAD / CAM 等 需要 高级 的 三维 对象 可视化 和 图形 绘制 领域 得到 广泛应用 。 OpenGL 为 应用 程序员 提供 了 程序 和 图形 输入输出 设备 之间 的 功能 接口 ， 定义 了 一个 独立 于 语言 的 图形核心 系统 。 编写 应用程序 过程 中 ， 用 符合 语言 的 约定 方式 把 OpenGL 嵌入 到 相应 的 语言 之中 。 OpenGL 在 图形 应用 中 的 地位 如图 3 所示 。 由于 OpenGL 本身 与 硬件 及 操作系统 的 底层 软件 无关 ， 从而 使 图形 应用程序 获得 较 高 的 可移植性 。 
 
 图 3 
 3.2 　 OpenGL 客户 / 服务器 图形 显示方式 
 　 　 OpenGL 通过 客户 / 服务器 方式 实现 图形 显示 。 应用程序 作为 客户 工作 并 调用 OpenGL   API 。 OpenGL 客户 模块 同 OpenGL 服务 模块 通信 并 发出 应用程序 的 OpenGL 命令 。 OpenGL 服务 模块 调用 Win32 设备 驱动 接口 来 使用 驱动程序 。 一个 OpenGL 服务程序 往往 同时 维护 几个 OpenGL 环境 。 OpenGL 环境 是 OpenGL 客户   所处 的 OpenGL 状态 。 OpenGL 环境 又 叫 着色 环境 ， 是 OpenGL 与 Windows 系统 之间 的 桥梁 。 所有 的 OpenGL 调用 都 通过 着色 环境 来 完成 。 OpenGL 着色 环境 与 设备 环境 有 相同 的 像素 格式 。 在 为 一个 设备 环境 设置 好 了 像素 格式 后 就 可以 产生 一个 与 之 接近 的 着色 环境 。 通过 给出 的 设备 环境 ， 着色 环境 就 可以 在 设备 环境 指出 的 设备 上 绘图 。 其 逻辑 模式 如图 4 。 
 
 图 4 
 　 　 用 OpenGL 去 着色 一个 Windows 窗口 的 典型 操作过程 如下 ： 
 　 　 .   建立 正确 的 窗口 格式 ； 
 　 　 .   建立 像素 格式 ； 
 　 　 .   创建 设备 环境 ； 
 　 　 .   创建 一个 着色 环境 ； 
 　 　 .   将 着色 环境 设 为 一个 线程 的 当前 着色 环境 ； 
 　 　 .   线程 进行 有关 OpenGL 的 初始化 ； 
 　 　 .   线程 调用 OpenGL 着色 函数 ； 
 　 　 .   当 OpenGL 处理 结束 后 ， 将 着色 环境 设为 非 当前 使用 的 （ 断开 与 着色 环境 的 联系 ） ； 
 　 　 .   释放 着色 环境 与 设备 环境 。   
 注 ： 国家教委 博士点 基金 资助 。 
 作者简介 ： 周杰 韩 　 博士 研究生 。 研究 方向 : 虚拟 制造 、 系统 仿真 、 面向对象 技术 。 
 作者 单位 ： 华中理工大学 机械 科学 与 工程学院 　 湖北 . 武汉 ( 430074 ) 
 收稿 日期 : 1999 - 01 - 27 ( 修改稿 ) 
