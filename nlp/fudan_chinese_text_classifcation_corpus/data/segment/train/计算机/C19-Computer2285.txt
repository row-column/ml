计算机 应用 研究 
 APPLICATION   RESEARCH   OF   COMPUTERS 
 2000 　 Vol.17 　 No.5 　 P.90 - 92 
 
 
 
 大中型 粮食加工 企业 销售 系统 的 开发 
 欧阳 骥 　 欧阳 宝蓉 
 摘     要     分析 了 开发 大中型 粮食加工 企业 销售 系统 的 关键问题 ， 论述 了 基于 客户机 / 服务器 结构 解决 这些 问题 的 思想 、 方法 。 
 关键词     销售 系统     客户机 / 服务器     数据库       数据 窗口 
 0     引言 
 　 　 随着 我国 社会主义 市场经济 的 逐步形成 和 完善 ， 市场竞争 日趋激烈 。 对于 利润率 很 低 的 大中型 粮食加工 企业 ， 如果 要 在 严酷 的 市场竞争 中 立于不败之地 ， 除了 加强 企业 内部 管理 ， 降低生产 成本 之外 ， 必须 加强 销售 和 销售 管理 。 因此 ， 开发 和 应用 销售 管理系统 ， 就 显得 尤为重要 。 一方面 可以 实现 销售 过程 中 信息管理 的 现代化 ， 使 管理 部门 和 领导者 能够 及时 、 准确 地 了解 企业 的 生产 、 库存 情况 。 另一方面 可以 及时 、 准确 地 掌握 销售 过程 中 各个环节 的 具体情况 ， 跟踪 市场 变化 ， 为 管理 部门 及 领导者 进行 决策 提供 及时 、 准确 的 信息 依据 。 再 一方面 可以 有效 地 杜绝 假单 、 假票 ， 从而 避免 由于 信息 的 不 准确 、 不 及时 可能 造成 的 损失 。 
 1     现行 系统分析 
 　 　 通过 对 南方 面粉 ( 穗港 ) 股份 有限公司 和 桂林 面粉厂 的 实际 销售业务 过程 的 全面 、 深入 、 详细 调查 研究 后 ， 得出 实际 销售 业务流程 如图 1 所示 。 
 
 图 1 　 手工 处理 的 销售业务 的 业务 流程图 
 　 　 其中 ， 最 关键 的 处理 是 发票 的 处理 。 发票 处理 的 主要 日常 工作 有 ( 补 ) 开发票 、 发票 注销 和 冲抵 。 
 　 　 企业 销售 过程 中 开出 的 发票 有 普通发票 、 增值税 发票 、 出口 发票 三种 类型 。 普通发票 分为 免税 和 不 免税 两种 。 无论 是否 免税 ， 发票 的 最高 限额 为 百万元 ； 增值税 发票 的 最高 限额 有 万元 、 十万元 和 百万元 三种 。 无论是 哪 一种 发票 ， 票面 所开 的 总金额 不能 超过 相应 的 限额 。 
 　 　 ( 1 )     开发票 
 　 　 一般 情况 是 根据 客户 的 要求 开具 相应 的 发票 。 而 对于 代销点 ， 不定期 地为 其 开出 所 要求 的 发票 。 若 代销点 的 客户 要求 发票 上添 写 自己 的 名字 ， 可以 满足 其 要求 ， 但 仍 按 代销点 结算 。 
 　 　 对于 信誉 好 的 一般 客户 可以 先开 提单 或 先开 出门 证 ， 以后 再 根据 开出 的 提单 或 出门 证及 客户 的 要求 补 开发票 。 
 　 　 特别 地 ， 根据 客户 的 行业 性质 、 信用 情况 、 购买 货物 品种 、 数量 多少 以及 季节 的 变化 ， 在 下面 情况 下 可以 享受 不同 程度 的 优惠 。 
 　 　 ． 同一 客户 在 不同 的 时间 购买 相同 品种 的 货物 ； 
 　 　 ． 同一 客户 在 相同 的 时间 购买 不同 品种 的 货物 ； 
 　 　 ． 不同 的 客户 在 相同 的 时间 购买 不同 品种 的 货物 ； 
 　 　 ． 不同 的 客户 在 不同 的 时间 购买 相同 品种 的 货物 。 
 　 　 因此 ， 为了 便于 掌握 和 了解 市场 情况 ， 需要 将 客户 信息 如 ： 名称 、 开户银行 、 帐号 、 联系方法 、 所属 行业 、 资信 情况 等 信息 记录下来 ， 以 方便使用 和 查询 。 同时 ， 应 把 企业 有关 领导 或 销售 部门 负责人 或 有关 业务员 签字 ( 或 确认 ) 出具 的 客户 优惠 方案 记录下来 ， 以便 在 给 客户 开具 发票 时 能够 享受 到 相应 的 优惠 方案 。 
 　 　 ( 2 )     发票 注销 、 冲抵 
 　 　 当提 走 的 货物 出现 斤两不足 或 质量 问题 时 ， 有 降价 、 换货 ( 换 同样 的 货 或 换 不同 的 货 ) 、 退货 ( 部分 退货 或 全部 退货 ) 几种 处理 方法 。 其中 除了 斤两不足 中 的 补货 和 质量 问题 中换 同样 的 货 账面 不 反映 外 ， 其它 均 要 在 账面 反映 。 
 　 　 ． 斤两不足 和 质量 问题 中 的 降价 处理 办法 是 ： 已 入账 则 冲 差额 ； 若 未 入账 则 注销 原 发票 后 重开 。   
 　 　 ． 对于 质量 问题 中 的 退 全部 货物 处理 办法 是 ： 若 已 入账 则 全冲 ； 若 未 入账 ： 则 注销 。 
 　 　 ． 对于 质量 问题 中 的 退 部分 货物 和 换 不同 的 货物 ， 处理 办法 是 ： 若 已 入账 ： 则 全冲 ； 若 未 入账 ： 则 注销 后 重开 。 
 　 　 当 发票 注销 时 在 发票 上 加盖 蓝色 的 带有 “ 注销 ” 字样 的 戳 ， 对于 注销 的 发票 在 记帐 时 忽略 。 冲抵 帐 时用 红字 冲抵 。 
 　 　 对于 普通发票 ， 可以 冲 差额 ， 也 可以 全冲 。 对于 增值税 发票 ， 不能 冲 差额 ， 只能 全冲 。 若 要冲 差额 ， 必须 先冲 该 增值税 发票 ， 再开 一张 所 需 金额 的 增值税 发票 和 剩余 金额 的 增值税 发票 ， 然后 再 全冲 该 增值税 发票 。 
 　 　 对于 提单 、 出门 证及 分单 也 有 类似 的 处理 要求 。 系统 功能 如图 2 所示 。 
 
 图 2 　 系统 功能 主 层次结构 图 
 2     系统 设计 与 实现 
 　 　 对于 前面 所 分析 的 关键 的 处理 问题 在 系统 设计 和 实现 过程 中 ， 采用 基于 Windows   NT 的 客户 / 服务器 结构 ， 从 服务器 和 客户端 两个 方面 着手 来 加以解决 。 
 2.1     系统 开发 与 应用环境 
 　 　 通过 对 实际 业务 工作 的 分析 ， 再 综合 费用 、 操作 的 方便性 、 数据 信息 的 安全性 和 系统 的 扩展性 等 因素 ， 决定 系统 的 开发 与 应用环境 采用 基于 Windows   NT 的 客户 / 服务器 结构 。 所有 的 库存 数据 集中 存储 在 服务器 中 ， 从而 便于 实现 对 数据 的 定期维护 和 备份 以及 在 数据 的 完整性 、 管理 和 安全性 方面 提供 严格 的 集中控制 。 工作站 运行 应用程序 ， 向 服务器 发出 数据 查询 或 更新 操作 请求 ， 服务器 接受 操作 请求 并 把 处理结果 回 送给 工作站 。 
 　 　 服务器端 选用 Microsoft   SQL   Server   6.5 。 首先 ， 它 是 基于 Windows   NT ， 使用 的 是 Win32 操作系统 线程 而 不是 模拟 数据库 内核 中 的 线程 ， 拥有 Win32 线程 的 所有 特征 — — 对 多线程 处理 的 强大 支持 、 直接 硬件 访问 和 对 不同 线程 的 内存保护 。 从而 使得 即使 有 单个 的 线程 有 毛病 也 不会 造成 整个 可 执行 体 崩溃 ， 并且 SQL   Server   6.5 能够 捕获 这种 线程 且 继续执行 。 其次 ， SQL   Server   6.5 支持 Windows   NT 支持 的 所有 网络协议 ， 从而 支持 几乎 任何 网络 的 客户 。 最后 ， SQL   Server   6.5 的 费用 比 其它 的 大型 关系数据库 产品 要 低 得 多 ， 更 容易 被 接受 。 
 　 　 客户端 开发工具 选用 PowerBuilder   6.0 。 它 是 一个 面向对象 的 客户 / 服务器 开发工具 ， 可以 在 Windows 系列 、 Macintosh 、 Sun   Solaris 等 开发 平台 上 运行 。 此外 ， 具有 方便 灵活 的 集成 开发 环境 ， 特别 是 它 所 提供 的 功能强大 的 数据 窗口 ( DataWindow ) 描绘 器 ， 通过 使用 数据 窗口 及其 交互 功能 ， 开发人员 可以 方便 地 设计 数据处理 界面 ， 实现 对 数据库 的 各种 操作 ， 如 数据检索 、 插入 、 删除 、 更新 以及 按 需要 的 格式 显示 数据 。 从而 可以 大大减少 程序 编写 和 调试 工作量 ， 提高 开发 效率 ， 缩短 开发周期 。 
 2.2     服务器端 设计 的 关键问题 
 　 　 在 服务器端 的 设计 和 实现 中 ， 最 主要 和 最 关键 的 就是 数据库 的 设计 。 而 数据库 设计 的 基础 和 核心 是 数据库 中表 的 定义 。 表 定义 的 好坏 不仅 影响 到 其它 数据库 对象 的 定义 ， 而且 影响 到 所 开发 的 整个 系统 的 性能 和 质量 。 因此 ， 本 部分 仅 就 如何 定义 好表 加以 阐述 。 
 　 　 数据库 表 的 定义 是 以 分析 所 得到 的 数据 流程图 和 数据 字典 为 基础 ， 以 概念 结构 设计所 得到 的 E - R 图为 根据 进行 的 ， 并且 应该 是 规范化 的 。 但是 ， 对于 实际 应用 系统 的 表 ， 如果 定义 成 规范化 的 表 ， 由于 具体 系统 的 功能 和 性能 要求 的 限制 ， 反而 有 缺陷 和 不足 。 这些 缺陷 和 不足 主要 表现 在 ： 
 　 　 ． 对于 规范化 的 表 ， 需要 更 多 的 连接 来 把 信息 从 多个 表中 组合 到 一起 。 而 连接 需要 更 多 的 I / O 操作 。 
 　 　 ． 处理 规范化 的 表时 ， 需要 CPU 资源 来 执行 连接 逻辑 和 维护 数据 和 引用 完整性 ， 因此 会 引起 额外 的 CPU 操作 ， 
 　 　 ． 规范化 的 表 没有 摘要 数据 ， 因为 摘要 数据 从 两 方面 违反 了 规范化 ： 它 是 多余 的 信息 以及 没有 独立 的 事务 意义 。 而 为了 处理 摘要 数据 ， 需要 进行 聚合 处理 ， 从而 引起 大量 的 CPU 处理 和 I / O 访问 。 
 　 　 ． 在 规范化 的 表中 ， 保存 的 数据 难以 反映 出 系统对 表中 数据 的 特定 处理 要求 。 
 　 　 为了 解决 上面 规范化 表所 存在 的 缺陷 和 不足 ， 本 系统 在 表 的 定义 时 一般 有意 违反 规范化 要求 而 将表 定义 成非 规范化 的 。 表 的 非 规范化 定义 的 基本 方法 是 数据 冗余 ， 具体 的 方法 有 ： 
 　 　 ． 适当 增加 表 。 对于 经常 要 使用 、 相对 变化 很小 的 某些 实体 的 属性 抽出来 另外 定义 成 一些 表 ， 将 这些 数据 保存 在 增加 的 表中 。 如 在 本 系统 中将 货物 的 基本 情况 ： 编号 、 名称 、 规格 、 计量单位 、 单价 另外 定义 成 货物 目录 表 。 一方面 在 各种 单据 处理 时凡 涉及 到 货物 时 就 以弹 出 方式 提供 给 操作者 ， 可以 提高 数据录入 的 速度 以及 减少 数据 的 输入 性 错误 。 另一方面 可以 有效 地 保证数据 的 完整性 和 便于 系统管理员 对 数据 的 维护 。 
 　 　 ． 表 的 分解 。 为了 方便 处理 和 减少 处理过程 中 I / O 操作 ， 常将 实际 使用 中 的 表 按 内容 的 使用 频度 和 具体 的 处理 要求 分解成 几个 表 。 如本 系统 的 发票 ， 一张 发票 可以 开 一种 或 几种 货物 ， 且 可 几次 交款 。 因此 ， 对于 实际 的 一张 发票 在 定义 时 分解成 三个 表 ： invoice _ table ( 发票 表 ) ， invoice _ volue ( 发票 内容 表 ) 和 invoice _ charge ( 发票 付款 表 ) ， 后 两个 表用 外码 invoice _ no ( 发票 编码 ) 和 invoice _ table 建立 起 关联 。 
 　 　 ． 人为 增加 列 。 人为 增加 列 包括 人为 增加 主 关键字 列 、 处理 标识 列 和 派生 列 三种 方式 。 
 如 客户档案 表 ， 本 系统 人为 增加 序号 ( serial _ no ) 作为 表 的 主 关键字 并 以此 建立 簇 索引 ， 并且 在 表 的 数据录入 时 由 代码 处理 生成 而 不是 由 操作者 输入 的 办法 来 解决 其 唯一性 问题 。 
 　 　 处理 标识 列是 为了 反映 出 系统对 表中 数据 的 特定 处理 情况 而 增加 的 列 。 如本 系统 中 为了 标识 注销 和 冲抵 处理 ， 在 相应 单据 的 主表 中 增加 注销 ( discard   _ or ) 和 冲抵 ( against _ or ) 列来 加以 标识 ； 又 如 在 invoice _ volue 表中 增加 ( write _ or ) 和 ( write _ out ) 列来 标识 发票 中 的 某种 货物 是否 开 提单 和 是否 开 完 。 一般 地 ， 处理 标识 列 都 是 binary 类型 。 
 　 　 派生 列是 为了 避免 处理 时 的 重复 计算 减少 I / O 和 CPU 操作 而 增加 的 列 。 如 发票 中 有所 开 货物 的 总量 和 总金额 栏 ， 在 各种 查询 或 统计 时 都 要 频繁 访问 ， 但 其 内容 可以 通过 invoice _ no 码 关联 invoice _ volue 表 计算 得到 。 根据 规范化 要求 ， 这样 的 列 是 应该 去掉 的 。 但 实际 开发 时 在 invoice _ table 派 生出 这些 列 ， 在 数据 输入 保存 到 数据库 时 计算 一次 并 保存 在 表中 ， 以后 每次 检索 查询 或 统计 时 就 不 需要 再 通过 连接 计算 求得 而 可以 直接 得到 。 
 2.3     客户端 设计 的 关键问题 
 　 　 用 PowerBuilder   6.0 开发 客户端 应用程序 时 ， 应该 充分利用 PowerBuilder   6.0 的 数据 窗口 及其 交互 功能 。 在 开发 过程 中 的 关键问题 是 如何 在 一个 数据 窗口 中向 数据库 提交 数据 时 保证 多个 表 的 数据 同步 ， 既 对表 的 更新 要么 都 更新 ， 要么 一个 也 不 更新 。 下面 以 开发票 为例 说明 解决 这 两个 问题 的 思想 和 办法 ： 
 　 　 定义 开发票 的 数据 窗口 d _ invoice 和 对应 的 数据 窗口 控件 dw _ invoice ， d _ invoice 的 数据源 为 三个 表 ： invoice _ table ， invoice _ volue ， goods _ count _ table ( 货物 帐 存表 ) ， 选择 的 列 全部 是 invoice _ table 的 列 而 不 选择 其它 两个 表 的 列 。 在 创建 数据 窗口 对象 时 invoice _ table 定义 为 可 修改 的 ， 而 其它 两个 表 定义 为 不可 修改 的 。 
 　 　 在 更新 各个 表 的 数据 时先 更新 invoice _ table   表 ， 然后 用 Modify 函数 依次 改变 已 更新 表中列 的 update 属性 为 NO 、 设定 要 更新 的 表 和 修改 表中列 的 update 属性 为 YES 。 如果 所有 的 表 更新 成功 ， 则 用 COMMIT 命令 将 数据 提交 ， 完成 对应 表 的 更新 。 其 & quot ; 提交 & quot ; 按钮 的 Clicked 事件 中 的 代码 如下 ： 
 integer     update _ num 
 / / 修改 invoice _ table 表 , 其 修改 特性 在 数据 窗口 定义 时 定义 为 可 修改 
 update _ num = dw _ invoice . update ( TRUE , FALSE ) 
 if     update _ num = 1     then   
 　 dw _ invoice . Modify ( ＂ invoice _ table . invoice _ no . update = NO ＂ ) 
 　 dw _ invoice . Modify ( ＂ invoice _ table . invoice _ date . update = NO ＂ ) 
 　 … / / 类似 的 命令 形式 关闭 invoice _ table 表中 所有 列 的 update 属性 
 　 dw _ invoice . Modify ( ＂ DataWindow . table . updateTable = ～ ＂ 
 　 　 invoice _ volue ) 
 　 / / 使 invoice _ volue 表可 更新 且 打开 表中 所有 列 的 update 属性 
 　 dw _ invoice . Modify ( ＂ invoice _ volue . invoice _ no . update = YES ＂ ) 
 　 dw _ invoice . Modify ( ＂ invoice _ volue . serial _ no . update = YES ＂ ) 
 　 …     
 / / 更新 invoice _ volue 表 
 update _ num = dw _ invoice . update (   ) 
 　 if     update _ num = 1     then 
 　 dw _ invoice . Modify ( ＂ invoice _ volue . invoice _ no . update = NO ＂ ) 
 　 dw _ invoice . Modify ( ＂ invoice _ volue . serial _ no . update = NO ＂ ) 
 　 … / / 类似 的 命令 形式 关闭 invoice _ volue 表中 所有 列 的 update 属性 
 　 dw _ invoice . Modify ( ＂ DataWindow . table . updateTable = ～ ＂ 
 　 　 goods _ count _ table ) 
 　 / / 使 goods _ count _ table 表可 更新 且 打开 表中 所有 列 的 update 属性 
 　 dw _ invoice . Modify ( ＂ goods _ count _ table . goods _ no . update = YES ＂ ) 
 　 dw _ invoice . Modify ( ＂ goods _ count _ table . goods _ name . update = YES ＂ ) 
 　 …     
 　 / / 更新 goods _ count _ table 表 
 　 update _ num = dw _ invoice . update (   ) 
 　 if     update _ num = 1     then 
 　 COMMIT   USING   SQLCA ;     / / 所有 表 修改 成功 ， 提交 
 　 dw _ invoice . Modify ( ＂ goods _ count _ table . goods _ no . update = NO ＂ ) 
 　 dw _ invoice . Modify ( ＂ goods _ count _ table . goods _ name . update = NO ＂ ) 
 　 … / / 类似 的 命令 形式 关闭 goods _ count _ table 表中 所有 列 的 
 　 　 / / update 属性 
 　 dw _ invoice . Modify ( ＂ DataWindow . table . updateTable = ～ ＂ 
 　 　 　 invoice _ table ) 
 　 　 / / 使 invoice _ table 表可 更新 且 恢复 表中 所有 列 的 update 属性   
 　 dw _ invoice . Modify ( ＂ invoice _ table . invoice _ no . update = YES ＂ ) 
 　 dw _ invoice . Modify ( ＂ invoice _ table . invoice _ date . update = YES ＂ ) 
 　 …     
 　 cb _ continue . enabled = true 　 / / 继续 按钮 有效   
 　 Else 
 　 　 ROLLBACK   USING   SQLCA ; 　 / / 修改 不 成功 ， 滚回 所有 的 修改 
 　 End   if 
 Else 
 　 ROLLBACK   USING   SQLCA ; 
 End   if 
 Else 
 ROLLBACK   USING   SQLCA ; 
 End   if 
 欧阳 骥 ( 郑州 粮食 学院 计算机科学 系     郑州   450052 ) 
 欧阳 宝蓉 ( 桂林 面粉厂     桂林   541003 ) 
 参考文献 
 1 ， 萨师煊 ,   王     珊著 .   数据库系统 概论 ( 第二 版 ) .   北京 :   高等教育出版社 ,   1997 
 2 ， D . Solomon ,   R . Rankins 著 ,   熊桂喜 ,   高     峰 ,   冯学民译 .   SQL   SERVER   6.5 开发 指南 ( 第二 版 ) .   北京 :   清华大学出版社 ,   1998 
 3 ， 吴洁明 编著 .   PowerBuilder   6.0 应用 与 开发 .   北京 :   清华大学出版社 ,   1998 
 4 ， 张长富 ,   李     匀 ,   严苏娅 编著 .   PowerBuilder   6.0 用户 参考手册 .   北京 希望 电脑公司 ,   1998 
 5 ， Simon   Gallagher ,   Simon   Herbert 著 .   康博 创作室 译 .   PowerBuilder   6.0 程序设计 大全 .   北京 : 机械 工业 出版社 ,   1998 
 收稿 日期 ： 1999 - 11 - 18 
