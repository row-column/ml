计算机 应用 
 Computer   Applications 
 1999 年   第 19 卷   第 7 期     Vol.19   No.7   1999 
 
 
 
 ADO 数据 存取 技术 
 周治平 
 　 　 摘 　 要 　 本文 介绍 了 微软公司 以 ActiveX 技术 为 基础 的 ADO 数据 存取 技术 ， 分析 了 ADO 的 工作 原理 ， 并用 VB 说明 了 ADO 数据 访问 技术 的 实现 方法 。 
 　 　 关键词 　 ADO ， 数据 存取 ， 数据 连接 ， 记录集 ， 对象 
 　 　 
 ADO   DATA   ACCESS   TECHNOLOGY 
 
 Zhou   Zhiping 
 Department   of   Information   and   Control   Engineering ,   Wuxi   Jiangnan   Institute ,   Jiangsu * Wuxi   214063 
 
 　 　 Abstract 　 This   paper   introduces   the   Microsoft ′ s   newest   data   access   technologies   based   on   the   ActiveX   ,   discusses   their   principles ,   and   illustrates   how   to   use   the   ADO   programming   model   to   query   and   update   a   data   source   in   VB   . 
 　 　 Keywords 　 ADO ，   Data   access ,   Connection ,   Recordset , Objects 
 
 1 　 引言 
 　 　 ADO （ ActiveX   Data   Objects ） 是 由 微软公司 推出 的 以 ActiveX 技术 为 基础 的 数据 存取方法 。 ADO 的 主要 特点 是 使用 更加 容易 ， 访问速度 更 快 ， 而 对 磁盘 和 存储容量 的 要求 更 小 ； ADO 支持 建立 各种 客户 / 服务器 模式 与 基于 Web 的 应用程序 ， 具有 远程 数据服务 RDS （ Remote   Data   Service ） 的 特性 ,   通过 RDS 能够 在 一次 往返 中将 服务器端 的 数据 传送 到 客户端 的 应用程序 或 Web 页面 中 ， 并 在 客户端 对 数据 进行 处理 后 ， 立即 更新 服务器端 的 数据 。 采用 ADO 所 基于 的 OLE   DB 技术 ， 可以 对 电子邮件 、 文本文件 、 数据 表格 等 各类 数据 通过 统一 的 接口 API （ Application   Programming   Interface ） 接口 进行 存取 ， 是 远程 数据 存取 的 一个 主要 发展 方向 。 
 　 　 
 2 　 ADO 工作 原理 
 　 　 对于 异种 数据库 的 访问 ， 首先 需要 一个 简单 而 统一 的 应用 程序接口 ( API )   ， 应用程序 通过 它 访问 和 修改 各种各样 的 数据 。 典型 的 数据源 是 支持 ODBC （ Open   Database   Connectivity ） 标准 的 关系 型 数据库 ， 通过 一系列 SQL 命令 进行 数据 操作 。 问题 是 数据源 可能 是 一个 简单 的 文本文件 ， 也 可能 是 来自 不同 种类 甚至 特别 定义 的 数据库 的 一个 集合 。 而且 ， 访问 和 修改 数据 的 方法 不 可能 预先确定 。 解决 这个 问题 的 方法 就是 OLE   DB ， 这是 一个 系统 级 的 数据库 编程 接口 ， 它 提供 了 一系列 有关 数据库 管理系统 服务 的 统一 的 COM （ Component   Object   Model ） 接口 。 通过 OLE   DB 可以 存取 异构 的 关联 和 非 关联 信息 ， 包括 电子邮件 、 文件系统 、 文本 、 图形 、 图形化 数据 以及 客户 定制 对象 。 ADO 就是 连结 OLE   DB 与 应用程序 的 数据 操作 接口 。 
 　 　 ADO 定义 一个 设计 原型 ， 其中 概括 了 一系列 进行 数据 存取 和 更新 所 必须 的 行为 说明 。 设计 原型 表示 了 一个 对象 模型 ， 包括 实现 原型 所 对应 的 对象 集 ， 定义 进行 数据 操作 的 对象 方法 ， 表示 数据 或 对象 方法 行为 控制 的 属性 等 。 与 对象 相关 的 事件 说明 了 将要 发生 或 已经 发生 的 数据 操作过程 。 
 2.1 　 基本 的 ADO 原型 顺序 
 　 　 *   连接 数据源 ; 
 　 　 *   指定 对 数据源 的 存取 命令 ; 
 　 　 *   激活 命令 ; 
 　 　 *   将 返回 的 数据 存入 表 的 记录 缓冲区 中 便于 检查 修改 ; 
 　 　 *   更新 数据 的 变化 。 
 　 　 通常 上述 几步 都 会 用到 ， 但 并 不是 必须 的 ， ADO 可以 灵活 地 使用 原型 中 的 一部分 进行 工作 。 例如 ， 可以 直接 从 一个 文件 中 把 数据 存到 表 的 记录 缓冲区 ， 利用 ADO 方法 检查数据 。 
 2.2 　 ADO   原型 结构 
 　 　 ADO 原型 有 下列 几个 主要 部分 ： 
 　 　 数据 连接 （ Connection ） 　 Connection 建立 一个 数据交换 环境 ， 应用程序 通过 Connection 存取数据 。 应用程序 直接 或 通过 诸如 IIS （ Internet   Information   Server ） 这样 的 系统 间接 存取数据 源 的 数据 。 Connection 对象 用于 规定 特定 的 数据 提供者 和 附加 参数 。 由 Connection 发生 的 一系列 数据 存取 操作 形成 一个 事务 处理过程 ， ADO 确保 事务 过程 成功 操作 的 结果 传给 数据源 ， 如果 其中 某个 操作 失败 或 用户 取消 事务 过程 ， 数据源 中 的 数据 就 维持 原先 的 状态 。 对象 模型 并 不 明确 地 具体 表示 一个 事务 过程 ， 而 通过 一套 Connection 对象 方法 实现 。 
 　 　 命令 （ Command ） 　 Command 通过 已 建立 的 Connection 发布 。 典型 的 Command 有 增加 、 删除 和 更新 ， 恢复 表中 的 记录 等 。 
 　 　 参数 （ Parameter ） 　 Parameter 是 命令 的 附加 可变 部分 ， 可以 通过 改变 Parameter 来 发布 具有 相同 功能 的 命令 。 
 　 　 记录集 （ Recordset ） 　 对象 模型 中用 Recordset 存贮 查询 命令 返回 的 结果 ， 是 检查和 修改 记录 的 主要 手段 ， 在 Recordset 对象 中 可以 检查 记录 、 在 记录 中 浏览 、 浏览 记录 的 次序 、 增加 修改 或 删除 记录 、 更新 记录 已 变化 的 数据源 等 。 
 　 　 字 段 （ Field ） 　 Recordset 的 每条 记录 由 一个 或 多个 Field 组成 ， 每个 Field 包括 名称 、 数据类型 和 数据 值 。 修改 数据源 的 数据 时 ， 通过 修改 Recordset 中 的 Field   对象 值 ， 最终 传递 到 数据源 中 。 使用 Connection 对象 里 的 事务处理 方法 可以 确保 数据 变更 的 同步 。 　 　 
 
 
 图 1 　 ADO 原型 　 　 图 2 　 ADO 集合 
 　 　 错误 （ Error ） 　 应用程序 在 任何 时候 都 可能 出现 Error ， 如 建立 数据 连接 、 激活 命令 等 。 任何 错误 都 会 产生 一个 或 多个 Error 对象 ， 新 的 Error 将 替换 先前 的 Error 对象 。 
 　 　 属性 （ Property ） 　 每个 ADO 对象 都 有 一套 唯一 的 表示 对象 或 控制 对象 行为 的 Property 。 有 两种 类型 的 Property ： 固定 的 和 动态 的 。 固定 Property 是 ADO 对象 的 一部分 ， 并且 始终 有效 ； 动态 Property 由 数据 提供者 添加 到 ADO 对象 的 Property 集合 中 ， 仅当 使用 该 数据 提供者 时才 有效 。 
 　 　 集合 （ Collection ） 　 ADO 提供 了 四种 类型 的 Collection ， Connection 对象 有 Error 集合 、 Command 对象 有   Parameter 集合 、 Recordset 对象 有 Field 集合 ； 此外 ， 前 三类 对象 和 Field 对象 都 有 Property 集合 。 
 　 　 事件 （ Event   ） 　 对象 模型 通过 Events 处理过程 表示 Events 。 有 ConnectionEvents 和 RecordsetEvents 两类 Events 。 
 　 　 
 3 　 ADO 使用 方法 
 　 　 以下 用 VB 代码 的 例子 说明 ADO 的 使用 过程 。 
 3.1 　 建立 一个 数据 连接 
 　 　 ADO 采用 Connection . Open 或 Recordset . Open 方法 建立 连接 ， 语法 如下 ： 
 　 　 connection . Open   ConnectionString ,   UserID ,   Password ,   
 　 　 OpenOptions 
 　 　 recordset . Open   Source ,   ActiveConnection ,   CursorType ,   
 　 　 LockType ,   Options 
 　 　 其中 ConnectionString 指定 准备 连接 的 数据源 。 例如 ， 为 连接 MS   SQL   Server 中 附带 的 ODBC 数据库 pubs ， 对象 方法 可 写成 ： 
 　 　 Connection . Open   " DSN = pubs ; uid = sa ; pwd = pa ; 
 　 　 database = pubs " 
 　 　 uid 和 pwd   关键词 指定 了 Connection 对象 的 UserID （ 用户 号 ） 和 Password （ 口令 ） 参数 。 
 3.2 　 创建 命令 
 　 　 典型 的 命令 用 SQL 语句 组成 ， 查询 的 结果 为 包含 所 请求 内容 的 记录集 。 例如 ， 要 列出 pubs 数据库 内表 authors 中 的 全部 数据 的 SQL 语句 为 “ SELECT   *   from   authors ” 。 Command 对象 的 CommandText 属性 用来 设置 这个 命令 字符串 ， 命令 如下 ： 
 　 　 Command   cmd   =   New   ADODB . Command ; 
 　 　 cmd . CommandText   =   " SELECT   *   from   authors " 
 　 　 SQL 字符串 的 内容 是 不变 的 ， 但 可以 创建 一个 带 通配符 ′ ? ′ 参数 的 命令 ， 当 命令 发布 时 替换 这个 通配符 ′ ? ′ 。 同样 使用 带 Prepared 属性 的 参数 命令 ， 改变 其中 的 参数 即可 。 例如 下列 命令 执行 一个 列出 所有 作者 姓氏 为 “ Ringer ” 的 查询 ： 
 　 　 Command   cmd   =   New   ADODB . Command 
 　 　 cmd . CommandText   =   " SELECT   *   from   authors   WHERE   au — lname   =   ? " 
 　 　 每个 通配符 ′ ? ′ 由 Command 对象 的 Parameter 集合 中 相应 的 Parameter 对象 的 值 进行 替换 。 在 上述 例子 中 ， 先 创建 Parameter 对象 并 赋值 为 Ringer ， 然后 添加 到 Parameters 集合 。 
 　 　 Parameter   prm   =   New   ADODB . Parameter 
 　 　 prm . Name   =   " au — lname " 
 　 　 prm . Type   =   adVarChar 
 　 　 prm . Direction   =   adInput 
 　 　 prm . Size   =   40 
 　 　 prm . Value   =   " Ringer " 
 　 　 cmd . Parameters . Append   prm 
 　 　 也 可以 用 CreateParameter 方法 设置 并 添加 一个 Parameter 对象 ， 而后 加入 Parameters 集合 。 
 　 　 cmd . Parameters . Append   cmd . CreateParameter   
 　 　 " au — lname " ,   adVarChar ,   adInput ,   40 ,   " Ringer " 
 3.3 　 激活 命令 
 　 　 ADO 有 Connection . Execute 、 Command . Execute 和 Recordset . Open 三种 方法 激活 命令 ， 每种 方法 都 对应 于 不同 的 数据 连接 过程 。 具体 语法 如下 ： 
 connection . Execute ( CommandText ,   RecordsAffected ,   Options ) 
 command . Execute ( RecordsAffected ,   Parameters ,   Options ) 
 recordset . Open   Source ,   ActiveConnection ,   CursorType ,   
 LockType ,   Options 
 　 　 本例 中 这样 来 激活 命令 ： 
 Recordset   rs   =   New   ADODB . Recordset 
 rs . Open   cmd ,   conn ,   adOpenDymanic ,   adLockBatchOptimistic 
 3.4 　 处理 数据 
 　 　 记录集 是 一组 记录 ， Move 、 Find 方法 都 可以 在 记录 间 移动 ， 设置 Bookmark 属性 也 可以 改变 记录 的 位置 ， Filter 属性 用于 过滤 进行 存取 的 记录 ， 而 Sort 属性 决定 记录 移动 的 次序 。 在 下例 中 ， 将区 号 为 “ 415 ” , 号码 以 “ 5 ” 字 开始 的 电话号码 改区 号 为 “ 777 ” ： 
 rs ! au — lname . Optimize   =   TRUE 
 rs . Sort   =   " au — lname   ASCENDING " 
 rs . Filter   =   " phone   LIKE   ′ 415   5 * ′ " 
 rs . MoveFirst 
 Do   While   Not   rs . EOF 
 Debug . Print   " Name :   "   &   rs ! au — fname   &   "   "   rs ! au — lname   
 &   " Phone :   "   rs ! phone   &   vbCr 
 rs ! phone   =   " 777 "   &   Mid ( rs ! phone ,   5 ,   11 ) 
 rs . MoveNext 
 Loop 
 
 3.5 　 更新 数据 
 　 　 ADO 支持 两种 数据 更新 方法 。 一种 是 间接 的 ， 数据 变化 贮存 在 一个 内部 数据 区中 ， 当 确定 更新 的 时候 才 将 数据 变化 写入 记录集 ； 另 一种 是 直接 的 ， 在 用户 确定 数据处理 完成 时 直接 把 单个 记录 或 成批 把 一系列 记录 的 更新 传送 给 数据源 ， 通过 CursorLocation 属性 和   LockType 属性 进行 管理 。 在 直接 更新 的 批处理 模式 中 ， 当前 记录 的 移动 或 Update 方法 保存 数据 修改 到 记录集 ， 必须 用 UpdateBatch 方法 将 更新 传送 给 数据源 ， 它 与 打开 记录集 的 方式 有关 。 同时 ， 可以 用 事务 处理过程 来 确保 几个 操作 的 结果 同步 。 本例 的 代码 写成 ： 
 　 　 conn . BeginTrans 
 　 　 rs . UpdateBatch 
 　 　 ... 
 3.6 　 完成 数据 更新 
 　 　 ADO 能够 检测 并 报告 数据 更新过程 中 可能 出现 的 错误 。 下面 是 错误 的 处理过程 ： 
 　 　 ... 
 　 　 conn . CommitTrans 
 　 　 ... 
 　 　 On   Error 
 　 　 rs . Filter   =   adFilterConflictingRecords 
 　 　 rs . MoveFirst 
 　 　 Do   While   Not   rs . EOF 
 　 　 Debug . Print   " Conflict :   Name :   "   &   rs ! au — fname   "   "   
 　 　 &   rs ! au — lname   rs . MoveNext 
 　 　 Loop 
 　 　 conn . Rollback 
 　 　 Resume   Next 
 　 　 从 以上 的 步骤 可以 大致 了解 ADO 存取数据 的 使用 方法 。 对 不同 的 程序设计 语言 ， 有 类似 的 过程 。 
 4 　 结束语 
 　 　 ADO 是 一种 最新 的 数据 存取 技术 ， 今后 将 逐步 替代 老 的 DAO （ Data   Access   Objects ） 特别 是 RDO （ Remote   Data   Objects ） 数据 访问 接口 ， 成为 新 的 远程 数据 访问 方法 。 而 ADO 更 容易 使用 ， 性能 更好 ， ADO 提供 了 在 因特网 上 数据 存取 的 良好 接口 ， 对 网络 环境 的 数据库 应用 开发 提供 了 极大 的 便利 。 因此 ， 了解 并 掌握 ADO 数据 存取 技术 有 其 深远 的 意义 。 从 使用 DAO 、 RDO 数据 访问 方法 过渡 到 ADO 是 一个 趋势 ， 本文 暂不作 深入 的 探讨 。 
 　 　 周治平 　 讲师 。 从事 工业 自动控制 和 计算机 应用 的 教学 与 科研工作 。 
 　 　 作者 单位 ： 周治平 （ 无锡 江南 学院 信息 与 控制 工程系 　 江苏 ． 无锡   214063 ） 
 收稿 日期 : 1999 - 02 - 28 
