软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年 　 第 10 卷 　 第 9 期 　 Vol.10 　 No.9 　 1999 
 
 
 
 一种 并行 数据库 的 动态 多维 数据分布 方法 * 
 李建中 
 摘要 　 并行 数据库系统 的 性能 与 数据库 在 多处理机 之间 的 分布 密切相关 . 目前 已经 出现 一些 并行 数据库 的 数据分布 方法 . 但是 ， 这些 方法 都 不能 有效 地 支持 动态 数据库 . 文章 提出 了 一种 并行 数据库 的 动态 多维 数据分布 方法 . 该 方法 不仅 能够 有效 地 支持 动态 数据库 的 分布 ， 还 具有 多维 数据分布 的 诸多 优点 . 此 方法 由 初始 数据分布 机构 和 启发式 动态数据 分布 调整 机构 组成 . 初始 分布 机构 完成 给定 数据库 文件 的 初始 分布 . 动态数据 分布 调整 机构 实现 动态 数据库 数据分布 的 动态 调整 . 理论 分析 和 实验 结果表明 ， 这种 方法 十分 有效 ， 并且 能够 有力 地 支持 动态 数据库 上 的 各种 并行 数据 操作 算法 . 
 关键词 　 并行 数据库 ， 数据分布 ， 多维 数据分布 . 
 中图法 分类号 　 TP311 
 A   Dynamic   and   Multidimensional   Declustering   Method   for   Parallel   Databases 
 LI   Jian - zhong 
 ( Department   of   Computer   Science   Harbin   Institute   of   Technology   Harbin   150080 ) 
 Abstract 　 The   performance   of   parallel   database   systems   is   closely   related   to   the   declustering   methods   of   databases .   In   the   recent   years ,   many   declustering   methods   have   been   proposed .   But   most   of   them   cannot   support   dynamic   databases .   A   new   dynamic   and   multidimensional   declustering   method   called   DCMD ( dynamic   coordinates   module   declustering )   is   proposed   in   this   paper .   DCMD   not   only   supports   dynamic   databases   but   also   has   the   advantages   of   multidimensional   data   declustering .   DCMD   consists   of   a   component   for   initially   declustering   databases   and   a   component   for   dynamically   adjusting   data   distribution .   The   first   component ,   which   is   a   random   algorithm ,   is   to   declustering   databases   initially   among   multiple   processing   nodes .   The   second   component ,   which   is   composed   by   a   splitting   algorithm ,   a   merging   algorithm   and   two   heuristic   scheduling   algorithms ,   is   to   support   the   dynamic   adjusting   of   the   database   distribution   among   multiple   processing   nodes   during   running   time .   Experimental   and   theoretic   results   show   that   DCMD   can   efficiently   support   parallel   processing   of   dynamic   databases . 
 Key   words 　 Parallel   database ,   data   declustering ,   multidimensional   data   declustering . 
 　 　 并行 数据库系统 的 性能 与 数据库 的 数据 在 多处理机 之间 的 分布 ( 以下 简称 数据分布 ) 密切相关 . 最近 几年 ， 人们 提出 了 一些 数据分布 方法 ［ 1 ］ . 有 3 种 一维 数据分布 方法 首先 被 提出 ［ 2 , 3 ］ . 这些 数据分布 方法 仅 根据 数据库 的 一个 属性 ( 称为 划分 属性 ) 的 值 在 多个 处理机 之间 分布 数据库 的 数据 . 这些 方法 不能 有效 地 支持 在 非 划分 属性 上 具有 选择 谓词 的 查询 . 为了 解决 这个 问题 ， Hua 和 Lee 提出 了 一种 基于 Grid 文件 的 多维 数据分布 方法 ［ 4 ］ . 这种 方法 只 考虑 了 数据量 平衡 的 问题 ， 没有 考虑 把 相邻 Grid 块 分配 到 不同 处理机 ， 不能 充分发挥 系统 的 并行性 . Ghadeharizadeh 和 DeWitt 提出 了 另 一种 称为 Magic 的 多维 数据分布 方法 ［ 5 ］ . 这种 方法 仅 支持 静态 数据库 . 本文 作者 提出 了 第 3 种 多维 分布 方法 ， 称为 CMD ( coordinates   module   declustering ) 方法 ［ 6 ］ . 但 CMD 方法 不能 有效 地 支持 分布 状态 不可 预知 的 动态 数据库 . 针对 这些 问题 ， 本文 提出 了 一种 能够 有效 支持 动态 数据库 的 多维 数据分布 方法 ， 简称 为 DCMD ( dynamic   coordinates   module   declustering ) 方法 . DCMD 方法 由 初始 数据分布 机构 和 动态数据 分布 调整 机构 组成 , 初始 分布 机构 完成 给定 数据库 文件 的 初始 划分 和 分布 ; 动态数据 分布 调整 机构 动态 地 调整 数据库 在 多处理机 之间 的 分布 . 给定 一个 多维 数据库 文件 F ， 初始 数据分布 机构 把 F 均匀 地 分布 到 多个 处理机 . 在 系统 运行 期间 ， 动态数据 分布 调整 机构 根据 F 的 变化 情况 及时 调整 F 的 分布 ， 保证 F 均匀分布 在 多个 处理机 上 . 理论 分析 和 实验 结果 证明 ， DCMD 方法 十分 有效 ， 并且 能够 有力 地 支持 动态 数据库 上 的 各种 并行操作 算法 . 该 方法 已经 用于 我们 设计 实现 的 并行 关系 数据库系统 ， 取得 了 很 好 的 效果 . 
 　 　 设 Di 是 一个 有序 集合 ( 1 ≤ i ≤ d ) ， D1 × D2 × ... × Dd 的 子集 称为 d 维 数据库 文件 或 具有 d 个 属性 的 数据库 文件 . 为 不失 一般性 ， 本文 假定 Di = ［ 0 , 1 ) . 另外 ， 还 假定 并行计算 系统 具有 无 共享资源 ( shared - nothing ) 结构 . 
 1 　 初始 数据分布 机构 
 　 　 初始 数据分布 机构 由 数据 划分算法 和 数据 分配 算法 组成 . 给定 一个 d 维 数据库 文件 F ， 初始 数据分布 机构 , 首先 使用 数据 划分算法 把 F 划分 成 多个 大小 近似 相等 的 超 长方体 ， 然后 使 它们 在 多个 处理机 之间 均匀分布 . 
 1.1 　 数据 划分算法 和 数据 分配 算法 
 　 　 设 ni 是 正整数 ， 表示 F 的 第 i 维 定义域 被 划分 为 niN 个 区间 . ni 可 由 下列 方法 之一 来 确定 ： ①   如果 已知 F 在 ［ 0 ,   1 ) d 上 的 分布 ， 选择 一组 n1 , n2 , ... , nd ， 使得 n1 : n2 : ... : nd 等于 或 最 接近 于 s1 : s2 : ... : sd , 其中 si 是 F 在 第 i 维上 投影 的 元素 数 ( 包括 重复 元素 ) ； ②   如果 已知 F 上 各种 数据 操作 的 频率 、 所需 CPU 时间 、 I / O 时间 和 通信 时间 ， 可 按照 文献 ［ 3 ］ 给出 的 方法 确定 n1 , n2 , ... , nd ； ③   如果 上述 ① 和 ② 的 条件 不 满足 ， 则 令 n1 = n2 = ... = nd = 1 . 
 　 　 F 的 划分 由 d 个 划分 向量 表示 ， 每个 划分 向量 表示 一个 维 的 定义域 的 划分 . 下面 , 令 pi0 = 0 , pi   niN = 1 . 第 i 维 划分 向量 定义 为 Vi = ( 〈 pi0 , Si0 〉 , 〈 pi1 , Si1 〉 , ... , 〈 pi   niN - 1 , Si   niN - 1 〉 ) ， 表示 第 i 维 定义域 被 划分 为 niN 个 区间 ［ pi0 , pi1 ) , ［ pi1 , pi2 ) , ... , ［ pi   niN - 1 , pi   niN ) ， 其中 对于 1 ≤ j ≤ niN - 1 ， Sij = | ［ pi   j - 1 , pij ) × ［ 0 , 1 ) d - 1 ∩ F | ， 即 F 是 在 第 i 维第 j 区间 上 投影 的 元素 数 ( 包括 重复 元素 ) . 以下 用 Vi ［ k ］ . p 和 Vi ［ k ］ . S 表示 Vi 的 pik 和 Sik . 各维 的 区间 从 0 到 niN - 1 编号 . 第 i 维 的 第 k 区间 记为 Iik = ［ lik , hik ) . 于是 ， F 被 划分 为 niN   个 d 维超 长方体 . 一个 d 维超 长方体 是 d 个 不同 维 区间 的 笛卡尔 乘积   ［ l1k1 , h1k1 ) × ［ l2k2 , h2k2 ) × ... × ［ ldkd , hdkd ) ， 其中 0 ≤ kj ≤ njN - 1 ， 1 ≤ j ≤ d . 上述 超 长方体 的 坐标 定义 为 ( k1 , k2 , ... , kd ) . 以后 ， 在 不 引起 混淆 的 情况 下 ， 我们 简单 地 使用 “ F 的 超 长方体 ” 表示 “ F 与 这个 超 长方体 的 交集 ” ， 并 使用 超 长方体 的 坐标 表示 超 长方体 . 
 　 　   初始 数据分布 机构 的 目标 是 使 F 在 N 个 处理机 之间 均匀分布 . 为此 ， 我们 首先 给出 一个 并行 随机 划分算法 Partition ， 使用 随机抽样 技术 把 F 划分 为 大小 近似 相等 的 多个 超 长方体 . 为 叙述 方便 ， 设 d ≤ N . 这个 算法 很 容易 推广 到 d > N 的 情况 . 算法 Partition 定义 如下 . 
 　 　 算法 .   Partition 
 　 　 输入 ： F ： d 维 数据库 文件 ， 存储 在 处理机 0 ; n1 , ... , nd : 划分 参数 ； s ： 样本 因子 . 
 　 　 输出 ：   V1 , V2 , ... , Vd ： 划分 向量 ， 存储 在 处理机 0 .   / *   仅 计算 划分 向量 的 Vi ［ k ］ . p 分量 ， Vi ［ k ］ . S 分量 由 后边 DA 算法 计算   * / 
 　 　 ( 1 )   处理机 0 执行 下面 的 ( 2 ) ～ ( 5 ) 步 . 
 　 　 ( 2 )   　 FOR   i = 1   TO   d   DO   samplei : = 从 F 中 抽取 大小 为 sniN 的 随机样本 ； 
 　 　 ( 3 )   　 FOR   i = 1   TO   d   DO   把 samplei 在 第 i 维上 的 投影 ( 包括 重复 元组 ) Proj _ samplei 传送 到 处理机 i ； 
 　 　 ( 4 )   FOR   i = 1   TO   d   DO   ( 并行 地 ) 
 　 　 ( 5 )   　 处理机 i 排序 Proj _ samplei ； S : = | Proj _ samplei | / ( niN ) ; 
 　 　 ( 6 )   　 FOR   k = 1   TO   niN - 1   DO   / *   处理机 i 确定 划分 点 ， 处理机 0 建立 划分 向量 的 Vi ［ k ］ . p 值   * / 
 　 　 ( 7 )   　 　 Vi ［ k ］ . p : = samplei ［ kS ］ ; 传送 Vi ［ k ］ . p 到 处理机 0 ； 
 　 　 ( 8 )   　 　 处理机 0 接收 Vi ［ k ］ . p 值 ， 为 d 个 划分 向量 建立 Vi ［ k ］ . p 值 ； / *   ( 7 ) 与 ( 8 ) 并行执行   * / 
 　 　 通过 详细分析 ( 限于 篇幅 ， 本文 省略 了 分析 过程 ) ， Partition 算法 的 并行 磁盘 读写 时间 是 O ( sniN ) ， 并行 CPU 计算 时间 是 O ( dsn0N + sn0Nlog2 ( sn0N ) ) , 并行 通信 时间 是 O ( niN ) , 其中 . 
 　 　 数据 分配 算法 在 处理机 间 分配 由 Partition 算法 产生 的 F 的 超 长方体 集合 , 并 计算 F 的 划分 向量 中 的 Vi ［ j ］ . S 分量 . 我们 使用 坐标 和 求模 函数 CMD ( X1 , X2 , ... , Xd ) = ( X1 + X2 +...+ Xd )   mod   N 在 处理机 之间 分配 F 的 超 长方体 ， 即 坐标 为 ( X1 , X2 , ... , Xd ) 的 超 长方体 被 分配 到 处理机 CMD ( X1 , X2 , ... , Xd ) ， 其中 N 个 处理机 的 编号 为 0 , 1 , ... , N - 1 . 数据 分配 算法 DA ( data   allocation ) 定义 如下 . 
 　 　 算法 .   DA 
 　 　 输入 ：   F ： d 维 文件 ， 存储 在 处理机 0 ;   V1 , ... , Vd ： F 的 划分 向量 ， 存储 在 处理机 0 . 
 　 　 ( 1 )   处理机 0 执行 ( 2 ) ～ ( 6 ) . 
 　 　 ( 2 )   FOR   F 中 每个 元组 T   DO ; 
 　 　 ( 3 )   　 由 F 划分 向量 的 Vi ［ j ］ . p 值 ( 1 ≤ i ≤ d , 1 ≤ j ≤ niN - 1 ) 计算 T 所属 超 长方体 的 坐标 ( X1 ， ... , Xd ) ； 
 　 　 ( 4 )   　 k : = CMD ( X1 , ... , Xd ) ; 
 　 　 ( 5 )   　 把 元组 T 发送到 处理机 k ; 
 　 　 ( 6 )   　 FOR   1 ≤ i ≤ d   DO   Vi ［ Xi ］ . S : = Vi ［ Xi ］ . S + 1 ； 
 　 　 ( 7 )   FOR   i = 0   TO   N - 1   DO   ( 并行 地 )   处理机 i 接受 并 存储 处理机 0 发送 来 的 F 的 元组 . 
 　 　 通过 详细分析 ( 限于 篇幅 ， 本文 省略 了 详细分析 过程 ) ， DA 算法 的 并行 磁盘 读写 时间 是 O ( B ) , 并行 CPU 计算 时间 是 O ( TniN ) ， 并行 通信 时间 是 O ( T ) , 其中 B 表示 F 的 磁盘 块数 ， T 表示 F 的 记录 数 . 
 1.2 　 初始 数据分布 机构 的 性能 
 　 　 本 节 讨论 初始 数据分布 机构 的 性质 . 限于 篇幅 ， 我们 省略 了 所有 定理 、 引理 和 性质 的 证明 . 
 　 　 定义 1 .   设 d 维 数据库 文件 F 被 Partition 算法 划分 为 k 个 超 长方体 ， 超 长方体 i 的 大小 为 ci . 称为 Partition 算法 划分 F 的 误差 . 如果 ， 我们 说超 长方体 j 关于 α 溢出 ， 其中 α ≥ 1 并且 接近 于 1 . 
 　 　 引理 1 .   设 d 维 数据库 文件 F 被 Partition 算法 划分 为 k 个 超 长方体 ， 超 长方体 i 的 大小 为 ci . 如果 对于 任意 i ( 1 ≤ i ≤ k ) ， ， 则 对于 任意 j ( 1 ≤ j ≤ k ) ， . 
 　 　 引理 1 说明 ， Partition 算法 划分 F 时 出现 误差 , 当且 仅 当 F 的 超 长方体 中 至少 有 一个 超 长方体 溢出 . 要 考察 Partition 算法 出现 误差 的 概率 的 上界 ， 我们 只 需 考察 算法 产生 溢出 超 长方体 的 概率 的 上界 ( 以下 简称 溢出 概率 的 上界 ) . 溢出 概率 的 上界 可以 用来 确定 Partition 算法 中 随机样本 的 大小 . Partition 算法 划分 d 维 数据库 文件 的 溢出 概率 的 上界 可 由 划分 d - 1 维 数据库 文件 的 溢出 概率 的 上界来 确定 . 为 不失 一般性 ， 本文 仅 考虑 划分 二维 数据库 文件 的 溢出 概率 的 上界 . 设 X = { x1 , x2 , ... , xm } 是 一个 具有 m 个 元组 的 一维 数据库 文件 ， BX ( s , α , k , m ) 表示 使用 大小 为 ks 的 随机样本 把 F 划分 为 k 个 一维 方体 时 ， 至少 一个 方体 的 元组 数 超过 的 概率 的 上界 . 
 　 　 引理 2 .   
 　 　 定理 1 .   设 XY = { ( x1 , y1 ) , ( x2 , y2 ) , ... , ( xm , ym ) } 是 二维 数据库 文件 ， BXY ( s , α , v , h , m ) 表示 用 Partition 算法 把 F 划分 为 h 行 v 列时 至少 一个二维 方体 中 的 元组 数 超过 的 概率 的 上界 , 则 
 
 　 　 定理 1 给出 了 用 BX ( s , α , k , m ) 计算 Partition 算法 划分 二维 数据库 文件 时 溢出 概率 的 上界 . 一般 地 ， Partition 算法 划分 d 维 数据库 文件 时 溢出 概率 的 上界 可以 由 其 划分 d - 1 维 数据库 文件 时 溢出 概率 的 上界来 计算 . 显然 ， 当 α = 1 时 ， BX ( s , α , k , m ) = BXY ( s , α , v , h , m ) = 1 ， 即 使用 随机抽样 方法 划分 数据库 文件 时 ， 必 存在 溢出 方体 . 但是 ， 从 引理 2 和 定理 1 可知 ， Partition 算法 溢出 概率 的 上界 很小 . 
 　 　 定义 2 .   d 维 数据库 文件 F 的 两个 超 长方体 R1 和 R2 称为 相邻 超 长方体 ， 如果 存在 i ( 1 ≤ i ≤ d ) ， 使得 R1 = ( X1 , ... , Xi , ... , Xd ) ， R2 ＝ ( X1 , ... , Xi + 1 , ... , Xd ) . 
 　 　 定义 3 .   一个 数据分布 算法 是 平衡 的 ， 如果 每个 处理机 都 被 分配 相同 数量 的 超 长方体 , 而且 相邻 超 长方体 在 不同 的 处理机 上 . 
 　 　 引理 3 .   如果 使用 DA 算法 在 N 个 处理机 之间 分布 d 维 数据库 文件 F 的 超 长方体 ， 则 F 的 任意 两个 相邻 超 长方体 都 在 不同 的 处理机 上 . 
 　 　 定义 4 .   d 维 文件 F 在 第 i 维上 的 j + 1 个 相邻 超 长方体 定义 为 R ( i , k , j + 1 , ( x1 , ... , xi - 1 , xi + 1 , ... , xd ) ) ＝ { Rk , Rk + 1 , ... , Rk + j } ， 其中 Rk + m ＝ ( x1 , ... , xi - 1 , k + m , xi + 1 , ... , xd ) 是 F 的 d 维超 长方体 ， 0 ≤ m ≤ j ， 1 ≤ i ≤ d ， 0 ≤ k ≤ niN - 1 - j . 
 　 　 引理 4 .   设 A ＝ R ( i ， k ， LN ， ( X1 , ... , Xi - 1 , Xi + 1 , ... , Xd ) ) 是 d 维 数据库 文件 F 的 相邻 超 长方体 集合 ， 其中 k 和 i 与 定义 4 中 的 k 和 i 相同 ， L 是 正整数 . 如果 使用 DA 算法 在 N 个 处理机 之间 分布 F 的 超 长方体 ， 则 每个 处理机 上 有 且 仅 有 L 个 A 中 的 超 长方体 . 
 　 　 定理 2 .   DA 算法 是 平衡 的 . 
 　 　 性质 1 .   DCMD 的 初始 分布 机构 是 一种 动态 多维 分布 方法 . 
 　 　 性质 2 .   DCMD 文件 在 所有 维上 都 是 部分 排序 的 ， 即 对 任意 维 i ， 如果 Iik 和 Iim 是 第 i 维 的 两个 区间 , 而且 k < m ， 则 Iik × ［ 0 , 1 ) d - 1 中 的 每个 元组 在 第 i 维上 的 值 都 小于 Iim × ［ 0 , 1 )  d - 1 中 的 每个 元组 的 对应 值 . 
 　 　 由于 下边 的 动态数据 分布 机构 可以 保证 数据库 的 数据 始终 均匀 地 分布 在 多个 处理机 之间 ， 定理 2 、 性质 1 和 性质 2 说明 ， DCMD 方法 可以 有效 地 支持 在 任意 维上 具有 选择 谓词 的 选择 操作 、 区域 查询 操作 、 排序 、 连接 、 选择 、 投影 等 关系 代数 操作 . 引理 4 说明 ， 对于 在 任 一维 上 涉及 到 kN ( k 是 整数 ) 个 区间 的 区域 查询 Q 来说 ， DCMD 方法 是 优化 的 ， 即 在 每个 处理机 上 都 存取 相同 个数 的 超 长方体 . 　 
 2 　 动态数据 分布 调整 机构 
 　 　 初始 数据分布 机构 能够 把 F 均匀 地 分布 到 N 个 处理机 . 但是 ， 由于 数据 更新 操作 的 执行 ， F 在 各 处理机 之间 的 分布 可能 出现 偏斜 ( 简称 数据偏斜 ) ， 降低 系统 性能 . 在 这种 情况 下 ， 需要 调整 F 在 各 处理机 之间 的 分布 . 初始 数据分布 机构 可以 用来 重新 分布 F . 但是 ， 如果 F 很大 ， 反复 调用 初始 数据分布 机构 的 代价 也 相当 大 . 我们 使用 以下 两种 策略 最小化 动态数据 分布 的 代价 ： ①   设计 用于 数据分布 调整 的 高效 并行 数据 分裂 和 数据 合并 算法 ， 尽量避免 使用 初始 数据分布 机构 重新 分布 F ； ②   在 保证系统 性能 不减 的 前提 下 ， 最小化 数据分布 调整 的 次数 . 我们 首先 讨论 并行 数据 分裂 和 合并 算法 ， 然后 给出 两个 动态数据 调整 的 启发式 调度 算法 . 
 2.1 　 并行 分裂 算法 
 　 　 分裂 算法 的 目的 是 加细 空间 ［ 0 ,   1 ) d 中 数据 密度 大 的 区域 的 划分 ， 把 该 区域 中 F 的 数据 均匀 地 分布 到 N 个 处理机 中 . 分裂 算法 由 3 步 组成 ： ①   选择 需要 增加 划分 点 的 维 ， 简称 分裂 维 ； ②   在 分裂 维上 选择 具有 最大 数据量 的 区间 ， 简称 分裂 区间 ； ③   把 选定 的 分裂 区间 划分 为 N + 1 个 区间 ， 在 处理机 间 重新 分布 新 得到 的 超 长方体 . 把 分裂 区间 划分 为 N + 1 个 区间 ， 可以 极大 地 降低 处理机 间 的 信息 传输 量 . 
 　 　 定义 5 .   文件 F 第 i 维 的 区间 级 数据 正 偏斜 度 是 ， 其中 Mi 是 第 i 维 的 区间 个数 , Sik 是 第 i 维 的 划分 向量 中 的 Vi ［ k ］ . S = | Iik × ［ 0 ,   1 ) d - 1 ∩ F | . 
 　 　 分裂 维 的 选择 依据 每维 当前 的 划分 区间 数 和 每维 的 区间 级 数据 正 偏斜 度 . 若 i 满足 , 则 分裂 维 确定 为 第 i 维 . 在 具有 多个 相同 区间 级 数据 正 偏斜 度 的 情况 下 ， 选择 具有 最小 划分 区间 数 的 维 作为 分裂 维 . 设 第 i 维已 被选为 分裂 维 . 在 第 i 维上 选择 分裂 区间 的 策略 很 简单 ， 只 需 选择 具有 最 大S ik 值 的 区间 Iik 作为 分裂 区间 即可 . 
 　 　 给定 d 维 数据库 文件 F , 划分 向量 集合 { V1 , ... , Vd } 、 抽样 因子 s 和 分裂 因子 ξ > 0 ， 且 划分 向量 { V1 , ... , Vd } 存储 在 处理机 0 上 ， 分裂 算法 Split 定义 如下 . 
 　 　 ( 1 )   FOR   i = 1   TO   d   DO 　 　 / *   处理机 0 计算 各维 的 正 偏斜 度   * / 
 　 　 ( 2 )   　 ; / *   Mi 是 第 i 维 当前 区间 个数   * / 
 　 　 ( 3 )   IF     THEN   分裂 维为 i 　 ELSE   算法 结束 ; / * 处理机 0 确定 分裂 维 * / 
 　 　 ( 4 )   确定 满足 Vi ［ k ］ . 的 分裂 区间 k ; / *   处理机 0 确定 分裂 区间   * / 
 　 　 ( 5 )   N 个 处理机 并行 地 从 F ∩ Iik × ［ 0 , 1 ) d - 1 中 随机 抽取 s ( N + 1 ) 个 样本 ， 送 处理机 0 上 的 数组 sample ; 
 　 　 ( 6 )   处理机 0 按 第 i 维值 排序 sample ; 
 　 　 ( 7 )   处理机 0 在 Vi 的 Vi ［ k ］ 分量 后 插入 N 个 分量 空位 ;   / *   把 分裂 维 划分 向量 的 第 k 分量 分裂 为 N + 1 个 分量 ， 后 N 个 分量 为空   * / 
 　 　 ( 8 )   FOR   j = 1   TO   N   DO 
 　 　 ( 9 )   　 Vi ［ k + j ］ . p : = samplei ［ js ］ ;   / *   分裂 区间 被 划分 为 N + 1 个 区间 ， 分点 添入 划分 向量   * / 
 　 　 ( 10 )   FOR   j = 0   TO   N - 1   DO   / *   准备 在 处理机 之间 重新 分布 第 i 维 的 第 k 区间 的 数据   * / 
 　 　 ( 11 )   　 处理机 0 计算 Rj : = { ( x1 , ... , xi - 1 , k , xi + 1 , ... , xd ) | ( k + Xm )   mod   N = j , 0 ≤ xm ≤ Mm - 1 } ， 并 传输 到 处理机 j ； / *   Mm 是 第 m 维 当前 区间 个数   * / 
 　 　 ( 12 )   FOR   j = 0   TO   N - 1   DO   ( 并行 地 )   / *   在 处理机 之间 重新 分布 第 i 维 的 第 k 区间 的 数据   * / 
 　 　 ( 13 )   　 FOR   每个 ( x1 , ... , k , ... , xd ) ∈ Rj   DO 
 　 　 ( 14 )   　 　 FOR   k + 1 ≤ y ≤ k + N - 1   DO 
 　 　 ( 15 )   　 　 　 处理机 j 送 ( ［ Vi ［ y ］ . p , Vi ［ y + 1 ］ . p ) × ( ［ Vm ［ xm ］ . p , Vm ［ xm + 1 ］ . p ∩ F 到 处理机 ( y + Xj ) mod   N ; 
 　 　 ( 16 )   　 　 　 各 处理机 计算 Vi ［ y ］ . S 的 部分 值 ， 传送 到 处理机 0 ， 处理机 0 综合 计算 Vi ［ y ］ . S 的 最终 值 . 
 　 　 图 1 给出 一个二维 动态数据 调整 的 例子 . 图 1 ( a ) 给出 初始 分布模式 ， 其中 N = 3 , n1 = n2 = 1 . 算法 选择 第 1 维为 分裂 维 ， 第 1 维 的 第 1 个 区间 为 分裂 区间 . 图 1 ( b ) 给出 分裂 算法 的 执行 结果 . 图中 长方形 内 的 数字 表示 该方体 所在 的 处理机 号 . 
 
 图 1 
 　 　 我们 来 考虑 Split 算法 的 数据传输 量 . 由于 除了 与 分裂 区间 有关 的 超 长方体 以外 ， 其他 超 长方体 的 坐标 不受 Split 算法 的 影响 ， 所以 在 数据分布 调整 期间 不 需要 改变 这些 超 长方体 所在 的 处理机 . 这是 Split 算法 的 一个 重要 特点 . 此外 ， 分裂 区间 Iik 被 划分 为 N + 1 个 区间 以后 ， 所 得到 的 第 1 个子 区间 在 新 划分 中 仍 是 第 k 个 区间 ， 仍记 其为 Iik ， 最后 一个 子 区间 为 Iik + N . 在 数据分布 调整 中 ， 与 这个 Iik 和 Iik + N 有关 的 F 的 超 长方体 所在 的 处理机 也 不 需要 改变 . 于是 ， 我们 有 如下 的 引理 . 
 　 　 引理 5 .   设 Iik 是 分裂 区间 . Split 算法 仅 需 传输 Δ 个 F 的 元组 ， 其中 Δ = | Iik × ［ 0 , 1 ) d - 1 ∩ F | . 
 　 　 通过 详细分析 ( 限于 篇幅 ， 本文 省略 了 分析 过程 ) ， Split 算法 的 并行 磁盘 读写 时间 为 , 并行 CPU 计算 时间 为 ， 并行 通信 时间 为 . 
 2.2 　 并行 合并 算法 
 　 　 合并 算法 的 目的 是 把 F 的 一个 适当 维 的 数据 稀疏 的 N + 1 个 区间 合并 为 1 个 区间 . 合并 算法 由 3 步 组成 ： ①   选择 需要 进行 合并 的 维 ( 简称 合并 维 ) ； ②   在 合并 维上 选择 具有 最少 数据量 的 连续 N + 1 个 区间 ( 简称 合并 区间 ) ； ③   合并 N + 1 个 合并 区间 为 一个 区间 ， 在 处理机 间 重新 分布 由 合并 得到 的 超 长方体 . 一次 合并 N + 1 个 区间 可以 极大 地 减少 数据传输 量 . 
 　 　 定义 6 .   第 i 维 的 区间 级 数据 负 偏斜 度 是 ， 其中 Mi 是 第 i 维 的 区间 个数 ， Sik 是 F 在 第 i 维 的 第 k 个 区间 Iik 上 的 投影 集合 ( 允许 重复 元素 出现 ) 的 元素 数 ， 即 | Iik × ［ 0 , 1 ) d - 1 ∩ F | . 
 　 　 合并 维 的 选择 依据 每维 当前 的 划分 区间 数 和 每维 的 区间 级 数据 负 偏斜 度 . 如果 存在 一个 i 满足 ， 则 合并 维 确定 为 第 i 维 . 若 多个 区间 具有 相同 区间 级 数据 负 偏斜 度 ， 选择 具有 最 多 划分 区间 的 维 作为 合并 维 . 
 　 　 设 第 i 维 被选为 合并 维 . 在 第 i 维上 选择 N + 1 个 合并 区间 的 策略 是 ： F 在 N + 1 个 连续 合并 区间 上 投影 集合 ( 包括 重复 元素 ) 的 元素 数 总和 应该 最 接近 于 . 下面 我们 用 NI ( i , k ) 表示 第 i 维上 从 k 开始 的 N + 1 个 连续 区间 . NI ( i , k ) 的 大小 为 | NI ( i , k ) | = Vi ［ j ］ . S . － | NI ( i , k ) | 的 绝对值 称为 NI ( i , k ) 的 特征值 . 我们 选择 特征值 最小 的 NI ( i , k ) 为 合并 区间 ， 即 如果 NI ( i , j ) 满足 下列 条件 ， 则 NI ( i , j ) 确定 为 合并 区间 . 
 
 　 　 给定 d 维 数据库 文件 F 、 存储 在 处理机 0 上 的 划分 向量 集合 { V1 , ... , Vd } 和 合并 因子 ξ < 0 ， 合并 算法 Merge 定义 如下 . 
 　 　 ( 1 )   处理机 0 执行 第 ( 2 ) ～ ( 9 ) 步 . 
 　 　 ( 2 )   FOR   1 ≤ i ≤ d   DO 　 　 　 　 　 　 　 / *   计算 各维 的 负 偏斜 度   * / 
 　 　 ( 3 )   　 ; 
 　 　 ( 4 )   IF     THEN   合并 维为 i ;   ELSE 算法 结束 ;   / *   确定 合并 维   * / 
 　 　 ( 5 )   FOR   k = 0   TO   Mi - N - 1   DO   / *   计算 候选 合并 区间 的 特征值   * / 
 　 　 ( 6 )   　 ; 
 　 　 ( 7 )   在 维 i 上 确定 满足 的 合并 区间 NI ( i , j ) ；   / *   确定 合并 区间   * / 
 　 　 ( 8 )   FOR   k = 0   TO   N - 1   DO 　 　 　 / *   准备 在 处理机 之间 传送 合并 区间 的 数据   * / 
 　 　 ( 9 )   　 处理机 0 计算 Rk : = { ( x1 , ... , xi , ... , xd ) | ( xm   mod   N ) = k , j + 1 ≤ xi ≤ j + N - 1 , 对于 m ≠ i , 0 ≤ xm ≤ Mm - 1 } ， 并 传送 到 处理机 k ; 
 　 　 　 　 　 　 　 　 　 　 　 　 / *   j 为 ( 9 ) 中 选定 的 合并 区间 集合 NI ( i , j ) 的 第 1 个 区间 的 编号   * / 
 　 　 ( 10 )   FOR   k = 0   TO   N - 1   DO   ( 并行 地 )   / *   在 处理机 之间 传送 合并 区间 的 数据   * / 
 　 　 ( 11 )   　 FOR   每个 ( x1 , ... , xd ) ∈ Rk   DO 
 　 　 ( 12 )   　 　 处理机 k 送超 长方体 ( x1 , ... , xd ) 到 处理机 ( j + xm )   mod   N ;   / *   j 与 ( 9 ) 中 的 j 相同   * / 
 　 　 ( 13 )   处理机 0 修改 划分 向量 的 Vi ［ j ］ . S 分量 ： Vi ［ j ］ . ; 
 　 　 ( 14 )   FOR   1 ≤ k ≤ N   DO   处理机 0 从 Vi 删除 Vi ［ j + k ］ . 
 　 　 以下 设 , NI ( i , j ) 是 合并 区间 . 类似 于 引理 5 ， 我们 有 如下 引理 6 . 
 　 　 引理 6 .   Merge 算法 要求 在 处理机 间 传输 的 F 元组 数是 Δ . 
 　 　 通过 详细分析 ( 限于 篇幅 ， 本文 省略 了 分析 过程 ) ， Merge 算法 的 并行 磁盘 读写 时间 为 , 并行 CPU 计算 时间 为 ， 并行 通信 时间 为 . 
 2.3 　 数据分布 调整 的 调度 算法 
 　 　 本文 给出 两种 数据分布 调整 的 调度 算法 , 一种 是 动态 调度 算法 , 另 一种 是 周期 调度 算法 . 这 两个 算法 都 是 通过 比较 数据偏斜 引起 的 数据 操作 的 额外 开销 和 数据分布 调整 算法 的 开销 来 决定 是否 进行 数据分布 的 调整 ， 尽量减少 数据分布 调整 算法 的 执行 次数 ， 最小化 数据分布 调整 的 代价 . 
 　 　 设 op 是 一个 数据 操作 ， F 是 一个 d 维 数据库 文件 ， 我们 用 RTU ( op ) 表示 当 F 均匀 地 分布 在 N 个 处理机 时 ， 在 F 上 执行 op 的 并行执行 时间 ， RTS ( op ) 是 当 F 偏斜 地 分布 在 N 个 处理机 时 ， 在 F 上 执行 op 的 并行执行 时间 . 
 　 　 定义 7 .   F 的 数据偏斜 引起 的 op 的 额外 开销 是 ECOST ( op ) = RTS ( op ) － RTU ( op ) . 
 　 　 定义 8 .   设 F 是 一个 给定 的 数据库 文件 , op1 , op2 , ... , opm 是 F 上 的 所有 数据 操作 ， fi 是 opi 被 执行 的 频率 . F 的 偏斜 分布 引起 的 总额 外 开销 是 . 
 2.3 . 1   数据分布 调整 的 动态 调度 算法 
 　 　 动态 调度 算法 根据 每个 数据库 文件 的 分布 状态 ， 综合 考虑 数据偏斜 引起 的 额外 开销 和 调整 数据分布 的 开销 ， 确定 是否 需要 数据分布 调整 ， 如果 需要 , 则 调用 Split 或 Merge 以及 初始 数据分布 机构 进行 数据分布 调整 . 由于 Split 和 Merge 算法 要求 较 小 的 数据通信 量 ， 这 两个 算法 的 调度 优先 于 初始 数据分布 机构 . 动态 调度 算法 嵌入 在 数据库 的 插入 和 删除 操作 的 实现 算法 之中 . 下面 , 我们 简要地 给出 这 两个 算法 的 定义 . 在 下面 的 定义 中 ， Iij 表示 第 i 维上 的 第 j 个 划分 区间 ， δ 是 用户 根据 实际 情况 给定 的 正数 ， 称为 数据分布 调整 因子 . 
 　 　 算法 .   插入 算法 
 　 　 输入 :   d 维 数据库 文件 F ; 存储 在 处理机 0 上 的 F 的 划分 向量 集合 { V1 , ... , Vd } ； 插入 元组 T ( t1 , ... , td ) . 
 　 　 ( 1 )   确定 T ( t1 , ... , td ) 应该 插入 的 超 长方体 的 坐标 ( x1 , ... , xd ) ； 
 　 　 ( 2 )   把 元组 T ( t1 , ... , td ) 插入 超 长方体 ( x1 , ... , xd ) ； 
 　 　 ( 3 )   FOR   1 ≤ i ≤ d   DO   ( 并行 地 ) 
 　 　 ( 4 )   　 　 Vi ［ xi ］ . S : = Vi ［ xi ］ . S + 1 ; 
 　 　 ( 5 )   计算 TECOSTF ； OTECOSTF : = TECOSTF + 1 ； 
 　 　 ( 6 )   WHILE   ( TECOSTF > δ ) ∧ ( RTSplit < TECOSTF ) ∧ ( OTECOSTF > TECOSTF )   DO 
 　 　 　 　 执行 Split 算法 ;   OTECOSTF : = TECOSTF ; 重新 计算 TECOSTF ； / *   RTSplit 是 Split 算法 的 执行 
 　 　 　 　 时间   * / 
 　 　 ( 7 )   IF   ( TECOSTF > δ ) ∧ ( RTPD < TECOSTF )   THEN   执行 初始 数据分布 机构 .   / *   RTPD 是 Partition 
 　 　 　 　 和 DA 算法 的 执行 时间   * / 
 　 　 算法 .   删除 算法 
 　 　 输入 ： d 维 数据库 文件 F ； F 的 划分 向量 集合 { V1 , ... , Vd } , 存储 在 处理机 0 ； 删除 元组 T . 
 　 　 ( 1 )   确定 T 所在 超 长方体 的 坐标 ( x1 , ... , xd ) ; 
 　 　 ( 2 )   处理机 CMD ( x1 , ... , xd ) 删除 元组 T ; 
 　 　 ( 3 )   FOR   1 ≤ i ≤ d   DO   / *   处理机 0 修改 划分 向量   * / 
 　 　 ( 4 )   　 　 Vi ［ xi ］ . S : = Vi ［ xi ］ . S － 1 ; 
 　 　 ( 5 )   计算 TECOSTF ； OTECOSTF : = TECOSTF + 1 ; 
 　 　 ( 6 )   WHILE   ( TECOSTF > δ ) ∧ ( RTmerge < TECOSTF ) ∧ ( OTECOSTF > TECOSTF )   DO 
 　 　 　 　 执行 Merge 算法 ;   OTECOSTF : = TECOSTF ;   重新 计算 TECOSTF ；   / *   RTmerge 是 Merge 算法 的 执 
 　 　 　 　 行 时间   * / 
 　 　 ( 7 )   IF   ( TECOSTF > δ ) ∧ ( RTPD < TECOSTF )   THEN   执行 初始 数据分布 机构 .   / *   RTPD 是 Partition 
 　 　 　 　 和 DA 算法 的 执行 时间   * / 
 2.3 . 2 　 数据分布 调整 的 周期 调度 算法 
 　 　 周期 调度 算法 需要 预先确定 一个 分布 调整 最小 周期 L . L 要 根据 数据 更新 操作 的 频率 来 确定 . 每隔 L 时间 可能 需要 进行 数据分布 调整 ， 但 不 一定 必须 进行 . 为此 ， 我们 只 需 每隔 L 时间 运行 一次 周期 调度 算法 ， 确定 是否 真的 需要 调整 F 的 数据分布 ， 并 确定 调用 哪 一个 算法 进行 数据分布 的 调整 . 周期 调度 算法 定义 如下 . 
 　 　 输入 ：   d 维 数据库 文件 F ； 存储 在 处理机 0 上 的 F 的 划分 向量 集合 { V1 , ... , Vd } . 
 　 　 ( 1 )   计算 TECOSTF ； 
 　 　 ( 2 )   IF   TECOSTF < δ   THEN   结束 ; 
 　 　 ( 3 )   WHILE   ( 存在 可 合并 区间 ) ∧ ( RTMerge < TECOSTF )   DO 
 　 　 　 　 　 　 执行 Merge 算法 ； 计算 TECOSTF ； 
 　 　 ( 4 )   WHILE   ( 存在 可 分裂 区间 ) ∧ ( RTSplit < TECOSTF )   DO 
 　 　 　 　 　 　 执行 Split 算法 ; 计算 TECOSTF ； 
 　 　 ( 5 )   IF   ( TECOSTF > δ ) ∧ ( RTPD < TECOSTF )   THEN   执行 初始 数据分布 机构 . 
 3 　 实验 结果 
 　 　 我们 在 一个 由 以太网 连接 的 8 台 586 微型 计算机 机群 并行 环境 下 实现 了 DCMD 方法 ， 并 设计 实现 了 多种 基于 DCMD 方法 的 并行 数据 操作 算法 . 由于 Join 算法 是 最 复杂 、 最 常用 、 研究 最多 的 关系 代数 操作 算法 ， 本文 仅 给出 基于 DCMD 方法 的 3 种 并行 连接 算法 与 受到 广为 赞誉 的 并行 Hybrid - Hash , Grace - Hash 和 Sort - Merge 连接 算法 的 性能 比较 . 基于 DCMD 方法 的 3 种 并行 连接 算法 的 细节 参见 文献 ［ 7 ］ . 我们 随机 地 产生 了 一对 具有 5 万个 元组 （ 每个 元组 32 个 字节 ） 的 关系 ， 然后 在 这 对 关系 上 执行 上述 6 种 连接 算法 . 图 2 给出 了 这些 算法 的 执行 时间 . 图中 Dh ， Dsm 和 Dnl 分别 表示 基于 DCMD 方法 的 3 种 并行 连接 算法 ， Hy ， Gr ， Sm 分别 表示 并行 Hybrid - Hash ， Grace - Hash 和 Sort - Merge 连接 算法 . 从图 2 中 可以 看到 ， 基于 DCMD 方法 的 并行 连接 算法 的 效率 高于 所有 其他 算法 . 实验 表明 ， DCMD 方法 是 一种 十分 有效 的 多维 动态数据 分布 方法 . 
 
 图 2 
 * 　 本文 研究 得到 国家 863 高科技 项目 基金 、 国家杰出青年基金 和 黑龙江省 杰出青年 基金 资助 . 
 本文 通讯联系 人 ： 李建中 ， 哈尔滨 150080 , 哈尔滨工业大学 计算机科学 系 
 作者简介 ： 李建中 , 1950 年生 , 教授 , 博士生 导师 ， 主要 研究 领域 为 数据库系统 ， 并行计算 . 
 作者 单位 ： 哈尔滨工业大学 计算机科学 系 　 哈尔滨 　 150080 ， E - mail :   jzl @ hlju . edu . cn 
 参考文献 ： 
 ［ 1 ］ 李建中 . 并行 数据库 的 查询 并行 化 技术 与 物理 设计 方法 . 软件 学报 , 1994 , 5 ( 10 ) : 1 ～ 10 
 ( Li   Jian - zhong .   Parallelization   techniques   for   query   processing   and   data   declustering   methods .   Journal   of   Software ,   1994 , 5 ( 10 ) : 1 ～ 10 ) 
 ［ 2 ］ DeWitt   D   J   et   al .   GAMMA :   a   high   performance   dataflow   database   machine .   In :   Wiederhold   G   ed .   Proceedings   of   the   14th   International   Conference   on   Very   Large   Databases .   San   Mateo ,   CA :   Morgan   Kaufmann   Publishers ,   Inc . ,   1986 .   228 ～ 240 
 ［ 3 ］ Ghandeharizadeh   S ,   DeWitt   D   J .   Hybrid - range   partitioning :   a   new   declustering   strategy   for   multiprocessor   database   machines .   In :   McLeod   D ,   Sacks - Davis   R ,   Hans   S   eds .   Proceedings   of   the   16th   International   Conference   on   Very   Large   Databases .   San   Mateo ,   CA :   Morgan   Kaufmann   Publishers ,   Inc . ,   1990 .   480 ～ 492 
 ［ 4 ］ Hua   K   A ,   Lee   C .   An   adaptive   data   placement   scheme   for   parallel   database   computer   systems .   In :   McLeod   D ,   Sacks - Davis   R ,   Hans   S   eds .   Proceedings   of   the   16th   International   Conference   on   Very   Large   Databases .   San   Mateo ,   CA :   Morgan   Kaufmann   Publishers ,   Inc . ,   1990 .   493 ～ 506 
 ［ 5 ］ Ghandeharizadeh   S   et   al .   A   performance   analysis   of   alternative   multi - attribute   declustering .   In :   Stonebraker   M   ed .   Proceedings   of   1992   ACM   SIGMOD   International   Conference   on   Management   of   Data .   Baltimore ,   MD :   ACM   Press ,   1992 .   29 ～ 38 
 ［ 6 ］ Li   J ,   Srivastava   J ,   Rotem   D .   CMD :   a   multidimensional   declustering   method   for   parallel   database   systems .   In :   Yuan   Li - Yan   ed .   Proceedings   of   the   18th   International   Conference   on   Very   Large   Databases .   San   Mateo ,   CA :   Morgan   Kaufmann   Publishers ,   Inc . ,   1992 .   3 ～ 14 
 ［ 7 ］ 李建中 , 都 薇 . 并行 数据库 上 的 并行 CMD - Join 算法 . 软件 学报 , 1998 , 9 ( 4 ) : 256 ～ 261 
 ( Li   Jian - zhong ,   Du   Wei .   Parallel   CMD - Join   algorithms   on   parallel   databases .   Journal   of   Software ,   1998 , 9 ( 4 ) : 256 ～ 261 ) 
 收稿 日期 ： 1997 - 12 - 12 ， 修改 日期 ： 1999 - 05 - 31 
