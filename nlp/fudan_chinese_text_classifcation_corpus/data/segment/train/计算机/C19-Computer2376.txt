计算机 研究 与 发展 
 JOURNAL   OF   COMPUTER   RESEARCH   AND   DEVELOPMENT 
 1999 年   第 36 卷   第 9 期   Vol.36   No.9   1999 
 
 
 
 可重 构造 的 网孔 机器 上 的 k - 选择 
 许胤龙 　 陈国良 　 万颖瑜 
 摘 　 要 　 对于 一个 m × n ( m ≤ k ) 的 列 有序 矩阵 ， 文中 在 × 可重 构造 的 网孔 机器 上 提出 了 一个 并行 k - 选择 算法 ， 其 时间 复杂度 为 O ( log2m + logmlog2n + log3n ) ， 而 对于 一般 的 l 元集 ， 文中 在 相同 的 模型 下 提出 了 一个 时间 复杂度 为 O ( log2 ( ) + log ( ) log2n + log3n + log ( ) ) 的 并行 k - 选择 算法 . 当时 l ≥ O ( nlog3n / log   logn ， 该 时间 复杂度 为 O ( log ( ) ) . 特别 地 ， 当 l = O ( n1 + ε ) ( ε ＞ 0 为 常数 ） ， 则 时间 复杂度 为 O ( logn ) . 此时 达到 的 加速 比为 n / logn . 
 关键词 　 并行算法 ，   k - 选择 ， 可重 构造 
 中图法 分类号 　 TP301.6 ;   TP338.6 
 k - SELECTION   ON   RECONFIGURABLE   MESH 
 XU   Yin - long ,   CHEN   Guo - Liang ,   WAN   Ying - Yu , and   XIONG   Shan 
 ( National   High   Performance   Computation   Center , Department   of   Computer   Science   and   Technology ,   University   of   Science   &   Technology   of   China , Hefei   230027 ) 
 Abstract 　 A   parallel   algorithm   of   ×   reconfigurable   mesh   is   proposed   in   this   paper , which   selects   the   k - th   element   in   an   m × n ( m ≤ k )   matrix   with   sorted   columns . It   runs   in   time   O ( log2m + logmlog2n + log3n ) ， Also   proposed   is   a   parallel   algorithm   that   selects   the   k - th   element   in   a   general   set   with   l   elements   on   the   same   model . Its   time   complexity   is   O ( log2 ( ) + log ( ) log2n + log3n + log ( ) ) . When   l ≥ O ( nlog3n / log 　 logn ) ， it   becomes   O ( log ( ) ) . Especially   when   l = O ( n1 + ε ) ( ε ＞ 0   is   a   constant ) , it   is   O ( logn )   and   the   acceleration   ratio   of   the   algorithm   in   this   situation   is   n / logn . 
 Key   words 　 parallel   algorithm , k - selection , reconfiguration 
 1 　 引言 
 　 　 所谓 k - 选择 问题 就 是从 一个 全序集 中 选出 其 第 k 个 最小 （ 或 最大 ） 元素 （ 以下 我们 假设 为 第 k 个 最小 元 ） ， 其 广泛 的 应用 价值 吸引 了 许多 专家学者 的 注意 . 无论 在 串行 ［ 1 ～ 6 ］ 还是 在 各种 并行 环境 下 ［ 7 ～ 12 ］ 都 有 许多 的 研究成果 . 
 　 　 本文 首先 考虑 待选 的 输入 集 可以 表示 成列 有序 矩阵 ［ 6 ］ 的 k - 选择 问题 . 这类 问题 在 统计学 、 运筹学 、 网络 设计 等 方面 ［ 4 ～ 6 ］ 有着 实际 的 应用 . 对于 一个 m × n ( m ≤ n ) 的 列 有序 矩阵 . Frederickson 和 Johnson 给出 了 一个 时间 复杂度 为 O ( mlog ( 2n / m ) ) 的 串行 算法 . 该 算法 近乎 于 最优 的 且 至今 为止 可能 是 最好 的 串行 算法 . 而 对于 一个 m × n 的 有序 矩阵 （ 行列 均 有序 ） ， Shen 等 ［ 13 ］ 则 在 EREW   PRAM 上 提出 了 一个 时间 复杂度 为 O ( logmlog  m ( log   logm + log ( n / m ) ) ) , 总 操作数 为 O ( mlog ( ) ) 的 并行算法 . 由于 选择 问题 固有 的 通信 复杂度 ， 就 我们 所知 ， 还 没有 文献 在 分布式 存储 的 互联网络 上 讨论 过列 有序 矩阵 的 选择 问题 . 
 　 　 可重 构造 的 网孔 机器   ( reconfigurable   mesh ,   RMESH ) ［ 14 ］ 是 一类 由 总线 动态 连接 的 网孔 机器 ， 由于 其 动态 的 拓扑 结构 以及 总线 能 在 单位 时间 内 实现 一到 多 的 通信 ， 使得 RMESH 在 某些 方面 具有 比 PRAM 机器 还要 好 的 性能 ， 加上 近年来 硬件 技术 的 飞速发展 ， 使得 这种 体系结构 具有 逐渐 走向市场 的 趋势 ， 因而 吸引 了 许多 学者 的 兴趣 . 对于 一个 n 元集 ， Hao ［ 12 ］ 等 在 × 的 RMESH 上 给出 了 时间 复杂度 为 O ( logn ) ， 至今 最优 的 并行算法 . 
 　 　 对于 一个 m × n 的 列 有序 矩阵 （ 在 本文 中 假定 m ≤ k ， 若 m ＞ k 则 在 每列 中取 前 k 行 即可 ） ， 本文 在 大小 为 × 的 RMESH 上 提出 了 一个 时间 复杂度 为 O ( log2m + logmlog \ + 2n + log3n ) 的 并行 k - 选择 算法 ， 当 m ≤ O ( n ε ) （ ε 为 常数 ） ， 该 复杂度 为 O ( log3n ) ， 而 当 m ≥ O ( nlogn ) 时 ， 它 就是 O ( log2m ) . 利用 求列 有序 矩阵 的 k - 选择 算法 , 在 n × n 的 RMESH 上 我们 提出 了 一个 求 一般 的 l 元集 k - 选择 问题 的 并行算法 ， 其 时间 复杂度 为 O ( log2 ( ) + log ( ) log2n + log3n + log ( ) ) . 对于 k ＜ , 我们 算法 的 时间 复杂度 为 O ( log2 ( ) + log ( ) log2n + log3n ++ klogk ) . 当 l ≥ O ( nlog3n / log   logn ) 时 ， 该 时间 复杂度 变为 O ( log ( ) ) . 特别 地 ， 当 l = O ( n1 + ε ) （ ε ＞ 0 为 常数 ） ， 则 时间 复杂度 为 O ( logn ) ， 此时 相对 于 Hao ［ 13 ］ 等 在 × 的 RMESH 上用 O ( log   n ) 时间 求 n 个 元素 的 k - 选择 相比 ， 达到 了 最好 的 并行 效果 . 同 线性 时间 的 串行 k - 选择 算法 相比 ， 达到 的 加速 比为 n / logn . 而 在 实际 应用 中 l = O ( n1 + ε ) 是 一种 很 常见 的 情况 ， 因而 本文 提出 的 算法 具有 很 好 的 实际意义 . 
 2 　 可重 构造 的 网孔 机器 ( RMESH ) 
 　 　 一个 × 的 可重 构造 的 网孔 机器 ［ 14 ］ 是 将 n 个 处理器 排成 × 的 方阵 . 全部 n 个 处理器 用 一条 形状 为 ( - 1 ) × ( - 1 ) 方格 的 总线 连在一起 ， 但 在 每个 处理器 所连 的 4 个 端口 （ 边界 处 3 个 ， 四角 2 个 ） 都 带有 开关 ， 如图 1 所示 . 这些 开关 可以 在 算法 的 执行 过程 中 动态 地置 成开 或关 ， 将 整个 总线 分成 一些 相互 独立 的 子 总线 . 例如 ， 若 每个 处理器 都 断开 它 在 行 （ 列 ） 的 链 ， 则 可 得到 条 独立 的 列 （ 行 ） 总线 ， 这 条列 （ 行 ） 总线 则 可以 相互 独立 地 同时 进行 播送 ， 如图 2 、 图 3 所示 . 
 
 图 1 　 4 × 4   RMESH 
 
 图 2 　 行 总线 
 
 图 3 　 列 总线 
 　 　 在 RMESH 上 ， 连接 在 同一 条子 总线 上 所有 的 处理器 可以 同时 读 该子 总线 上 的 数据 ， 但 同一时间 单位 只 允许 一个 处理器 向 一条 子 总线 上 写 数据 . 所有 的 处理器 同步操作 . 我们 假定 每个 处理器 可 在 单位 时间 内 置换 开关 ， 向子 总线 读写 一个 单位 长 数据 ， 一个 算术 或 逻辑 操作 等 ， 放在 一条 子 总线 上 的 数据 可以 在 单位 时间 内 ( O ( 1 ) 延迟 模型 ） 到达 连接 在 该子 总线 上 所有 的 处理器 . 
 　 　 利用 RMESH 这种 动态变化 的 拓扑 结构 ， 可以 在 一个 算法 的 不同 阶段 ， 将 整条 总线 划分 成 一些 不同 结构 的 子 总线 ， 从而 达到 加速 算法 的 效果 ， 对于 某些 问题 ， 可重 构造 的 网孔 机器 具有 比 PRAM 机器 还要 好 的 性质 . 例如 ， 在 × 的 RMESH 上 ［ 12 ， 13 ， 15 ］ ： 
 　 　 ( 1 )   若个 元素 分布 在 一行 ， 一列 或 对角线 上 的 处理器 上且 每个 处理器 含有 一个 元素 ， 则 可以 在 常数 时间 内 对 其 进行 排序 . 当然 也 就 可以 进行 k - 选择 或 ( m , n ) - 选择 ； 
 　 　 ( 2 )   若个 比特 数据分布 在 一行 ， 一列 或 对角线 上 的 处理器 上且 每个 处理器 含有 一个 比特 ， 则 可 在 常数 时间 内求 其 异或 和 前缀 和 ； 
 　 　 ( 3 )   若 每 一个 处理器 含有 一个 元素 ， 则 可以 在 O ( log   logn ) 时间 内求 出 这 n 个 元素 的 最大 、 最小值 ; 
 　 　 ( 4 )   每 一个 处理器 含有 一个 比特 元素 ， 则 可以 在 O ( log   logn ) 时间 内求 这 n 个 元素 的 异或 和 前缀 和 ， 并 可 在 常数 时间 内求 其 逻辑 或 . 
 　 　 但 由于 排序 问题 固有 的 通信 复杂度 ， 使得 在 × 的 RMESH 上 排序 n 个 元素 却 仍 要 O ( ) 的 时间 复杂度 . 
 3 　 求 加权 中 值 
 　 　 本 节 我们 给出 加权 中值 的 定义 及 在 RMESH 上求 加权 中值 的 算法 ， 下 一节 将 利用 加权 中 值 求解 k - 选择 问题 . 
 　 　 设 A = ( a0 , a1 , … ， an - 1 ) 为 从 一 全序集 中 取出 的 n 元组 （ n 个 元素 之间 无序 ） ， 将 a0 , a1 , … ， an - 1 按 升序 排列 的 结果 为 ai0 , ai1 , … ， ain - 1 . W : A → R \ ++ 为 一 权函数 ， 则 存在 m ( 0 ≤ m ≤ n - 1 ) 满足 ： 
 　 　 ( 1 ) 
 　 　 ( 2 ) 
 我们 称 aim 为 A 相对 于 W 的 加权 中 值 ［ 4 ］ . 
 　 　 设有 n 元组 ( a0 , a1 , … ， an - 1 ) 均匀分布 在 一个 × 的 RMESH 上 ， 每个 处理器 含有 一个 元素 及 该 元素 的 权 . 设 所有 的 处理器 按行 主序 编号 ， 如图 4 所示 . 处理器 Pi 含有 元素 ai 及权 W ( ai ) , 在 RMESH 上 我们 实现 的 求 加权 中 值 算法 的 基本 步骤 如下 . 
 0123 
 4567 
 891011 
 12131415 
 
 图 4 　 行主序 
 　 　 算法 1 . Weightmedia 
 　 　 步骤 1 .   求 ai0 , ai1 , … ， ain - 1 的 中值 （ 第个 最小 元 ai 「 ( n - 1 ) / 2 」 ） 
 　 　 步骤 2 .   将 ai 「 ( n - 1 ) / 2 」 播送到 每个 处理器 Pk ( 0 ≤ k ≤ n - 1 , k ≠ i 「 ( n - 1 ) / 2 」 ， 并 与 P \ - k 中所含 的 元素 ak 进行 比较 . 若 ai 「 ( n - 1 ) / 2 . 」 > ak ， 则 在 处理器 Pk 标 0 , ai 「 ( n - 1 ) / 2 」 < ak 标 1 ,   中 值 处理器 标 2 . 
 　 　 步骤 3 .   计算 所有 标 0 的 处理器 上 的 元素 （ 小于 ai 「 ( n - 1 ) / 2 」 ） 权 之 和 ， 记为 sum 　 L ， 放在 处理器 P0 上 . 
 　 　 步骤 4 .   计算 所有 标 1 的 处理器 上 的 元素 （ 大于 ai 「 ( n - 1 ) / 2 」 ） 权 之 和 ， 记为 sum 　 G ,   放在 处理器 P0 上 . 
 　 　 步骤 5 .   处理器 P0 作 比较 ： 
 ( 1 ) 　 　 sum 　 L + W ( ai 「 ( n - 1 ) / 2 」 ) ≥ sum 　 G , 
 ( 2 ) 　 　 sum 　 L < W ( ai 「 ( n - 1 ) / 2 」 ) + sum 　 G 
 　 　 ①   若 ( I ) , ( II ) 均 成立 ， ai 「 ( n - 1 ) / 2 」 是 加权 中值 . 停 . 
 　 　 ②   若   ( I ) 不 成立 （ 小于 等于 ai 「 ( n - 1 ) / 2 」 的 元素 的 权 和 太小 ） ， 则 在 大于 ai 「 ( n - 1 ) / 2 」 （ 所有 标 1 的 处理器 中所含 的 元素 ） 中 找到 其中 值 ， 转向 步骤 2 . 
 　 　 ③   若 ( II ) 不 成立 （ 大于 等于 ai 「 ( n - 1 ) / 2 」 的 元素 的 权 和 太小 ） ， 则 在 小于 ai 「 ( n - 1 ) / 2 」 （ 所有 标 0 的 处理器 中所含 的 元素 ） 中 找到 其中 值 ， 转向 步骤 2 . 
 　 　 算法 的 正确性 是 显见 的 . 为了 实现 算法 Weightmedia ， 我们 采用 了 Hao ［ 12 ］ 等 人 提出 的 在 × RMESH 上 实现 的 时间 复杂度 为 O ( logn ) 的 选择 算法 来 选取 中值 . 至于 算法 的 第 2 步 在 RMESH 上仅 需 O ( 1 ) 时间 . 
 　 　 要 计算 RMESH 上 所有 标 0 ( 或 1 ) 的 处理器 所 含 元素 的 权 和 ， 我们 先 假定 标 1 （ 或 0 ） 的 处理器 上 元素 的 权为 0 ， 然后 利用 行 总线 用 log 重 循环 来 计算 每行 的 权 之 和 . 第一次 循环 ， 将 每 条行 总线 分成 / 2 条子 总线 ， 从 每行 的 第 1 个 处理器 开始 ， 每 两个 处理器 作为 一条 子 总线 ， 每 条子 总线 上 的 第 2 个 处理器 向 第 1 个 处理器 播送 该 处理器 所 含 元素 的 权 ， 在 第 1 个 处理器 上求 两个 处理器 所 含 元素 的 权 和 并 作为 相应 子 总线 的 权 . 在 第 i 次 循环 将 第 i - 1 次 循环 中 的 行子 总线 每 两条 子 总线 连成 一条 新 的 子 总线 ， 类似 于 第 1 次 循环 将 新 的 子 总线 的 权和求 出 . 这样 在 log 步 之后 每行 的 第 1 个 处理器 上 含有 该行 的 权 和 . 最后 ， 在 整个 RMESH 上 的 第 1 列用 log 步 循环 求 出 整个 RMESH 上 的 权 和 ， 放在 处理器 P0 上 . 
 　 　 整个 算法 中 ， 每 执行 一次 第 2 ～ 5 步 ， 下 一次 循环 我们 仅 需 考虑 前 一次 循环 中 的 一半 元素 ， 所以 第 2 ～ 5 步 至多 循环 log 次 . 而 每次 第 2 ～ 5 步 循环 共需 时间 O ( log ) . 
 　 　 综上所述 ， 我们 得到 如下 的 定理 . 
 　 　 定理 1 .   设有 n 元组 A = ( a0 , a1 , … , an - 1 ) 及 权函数 W : A → R + ， A 均匀分布 在 × 的 行主序 RMESH 上 ， 处理器 Pi 含有 元素 ai 及权 W ( ai ) ， 则 可 在 O ( log2n ) 时间 内求 出 A 相对 于 W 的 加权 中值 . 
 4 　 RMESH 上 的 选择 算法 
 4.1 　 求列 有序 矩阵 的 k - 选择 
 　 　 Johnson   和   Mizoguchi 在 文献 ［ 4 ］ 中 提出 了 用 加权 中值求 集合 X + Y 上 的 k - 选择 . 这里 X 与 Y 是 两个 集合 ， X + Y = { x + y | x ∈ X , y ∈ Y } . 用 相同 的 思想 我们 在 RMESH 上 实现 了 求列 有序 矩阵 的 k - 选择 的 并行算法 . 在 本文 中 我们 不妨 假设 矩阵 中 每列 的 元素 按 升序 排列 . 
 　 　 算法 的 基本 思想 是 ： 首先 找到 的 i 列 的 中值 ai ， ai 的 权 W （ ai ） 定义 为 第 i 列 的 元素 个数 ， 然后 找到 ( a0 , a1 , … , an - 1 ) 的 加权 中值 ait ， 则 整个 矩阵 中 大于 ait 和 小于 等于 ait 的 元素 个数 都 至少 是 全部 元素 个数 的 1 / 4 ， 若 k ＞ 小于 等于 ait 的 元素 数 ， 则 丢掉 小于 等于 ait 的 所有 元素 ， 若 k < 小于 等于 ait 的 元素 数 ， 则 丢掉 大于 等于 ait 的 所有 元素 ， 由于 每次 至少 丢掉 当前 元素 数 的 1 / 4 . 所以 循环 O ( log ( mn ) ) 次 之后 一定 能 找到 m × n 列 有序 矩阵 中 的 第 k 个 元素 . 
 　 　 设有 一 m × n 的 列 有序 矩阵 M = ( mij ) m × n ， 其 第 i 列 元素 存储 于 × 行主序 RMESH 的 第 i 个 处理器 上 . 在 RMESH 上求 M 的 k - 选择 算法 如下 . 
 　 　 算法 2 .   算法   Select 　 Matrix 
 步骤 1 .   对 i = 0 , 1 , … , n - 1 , 在 第 i 个 处理器 上令 Lb ( i ) = 0 , Rb ( i ) = n - 1 ; 
 步骤 2 .   对 i = 0 , 1 , … , n - 1 , 在 第 i 个 处理器 上求 出 第 i 列 当前 所剩 元素 的 中值 miji ， 从而 构成 n 元组 A = ( m1j1 , m2j2 , … , mnjn , 其中 ji = ( Lb ( i ) + Rb ( i ) ) , 并 计算 权 W ( miji ) = Rb ( i ) - Lb ( i ) + 1 （ 第 i 列 当前 元素 总数 ） . 
 步骤 3 .   求出 A 的 加权 中值 mtjt ( 0 ≤ t ≤ n - 1 ) , 并 播送到 所有 的 处理器 . 
 步骤 4 .   因 每列 有序 ， 可 在 第 i 个 处理器 上用 二分法 查找 找到 mtjt 在 第 i 列 的 位置 . 即 找到 下标 Si 使 mtSi ≤ mtjt ＜ mtSt + 1 . 并令 P ( i ) = Si + 1 ,   Q ( i ) = Si ， ( i = 0 , 1 , … , n - 1 ) . （ 说明 ：   若 mtjt 小于 第 i 列 所有 的 元素 ， 则 Si + 1 = 0 ， miji 不 存在 ; 若 mtjt 大于 等于 第 i 列 所有 元素 ， 则 Si = n - 1 ， mi ( s \ - i + 1 ) 不 存在 . ） 
 步骤 5 .   ①   若 k ＜ P ( i ) , 则 令 Rb ( i ) = Q ( i ) , i = 0 , 1 , 2 , … , n - 1 , 转向 步骤 2 ； 
 　 　 　 ②   若 k ＞ P ( i ) , 则 令 Lb ( i ) = P ( i ) , i = 0 , 1 , 2 , … , n - 1 ) , 转向 步骤 2 ； 
 　 　 　 ③   若 ① ， ② 不 成立 ， 则 mtjt 就是 第 k 个 元素 ， 算法 终止 . 
 　 　 定理 2 .   设有 一 m × n 列 有序 矩阵 M ， 其 第 i 列 元素 全部 放在 n × n 行主序 RMESH 的 第 i 个 处理器 中 ， 则 算法 Select _ Matrix 在 O ( log2m + logmlog2n + log3n ) 时间 内求 出 M 的 第 k 个 最小 元素 . 
 　 　 证明 . 算法 的 正确性 见 文献 ［ 4 ］ . 下面 我们 来 分析 它 的 时间 复杂度 . 
 　 　 步骤 1 和 步骤 2 需 O ( 1 ) 时间 ， 步骤 3 用 算法 1 ， 需 O ( log2n ) 时间 . 步骤 4 在 每台 处理器 上 并行 地用 二分法 查找 ， 对 m 个 元素 的 二分 查找 需 O ( logm ) 时间 . 步骤 5 计算 P ( i ) 与 ( Q ( i ) - 1 ) 用 第 4 节求权 和 的 算法 ， 需 O ( logn ) 时间 ， 因此 ， 每 执行 一次 步骤 2 ～ 步骤 5 的 循环 共需 O ( logm + log2n ) 时间 ， 而 步骤 2 ～ 步骤 5 则 至多 执行 O ( log ( mn ) ) = O ( logm + logn ) 次 . 所以 整个 算法 的 时间 复杂度 为 
 O ( ( logm + logn ) ( logm + log2n ) ) = O ( log2m + logmlog2n + log3n ) 
 当 m ≤ O ( nk ) 时 （ k 为 常数 ） ， 上 式 变成 O ( log3n ) . 
 当 m ≥ O ( nlogn 时 ， logm ≥ O ( log2n ) ， 上 式 变成 O ( log2m ) . 
 证毕 . 
 4.2 　 求 一般 集合 的 k - 选择 
 　 　 设有 l 个 元素 均匀分布 × 的 RMESH 上 ， 每个 处理器 中 含有 l / n 个 元素 . 我们 要求 这 l 个 元素 中 的 第 k 个 最小 元 . 为此 先 在 每个 处理器 上将 其所含 的 l / n 个 元素 进行 排序 ， 需 时间 O ( log ( ) ) . 
 　 　 然后 将 所有 的 l 个 元素 看做 一个 n × 的 列 有序 矩阵 ， 再 利用 算法 2 求出 其 第 k 个 最小 元 ， 需 时间 O ( log2 ( ) + log ( ) log2n + log3n ) ， 则 得到 下面 的 定理 3 .   
 　 　 定理 3 . 设有 l 个 元素 均匀分布 在 × 的 RMESH 上 ， 则 可 在 O ( log2 ( ) + log ( ) log2n + log3n + log ( ) ) 时间 内求 出 其 第 k 个 最小 元 . 
 　 　 若 k ＜ l / n ， 则 可 在 每台 处理器 上用 线性 选择 算法 先 选出 前 k 个 最小 元 ， 然后 仅 对 前 k 个 最小 元 排序 ， 这样 算法 的 时间 复杂度 变为 O ( log2 ( ) + log ( ) log2n + log3n ++ klogk ) . 当 l ≥ O ( nlog3n / log   logn ) 时 ， 定理 3 中 的 时间 复杂度 为 O ( log ( ) ) . 它 仅 相当于 每个 处理器 的 局部 排序 时间 . 特别 地 ， 当 l = O ( n1 + ε ) ( ε ＞ 0 为 常数 ） ， 则 时间 复杂度 为 O ( logn ) . 此时 同 文献 ［ 13 ］ 的 在 × RMESH 上用 O ( logn ) 时间 求 n 个 元素 的 k - 选择 相比 ， 达到 了 最好 的 并行 效果 . 同 线性 时间 的 串行   k - 选择 算法 相比 ， 达到 的 加速 比为 n / logn . 而 在 实际 应用 中 l = O ( n1 + ε ) 是 一种 很 常见 的 情况 ， 因而 我们 的 算法 具有 很 好 的 应用 价值 . 
 5 　 实验 结果 
 　 　 我们 采用 单机 对 算法 进行 模拟 . 对 局部 运算 （ 如 比较 加 、 减 、 乘 、 除 等 ） 和 通信 次数 进行 记数 . 图 5 给出 了 在 每个 处理器 处理 的 元素 个数 分别 是 6 、 12 、 24 的 情况 下 ， 用 不同 大小 的 RMESH 阵列 达到 的 加速 比 . 我们 注意 到 算法 的 加速 比 基本 与 n / logn 成正比 ( × 为 RMESH 的 规模 ) . 图 6 给出 了 12 × 12 的 RMESH 上 对 不同 元素 数 得到 的 加速 比 . 因 每个 处理器 内部 元素 已 排序 ， 所以 m 的 变化 对 加速 比 影响 不大 . 每组 参数 都 执行 了 100 次取 平均值 . 
 
 图 5 
 
 图 6 
 6   总结 
 　 　 本文 在 × 的 可重 构造 的 网孔 机器 上用 加权 中值 的 思想 实现 了 m × n 的 列 有序 矩阵 的 k - 选择 ， 时间 复杂度 为 O ( log2m + logm   log2n + log3n ) . 利用 列 有序 矩阵 上 的 k - 选择 算法 ， 我们 提出 了 求 一般 的 l 元集 的 k - 选择 算法 ， 该 算法 在 × 的 RMESH 上 的 执行 时间 为 O ( log2 ( ) + log ( ) log2n + log3n + log ( ) ) . 当 l ≥ O ( nlog3n / log   logn ) 时 ， 该 时间 复杂度 为 O ( log ( ) ) . 特别 地 ， 当 l = O ( n1 + ε ) （ ε ＞ 0 为 常数 ） ， 则 时间 复杂度 为 O ( logn ) . 此时 达到 的 加速 比为 n / logn . 而同 文献 ［ 12 ］ 等 用 O ( logn ) 时间 在 × RMESH 上求 n 个 元素 的 k 选择 算法 相比 ， 达到 了 最好 的 并行 效果 . 
 注 ： 本 课题 得到 国家教委 博士点 基金 资助 （ 项目编号 9703825 ） . 
 作者简介 ： 许胤龙 ， 男 ， 1963 年 6 月生 ， 讲师 ， 研究 方向 为 复杂性 理论 、 并行算法 . 
 陈国良 ， 男 ， 1938 年 6 月生 ， 教授 ， 博士生 导师 ， 研究 方向 为 并行 与 分布式 算法 、 遗传算法 . 
 万颖瑜 ， 男 ， 1976 年 1 月生 ， 博士 研究生 ， 主要 研究 方向 为 并行算法 、 NPC 问题 实用 算法 . 
 作者 单位 ： 中国 科学技术 大学 计算机 科学技术 系 国家 高性能 计算中心 　 合肥 　 230027 
 参考文献 
 1 　 　 Fussenegger   F . Johnson   D   B . A   Counting   Approach   to   Lower   Bounds   for   Selection   Problems ,   J   of   ACM ,   1979 ,   26 ( 2 ) :   540 ～ 543 
 2 　 　 Hyafil   L .   Bounds   for   selection ,   SIAM   J   Comput ,   1976 ,   5 ( 1 ) :   104 ～ 109 
 3 　 　 Krkpartrick   D   G .   A   unified   lower   bound   for   selection   and   set   partitioning   problems .   J   of   ACM ,   1981 ,   28 ( 1 ) :   150 ～ 165 
 4 　 　 Johnson   D   B ,   Mizoguchi   T .   Selecting   the   k - th   element   in   X ＋ Y   and   X1 + X2 + … Xn .   SIAM   J   Comput ,   1979 ,   7 ( 2 ) :   147 ～ 153 
 5 　 　 Frederickson   G   N ,   Johnson   D   B .   Generalized   selection   and   ranking :   Sorted   matrices . SIAM   J   Comput ,   1984 ,   13 ( 1 ) :   14 ～ 29 
 6 　 　 Frederickson   G   N ,   Johnson   D   B .   The   complexity   of   selection   and   ranking   in   X + Y   and   matrices   with   sorted   columns .   J   Comput   &   Sys   Sci ,   1982 ,   24 ( 2 ) :   197 ～ 208 
 7 　 　 陈国良 .   并行算法 — 排序 与 选择 .   合肥 :   中国 科学技术 大学 出版社 ，   1990 
 ( Chen   Guoliang .   Parallel   Algorithms - Sorting   and   Selection ( in   Chinese ) .   Hefei :   The   Press   of   Chinese   University   of   Sciences   &   Technology   Press , 1990 ) 
 8 　 　 陈国良 . 平衡 分组 选择网络 .   计算机 研究 和 发展 , 1984 ， 21 ( 11 ) : 9 ～ 21 
 ( Chen   Guoliang .   Balanced   grouping   selection   network ,   Journal   of   Computer   Research   &   Development ( in   Chinese ) ,   1984 ， 21 ( 11 ) :   9 ～ 21 ) 
 9 　 　 陈国良 ， 沈鸿 .   在 SIMD 机器 上 实现 的 双调 选择 算法 ， 计算机 研究 和 发展 ， 1988 , 25 （ 1 ） : 1 ～ 9 
 ( Chen   Guoliang ,   Shen   Hong .   Bitonic   selection   algorithms   on   SIMD   machine .   Computer   Research   &   Development ( in   Chinese ) ,   1988 ,   25 ( 1 ) :   1 ～ 9 ) 
 10   陈国良 ，   王 忠良 .   并行 归并 选择 算法 .   计算机 学报 , 1988 , 11 ( 1 ) : 14 ～ 21 
 ( Chen   Guoliang ,   Wang   Zhongliang .   Parallel   merging   selection   algorithm .   Chinese   Journal   of   Computers ( in   Chinese ) ,   1988 ,   11 ( 1 ) :   14 ～ 21 ) 
 11   陈国良 ， 刘峻 .   多处理器 上 的 分组 选择 算法 .   计算机 研究 和 发展 ,   1988 ， 25 ( 8 ) :   1 ～ 9 
 ( Chen   Guoliang ,   Liu   Jun .   Grouping   selection   algorithms   on   multiprocessor   machine .   Journal   of   Computer   Research   &   Development ( in   Chinese ) ,   1988 ， 25 ( 8 ) :   1 ～ 9 ) 
 12   Hao   E ,   Mackenzie   P   D ,   Stout   Q   F .   Selection   on   the   reconfigurable   mesh .   In :   Proc   Int ' l   Parallel   Processing   Symp ,   1992 ,   38 ～ 45 
 13   Shen   H ,   Ramnath   S .   Optimal   parallel   selection   in   sorted   matrices .   Inform   Process   Lett   1996 ,   59 ( 3 ) :   117 ～ 122 
 14   Miller   R ,   Prasanna - Kumer   V   K ,   Reisis   D   I ,   Stout   Q   F .   Parallel   computations   on   reconfigurable   meshes .   IEEE   Trans   on   Comput ,   1993 ,   42 ( 6 ) :   678 ～ 692 
 15   Nigam   M ,   Sahni   S .   Sorting   n   numbers   on   n × n   reconfigurable   meshes   with   buses . In :   Proc   Int ' l   Parallel   Processing   Symp ,   1993 ,   174 ～ 181 
 16   Ullman   J   D .   Computational   Aspects   of   VLSI .   New   York   :   Computer   Science   Press ,   1984 
 原稿 收到 日期 ： 1998 - 11 - 30 ； 修改稿 收到 日期 ： 1999 - 05 - 17 . 
