计算机 研究 与 发展 
 JOURNAL   OF   COMPUTER   RESEARCH   AND   DEVELOPMENT 
 1999 年   第 36 卷   第 9 期   Vol.36   No.9   1999 
 
 
 
 一种 基于 TriBus 的 软件 集成 框架 
 李保建 　 曾广周  林宗楷 
 摘 　 要 　 文中 提出 了 一种 面向 领域 的 软件体系结构 类型 . 这种 体系结构 类型定义 了 过程 、 对象 和 Agent   3 种软 构件 类型 ， 设计 了 一种 称为 TriBus 的 软 总线 或 连接器 ， 规定 了 不同 类 构件之间 通过 TriBus 的 单向 引用 关系 和 同类 构件之间 的 双向 引用 关系 ， 并 给出 了 这种 软件体系结构 类型 在 计算机辅助 协同 设计 领域 的 应用 实例 . 
 关键词 　 软件体系结构 ， 软 构件 ， 软 总线 ， 计算机辅助 协同 设计 
 中图法 分类号 　 TP311.5 
 A   SOFTWARE   INTEGRATING   FRAMEWORK   BASED   ON   TriBus 
 LI   Bao - Jian ,   ZENG   Guang - Zhou ,   and   LIN   Zong - Kai 
 ( CAD   Laboratory   at   Institute   of   Computing   Technology ,   Chinese   Academy   of   Sciences ,   Beijing   100080 ) ( Department   of   Computer   Science ,   Shandong   University   of   Technology ,   Jinan   250061 ) 
 Abstract 　 A   domain - specific   software   architecture   style   is   proposed   in   the   paper   here .   In   the   architecture   style ,   three   software   component   types   are   defined :   procedure   components ,   object   components   and   agent   components .   A   software   bus   called   TriBus   is   designed   to   facilitate   interactions   among   these   components   and   specify   one   way   “ citation ”   relations   between   different   component   types   and   two - way   “ citation ”   relations   between   components   of   the   same   type .   An   application   example   of   the   software   architecture   style   in   the   domain   of   Computer   Supported   Collaborative   Design   is   given . 
 Key   words 　 software   architecture ,   software   component ,   software   bus ,   computer   supported   collaborative   design 
 1 　 引言 
 　 　 面向 领域 （ domain   specific ） 的 软件体系结构 是 软件体系结构 研究 的 一个 重要 方向 . 这类 研究 的 目的 是 通过 特定 应用领域 的 开发 提供 可 重用 的 软件产品 族 的 构件 （ components ） 和 框架 （ frameworks ） . 这种 开发 是 基于 以下 思想 即 一组 相关 系统 的 共同 方面 可以 抽取 出来 ， 从而 可以 在 相对 较 低 的 成本 下 通过 “ 实例 化 ” 共享 设计 来 建造 新 的 系统 ［ 1 ］ . 
 　 　 关于 面向 领域 的 软件体系结构 有 几个 问题 值得一提 ， 一是 这里 所 提及 的 “ 领域 ” ， 其 范围 可窄 可 宽 . 二是 这里 所说 的 重用 既 包含 构件 库 的 重用 ， 又 包括 集成 构件 的 框架 的 重用 . 三是 面向 某一 领域 的 软件体系结构 不是 唯一 的 ， 而是 存在 一个 体系结构 空间 . 
 　 　 本文 将 提出 一种 面向 领域 的 软件体系结构 类型 ， 我们 称之为 D3 体系结构 类型 . 关于 这种 体系结构 类型 的 提出 ， 涉及 到 我们 采用 的 研究 方法 . 在 我们 研究 、 设计 与 开发 一种 具体 的 计算机 协同 设计 （ CSCD ） 的 层次 操作 模型 与 系统 的 过程 中 ［ 2 ］ ， 我们 产生 了 从中 抽取 一种 软件体系结构 类型 想法 . 因此 其 设计 目标 首先 是 指导 一类 CSCD （ Computer   Supported   Collaborative   Design ） 系统软件 的 开发 . 其次 ， 在 设计 这种 体系结构 的 过程 中 ， 我们 发现 其 雏形 也 可能 具有 适用 于 更 宽 的 范围 譬如说 其他 CSCW 领域 、 DPS （ Distributed   Problem   Solving ） 领域 等 的 潜力 ， 因此 我们 增加 了 构件 类型 并 设计 了 连接器 ， 力图 使 之 具有 更 宽 的 适用范围 . 
 2 　 构件 分类 及其 相互 关系 
 　 　 我们 将 D3 结构 类型 中 的 构件 分成 3 类 ： 过程 构件 、 对象 构件 和 Agent 构件 . 下面 分别 给出 它们 的 定义 . 
 　 　 定义 1 .   过程 构件 具有 纯粹 变换 性质 ， 它 可以 对 输入 数据 进行 变换 得到 输出 数据 ， 也 可以 对 全局 数据 或 状态 进行 操作 而 使 之 改变 . 从 构成 上 来说 ， 过程 构件 可以 由 一组 相关联 或 不 相关联 的 过程 或 函数 组成 . 这里 的 过程 或 函数 没有 自己 的 私有 数据 或 状态 ， 整个 构件 也 没有 自己 的 私有 数据 或 状态 . 关联 是 指 过程 或 函数 间 的 调用 关系 . 
 　 　 定义 2 .   对象 构件 是 具有 自己 的 数据 或 状态 ， 并 能 提供 与其 数据 或 状态 相关 的 操作 或 服务 的 程序模块 或 （ 运行 期间 的 ） 进程 . 
 　 　 我们 这里 采用 的 是 广义 的 对象 概念 . 对象 构件 强调 的 是 数据 和 操作 的 封装 性 . 从 外部 来看 ， 只要 一个 程序 具有 自己 的 数据 和 状态 ， 并 对外 提供 相关 的 操作 或 服务 ， 就 具备 了 作为 对象 构件 的 条件 . 例如 ， 一个 通常 的 数据库 应用程序 等 加以 构件 化 就 可 构成 对象 构件 . 
 　 　 定义 3 .   Agent 构件 即 Agent . Agent 是 其 状态 可以 看成 由 诸如 信念 ( belief ) 、 目标 ( goal ) 、 意向 ( intention ) 及 承诺 ( commitment ) 等 心理 成分 构成 的 ， 相互之间 用 基于 言语 行为 的 通信 原语 诸如 通知 、 请求 、 提议 、 接受 、 拒绝 等 进行 交互作用 和 合作 的 ， 在 一定 的 环境 下 持续 自主 运行 的 程序 实体 . 
 　 　 学术界 对 什么 是 Agent 持有 不同 的 观点 . 考虑 到 应用 需要 ， 我们 采用 了 一种 认知 型 ( cognitive )   Agent 的 观点 . 认知 型 Agent 强调 心态 元素 诸如 信念 、 目标 、 意向 等 的 明确 表示 ［ 3 ， 4 ］ ， 而 Agent 的 理性 行为 ( rational   behavior ) 正是 这种 表示 的 结果 . 
 　 　 在 我们 的 构件 分类 中 ， 我们 明确 地 将 对象 和 Agent 区分 成 两种 不同 的 构件 . 这 和 将 Agent 作为 一种 特殊 的 对象 的 做法 不同 . 虽然 从 某种意义 上 来说 ， 可以 将 Agent 看成 一种 特殊 的 对象 ， 但 两者之间 至少 存在 下述 差异 ： 
 　 　 ( 1 )   对象 状态 和 Agent 状态 的 区别 . 对象 的 状态 取决于 其 数据 （ 属性 ） 的 取值 ， 可以 由于 其 操作 （ 行为 ） 而 发生变化 并且 同样 可以 影响 其 行为 . 但 对象 的 状态 是 一种 未 分化 或 无约束 的 状态 ， 换句话说 ， 对象 具有 哪些 属性 以及 对 这些 属性 的 解释 完全 取决于 个别 的 设计 人员 . Agent 则 不同 ， 其 状态 可以 明确 地 由 信念 、 目标 、 意向 等 精神 成分 来 描述 . 
 　 　 ( 2 )   对象 和 Agent 都 用 消息 进行 通信 ， 但 对象 消息 是 无约束 或非 类型化 的 ， 而 Agent 消息 则 明确 地用 言语 行为 理论 加以 类型化 . Agent 之间 通过 诸如 通知 、 请求 、 提议 、 接受 、 拒绝 之类 的 消息 来 实现 交互作用 . 
 　 　 因此 ， 与其 认为 Agent 是 一种 特殊 的 对象 ， 不如 认为 Agent 是 一种 更 高层次 的 软件 抽象 . 这种 更 高层次 的 抽象 ， 可望 对 向 DPS ， CSCW 等 应用 提供 更加 直接 的 支持 . 
 　 　 3 种 构件之间 的 关系 不是 对 等 的 . 我们 可以 规定 它们 之间 的 引用 关系 如图 1 所示 . 我们 将 过程 和 函数调用 、 向 对象 传递 消息 和 向 Agent   发送 通信 原语 统称 为 “ 引用 ” . 构件之间 的 引用 关系 将 构件 分成 3 个 层次 ： Agent 构件 层次 ， 对象 构件 层次 和 过程 构件 层次 . 每个 层次 之内 的 构件 允许 相互 引用 ； 上层 构件 允许 引用 下层 构件 ， 反之 则 不然 . 这样 规定 的 理由 也 是 明显 的 ： 过程 构件 是 纯粹 变换 性质 的 ， 没有 自己 的 状态 . 而 对象 构件 则 有 自己 的 数据 和 状态 ， Agent 构件 甚至 有 自己 的 心态 . 规定 它们 层次 之间 的 单向 引用 可以 避免 复杂 甚至 不可 预测 的 语义 关系 . 不同 类 构件之间 的 单向 引用 关系 和 同类 构件之间 的 双向 引用 关系 也 是 D3 体系结构 类型 的 重要 组成部分 . 
 
 　 → 集合 中 / 之间 构件 引用 关系 
 图 1 　 构件 引用 关系 
 3 　 TriBus 
 　 　 连接器 ( connector ) 是 软件体系结构 的 主要 组成部分 之一 ， 是 构件 与 构件之间 交互作用 的 中介 . 在 D3 体系结构 中 我们 规定 了 如图 1 所示 的 引用 关系 并且 我们 将 过程 和 函数调用 、 向 对象 传递 消息 和 向 Agent   发送 通信 原语 统称 为 引用 . 因为 构件 是 分散 于 网络 上 的 ， 如何 实现 构件之间 的 引用 关系 ， 是 一个 重要 的 问题 . 我们 没有 为 过程 和 函数调用 、 向 对象 传递 消息 和 向 Agent 发送 通信 原语 每 一种 引用 分别 设计 不同 的 连接器 ， 而 设计 了 一种 称为 TriBus 的 软 总线 作为 各种 引用 传输 的 中介 . 它 的 主要 特色 在于 提供 了 Agent 之间 用 通信 原语 进行 交互作用 的 机制 . 因为 Agent 之间 的 通信 原语 交互 是 上下文 有关 的 ， 因此 每组 相关 的 通信 原语 都 需要 特别 的 处理 协议 . 由于 Agent 研究 远 未成熟 ， 现有 的 软 总线 标准 如 CORBA 等 不 可能 提供 我们 所 需要 的 Agent 通信 手段 . 
 　 　 TriBus 由 标识 总线 （ IdBus ） 、 命令 总线 （ ComBus ） 、 数据总线 （ DataBus ） 集合 和 总线 管理器 （ BusManager ） 组成 ， 还 提供 用于 构件 与 总线 挂接 的 客户 方 和 服务器 方 源代码 库 （ 客户 方 构件 是 发出 引用 的 构件 ， 服务器 方 构件 是 接收 引用 的 构件 . 同一 构件 既 可以 是 客户 方 也 可以 是 服务器 方 构件 ） . 其 结构 如图 2 所示 . 我们 将 TriBus 实现 为 后台 服务 进程 ， 分布 于 不同 主机 上 的 TriBus 是 对 等 的 ， 它们 通过 消息 相互 联系 . 
 
 图 2 　 TriBus 
 　 　 BusManager 负责 外部 消息 的 接收 与 分析 ， 并 根据 分析 的 结果 启动 命令 或 标识 总线 . 数据总线 由 命令 总线 启动 . 
 　 　 IdBus 包含 构件 命名 、 类型 、 地址 或 定位 信息 及 引用 接口 描述 库 （ 以下 简称 Id 描述 库 ） ， 支持 跨平台 的 全局 构件 标识 及 引用 接口 空间 ， 提供 其 存储 、 更新 、 检索 等 管理 方法 的 应用 程序接口 （ API ） ， 并 负责 处理 不同 主机 上 的 标识 总线 之间 的 数据 一致性 问题 （ 这里 需要 说明 的 一点 是 ， 尽管 各个 TriBus 在 引用 关系 方面 是 对 等 的 ， 但 在 TriBus 的 数据 一致性 问题 上 ， 还是 以 某个 选定 的 TriBus 为 标准 , 从而 大大简化 了 设计 ） . 
 　 　 ComBus 是 TriBus 中 负责 引用 传输 的 部件 ， 包含 引用 收发器 、 命令 总线 际 协议 ICP 和 构件 适配器 ， 其 结构 如图 3 所示 . ComBus 还给 应用程序 提供 用于 动态 引用 的 API ， 产生 应用程序 和 引用 收发器 之间 的 动态 接口 . 
 
 图 3 　 命令 总线 ( 虚线 框内 ) 结构 
 　 　 引用 收发器 的 功能 之一 是 接收 从 应用程序 发来 的 经由 BusManager 的 具有 统一 编码 格式 的 引用 ， 判别 是否 发 往 本地 的 引用 ， 若 是 则 传送 给 （ 本地 ） 构件 适配器 ， 并 从 构件 适配器 接收 引用 执行 结果 ， 否则 将 引用 通过 ICP 实体 转发给 网络 上 的 目的 TriBus 的 命令 总线 并 接收 相应 的 结果 . 引用 收发器 的 另 一 功能 是 根据 所 接收 的 引用 的 源地址 、 目的 地址 和 引用 参数 而 决定 是否 启动 数据总线 进行 多媒体 数据 的 传输 或 接收 . 
 　 　 ICP 协议 的 功能 是 负责 网际 命令 总线 之间 的 引用 及 结果 的 传输 . ICP 协议 实体 是 一个 复杂 的 实体 . 它 针对 不同 的 引用 诸如 过程 与 函数调用 、 对象 之间 的 消息 发送 及 Agent 之间 的 通信 原语 提供 不同 的 处理 规程 . 
 　 　 构件 适配器 负责 本地 构件 的 管理 、 向 本地 构件 传送 引用 并 接收 引用 执行 结果 . 
 　 　 DataBus 集合 是 专门 负责 多媒体 数据 的 网络 传输 的 . 每个 DataBus 是 一个 媒体 传送 协议 实体 ， 由 媒体 发送器 和 接收器 组成 ， 负责 传送 一种 类型 的 媒体 . 多媒体 传输 这一 任务 是 非常复杂 的 . 媒体 的 多样性 及 网络 多媒体 应用 的 广泛性 对 网络 传输 及 处理 提出 多样性 的 甚至 是 苛刻 的 要求 . 不能 试图 设计 一个 能 支持 多种 媒体 的 各种 应用 的 通用 的 DataBus 集合 ， 因此 ， 在 TriBus 中 ， DataBus 集合 中 每个 DataBus 都 被 设计 成可 装卸 的 . 　 　 
 　 　 构件之间 利用 TriBus 进行 通信 ， 必须 遵循 统一 的 接口标准 ， 必须 与 TriBus 正确 挂接 . 我们 设计 了 一种 IDL （ 接口定义 语言 ） 用于 描述 过程 构件 、 对象 构件 和 Agent 构件 的 服务 接口 . 构件 总是 用 某种 程序设计 语言 编写 而成 的 ， 相对 于 IDL 来说 ， 称其为 目标语言 . 应 建立 IDL 到 目标语言 的 映射 规范 . IDL 编译器 根据 这种 映射 规范 编写 ， 它 有 两个 职能 ： 
 　 　 ( 1 )   根据 构件 服务 接口 IDL 定义 和 TriBus 提供 的 服务器 方 源代码 库 生成 服务器 方 骨架 （ server   side   skeleton ） ， 构件 的 服务器 方 骨架 是 用 IDL 编译器 的 目标语言 表示 的 ， 负责 和 TriBus 挂接 并 从 ComBus 接收 引用 . 
 　 　 ( 2 )   根据 客户 方 构件 对 服务器 方 构件 的 静态 引用 、 服务器 方 构件 的 服务 接口 IDL 定义 和 由 TriBus 提供 的 客户 方 源代码 库 生成 客户端 桩 （ client   side   stub ） ， 客户端 桩 同样 是 用 IDL 编译器 的 目标语言 来 表示 ， 负责 客户 方 构件 和 TriBus 挂接 并 向 ComBus 转发 静态 引用 . 
 　 　 服务器 方 构件 用 构件 注册器 向 IdBus 注册 . 构件 注册器 调用 IDL 编译器 生成 构件 的 服务器 方 骨架 ， 将 构件 源码 和 服务器 方 骨架 进行 编译 和 连接 ， 并 根据 构件 服务 接口 的 IDL 描述 向 IdBus 注册 . 构件 注册器 还 提供 从 IdBus 中 注销 或 替换 某一 构件 的 功能 . 
 　 　 客户 方 构件 可以 以 两种 方式 使用 服务器 方 构件 ， 一种 是 静态 引用 的 方式 ， 另 一种 是 动态 引用 的 方式 . 所谓 静态 引用 方式 是 指 客户 方 构件 编译 期间 就 安排 好 了 的 构件 引用 方式 . 静态 引用 方式 的 使用 方法 是 ： 由 IDL 编译器 根据 要 引用 的 服务器 方 构件 服务 接口 IDL 描述 生成 客户端 桩 ， 和 包含 了 对 服务器 方 构件 引用 的 客户 方 构件 一起 编译 连接 生成 客户 方 构件 可 执行 代码 . 而 动态 引用 的 方式 是 指 客户 方 构件 直接 调用 TriBus 提供 的 API 在 运行 期间 向 IdBus 查询 服务器 方 构件 及其 接口 并 根据 运行 时 条件 通过 API 间接 引用 . 
 4 　 一个 D3 体系结构 实例 
 　 　 体系结构 类型 ( architectural   style ) 和 体系结构 实例 ( architectural   instance ) 是 两个 不同 的 概念 . 一个 体系结构 实例 指 一个 特定 系统 的 体系结构 ， 而 一种 体系结构 类型 则 定义 一 族 体系结构 实例 的 形式 和 结构 应 满足 的 约束 . 体系结构 类型 规定 其实 例 可能 具有 的 构件 和 连接器 ( connector ) 、 拓扑 约束 以及 语义 约束 等 ［ 1 ］ . 
 　 　 我们 将要 介绍 的 一个 D3 体系结构 实例 是 一个 我们 开发 的 计算机辅助 对象 图 协同 设计 原型 系统 ( CODDS ) 的 体系结构 . 此 实例 的 配置 （ configuration ） 如图 4 所示 ， 我们 选用 了 D3 体系结构 类型 中 的 对象 和 Agent 两种 类型 的 构件 ， 它们 通过 Tribus 相互作用 . 
 
 图 4 　 CODDS 系统 体系结构 示意图 
 　 　 在 CODDS 中 ， 共享 设计 对象 构件 实际上 是 领域 级 设计 系统 . 被 设计 的 产品 或 对象 是 面向对象分析 中类 及其 层次 关系 和 聚合 关系 等 的 图形化 表示 . CODDS 系统 的 外观 像 一个 图形 编辑器 ， 但 其 共享 设计 对象 构件 的 基本 的 图素 是 表示 空类 （ 仅 有 名字 ， 没有 属性 ） 、 属性 以及 层次 与 聚合 等 关系 的 几何图形 ， 与 一般 的 图形 编辑器 大不相同 . 可以 施加 于 它们 的 操作 （ 对象 构件 的 方法 ） 包括 创建 空类 、 添加 与 删除 属性 、 建立 与 撤消 继承 或 聚合 连接 关系 等 . 
 　 　 计算机辅助 协同 设计 （ CSCD ） 的 目标 是 支持 群体 工作 ， 开发 一个 有效 的 CSCD 系统 ， 群体 工作 的 特点 诸如 地点 上 的 分布 性 、 时间 上 的 同步 与 异步 性 、 并发 性 等 必须 予以考虑 ［ 5 ］ ； 群体 协同 的 需求 的 诸如 任务 分解 与 装配 、 设计 活动 监控 、 冲突消解 等 必须 在 系统 中 有所 反映 以 更好 地 支持 人人 交互 . 
 　 　 为了 将 协同 的 需求 集成 到 CODDS 中 ， 我们 在 领域 级 系统 即 共享 设计 对象 构件 和 多个 设计 人员 之间 设置 了 由 多个 Agent 构件 组成 的 多 Agent 系统 . 每个 设计者 都 有 一个 Agent 助手 ， 设计者 可以 直接 地 操纵 他 的 Agent ， 每个 Agent 都 可以 直接 操纵 共享 设计 对象 ， 但是 设计者 只能 通过 中间 Agent 层 间接 地 操纵 共享 设计 对象 . 
 　 　 每个 Agent 的 理性 行为 是 由 其 心态 元素 诸如 beliefs ， desires ， goals ， intentions 等 所 决定 的 . 为了 体现 协同 的 某些 需求 与 约束 ， 直接 反映 每个 Agent 面向 协同 的 理性 行为 ， 我们 设计 了 一种 心态 元素 称为 Joint   endeavor ［ 2 ］ . Agent 通过 诸如 inform ,   request ,   consent ,   proposal ,   accept ,   refuse 等 通信 原语 相互作用 . 中间 多 Agent 系统 通过 形成 联合 心态 Joint   endeavor 并 凭借 它们 交互作用 的 通信 原语 ， 从而 将 协同 设计 的 某些 约束 与 需求 集成 到 系统 中来 . 每个 Agent 构件 由 领域 级用户 接口 和 元 级用户 接口 、 监控 模块 、 协作 模块 以及 设计 任务 和 Agent 社团 的 内部 模型 等 部分 组成 . 设计 人员 通过 领域 级用户 接口 向 其 Agent 传达 对 共享 对象 构件 的 操作 信息 ， 但 这种 操作 要 受到 监控 模块 的 监控 ， 如果 符合 协同 的 约束 ， 则 由 Agent 根据 接收 到 的 操作 信息 对 共享 对象 构件 实施 实际操作 . 元 级用户 接口 则 提供 设计 人员 的 协作 手段 . 实际上 ， 设计 人员 是 经由 元 级用户 接口 通过 在 Agent 之间 相互 传送 通信 原语 来 相互合作 的 . 协作 模块 负责管理 Joint   endeavor ， 并 根据 Joint   endeavor 的 规定 来 跟踪 协同 行为 . 
 　 　 CODDS 系统 的 体系结构 完全符合 D3 体系结构 类型 的 规定 . Agent 构件之间 通过 通信 原语 的 相互作用 ， 及 它们 对 共享 对象 构件 的 操作 关系 ， 用 D3 体系结构 类型 的 术语 来说 就是 引用 关系 . 但是 所有 Agent 共享 一个 设计 对象 构件 ， 不 存在 对象 构件之间 的 相互 引用 关系 . 每个 Agent 既 是 服务器 方 构件 ， 也 是 客户 方 构件 ， 因为 它们 之间 的 引用 关系 是 相互 的 . 而 共享 设计 对象 构件 由于 只 接收 来自 Agent 的 引用 ， 因此 仅仅 作为 服务器 方 构件 向 Tribus 注册 . 
 5 　 结语 
 　 　 上面 我们 介绍 了 D3 体系结构 类型 中 的 构件 、 连接器 及其 相互 关系 ， 并 介绍 了 一个 D3 体系结构 实例 . 正如 我们 在 引言 中 所说 的 ， 我们 在 设计 这种 体系结构 类型 的 过程 中 ， 首先 是 面向 一类 CSCD 系统 的 设计 ， 但 又 不 局限于 此 . D3 体系结构 类型 的 提出 ， 仅仅 是 一个 开始 ， 进一步 的 研究 工作 应 包括 ： 
 　 　 ( 1 )   探索 D3 体系结构 类型 的 其他 适用范围 ， 我们 正在 考虑 将 其 应用 到 一个 基于 黑板 模型 的 多 Agent 分布式 问题 求解 系统 中 . 
 　 　 ( 2 )   软件体系结构 是 需求 和 实现 之间 的 桥梁 . 基于 某种 软件体系结构 类型 的 软件开发 ， 必然 对 软件 需求 与 设计 方法 产生 重大 影响 . 因此 基于 D3 体系结构 类型 的 软件 需求 与 设计 方法 值得 我们 进一步 深入研究 . 
 　 　 迄今为止 的 研究 表明 ， D3 体系结构 类型 对 构件 、 连接器 及其 相互 关系 的 规定 是 自然 合理 的 ， 其 应用 前景 也 是 光明 的 . 
 注 ： 本 课题 得到 国家 “ 九五 ” 重点 科技 攻关项目 ( 项目编号 96 - 729 - 01 - 01 ) 及 山东省 自然科学 基金 ( 项目编号 Y98G07103 ) 资助 . 
 作者简介 ： 李保建 ， 男 ， 1964 年 10 月生 ， 博士 研究生 ， 主要 研究 方向 为 软件 智能化 技术 与 协同 设计 . 
 曾广周 ， 男 ， 1947 年 3 月生 ， 教授 ， 主要 研究 领域 为 人工智能 和 软件工程 . 
 林宗楷 ， 男 ， 1934 年 3 月生 ， 研究员 ， 博士生 导师 ， 主要 研究 领域 为 工程 数据库 及 协同 设计 . 
 作者 单位 ； 李保建 　 林宗楷 　 中国科学院计算技术研究所 CAD 开放 实验室 　 北京 　 100080 
 曾广周  山东 工业 大学 计算机系 　 济南 　 250061 
 参考文献 
 1 　 　 Garlan   D ,   Perry   D   E .   Introduction   to   the   special   issue   on   software   architecture .   IEEE   Transactions   on   Software   Engineering ,   1995 ,   21 ( 4 ) :   269 ～ 274 
 2 　 　 Li   Baojian ,   Zeng   Guangzhou ,   Lin   Zongkai .   A   hierarchical   operation   model   based   on   half - automated   agent   for   collaborative   design .   In :   Proc   of   Third   International   Workshop   on   CSCW   in   Design .   Japan ,   1998 
 3 　 　 Shoham   Y .   Agent   oriented   programming .   Artificial   Intelligence ,   1993 ,   60 :   51 ～ 92 
 4 　 　 Cohen   P   R ,   Levesque   H   J .   Intention   is   choice   with   commitment .   Artificial   Intelligence ,   1990 ,   42 :   213 ～ 261 
 5 　 　 Lin   Zongkai .   The   appearance   of   CSCD   making   CAD   technology   to   leap   onto   a   new   step .   In :   Proc   of   Second   International   Workshop   on   CSCW   in   Design .   Bangkok ,   Thailand ,   1997 .   162 ～ 167 
 原稿 收到 日期 ： 1997 - 12 - 29 ； 修改稿 收到 日期 ： 1998 - 10 - 06 . 
