软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 19 卷   第 3 期     Vol.19   No.3   1999 
 
 
 
 支持 多种 并行计算 模型 的 面向对象 框架 研究 
 吕建 　 陆陪 　 于 大川 　 David   L . Shang 
 摘 　 要 　 为了 支持 并行程序 设计 ， 几乎 所有 的 程序设计 语言 均 通过 提供 并行 与 同步 通信 机制 来 支持 某一 高级 并行计算 模型 ， 如 Ada 语言 的 任务 与 会合 机制 以及 Java 语言 的 线程 和 同步 方法 . 显然 ， 这样 的 程序设计 语言 仅能 支持 一种 高级 并行计算 模型 . 尽管 单 模型 的 途径 对 某些 应用 来说 简单 而 有效 ， 但 由于 现实 世界 中 的 问题 往往 较为 繁杂 而 难以 完全 用 单一 模型 来 解决 . 文章 采用 面向对象 的 语言 机制 和 框架 技术 来 解决 此 问题 . 通过 分析 现有 各种 语言 中高级 并行计算 模型 的 共性 ， 提出 了 若干 新 的 面向对象 语言 机制 . 以此 为 基础 ， 提出 了 并行 面向对象 框架 的 概念 ， 并 讨论 用 其 表达 和 使用 高级 并行计算 模型 的 方法 . 结果 是 ， 可 在 某种意义 下 将 高级 并行计算 模型 从 语言 中 分离出来 ， 而 单一 语言 可 由 多个 并行 框架 加以 支撑 ， 从而 使得 在 单一 面向对象 语言 中 支持 多种 高级 并行计算 模型 成为 可能 . 
 关键词 　 并行 模型 ， 并行 框架 ， 嵌套 类 ， 抽象 函数 类 ， 隐式 代码 ， auto 机制 . 
 中图法 分类号 　 TP311 
 Researches   on   Object - oriented   Frameworks   Supporting 
 Multiple   Parallel   Computing   Models 
 L   Jian1 , 2   LU   Pei1 , 2   YU   Da - chuan1 , 2 
 　 1 ( State   Key   Laboratory   for   Novel   Software   Technology   Nanjing   University   Nanjing   210093 ) 
 　 2 ( Institute   of   Computer   Software   Nanjing   University   Nanjing   210093 ) 
 David   L .   Shang 
 　 Software   Systems   Research   Laboratory   Motorola   Inc .   USA 
 Abstract 　   In   order   to   support   parallel   programming ,   almost   all   of   the   programming   languages   incorporate   a   high - level   parallel   computing   model   into   the   language   by   providing   parallelism   and   synchronization   mechanisms ,   such   as   Ada ' s   task   with   rendezvous   and   Java ' s   thread   with   synchronized   method .   Obviously ,   such   a   programming   language   can   only   support   one   high - level   parallel   computing   model .   Although   the   approach   of   one   model   is   simple   and   fairly   effective   to   some   applications ,   unfortunately   the   problems   in   the   real   world   are   always   too   diverse   to   be   solved   by   using   a   single   parallel   computing   model .   In   this   paper ,   a   new   object - oriented   approach   to   this   problem   is   proposed .   After   analyzing   the   high - level   parallel   models   of   the   various   languages ,   some   novel   object - oriented   language   mechanisms   are   presented .   Based   on   them ,   the   concept   of   object - oriented   parallel   framework   is   proposed   and   the   method   for   expressing   and   using   the   high - level   parallel   computing   models   by   parallel   frameworks   is   discussed .   As   a   result ,   the   high - level   computing   models   are   separated   from   languages   in   some   sense   and   more   than   one   framework   could   be   given   within   a   single   language .   Therefore ,   using   a   single   language   to   support   the   various   parallel   models   turns   to   be   feasible . 
 Key   words 　 Parallel   model ,   parallel   framework ,   nested   class ,   abstract   function   class ,   implicit   code ,   auto   mechanism . 
 　 　 从 解决 多任务 操作系统 中 的 并发 问题 开始 ， 直到 MPP 系统 的 出现 ， 并行程序 设计 一直 是 计算机领域 的 研究 热点 ［ 1 , 2 ］ . 由于 分布式系统 、 并行 系统 和 实时 控制系统 中 程序设计 的 需要 ， 如何 在 程序设计 语言 中 支持 并行程序 设计 是 程序设计 语言 中 的 重要 问题 之一 . 支持 并行程序 设计 的 语言 ， 如 Ada83 ［ 3 ］ ， Concurrent   Pascal ， Actor ［ 4 ］ 以及 较 新 的 Java ［ 5 ］ 等 ， 基本上 都 是 在 传统 程序设计 语言 的 基础 上 ， 加入 一些 并行 机制 以及 同步 和 通信 机制 ， 来 支持 特定 的 并行计算 模型 . 例如 Ada83 的 具有 会合 机制 的 Task 模型 、 Concurrent   Pascal 的 基于 管程 的 Process 模型 、 CSP 的 同步 通信模型 ［ 6 ］ 和 ABCL / 1 的 基于 多种 消息传递 模式 的 Actor 模型 ［ 7 ］ . 
 　 　 对 这些 程序设计 语言 进行 研究 不难 发现 ， 对于 某 一种 程序设计 语言 ， 它 往往 只能 支持 一种 特定 的 并行计算 模型 ， 并且 支持 相应 模型 的 并行 与 同步 通信 机制 均 是 通过 关键字 的 形式 紧密 地 嵌入 到 语言 中去 的 . 但是 ， 客观 世界 中 的 并行 问题 复杂 多样 ， 某 一种 特定 的 并行 模型 虽然 能够 有效 地 解决 某 一类 问题 ， 但 往往 并 不能 适用 于 所有 的 场合 . 例如 ， 基于 共享 变量 的 管程 模型 能 较 好地解决 多任务 操作系统 中 的 资源共享 问题 ， 但 要 实现 远程 过程 调用 就 显得 很 困难 ； 而 消息传递 类 的 模型 则 恰恰相反 . 因而 ， 客观 世界 的 具体 问题 往往 需要 一种 程序设计 语言 来 支持 多种 并行计算 模型 . 
 　 　 在 这种 情况 下 ， 可以 使用 一些 低层 程序设计 技术 来 模拟 实现 所 需要 的 但 该 语言 并 不 支持 的 并行 模型 . 然而 ， 这种 模拟 实现 是 不 自然 的 ， 常常 使得 系统结构 较差 ， 难以 理解 、 维护 和 重用 . 
 　 　 本文 提出 了 一种 基于 面向对象 框架 的 方法 来 解决 上述 问题 . 在 对 并行 模型 进行 研究 的 基础 上 ， 我们 提出 了 一些 新 的 面向对象 语言 机制 ， 使用 这些 机制 并 结合 与 并行 相关 的 低层 系统 原语 ， 可 将 用 关键字 表达 的 并行 模型 从 程序设计 语言 中 分离出来 ， 而 采用 并行 面向对象 框架 来 加以 描述 . 不仅如此 ， 所 提供 的 语言 机制 可 使得 并行 面向对象 框架 的 使用 和 程序设计 语言 中 关键字 的 使用 同样 方便 和 直观 . 由于 同 一种 语言 可 支持 多种不同 的 并行 框架 ， 从而 使得 用 单一 程序设计 语言 来 支持 多种 并行 模型 成为 可能 . 本文 首先 对 两类 典型 的 并行计算 模型 进行 分析 ， 然后 提出 几种 有利于 表达 和 使用 各种 并行 模型 的 面向对象 语言 机制 ， 接着 引入 了 并行 框架 机制 用于 表达 并行 模型 ， 最后 是 一个 详细 的 例子 ， 通过 给出 简化 了 的 Java ， Ada83 和 所 对应 模型 （ 分别 代表 了 共享 量 和 消息传递 两类 模型 ） 的 并行 框架 ， 来 说明 用同 一种 程序设计 语言 来 支持 不同 的 并行 模型 是 可能 的 . 
 1 　 并行 模型 分析 
 　 　 传统 程序设计 语言所 支持 的 并行 模型 大致 有 两类 ： 共享 量类 和 消息传递 类 . 
 　 　 共享 量 就是指 多个 并行执行 单元 利用 读写 共享 变量 的 方法 来 实现 同步 和 通信 . 此类 模型 主要 有 ： Concurrent   Pascal   的 基于 管程 的 Process 模型 、 Smalltalk 的 基于 PV 操作 的 Process 模型 ［ 8 ］ 和 Java 的 基于 管程 的 多线程 模型 . 
 　 　 消息传递 就是指 多个 并行执行 单元 利用 各种各样 的 消息传递 手段 来 实现 同步 和 通信 . 此类 模型 主要 有 ： Ada83 的 具有 会合 机制 的 Task 模型 、 CSP 的 同步 通信模型 和 ABCL / 1 的 使用 多种 通信 模式 的 活动 Actor 模型 . 
 　 　 对 上述 模型 进行 分析 不难 发现 ： 程序设计 语言 主要 通过 提供 两组 关键字 来 支持 某一 特定 的 并行计算 模型 ： 其一 是 与 并行执行 单元 有关 的 关键字 ， 如 Task ,   Process 和 Thread ； 其二 是 与 通信 和 同步 有关 的 关键字 ， 如 Entry ,   Synchronized 等 . 并且 第 2 类 关键字 通常 在 第 1 类 关键字 所 刻画 的 单元 中 使用 . 因此 ， 要 在 单一 语言 中 支持 多种 并行计算 模型 ， 就 必须 将 其 从 程序设计 语言 中 分离出来 . 而 能否 分离 又 取决于 可否 用 面向对象 的 概念 来 解释 与 表达 上述 两组 关键字 及其 相互间 的 关系 . 基本思路 如下 ： 
 　 　 ( 1 )   可以 将 Thread ， Process ， Task 等 作为 特殊 的 类 ， 每 一个 并行执行 单元 就是 一个 对象 ， 这些 对象 的 内容 是 可 执行 的 代码 . 与 常规 对象 所 不同 的 是 ， 在 创建 这些 对象 时 ， 系统 往往 需要 做 一系列 底层 处理 工作 ， 例如 分配 控制 块 资源 、 注册 到 处理器 上 以供 调度 等 . 在 对象 的 运行 过程 中 ， 其 工作 方式 类似 于 函数 . 在 其 消亡 时 ， 也 要 做 一系列 底层 处理 工作 . 为了 刻画 Thread ， Process 和 Task 这样 特殊 的 类 ， 我们 引入 了 函数 类 的 概念 . 
 　 　 ( 2 )   Java 的 synchronized 关键字 ， Ada83 的 entry ， accept ， call 关建字 等 的 主要 作用 是 包含 了 一些 与 同步 和 通信 有关 的 代码 ， 我们 称之为 “ 隐式 代码 ” . 例如 ， Java 程序 中 的 某 一个 对象 执行 一个 带 synchronized 关键字 的 函数 时 ， 必须 先 自动 调用 一段 代码 ， 这 段 代码 检查 该 对象 是否 还有 其他 synchronized 函数 正在 被 别的 线程 所 调用 ， 由此 来 决定 本 线程 是 进入 等待 队列 还是 继续执行 下去 ； Ada83 程序 中 执行 一个 entry 时 ， 调用 accept 语句 的 任务 和 调用 call 语句 的 任务 都 必须 各自 先 调用 一段 同步 通信 的 代码 . 如何 灵活 地 刻画 这 段 代码 并 使 之 方便 直观 地 使用 是 问题 的 关键所在 . 为此 ， 我们 引入 了 auto 机制 . 
 　 　 ( 3 )   通常 ， 两组 关键字 之间 呈 嵌套 关系 ， 例如 ， Ada83 的 程序 是 由 多个 Task 构成 的 ， 而 每个 Task 中 就 嵌 有 多个 entry . ABCL / 1 的 程序 是 由 多个 Actor 构成 的 ， 每个 Actor 又 有 多个 script . 为了 反映 这样 的 关系 ， 我们 引入 了 嵌套 类 结构 . 
 　 　 ( 4 )   为了 能 采用 类似 于 关键字 的 方法 使用 由 嵌套 类 刻画 的 并行计算 模型 ， 我们 引入 了 嵌套 继承 机制 , 并 采用 前缀 式 的 子类 使用 方法 . 
 2 　 语言 机制 
 　 　 基于 上述 对 程序设计 语言 中 并行计算 模型 的 分析 ， 我们 在 常规 面向对象 语言 基础 上 提出 了 几种 对 描述 和 使用 并行 模型 行之有效 的 语言 机制 . 
 　 　 ( 1 )   将 函数 看作 类 ， 称之为 函数 类 （ function   class ） . 函数调用 看 作为 函数 类 的 实例 化 . 常规 类 的 实例 化 一般 是 指 根据 类 描述 给 对象 分配 空间 ， 然后 调用 类 的 构造函数 来 进行 初始化 工作 . 实例 化 的 结果 是 生成 一个 新 对象 ， 这个 对象 一直 保留 在 存储 区域 中 ， 直到 被 显式 地 删除 . 而 函数 类 对象 的 生成 就是 按照 常规 函数调用 规程 或 某 一 函数 ， 一旦 调用 结束 ， 该 函数 类 对象 立刻 消亡 ， 并 不 保留 在 存储 区域 中 . 
 　 　 将 函数 看 作为 类后 ， 我们 发现 ， 对类 进行 实例 化生成 对象 的 语义 完全 可以 不 局限于 常规 的 面向对象 语言 函数调用 的 规定 . 因而 程序员 可以 完全 按照 自己 的 需要 , 改写 函数 类 的 对象 创建 方法 create 和 对象 消亡 处理 方法 terminate , 以此 来 定义 不同 的 对象 创建 和 消亡 规程 . 这样 ， 前 文 所述 的 task ， process ， thread 等 ， 都 可以 用类 来 描述 了 . 
 　 　 ( 2 )   类 可以 多层次 嵌套 . 即 在 一个 类 的 内部 可以 定义 另 一个 类 . 如果 在 类 A 中 定义 了 类 B ， 我们 称类 B 为类 A 的 内嵌 类 ， 而类 A 为类 B 的 外 包类 . 如果 一个 类 C 不是 任何 一个 类 的 内嵌 类 ， 则 称 其 为 自由 类 . 
 　 　 由于 函数 被 看作 类 ， 则 类 中 的 成员 函数 也 可以 看作 嵌套 的 成员 类 . 因此 ， 所有 具有 成员 函数 的 类 都 可以 看作 具有 嵌套 层次 的 类 . 嵌套 类 能够 从 包含 关系 的 角度 反映 出 整个 计算 模型 的 体系结构 . 采用 嵌套 类 结构 ， 可以 比较 方便 地 刻画 并行计算 模型 中 关键字 之间 的 相互 关系 . 
 　 　 具有 嵌套 层次结构 的 类 的 继承 同时 牵涉到 嵌套 类和外 包类 的 双重 继承 ， 它 使得 一个 嵌套 结构 的 性质 可 由 相应 的 嵌套 结构 一致 地 继承 . 嵌套 类 继承 规则 如下 ： 如果 类 A 是 类 C 的 嵌套 类 ， 且类 C 继承 类 D ， 类 A 继承 类 B ， 则 B 必为 一个 自由 类 ， 或类 D 的 嵌套 类 . 如图 1 所示 . 
 
 图 1 　 具有 嵌套 结构 的 类 的 继承 示意图 
 　 　 ( 3 )   auto 机制 . 如果 一个 类 的 构造函数 和析构 函数 被 说明 成为 auto 的 ， 则 在 其 直接 子类 的 构造函数 执行 之前 ， 一定 要 先 执行 该类 的 构造函数 ； 在 其 直接 子类 的 析构 函数 执行 之后 ， 一定 要 执行 该类 的 析构 函数 . 当有 多个 类 组成 一条 继承 关系 链时 ， 由此 类推 ， 递归 执行 所有 的 auto 函数 . 
 　 　 在 引入 auto 机制 的 基础 之上 ， 我们 来 讨论 函数 类 的 继承 问题 . 首先 ， 我们 定义 “ 抽象 函数 类 ” （ abstract   function   class ) , 抽象 函数 类指 的 是 不能 进行 实例 化 （ 即 不能 直接 调用 ） 的 函数 类 ， 它 只能 用来 被 其他 函数 类 继承 . 抽象 函数 类中 没有 类体 ， 只有 构造函数 enter (   ) 和析构 函数 exit (   ) ， 而且 它们 必须 被 声明 为 auto 的 . 这样 ， 根据 auto 的 语义 ， 一个 函数 F1 （ 抽象 的 或非 抽象 的 ） 继承 一个 抽象 函数 F2 ， 指 的 是 在 函数 F1 被 调用 之前 ， 必须 先 调用 F2 的 构造函数 enter (   ) ； 在 函数 F1 被 调用 之后 ， 必须 调用 F2 的 析构 函数 exit (   ) . 
 　 　 ( 4 )   关键字 类 化机制 . 即将 与 传统 并行 语言 中 的 与 并行 机制 相关 的 关键字 通过 类 的 形式 来 描述 . 这 种类 可 被 称为 关键字 类 . 
 　 　 Task , process , thread 等 类 的 描述 并行执行 单元 的 关键字 ， 可以 通过 前 文 所述 的 改变 类 的 对象 创建 和 消亡 规程 的 方法 来 将 它们 封装 成类 . 
 　 　 与 同步 机制 相关 的 关键字 ， 如 synchronized 等 ， 则 可以 将 它们 封装 为 抽象 函数 类 . 例如 ， 我们 将 Java 语言 中 synchronized 关键字 类 化为 抽象 函数 类 Synchronized _ function ， 其隐式 代码 封装 到 该类 的 构造函数 和析构 函数 （ 并 将 它们 说明 为 auto 的 ） . 而后 ， 我们 将 所有 需要 互斥 执行 的 函数 说明 为 抽象 函数 类 Synchronized _ function 的 子类 . 这样 ， 每当 我们 调用 它们 时 ， 就 会 自动 执行 Synchronized _ function 中 定义 的 隐式 代码 ， 达到 互斥 执行 的 目的 （ 具体 细节 请 详见 第 4 节 的 例子 ） . 
 　 　 关键字 类 化机制 的 实质 就是 ， 将 以 关键字 形式 紧密 嵌入 传统 并行 语言 中 的 并行 机制 ， 以 灵活 的 、 可 分离 的 类 的 形式 加以 封装 . 
 　 　 事实上 ， 我们 可以 将 传统 关键字 的 使用 和 关键字 类 的 继承 使用 在 语法 形式 上 等同 起来 ， 使得 仍然 可以 用 类似 关键字 的 方式 来 使用 我们 将 关键字 封装 成 的 类 . 例如 ， “ task   t ” 在 传统 的 语言 中 用 关键字 task 表明 t 是 一个 可 并行 的 任务 . 而 在 我们 的 关键字 类化 的 思想 下 ， 它 是 “ t 是 task 的 一个 子类 ” 或 “ t 继承 task ” 的 一种 语法 缩写 ， 等同于 “ t   is   task ”   或 “ t   inherit   task ” . 
 3 　 并行 框架 
 　 　 运用 上述 的 语言 机制 ， 我们 就 可以 比较 方便 地 描述 并 使用 各种 并行 模型 了 . 这种 描述 和 使用 是 通过 具体 的 并行 框架 来 实现 的 . 框架 技术 是 当前 面向对象 技术 的 研究 热点 ［ 9 , 10 ］ ， 对于 “ 框架 ” 这一 概念 , 目前 尚 没有 统一 的 明确 认识 . 本文 所指 的 并行 框架 ， 就是 为 表达 某种 并行 模型 而 联系 在 一起 的 一组 类 ， 这些 类中 含有 所有 反映 该 模型 的 并行 单位 构成 和 同步 通信 的 机制 . 
 　 　 并行 框架 的 描述 显然 要 涉及 到 一些 与 系统 底层 紧密 相关 的 操作 ， 所以 ， 其 宏观 结构 可以 用 具有 前面 所 给出 的 嵌套 类 等 机制 的 面向对象 语言 来 描述 ， 但 其中 核心 的 隐式 代码 等 操作 必须 利用 系统 提供 的 底层 的 原子 操作 来 实现 . 关键字 类化 是 描述 并行 框架 的 核心 之 所在 ， 将 原来 紧密 嵌入 语言 中 的 并行 机制 “ 抽取 ” 出来 ， 用类 的 形式 加以 封装 . 一种 并行 模型 的 全部 相关 并行 机制 都 应该 包含 在 其 并行 框架 中 ， 这样 一种 模型 才能 完全 地 体现 在 一个 框架 中 . 
 　 　 并行 框架 的 使用 主要 是 通过 前面 所 阐述 的 嵌套 类 继承 来 实现 . 通过 继承 框架 中 的 类 ， 用户 类 可以 具有 并行 框架 中 的 类 与 并行 相关 的 性质 （ 例如 ， 继承 一个 线程 类 就 可以 得到 一个 可 并行执行 的 线程 ） ， 以及 使用 框架 中 的 同步 和 通信 机制 （ 如隐式 代码 ） . 一个 简单 的 多线程 任务 类 的 框架 继承 使用 如图 2 所示 . 
 
 图 2 　 通过 继承 使用 并行 框架 的 示意图 
 　 　 通过 引入 并行 框架 ， 我们 成功 地 将 语言 和 并行 模型 分离 开来 . 一种 面向对象 语言 ， 只要 具有 前文 所 讨论 的 语言 机制 ， 它 本身 无需 任何 并行 机制 ， 只要 结合 系统 低层 操作 开发 出 反映 若干 不同 并行 模型 的 并行 框架 ， 便 可以 通过 使用 这些 框架 来 进行 各种 不同 领域 的 并行程序 设计 ， 从而 达到 以同 一种 语言 支持 不同 并行 模型 的 目的 . 
 　 　 由于 很多 并行 模型 相当 复杂 ， 因而 ， 并行 框架 本身 的 开发 就 不是 一件 简单 的 工作 ， 所以 ， 并行 框架 的 程序设计 完全 可以 从 传统 的 程序设计 中 分离出来 ， 我们 称之为 “ 框架 设计 ” 或 “ 模型 设计 ” . 而 应用 的 并行程序 设计 可以 从 繁重 的 同步 互斥 问题 的 琐碎 细节 中 解脱 出来 ， 直接 利用 框架 程序员 提供 的 高层 并行 框架 来 开发 可靠性 好 、 结构 清晰 、 易于 维护 的 并行 系统 , 如图 3 所示 . 多个 并行 框架 可以 构成 一个 框架 库 ， 由 语言 的 支撑 开发 环境 来 对 它 进行 维护 . 
 
 图 3 　 并行 框架 设计 与 使用 示意图 
 4 　 一个 简单 的 例子 
 　 　 本 节 通过 一个 简单 的 例子 来 说明 上述 思想 . 这个 例子 基于 前述 的 语言 机制 ， 通过 一个 并行 框架 来 支持 简化 了 的 Java 的 多线程 模型 . 为 方便 阅读 ， 框架 的 宏观 结构 用类 C++ 的 伪 代码 来 书写 ， 一些 具体 的 底层 操作 则 用 文字 来 描述 . 
 　 　 简化 了 的 Java 语言 多线程 模型 只 提供 线程 类 、 类 方法 的 Synchronized 关键字 说明 和 不带 任何 参数 的 wait (   ) 和 notify (   ) 方法 （ 只 维护 一个 等待 队列 ） ， 其 含义 都 与 Java 相同 . 其实 这 也 就是 一个 最 简单 的 Monitor 模型 ［ 11 ］ . 假设 系统 底层 提供 了 PV 操作 ， 我们 用 PV 操作 来 实现 关于 Synchronized 关键字 的 全部 隐式 代码 . 
 　 　 我们 的 并行 框架 全部 地 体现 于 一个 Multi _ thread 类中 ， 其中 内嵌 了 支持 并行执行 单元 的 Thread 类 和 支持 同步 机制 的 Synchronized _ class 类 和 . 具体 描述 如下 ： 
 　 　 class   Multi _ thread { 
 　 　 class   Thread { 
 　 　 terminate (   ) {   ∥   改变 对象 消亡 规程 
 　 　 ...   ∥   terminating ,   releasing   occupied   resource 
 　 　 ...   ∥   Notify   Multi _ thread ∷ self   to   kill   the   thread 
 　 　 } 
 　 　 meta   create (   encloser :   Multi _ thread ) {   ∥   改变 对象 创建 规程 
 　 　 ...   ∥   Create   a   thread   according   to   code   in   self .   Run ( ) 
 　 　 ...   ∥   Pushing   the   thread   object   into   the   stack 
 　 　 ...   ∥   Pushing   arguments   into   the   stack 
 　 　 ...   ∥   Get   the   entry   point   of   selfclass 
 　 　 ...   ∥   Set   the   teminating   address 
 　 　 ...   ∥   Notify   encloser   to   register / schedule   the   thread 
 　 　 } 
 　 　 virtual   void   Run (   ) ; ∥   由 子类 重载 
 　 　 }   ∥   End   of   class   Thread 
 　 　 class   Synchronized _ class { 
 　 　 Semaphone   mutex ,   condsem ,   urgent ;   ∥   Semaphone 是 由 系统 提供 的 原子 类型 
 　 　 int   wcount ,   urgentcount ,   condcount   ;   ∥   3 个 计数器 
 　 　 wait (   ) {   ∥   供 子类 使用 的 函数 
 　 　 condcount = condcount + 1 ; 
 　 　 if   ( urgentcount > 0 )   V ( urgent ) ;   else   V   ( mutex ) ; 
 　 　 P ( condsem ) ; 
 　 　 condcount = condcount + 1 ; 
 　 　 } 
 　 　 notify (   ) {   ∥   供 子类 使用 的 函数 
 　 　 urgentcount = urgentcount + 1 ; 
 　 　 if   ( condcount > 0 )   { V ( condsem ) ;   P ( urgent ) } 
 　 　 urgentcount = urgentcount - 1 ; 
 　 　 } 
 　 　 abstract _ function _ class   Synchronized { ∥   将 Synchronized 关键字 类 化为 一个 抽象 函数 类 
 　 　 auto   enter (   ) { P ( mutex ) }   ∥   构造函数 ， 被 说明 为 auto 的 
 　 　 auto   exit (   ) {   ∥   析构 函数 ， 被 说明 为 auto 的 
 　 　 if   ( urgentcount > 0 )   V ( urgent ) ;   else   V ( mutex ) 
 　 　 } 
 　 　 }   ∥   End   of   class   Synchronized 
 　 　 }   ∥   End   of   class   Synchronized _ class 
 　 　 }   ∥   End   of   class   Multi _ thread 
 　 　 在 这里 ， 我们 通过 改写 对象 创建 和 消亡 方法 terminate (   ) 和 create (   ) ， 实现 了 Thread 类 ； 通过 用 PV 操作 实现 隐式 代码 ， 实现 了 Synchronized 类 以及 其外 包 的 Synchronized _ class 类 ； 并 将 它们 组合 在 Multi _ thread 类中 . 使用 这个 框架 时 ， 直接 继承 Multi _ Thread 类来 生成 用户 的 多线程 应用 ， 其中 ， 重载 Thread 类中 的 Run (   ) 函数 生成 用户 所 需 的 线程 类 （ 作为 Java 提供 的 模型 的 简化 ， 只要 一个 线程 类 的 对象 一经 生成 ， 即 自行 启动 执行 ） ； 继承 Synchronized _ class 及其 内嵌 类 Synchronized 来 生成 需要 进行 同步控制 的 对象 的 类 . 
 　 　 下面 就是 一个 包含 产生 者 线程 和 消费者 线程 共享 一个 队列 的 多线程 的 并行 应用 例子 . 
 　 　 Multi _ thread   Producer _ and _ Consumer { ∥   Producer _ and _ Consumer 是 Multi _ thread 的 子类 
 　 　 SharedQueue   sq ;   ∥   先 使用 后 定义 SharedQueue ,   关于 SharedQueue 的 定义 见 下面 . 
 　 　 Thread   producer ( speed :   integer ) { 
 　 　 Run (   ) {   ... ;   sq . Push ( random _ integer ) ;   ...   ∥   以 给定 速度 speed 产生 随机数 放入 共享 队列 sq . } 
 　 　 } 
 　 　 Thread   consumer ( speed :   integer ) { 
 　 　 Run (   ) {   ... ;   sq . Pop (   ) ;   ...   ∥   以 给定 速度 speed 从 共享 队列 sq 中 取出 数 并 处理 . } 
 　 　 } 
 　 　 Synchronized _ class   SharedQueue { ∥   SharedQueue 类 是 Synchronized _ class 类 的 子类 . 
 　 　 Element *   Head = NULL ,   Tail = NULL ; ∥   共享 队列 的 头 指针 和 尾 指针 . 
 　 　 Synchronized   Push ( int   aValue )   { ∥   Push 函数 是 抽象 函数 类 Synchronized 的 一个 子类 . 
 　 　 Element *   tmpNode ; 
 　 　 tmpNode = new   Elment ;   tmpNode . value = aValue ; 
 　 　 if ( Head = = NULL )   Head = tmpNode ;   else   Tail . next = tmpNode ; 
 　 　 tmpNode . next = NULL ;   Tail = tmpNode ; 
 　 　 notify (   ) ; 
 　 　 } 
 　 　 Synchronized   int   Pop (   ) { ∥   Push 函数 是 抽象 函数 类 Synchronized 的 一个 子类 . 
 　 　 int   TmpValue ;   
 　 　 if   ( Tail = = NULL )   wait (   ) ; 
 　 　 TmpValue = Head . value ; 
 　 　 Head = Head . next ; 
 　 　 ∥   此处 省去 释放 Head 指针 所 指向 空间 的 操作 ， 假设 系统 支持 自动 垃圾 收集 . 
 　 　 return   TmpValue ; 
 　 　 } 
 　 　 } ∥   end   of   SharedQueue . 
 　 　 } ∥   end   of   Producer _ and _ Consumer . 
 　 　 Producer _ and _ Consumer   pc _ test ; 
 　 　 pc _ test . producer ( 5 ) ;   ∥   生成 第 1 个 Producer 线程 并 运行 , 以 速度 5 产生 对象 到 共享 队列 中 去 
 　 　 pc _ test . consumer ( 10 ) ;   ∥   生成 第 2 个 Consumer 线程 并 运行 , 以 速度 10 从 共享 队列 中 取出 
 　 　 pc _ test . producer ( 8 ) ;   ∥   生成 第 2 个 Producer 线程 并 运行 , 以 速度 8 产生 对象 到 共享 队列 中 去 
 　 　 上面 这 一个 例子 从 形式 上 来看 ， Thread ， Synchronized _ class 和 Synchronized 像是 作用 于 producer / consumer ， ShardQueue 和 Push / Pop 函数 的 传统 的 关键字 ， 但 实际上 分别 是 producer / consumer 、 类 SharedQueue 和 函数 类 Push / Pop 的 父类 . 这样 ， 通过 继承 ， producer / consumer 是 可 并行执行 的 线程 ； 它们 共享 的 ShardQueue 的 对象 sq 中 隐含 了 与其 读写 同步控制 相关 的 信号量 和 计数器 ； 同时 ， 由于 被 producer / consumer 线程 调用 的 函数 Push / Pop 继承 了 抽象 函数 类 Synchronized ， 在 开始 调用 它们 之前 ， 就 自动 调用 Synchronized 类中 的 auto 构造函数 enter (   ) ; 在 调用 它们 结束 之后 ， 就 自动 调用 Synchronized 类中 的 auto 析构 函数 exit (   ) ; 并且 ， Push / Pop 函数 中 可以 直接 使用 Synchronized _ class 类中 定义 的 wait (   ) 和 notify (   ) 对 SharedQueue 中 的 变量 进行 读写 ， 来 达到 同步 的 效果 . 这 一系列 内部 实现 对 用户 来说 都 是 透明 的 ， 用户 仍然 以 一种 类似 于 传统 的 关键字 的 方式 来 使用 并行 框架 中 提供 的 并行 机制 和 同步 机制 . 
 5 　 结束语 
 　 　 本文 的 主要 工作 在于 ： 引入 了 若干 面向对象 语言 机制 ， 并 采用 并行 框架 技术 将 原来 紧密 嵌入 某 一种 语言 中 的 并行计算 模型 从 语言 中 分离出来 ， 从而 使得 用同 一种 语言 来 支持 多种 并行 模型 成为 可能 . 将 本文 的 思路 拓广 一下 ， 不难 发现 ， 将 表达 计算 模型 的 机制 从 语言 中 抽取 出来 以 框架 的 形式 来 描述 这一 想法 ， 不仅 适用 于 并行计算 领域 ， 同样 可以 用于 分布式计算 和 实时 计算 领域 . 
 框架 技术 的 研究 是 目前 面向对象 技术 研究 的 热点 . 但 从 反映 高层 计算 模型 这一 角度 对 框架 进行 的 探讨 还 为数不多 . 由于 计算机 应用 的 领域 越来越 广 ， 所 需 表达 的 高层 计算 模型 也 越来越 丰富 ， 探讨 各种 不同 框架 的 描述 和 使用 这些 框架 的 面向对象 语言 机制 是 很 有 必要 的 . 这样 ， 才能 大大 地 增强 一种 面向对象 语言 在 某 一 领域 中 解决 各种 不同 问题 的 能力 . 
 　 　 上述 研究成果 已 体现 在 基于 Transframe 语言 的 软件开发 环境 MagicFrame 设计 之中 . MagicFrame 是 我们 和 美国 Motorola 公司 合作 研究 的 项目 , 其 主要 设计 目标 之一 就是 以 框架 的 手段 来 支持 领域 相关 程序设计 . 
 　 　 本文 的 工作 只是 一个 尝试 . 在 对 并行 框架 的 语言 支持 方面 ， 只 给出 了 函数 作为 类 、 嵌套 类 继承 、 关键字 类化 、 auto 机制 等 语言 机制 . 由于 并行计算 模型 复杂 多样 ， 还 需要 有 其他 更 强有力 的 机制 来 支持 并行 框架 的 描述 和 使用 . 下 一步 的 工作 设想 是 ： ( 1 )   从 更 广 的 范围 ， 更 深入 地来 分析 各种 不同 的 并行 模型 ， 从而 给出 更 有效 的 语言 机制 ； ( 2 )   从 实现 的 角度 来 具体 设计 实现 一些 典型 的 并行 模型 的 框架 ； ( 3 )   在 已有 工作 ［ 12 ～ 14 ］ 的 基础 上 ， 讨论 基于 并行 框架 的 软件 规约 与 形式化 方法 . 
 　 　 本文 研究 得到 国家 攀登 计划 项目 基金 、 国家 杰出青年 科学基金 和 与 美国 Motorola 合作项目 基金 资助 . 作者 吕建 ， 1960 年生 ， 博士 ， 教授 ， 博士生 导师 ， 主要 研究 领域 为 软件 自动化 ， 面向对象 语言 与 环境 ， 并行程序 形式化 方法 . 陆陪 ， 1974 年生 ， 硕士生 ， 主要 研究 领域 为 面向对象 语言 与 环境 ， 并行程序 形式化 方法 . 于 大川 ， 1977 年生 ， 硕士生 ， 主要 研究 领域 为 面向对象 语言 与 环境 ， 并行程序 形式化 方法 . David   L .   Shang ， 1958 年生 ， 博士 ， 主要 研究 领域 为 面向对象 语言 与 环境 . 
 　 　 本文 通讯联系 人 : 吕建 ， 南京 210093 , 南京大学 计算机软件 新 技术 国家 重点 实验室 
 作者 单位 ： 吕建   陆陪   于 大川 ： 南京大学 计算机软件 新 技术 国家 重点 实验室 　 南京 　 210093 
 　 　 　 　 　 吕建   陆陪   于 大川 ： 南京大学 计算机软件 研究所 　 南京 　 210093 
 　 　 　 　 　 David   L .   Shang : Motorola 公司 软件系统 研究 实验室 　 美国 
 参考文献 
 ［ 1 ］ Snow   C   R .   Concurrent   Programming .   Cambridge :   Cambridge   University   Press ,   1992 
 ［ 2 ］ Andrews   Gregory   R ,   Schneider   Fred   B .   Concepts   and   notations   for   concurrent   programming .   Computing   Surveys ,   1983 , 15 ( 1 ) : 3 ～ 43 
 ［ 3 ］ Stratford - Collins   M   J .   ADA :   A   Programmer ' s   Conversion   Course .   New   York :   John   Wiley   and   Sons ,   Inc . ,   1982 
 ［ 4 ］ Beaudouin - Lafon   Michel .   Object - oriented   Languages :   Basic   Principles   and   Programming   Techniques .   London :   Chapman   &   Hall ,   1994 
 ［ 5 ］ Arnold   Ken ,   Gosling   James .   The   Java   Programming   Language .   Reading ,   Massachusetts :   Addison - Wesley   Publishing   Company ,   1996 
 ［ 6 ］ Hoare   C   A   R .   Communicating   Sequential   Process .   Englewood   Cliffs ,   NJ :   Prentice   Hall ,   1985 
 ［ 7 ］ Yonezawa   A ,   Briot   J - P ,   Shibayama   E .   Object - oriented   concurrent   programming   in   ABCL / 1 .   In :   Norman   Meyrowitz   ed .   Proceedings   of   ACM   SIGPLAN   Conference ' 86   on   Object - oriented   Programming   Systems ,   Languages   and   Applications   ( OOPSLA ' 86 ) .   New   York :   ACM   Press ,   1986 .   252 ～ 268 
 ［ 8 ］ Goldberg   Adele ,   Robson   David .   Smalltalk - 80 :   The   Language   and   Its   Implementation .   Reading ,   Massachusetts :   Addison - Wesley   Publishing   Company ,   1983 
 ［ 9 ］ Johnson   Ralph   E .   Documenting   frameworks   using   patterns .   In :   Andreas   Paepcke   ed .   Proceedings   of   ACM   SIGPLAN   Conference ' 92   on   Object - oriented   Programming   Systems ,   Languages   and   Applications   ( OOPLSA ' 92 ) .   New   York :   ACM   Press ,   1992 .   63 ～ 76 
 ［ 10 ］ Nierstrasz   Oscar ,   Tsichritzis   Dennis .   Object - oriented   Software   Composition .   Englewood   Cliffs ,   NJ :   Prentice   Hall ,   1995 
 ［ 11 ］ Hoare   C   A   R .   Monitors :   an   operating   system   structuring   conception .   Communications   of   ACM ,   1974 , 17 ( 10 ) : 549 ～ 557 
 ［ 12 ］ L ü   Jian .   Introducing   data   decomposition   into   VDM   for   tractable   development   of   programs .   ACM   Sigplan   Notices ,   1995 , 30 ( 2 ) : 41 ～ 46 
 ［ 13 ］ L ü   Jian .   Developing   parallel   object - oriented   programs   in   the   framework   of   VDM .   In :   McGregor   J   D   ed .   Annals   of   Software   Engineering — — Special   Volume   Object - oriented   Software   Engineering :   Foundations   and   Techniques .   Amsterdam :   Baltzer   Science   Publishers ,   1996 .   199 ～ 211 
 ［ 14 ］ L ü   Jian .   Sound   and   complete   rules   for   data   reification .   Science   in   China   ( Series   E ) ,   1997 , 40 ( 4 ) : 379 ～ 386 
 （ 1998 - 03 - 30 收稿 ） 
