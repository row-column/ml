软件 学报 
 JOURN   AL   OF   SOFTWARE 
 1999 年 　 第 10 卷 　 第 10 期 　 Vol.10 　 No.10 　 1999 
 
 
 
 一种 HPF 程序 的 监测 与 分析 工具 
 都 志辉   汪剑平   程   旭   许卓群   石利霞 
 
 摘要 　 该文 介绍 了 一个 构筑 在 HPF ( high   performance   Fortran ) 编译系统 之上 的 性能 监测 与 性能 分析 工具 . 文章 概述 了 HPF 编译系统 , 讨论 了 性能 分析 的 重要性 及 主要 任务 , 详细 介绍 了 这 一 工具 所 使用 的 性能 分析方法 和 性能 监测 与 性能 数据 收集 方法 , 并 对此 工具 的 使用 效果 进行 了 总结 . 
 关键词 　 性能 分析 , 可视化 , HPF , 性能 监测 , 并行 编译 . 
 中图法 分类号 　 TP314 
 
 A   Tool   for   Monitoring   and   Profiling   HPF   Programs 
 DU   Zhi - hui   WANG   Jian - ping   CHENG   Xu   XU   Zhuo - qun   SHI   Li - xia 
 ( Department   of   Computer   Science   and   Technology   Beijing   University   Beijing   100871 ) 
 Abstract   In   this   paper ,   the   authors   introduce   a   monitoring   and   profiling   tool   which   is   used   in   a   high   performance   Fortran   ( HPF )   compilation   system .   A   brief   overview   of   the   HPF   compilation   system   is   given   first ,   then   the   importance   and   main   tasks   of   performance   analysis   are   discussed ,   the   method   of   performance   profiling   and   monitoring   and   the   method   of   performance   data   collecting   are   given   in   detail .   The   paper   is   concluded   with   a   description   of   the   tool ’ s   role   in   the   HPF   compilation   system . 
 Key   words   Performance   analysis ,   visualization ,   high   performance   Fortran   ( HPF ) ,   performance   monitoring ,   parallel   compilation . 
 
 1 　 HPF 编译器 及其 运行 支持系统 
 　 　 科学 与 工程 计算 中 的 大部分 问题 是 数据 并行 问题 , HPF ( high   performance   Fortran ) [ 1 , 2 ] 是 典型 的 数据 并行 语言 . 由于 本文 所 介绍 的 性能 监测 与 性能 分析 手段 是 构筑 在 我们 开发 的 HPF 编译系统 之上 的 , 故先 简单 介绍 一下 这一 HPF 编译系统 . 
 　 　 一个 编译系统 一般 分为 编译 时 和 运行 时 两 大部分 , 我们 开发 的 HPF 编译器 将 HPF 程序转换 成 FORTRAN77 结点 程序 , 是 一种 源到 源 的 转换 . HPF 编译器 包括 通用 的 编译 前端 和 后 端 变换处理 两 大部分 . 前端 完成 对 HPF 程序 的 语法分析 和 静态 的 语义 检查 . 后端 包括 程序 的 规范化 、 程序 分析 和 程序变换 3 个 阶段 , 完成 通信 的 检测 与 结点 程序代码 的 产生 , 对于 HPF 中 的 每 一条 可 执行 语句 , 都 可以 在 转换 后 的 FORTRAN77 结点 程序 中 找到 对应 的 程序段 , 因此 很 容易 对 HPF 程序 的 每 一条 并行 语句 进行 监测 与 分析 . 运行 时 使用 一个 C++ 开发 的 类库 , 它 包括 分布 数组 的 管理 与 数据通信 两 大部分 . 通过 编译 时 和 运行 时 的 接口 — — 分布 数组 描述 子 DAD ( distributed   array   descriptor ) , 接收 从 编译 时 传递 过来 的 数组 分布 信息 , 完成 对 分布 数组 的 计算 . 通信 操作 是 通过 在 类库 中 直接 调用 MPI [ 3 ] 的 通信 函数 来 实现 的 . 我们 通过 精心设计 , 提出 了 简单 而 有效 的 通信 检测 算法 . 我们 将 通信 分为 3 类 : 无 通信 、 简单 移位 通信 和 其他 通信 , 在 运行 时 支持 类库 中 实现 了 这 3 类 通信 , 并 对 简单 移位 通信 进行 了 特殊 的 优化 处理 , 使 它 具有 很 高 的 通信 效率 . 目前 , 整个 编译系统 已能 正常 运转 , 对 一大 类 常见问题 的 HPF 程序 ( 如 LAPLACE 方程 ) , 本 编译系统 已能 产生 具有 较 高 执行 效率 的 结点 程序 , 整体 运行 性能 良好 . 
 2 　 性能 分析 的 主要 任务 
 　 　 并行程序 设计 与 串行 程序设计 有着 本质 的 区别 , 并行程序 设计 的 编程 与 调试 环境 还 很 不 健全 , 再 加上 并行 编程 本身 所 固有 的 复杂性 , 因而 并行程序 设计 的 难度很大 , 编写 出来 的 程序 不易 调试 与 维护 , 因此 迫切需要 一套 协助 开发 并行程序 的 工具 , 即 需要 并行程序 开发 环境 的 支持 . 高性能 是 并行程序 设计 的 一个 主要 目标 , 因此 , 并行程序 的 性能 分析 工具 [ 4 ] 就 成为 并行 软件开发 环境 中 一个 十分 重要 的 组成部分 . 
 　 　 以 HPF 为 代表 的 高级 并行 语言 的 出现 大大降低 了 并行程序 设计 的 难度 , 提高 了 并行程序 的 开发 效率 , 但 同时 也 带来 了 另 一个 问题 , 即 如何 保证 高级 并行程序 的 执行 效率 . 程序 的 性能 分析 对 高级 并行程序 设计 显得 尤为重要 . 具体地说 , 并行程序 性能 分析 应 能 回答 或 帮助 程序员 回答 以下 问题 . 
 　 　 ( 1 )   该 并行程序 的 性能 如何 ? 即 对 并行程序 作 总体 上 的 性能 评价 , 从而 使 程序开发 人员 知道 该 并行程序 的 性能 是否 达到 给定 的 要求 , 若 未 达到 要求 , 则 需要 进一步 回答 下面 的 问题 . 该 程序 离 要求 的 性能指标 越 远 , 往往 越是 需要 详细 的 性能 信息 来 帮助 程序员 提高 程序 的 性能 . 
 　 　 ( 2 )   该 并行程序 在 性能 方面 的 主要 问题 表现 在 什么 地方 ? 即 性能 定位 . 给出 影响 程序 性能 的 主要 部分 , 即 找出 影响 程序 性能 的 瓶颈 . 对 瓶颈 部分 的 改进 可以 大幅度 地 提高 程序 的 性能 , 因此 , 性能 定位 是 提高 性能 的 重要一环 . 
 　 　 ( 3 )   引起 该 并行程序 性能 瓶颈 的 主要 原因 是 什么 ? 即 性能 的 分析 [ 5 ] . 这个 问题 是 第 ( 2 ) 个 问题 的 继续 , 因为 仅仅 知道 问题 在 什么 地方 还 不够 , 还 需要 知道 在 该处 引起 性能 问题 的 具体 原因 , 比如 是 由于 负载 不 平衡 引起 的 , 还是 由于 通信 量过大 引起 的 . 原因 不同 , 解决 的 办法 自然 也 就 不同 . 
 　 　 以上 是 并行程序 性能 分析 应该 回答 的 问题 , 也 是 它 的 主要 任务 . 根据 我们 调试 HPF 程序 和 HPF 编译程序 的 经验 , 性能 分析 可以 从 HPF 源程序 和 编译 得到 的 SPMD ( single   program   multiple   data ) 结点 程序 两个 方面 来 帮助 我们 提高 HPF 执行程序 的 性能 , 同时 为 改进 我们 的 HPF 编译器 提供 定性 和 定量 的 指导 . 
 　 　 目前 , 并行程序 的 性能 分析 工具 可以 按 其 工作 方式 分为 监测 型 和 预测 型 [ 6 ] 两类 . 监测 型 工具 通过 在 程序 实际 运行 时 收集 性能 数据 , 然后 进行 统计分析 . 预测 型 工具 要求 建立 一个 数学模型 , 用 若干 参数 来 表示 影响 程序 性能 的 因素 , 然后 通过 对 程序结构 进行 静态 分析 , 估计 这些 参数 的 值 , 进而 预测 程序 性能 . 由于 我们 的 HPF 编译器 是 一个 正在 开发 的 编译器 , 许多 性能参数 还 无法 确定 , 因此 很难 建立 一个 数学模型 来 预测 程序 的 性能 , 故而 将 我们 的 性能 分析 工具 设计 成 监测 型 的 , 而 不是 预测 型 的 . 
 3 　 性能 分析 
 　 　 性能 分析 是 在 性能 监测 和 性能 数据 收集 的 基础 上 进行 的 , 但 在 叙述 上 需要 先 介绍 一下 我们 的 性能 分析 工具 的 主要 方面 , 然后 说明 我们 是 如何 针对 这些 方面 对 程序 的 运行 进行 监测 以及 如何 收集 性能 数据 的 . 
 　 　 影响 数据 并行程序 性能 的 主要 因素 有 以下 3 个 方面 . 
 　 　 ( 1 )   负载平衡 . 负载平衡 是 并行计算 特有 的 也 是 影响 并行程序 性能 的 最 主要 的 因素 . 所谓 负载平衡 , 即将 一个 任务 划分 成 几个 大体相当 的 部分 , 让 多个 处理器 共同 承担 . 若 有 的 处理器 负担过重 而 有 的 处理器 负担 过轻 , 就 会 失去 并行计算 的 优势 , 严重 影响 并行程序 的 性能 . 因此 与 负载平衡 有关 的 信息 是 搜集 并行程序 性能 信息 的 一个 重要 方面 . 
 　 　 ( 2 )   通信 . 并行 与 通信 是 一个 问题 不可分割 的 两个 方面 , 并行 往往 引起 通信 , 只有 并行 而 没有 通信 是 极个别 的 情况 . 并行 可以 提高 程序 的 性能 , 而 通信 会 对 程序 的 性能 产生 不良 的 影响 , 一次 通信 的 开销 可能 超过 几十 甚至 几百万 次 计算 的 开销 , 因而 并行程序 设计 中 必须 十分 谨慎 地 处理 通信 问题 , 尽可能 避免 不必要 的 通信 . 通信 问题 又 可 细分 为 通信 次数 过多 、 通信 量过大 、 通信 路径 不合理 等 方面 . 与 通信 有关 的 信息 是 搜集 并行程序 性能 信息 的 另 一个 重要 方面 . 
 　 　 ( 3 )   计算 . 为 达到 一定 的 计算结果 , 可以 采用 不同 的 计算方法 及 手段 , 这 往往 对 程序 的 性能 影响 很大 , 比如 将 循环体 中 的 一个 简单 的 函数调用 改为 “ inline ” 直接 计算 , 可以 成倍 地 提高 程序 的 效率 . 计算 也 是 影响 并行程序 性能 的 一个 重要 方面 . 
 　 　 影响 数据 并行程序 性能 的 因素 还有 很多 . 我们 的 性能 分析 工具 重点 对 这 3 个 方面 进行 性能 监测 , 根据 监测 得到 的 数据 进行 性能 分析 . 
 　 　 监测 与 这些 因素 有关 的 信息 , 并 进行 可视化 ( visualization ) [ 7 ] 是 一种 重要 的 分析 科学 数据 的 方法 . 对 并行程序 性能 数据 的 可视化 可以 用 更 直观 、 更 富于 语义 的 方式 来 展示 性能 数据 . 并行程序 的 性能 数据 往往 数量 大 , 结构复杂 , 为了 有效 地 帮助 程序员 来 理解 和 利用 这些 信息 , 可视化 技术 是 一种 重要 的 表现 手段 . 
 　 　 本文 介绍 的 HPF 可视化 性能 分析 工具 是 我们 整个 HPF 编译系统 的 一个 重要 组成部分 , 它 不仅 能 帮助 HPF 程序开发 者 改进 其 HPF 程序 的 性能 , 而且 同时 为 HPF 编译程序 开发者 提供 帮助 , 改进 编译程序 的 开发 , 以 产生 更 有效 的 HPF 结点 程序 . 
 　 　 我们 的 可视化 性能 分析 工具 的 系统 流程 如图 1 所示 . 它 提供 如下 几个 方面 的 功能 : ( 1 )   中间 表示 结构 及其 与 源程序 对应 关系 的 可视化 ; ( 2 )   数据分布 的 可视化 ; ( 3 )   通信 方向 及 通信量 的 可视化 ; ( 4 )   计算 的 可视化 ; ( 5 )   运行 时 信息 的 统计分析 . 
 
 图 1 　 性能 可视化 工具 系统 流程 
 　 　 通过 可视化 工具 , 可以 展示 源程序 中 任何 语句 的 中间 表示 结构 , 如 数据 分配 语句 的 结构 ; FORALL 语句 的 结构 ; IF , DO 等 控制 语句 的 结构 等 . 
 　 　 所谓 数据分布 可视化 即 是 对 每 一 分布式 数组 , 将 它 在 不同 处理器 上 的 分布 情况 展示 出来 , 如图 2 所示 . 数据分布 有 动态 和 静态 两种 情况 . 有 了 数据分布 信息 , 便 可以 粗略地 了解 各 处理器 的 负载 情况 , 将 它 和 计算 结合 起来 便 更 能 清楚 地 认识 到 数据分布 的 正确性 与 合理性 . 数据 并行 的 一个 重要 方面 是 数据 在 不同 处理器 上 的 划分 , 有 了 数据 划分 的 信息 , 对于 分析 提高 数据 并行性 是 很 有 意义 的 . 
 
 图 2 　 数据分布 示意图 
 　 　 关于 通信 可视化 , 主要 是 展示 哪 两个 处理器 之间 有 通信联系 , 通信量 如何 , 如图 3 所示 . 通过 减少 通信 或 改进 通信 可以 提高效率 . 这部分 的 可视化 数据 是 在 程序运行 后 得到 的 , 是 程序 的 动态数据 . 
 
 图 3 　 通信 示意图 
 　 　 关于 计算 可视化 , 主要 是 指 各 处理器 的 负载 情况 , 比如 将 各 处理器 的 负载 以 Kiviat 图 显示 出来 , 如图 4 所示 , 有 了 这些 信息 , 就 可以 优化 计算 , 提高 并行性 . 
 
 图 4 　 计算 量 Kiviat 图 
 　 　 关于 程序 的 各种 统计 信息 , 主要 的 可视化 方法 包括 表格 显示 、 饼 图 显示 、 棒 图 显示 、 Kiviat 图 显示 等 . 反映 各个 处理器 上 执行程序 的 主要 性能指标 , 包括 运行 时间 和 通信 状况 , 为 程序员 迅速 了解 程序 的 总体 性能 情况 提供 了 一个 方便 的 入口 . 
 　 　 通过 可视化 工具 对 静态 的 数据分布 及 动态 的 通信 和 计算 进行 分析 , 可以 找到 性能 瓶颈 , 既为 HPF 程序员 , 也 为 HPF 编译程序 开发者 提供 了 改进 各自 程序 的 依据 , 有利于 开发 出 高质量 的 HPF 程序 及 HPF 编译程序 . 
 4 　 程序 的 运行 监测 及 性能 数据 的 收集 
 　 　 具体地说 , 我们 是 通过 在 编译 产生 的 FORTRAN77 结点 程序 和 运行 支持 类库 中 增加 性能 监测 语句 来 对 程序 的 运行 进行 监测 和 性能 数据 收集 的 . 
 　 　 A .   监测 收集 的 性能 信息 分为 3 类 : 运行 统计 信息 、 运行 时序 信息 和 数据分布 信息 . 
 　 　 ①   运行 统计 信息 又 分为 整个 程序 的 运行 统计 和 各 并行 语句 的 运行 统计 信息 . 一个 并行 语句 的 运行 统计 信息 是 对 该 语句 的 多次 执行 的 统计 结果 , 包括 该 语句 运行 的 总 时间 、 总 通信量 、 总 循环 次数 等 信息 . 
 　 　 ②   程序运行 时序 可以 用 程序运行 过程 中 状态 的 转变 来 描述 . 我们 把 每次 程序运行 状态 的 转变 定义 为 一个 事件 , 用 事件 类来 描述 . 每个 事件 都 有 一个 表示 当前 程序 状态 的 属性 、 当前 所在 语句 号 以及 时间 邮戳 . 目前 定义 的 程序 状态 包括 串行 计算 、 并行计算 、 发送 、 接收 和 空闲 . 程序 每次 在 这些 状态 之间 的 转换 都 被 记录 为 一次 事件 . 对 发送 和 接收 事件 还 包括 其 通信 目的 、 通信量 以及 通信 方式 等 属性 . 
 　 　 ③   在 HPF 中 数据分布 的 定义 包括 定义 虚拟 处理器 组 、 模板 以及 数组 的 分布 和 对齐 关系 . 性能 分析 引入 3 个类 以 分别 表示 虚拟 处理器 组 、 模板 和 数组 . 对 每个 处理器 都 收集 这 3 类 信息 , 结合 起来 成为 一个 处理器 的 全部 性能 信息 , 也 定义 为 一个 类 . 
 　 　 B .   性能 信息 收集 的 实现 是 由 一个 基于 性能 信息 类库 的 C语言 函数库 ProfLib 完成 的 , 它 提供 了 一组 操纵 类库 数据结构 的 函数 和 一组 直接存取 的 全局变量 , 可以 用 C语言 和 Fortran 语言 调用 . 
 　 　 ①   并行程序 运行 统计 类 对象 的 维护 完全 在 运行 支持 库中 完成 , 程序运行 时间 通过 ProfLib 的 初始化 时间 和 结束 时间 相减 得到 , 通信 方面 的 统计 信息 则 由 并行 语句 运行 时间 加总 而 得 . 
 　 　 ②   并行 语句 运行 统计 类 对象 是 随 程序运行 动态 生成 的 , 对 每 一个 并行 语句 创建 一次 . 在 HPF 产生 的 FORTRAN77 代码 中 , 进入 并行计算 部分 时 调用 ProfPushStack , 将 当前 运行 上下文 设在 该 语句 相应 的 对象 中 , 结束 该 语句 时 , 调用 ProfPopStack , 将 统计 信息 保存 到 该 对象 中 . 由于 要 处理 嵌套 的 情况 , 所以 采用 了 栈 结构 . 统计 信息 是 由 插入 到 运行 支持 类库 中 的 监测 语句 产生 的 . 在 ProfLib 中 定义 了 一组 全局变量 , 对应 于 并行 语句 运行 统计 类 对象 的 各 成员 , 它们 类似 于 一个 多任务 操作系统 中 的 寄存器 组 , 在 ProfPushStack 时 , 把 现场 保存 到 原栈 顶 对象 中 , 把 新 对象 的 统计 信息 恢复 到 寄存器 中 , 以后 的 统计 都 在 全局变量 上 直接 操作 , 直到 ProfPopStack 时 , 再 把 现场 保存 至该 对象 中 , 恢复原 栈顶 对象 的 现场 . 这样 处理 的 好处 在于 , 性能 信息 的 统计 直接 操纵 全局变量 , 只 在 保存 和 恢复 现场 时 调用 类库 方法 , 从而 节省 了 这些 调用 的 开销 . 
 　 　 ③   运行 事件 是 运行 支持 类库 中 通过 调用 ewEvent 函数 而 动态 产生 的 , ProfLib 的 其他 函数 ( 例如 ProfPushStack ) 也 可能 产生 运行 事件 . 在 FORTRAN   77 代码 中 无需 增加 语句 . 
 　 　 ④   数据分布 信息 在 数据分布 定义 函数 中 加以 收集 , 但 需要 在 FORTRAN   77 代码 中 插入 对 ProfLib 的 调用 . 
 　 　 性能 信息 的 收集 在 设计 中要 遵循 的 首要 原则 是 尽可能 降低 收集 代码 的 时间 开销 , 减少 对 程序 性能 的 影响 . 因此 在 设计 中 采取 了 一些 措施 : 尽量 采用 静态数据 , 减少 动态分配 ; 减少 函数调用 , 尽量 把 必需 的 函数 定义 为 inline 型 ; 所有 性能 信息 都 在 内存 中 处理 , 直到 程序 退出 时才 一并 输出 . 
 5 　 相关 工作 
 　 　 文献 [ 4 ] 提出 的 是 一种 监测 型 的 性能 分析 和 调试 工具 , 但 它 主要 针对 的 是 MPP 平台 . 我们 的 工具 不仅 具有 调试 功能 , 而且 不 限定 于 特定 的 平台 . 文献 [ 6 ] 是 预测 型 的 性能 分析 工具 , 它 依赖于 对 算法 和 并行机 的 许多 指标 准确 地 进行 量化 , 通过 建立 一个 简单 的 性能 模型 来 进行 预测 . 我们 计划 在 现在 的 监测 型 工具 的 基础 上 , 对 一些 典型 的 应用 平台 实现 性能 预测 的 功能 . 文献 [ 8 ] 的 工作 重点 是 建立 了 一个 原始 代码 和 优化 后 代码 的 对应 关系 , 而 性能 分析 方面 的 功能 较弱 , 我们 的 工具 的 重点 放在 对 性能 数据 的 监测 和 分析 上 , 而且 也 实现 了 原始 代码 和 优化 后 代码 的 对应 关系 . 
 6 　 性能 分析 对 编译 优化 的 意义 
 　 　 目前 我们 使用 此 HPF 性能 监测 与 性能 分析 工具 , 已 对 HPF 编译 优化 产生 了 显著 作用 . 通过 对 HPF 程序 及其 结点 程序 的 分析 , 找到 了 影响 HPF 程序 性能 的 主要 因素 . 基于 此 工具 得到 的 结论 , 我们 重新 调整 了 我们 的 HPF 编译器 的 优化 重点 和 优化 策略 , 结点 程序 的 性能 有 显著 的 提高 , 用 4 台 机器 测得 的 不同 例子 的 加速 比 增加 了 0.3 ～ 1.2 不 等 . 性能 监测 与 性能 分析 工具 使 我们 对 HPF 程序 及 编译 得到 的 结点 程序 从 定性 到 定量 两个 方面 都 有 了 比较 具体 而 深刻 的 认识 , 而且 对 编译程序 的 优化 重点 也 做到 了 心中有数 , 这些 都 归功于 这一 工具 反馈 给 我们 以 直观 形象 的 性能 信息 , 使 我们 能够 有 针对性 地 提高 HPF 程序 的 性能 . 
 致谢   感谢 李昱 和 郑耿斌 硕士 为 本文 的 工作 所 付出 的 辛勤劳动 , 感谢 北京大学 计算机科学 与 技术 系 并行 编译 研究组 的 全体 老师 和 同学 . 
 注释 ： 本文 研究 得到 国家 重大 基础 研究 攀登 计划 基金 和 国家 863 高科技 项目 基金 资助 。 
 作者简介 ： 都 志辉 ： 1970 年生 , 博士后 , 主要 研究 领域 为 并行计算 , 科学计算 可视化 , 地理信息系统 
 　 　 　 　 　 汪剑平 ： 1964 年生 , 博士生 , 主要 研究 领域 为 并行 编译 , 并行算法 . 　 
 　 　 　 　 　 程旭 ： 1966 年生 , 副教授 , 主要 研究 领域 为 并 处理 , 分布式计算 , 计算机 体系结构 
 　 　 　 　 　 许卓群 ： 1936 年生 , 教授 , 博士生 导师 ， 主要 研究 领域 为 科学 可视化 ， 空间 数据分析 与 
 　 　 　 　 　 　 　 　 　 智能 决策 ， 并行计算 
 　 　 　 　 　 石利霞 ： 1973 年生 , 硕士 , 主要 研究 领域 为 并 编译 
 作者 单位 : 北京大学 计算机科学 与 技术 系   北京   100871 
 　 　 　 　 　 E - mail :   duzh @ bigfoot . com 
 参考文献 
 1 　 High   Performance   Fortran   Forum .   High   performance   Fortran   language   specification .   
 　 　 Version   1.0 ,   Houston ,   Texas :   Rice   University ,   1993 
 2 　 Fortran 工作组 . 标准 Fortran   90 语言 程序设计 . 北京 : 学苑 出版社 , 1994 
 　 　 ( Fortran   Group .   Standard   Fortran   90   Programming   Language .   Beijing :   Xueyuan   
 　 　 Publishing   House ,   1994 ) 
 3 　 Snir   M ,   Otto   S ,   Lederman   S   H   et   al .   MPI :   the   Complete   Reference .   New   York :   MIT   
 　 　 Press ,   1997 .   http :   / / www . mpi - forum . org / ,   Message   Passing   Interface   ( MPI )   Forum   
 　 　 Home   Page 
 4 　 Wisuler   R ,   Oberhuber   M ,   Krammer   S   et   al .   Interactive   debugging   and   performance   
 　 　 analysis   of   massively   parallel   applications .   Parallel   Computing ,   1996 , 22 
 　 　 ( 3 ) : 415 ～ 442 
 5 　 Fahringer   T .   Estimating   and   optimizing   performance   for   parallel   programs .   
 　 　 Computer ,   1995 , 28 ( 11 ) : 47 ～ 56 
 6 　 Driscoll   M   A ,   Daasch   R   W .   Accurate   prediction   of   parallel   program   execution   time . 
 　 　 Journal   of   Parallel   and   Distributed   Computing ,   1995 , 25 ( 1 ) : 16 ～ 30 
 7 　 Heath   M   T ,   Malony   A   D ,   Rover   D   T .   Parallel   performance   visualization :   from   
 　 　 practice   to   theory .   IEEE   Parallel   and   Distributed   Technology ,   1995 , 3 ( 4 ) : 44 ～ 60 
 8 　 Shaun   Kaneshiro ,   Tatsuyn   Shindo .   Profiling   optimized   code :   a   profiling   system   for 
 　 　 an   HPF   compiler .   In :   Proceedings   of   the   10th   International   Parallel   Processing   
 　 　 Symposium .   1996 .   469 ～ 473 
 收稿 日期 ： 1998 - 01 - 20 修稿 日期 ： 1998 - 11 - 02 
