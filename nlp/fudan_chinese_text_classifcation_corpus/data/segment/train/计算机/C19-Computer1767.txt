软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 4 期   第 10 卷   Vol.10   No.4   1999 
 
 
 
 利用 不动点 求解 子句 逻辑 推演 的 Petri 网 模型 
 林 　 闯 　 吴建平 
 摘要 　 文章 研究 了 子句 逻辑 推演 的 Petri 网 模型表示 和 不动点 求解 方法 . 基于 四值 逻辑 和 冲突 变迁 的 概念 , 可用 Horn 子句 的 Petri 网 模型 方法 来 构造 非 Horn 子句 的 Petri 网 模型 . 逻辑 推演 的 基本 方法 之一 就是 寻找 逻辑 赋值 的 不动点 . 该文 显示 了 一种 基于 Petri 网 模型 的 子句 逻辑 不动点 求解 算法 , 比 现有 算法 更为 有效 . 
 关键词 　 逻辑 推演 , 子句 , Petri 网 , 不动点 , 四值 逻辑 . 
 中图法 分类号 　 TP301 
 Logical   Inference   of   Clauses   in   Petri   Net   Models   Using   Fixpoint 
 LIN   Chuang1   WU   Jian - ping2 
 1   ( Information   Science   Institute 　 State   Information   Center   Beijing   100045 ) 
 2 ( Department   of   Computer   Science   and   Technology   Tsinghua   University   Beijing   100084 ) 
 Abstract 　   The   Petri   net   models   of   the   clauses   for   logical   inference   using   fixpoint   are   studied   and   the   four - valued   logic   and   the   conflict   transition   concept   are   introduced .   The   authors   can   construct   the   Petri   net   models   of   non - Horn   clauses   based   on   the   models   of   Horn   clauses .   Finding   the   fixpoint   of   logical   values   is   one   of   the   fundamental   methods   for   logical   inference .   In   this   paper ,   an   algorithm   for   the   fixpoint   based   on   the   Petri   net   models   of   values   is   presented ,   and   it   is   more   efficient   than   the   previous   ones . 
 Key   words 　 Logical   inference ,   clauses ,   Petri   net ,   fixpoint ,   four - valued   logic . 
 　 　 逻辑 推演 是 人工智能 的 基础 之一 , 推演 过程 就是 确定 一个 给定 的 命题 是否 由 所 收集 的 一组 事实 和 子句 规则 所 蕴含 . 在 推理 研究 中 , 已有 多种 模型 方法 来 表示 知识 和 推理 过程 . Petri 网 之所以 被 选来 模拟 逻辑 推演 , 不 但是 因为 Petri 网 具有 很 好 的 模型 描述 静态 和 动态 特性 — — 并发 、 并行 和 冲突 , 而且 也 因为 Petri 网有 很 好 的 数学分析 技术 , 可以 给出 问题 求解 的 算法 . 将 逻辑 推演 问题 转换成 Petri 网 模型 , 并用 Petri 网 特有 的 分析方法 去 处理 逻辑 推演 问题 , 可以 增强 用 不同 和 有效 的 方法 处理 这 类 问题 的 机会 . 
 　 　 Petri 网已 被 用来 描述 Horn 子句 的 逻辑 推演 ［ 1 , 2 ］ 以及 一组 子句 的 不一致性 的 检查 ［ 3 ］ . Murata 等 人 ［ 4 ］ 已经 给出 了 从 一组 Horn 子句 转换成 一个 Petri 网 模型 的 算法 过程 , 而且 建立 了 一组 Horn 子句 不 一致 的 必要条件 和 充分条件 . 他们 给出 了 Horn 子句 的 逻辑 推演 Petri 网 模型 的 不 变量 求解 算法 ［ 1 ］ . 
 　 　 在 文献 ［ 5 ］ 中 , Petri 网 用于 非 Horn 子句 的 逻辑 推演 模型 , 但是 没有 提供 有效 的 推演 算法 , 对负 命题 的 表示 也 不 确切 . 在 本文 中 , 我们 要 扩充 Horn 子句 Petri 网 模型 的 表示 方法 , 使 之 适应 非 Horn 子句 模型 的 表示 . 基于 我们 的 非 单调 逻辑 推演 模型 的 工作 ［ 6 ］ , 可以 引入 四值 逻辑 , 给 标记 分配 4 种 不同 的 颜色 以 表达 命题 的 不同 赋值 . 引入 冲突 变迁 的 概念 , 用以 解决 析取 子句 ( 异或 表达式 ) 的 模型表示 . 不动点 的 概念 在 逻辑 推演 的 研究 中有 重要 的 作用 , 逻辑 推演 的 过程 可以 看做 是 不动点 的 形成 过程 . 不动点 可以 用 在 逻辑 编程 理论 的 表示 语义 方法 中 . 在 Petri 网 逻辑 模型 中 , 不动点 可 由 某个 标识 来 表示 , 求解 不动点 就 变成 求解 标识 的 最大 赋值 . 
 1 　 定义 和 术语 : 网 、 子句 和 真值 
 　 　 这 一节 将 引入 Petri 网 、 子句 和 四值 逻辑 的 相关 概念 和 术语 . 
 1.1 　 Petri 网 
 　 　 我们 仅非 形式 地 描述 Petri 网 的 一般 相关 的 概念 , 有关 Petri 网 的 定义 和 术语 可 参见 文献 ［ 7 ］ . 
 　 　 Petri 网由 位置 和 变迁 两类 结点 构成 . 这 两类 结点 之间 由 有 向 弧 连结 , 弧标 权重 在 逻辑 模型 中为 “ 1 ” , 标记 在 位置 中 的 分布 形成 标识 . 一个 变迁 在 其 输入 位置 中 都 至少 保留 有 一个 标记 的 情况 下 , 可能 实施 . 变迁 的 实施 , 使 其 输入 位置 中 都 减少 一个 标记 , 且 使 其 输出 位置 中 都 增加 一个 标记 . 
 　 　 变迁 的 实施 导致 标识 的 变化 , 由 一个 标识 达到 一个 后继 标识 . 标识 的 这种 变化 也 可 由 网 的 关联矩阵 C 来 表达 . 关联矩阵 C 又 可 分别 由 输入 矩阵 I 和 输出 矩阵 O 来 表示 . 关联矩阵 的 列 元素 由网 的 每个 位置 构成 , 行 元素 由网 的 每个 变迁 构成 . 在 矩阵 I 中 , 当 位置 Pj 到 变迁 Ti 有 弧 相连 结 , 则 Iij 元素 为 弧标 , 否则 为 零 . 在 矩阵 O 中 , 当 变迁 Ti 到 位置 Pj 有 弧 相连 结 , 则 Oij 元素 为 弧标 , 否则 为 零 . 关联矩阵 C = O - I . 用 Ct 表达 关联矩阵 与 变迁 t 相关 的 行 , 则 一个 变迁 t 在 标识 M 下 实施 达到 后继 标识 M ′ 可 表达 为 M ′ = M + Ct , 或者 M ′ = M + Ot - It . 在 Petri 网 图形 表示 中 , 我们 用 线段 表示 变迁 , 用圆 表示 位置 , 位置 中 的 黑点 表示 标记 （ token ) . 
 1.2 　 子 　 句 
 　 　 在 一阶 逻辑 推演 研究 中 , 一个 子句 定义 ( wff ) 有 如下 形式 : 
 B1 , ... , Bq  A1 , ... , Ap ,   或 　 A1 ∧ ... ∧ Ap → B1 ∨ ... ∨ Bq , 
 其中 Ai 和 Bi 都 是 原子公式 ,  或 → 表示 蕴含 , p ≥ 0 , q ≥ 0 . 这个 子句 意味着 , 如果 A1 和 ... 和 Ap 都 是 真 , 那么 , B1 或 ... 或 Bp 为 真 . 
 　 　 一个 Horn 子句 要求 : q = 1 或 q = 0 且 Ai ( 1 ≤ i ≤ p ) 和 B1 （ 如果 有 ） 是非 负 公式 . 在 一般 子句 中 没有 这两点 限制 . 
 　 　 逻辑 推演 就是 确定 一个 给定 的 公式 是否 由 一组 子句 所 蕴含 . 逻辑 推演 的 证明 过程 一般 可以 有 两种 方法 : 
 　 　 ( 1 )   推测 一组 子句 集 L 是否 蕴含 Q 就 检测 L 和   Q 的 一致性 , 如果 不 一致 , 就 证明 L 蕴含 Q ; 否则 , L 就 不 蕴含 Q （ 此种 方法 的 应用 已 在 另 文中 详细 论述 ） . 
 　 　 ( 2 )   使用 语义 函数 方法 , 将 逻辑 推演 看做 从 初始 公式 赋值 状态 出发 , 通过 子句 规则 不断 赋值 的 过程 , 亦 即 , 知识 不断 增加 的 过程 , 最后 达到 一个 赋值 不动点 , 不动点 中 包含 着 所有 蕴含 的 信息 . 
 1.3 　 四值 逻辑 
 　 　 我们 采用 Sandewell 对四值 逻辑 进行 描述 的 记号 和 术语 ［ 8 ］ . 假定 一个 4 种 真值 的 集合 J = { u , t , f , k } , 且 具有 偏序 关系 ≤ , 如图 1 所示 . 
 
 图 1   四值 真值 组成 的 格 
 　 　 我们 可 有 两个 集合 : 一个 语言 集 L , 它 的 元素 是 公式 ; 一个 真值 集 J . 赋值 V : L → J 是 一个 连续 单调 增加 的 函数 , 它 也 有 偏序 关系 ≤ , 定义 如下 : 
 
 　 　 一个 赋值 可以 表示 为 知识 或 信念 的 一个 状态 , 在 这个 状态 中 , 命题 可能 是 真 ( t ) 、 假 ( f ) 、 不 知道 ( u ) 或 矛盾 ( k ) . 状态 （ 赋值 ） 之间 的 偏序 关系 表明 状态 之间 包含 信息 的 多少 . 如果 V ≤ V ′ 就 表示 （   x ) V ( x ) = u 且 （ V ′ ( x ) = t ) ∨ ( V ′ ( x ) = f ) 以致 满足 于 ( x ) V ( x ) ≤ V ′ ( x ) , 亦 即 , 一些 不 知道 的 命题 后来 变为 知道 ( t 或 f ) . 
 　 　 在 逻辑 推演 过程 中 , 几个 知识 状态 的 合并 对应 着 4 种 真值 格 的 最小 上 界 操作 . 最小 上 界 操作 意味着 : 一个 命题 被 某个 规则 赋值 为 u , 而 被 其他 规则 赋值 为 t ( 或 f ) . 那么 , 这个 命题 就 被 赋值 为 t ( 或 f ) , 亦 即 , 操作 的 目的 是 取 直接 上界值 . 由于 本文 不 讨论 一组 子句 存在 矛盾 的 情况 , 所以 在 Petri 网 逻辑 模型 中仅 考虑 标记 到 { u , t , f } 3 种 真值 的 映射 . 
 2 　 子句 Petri 网 模型 
 　 　 文献 ［ 2 , 4 ］ 已经 给出 如何 将 一组 Horn 子句 转换成 Petri 网 模型 的 算法 . 文献 ［ 3 , 5 ］ 也 给出 了 基于 四值 逻辑 的 Petri 网 模型 . 现在 给出 一般 子句 转换成 Petri 网 模型 的 规则 . 
 子句 的 表达形式 为 
 A1 ∧ ... ∧ Ap → B1 ∨ ... ∨ Bq . ( 1 ) 
 
 　 　 将 公式 （ 1 ） 的 左部 称为 前提 , 右部 称为 结论 . 当 p = 0 时 , 右部 表现 为 事实 ; 当 q = 0 时 , 左部 表现 为 求证 蕴含 的 公式 . 
 　 　 我们 分 两种 情况 讨论 子句 向 Petri 网 的 转换 . 
 　 　 ( 1 )   当 q ≤ 1 时 , 使用 下列 规则 进行 子句 向 Petri 网 模型 的 转换 : 
 　 　 . 一个 变迁 表示 一个 子句 ; 事实 被 表示 为源 变迁 （ 即 没有 输入 位置 的 变迁 ） ; 
 　 　 . 一个 不同 的 命题 使用 一个 不同 的 位置 来 表示 ; 
 　 　 . 前提 命题 表示 为 变迁 的 输入 位置 , 结论 命题 表示 为 变迁 的 输出 位置 ; 
 　 　 . 与 正 命题 位置 相关联 的 弧 , 标注 为 “ t ” ; 与 负 命题 位置 相关联 的 弧 , 标注 为 “ f ” . 
 　 　 例 1 : 给定 一组 子句 L : 
 　 　 
 　 　 我们 可得 L 的 Petri 网 模型 和 输出 矩阵 , 如图 2 所示 . 
 
 图 2   例 1 子句 所 对应 的 Petri 网 模型 和 输出 矩阵 
 　 　 在 子句 所 对应 Petri 网 模型 中 , 由于 其 弧标 引入 了 t 和 f 以 表示 相应 颜色 标记 的 流动 , 隐含 着 标记 有 了 真值 颜色 . 在 位置 没有 设置 标记 时 , 就 假定 位置 包含 着 颜色 为 u 的 标记 . 变迁 实施 的 条件 要求 输入 位置 包含 与 弧标 相应 值 的 标记 , 变迁 实施 后 产生 与 输出 弧标 相应 值 的 标记 . 在 假定 不 存在 矛盾 的 情况 下 , 实施 结果 同 输出 位置 中 的 原有 标记 无关 . 
 　 　 ( 2 )   在 q ＞ 1 时 , 即 子句 有 多个 析取 结论 命题 时 , 每个 析取 操作 可能 有 3 种 语义 表达方式 . 这里 用 一个 例子 加以 说明 , 有 一个 子句 : 
 　 　 A ∧ B → C ∨ D . 
 它 可能 包括 3 种 表达 : 
 　 　 ( a )   A ∧ B → D / C （ 同 或 ） ; 
 　 　 ( b )   A ∧ B → D ∧ C （ 与 ） ; 
 　 　 ( c )   A ∧ B → D   or   C （ 异或 ） . 
 　 　 在 前 两种 表达式 中 , 我们 的 系统 中 的 每 一个 子句 可以 看做 由 两个 子句 组成 , 分别 是 A ∧ B → C 和 A ∧ B → D , 它们 可 由 前面 所述 的 方法 转换成 Petri 网 模型 . 对于 后 一种 情况 , 两个 结论 C 和 D 不能 同时 成立 , 它们 处于 冲突 中 , 可以 引入 一个 判定 位置 和 两个 冲突 变迁 表示 这个 子句 的 两种 异或 情况 , 如图 3 表示 . 
 
 图 3   一个多 结论 子句 的 Petri 网 模型 
 　 　 在 图 3 中 , 位置 X 为 逻辑 判定 位置 , 它 的 输出 变迁 为 逻辑 冲突 变迁 , t2 和 t3 永远 处于 逻辑 冲突 中 , 亦 即 , 一旦 一个 变迁 被 选择 实施 , 处于 逻辑 冲突 中 的 其他 变迁 永不 再 被 实施 . 这种 定义 的 逻辑 冲突 变迁 与 一般 Petri 网 冲突 变迁 的 定义 不同 . 一般 Petri 网 模型 中 , 冲突 与 标记 存在 情况 相关 , 冲突 变迁 不 永远 冲突 . 为了 表示 这种 冲突 特性 , 当 模型 中 包含 相互 逻辑 冲突 变迁 时 , 我们 可 将 其 分解成 多个 不 含 相互 逻辑 冲突 变迁 的 模型 , 也 就是 , 在 每个 模型 中 的 每 一组 冲突 变迁 中仅 选择 一个 变迁 , 删除 其余 变迁 以及 连接 弧 . 每个 模型 的 逻辑 推演 结果 为 异或 关系 . 
 　 　 因此 , 在 q ＞ 1 时 , 只要 子句 的 每个 析取 结论 之间 的 关系 是 确定 的 , 我们 就 可以 通过 子句 的 分析 和 引入 逻辑 判定 位置 及 逻辑 冲突 变迁 来 完成 子句 向 Petri 网 模型 的 转换 . 
 　 　 例 2 : 给定 一组 子句 L : 
 　 　 
 　 　 按照 上述 转换方法 , 子句 集 L 可以 写成 子句 集 L ′ : 
 　 　 
 其中 X 是 引入 的 逻辑 判定 命题 . 
 　 　 L ′ 相应 的 Petri 网 模型 可 分解成 不 含 相互 冲突 变迁 的 两个 Petri 网 模型 , 如图 4 所示 . 
 
 图 4 　 例 2 子句 集 的 Petri 网 模型 
 3 　 子句 模型 逻辑 推演 的 不动点 计算 
 　 　 在 子句 的 Petri 网 模型 中 , 信息 状态 对应 着 网 的 一个 标识 , 一次 赋值 可以 和 变迁 的 一次 实施 对应 , 一个 推演 关系 对应 着 网 标识 之间 的 一种 可 达 关系 . 由于 在 逻辑 推演 中 , 命题 的 赋值 只 单调 增加 ; 而 在 Petri 网中 , 位置 的 标记 既 可 增加 又 可 减少 , 因此 , 在 我们 的 子句 Petri 网 模型 中 , 定义 标识 之间 的 可达 关系 为 
 M ［ ti ＞ M ′ → M ′ = Max ( M , Oti ) ］ . ( 2 ) 
 
 　 　 实际上 , 公式 （ 2 ） 所 描述 的 直接 可 达 关系 属于 一般 Petri 网 定义 中 的 直接 可 达 关系 . 因为 子句 Petri 网 模型 初始 标识 为 0 , 标记 是 由 事实 变迁 生成 的 . 一 位置 中 的 标记 得而复失 , 可 由 事实 变迁 以及 其他 变迁 的 实施 而 失去 再来 . 将 间接 可 达 压缩 为 直接 可 达 , 可以 简化 标识 不动点 的 计算 . 
 　 　 下面 分 两种 情况 来 讨论 子句 Petri 网 模型 的 可达树 构造 算法 , 亦 即 , 逻辑 推演 不动点 的 计算方法 . 
 　 　 （ 1 ）   当 模型 中 不 包含 相互 逻辑 冲突 变迁 时 , 可以 有 如下 算法 . 
 　 　 算法 1 . 
 　 　 输入 : 一个 没有 相互 逻辑 冲突 变迁 的 子句 Petri 网 模型 . 
 　 　 输出 : 模型 可 达 标识 的 不动点 . 
 　 　 Begin 
 　 　 　 初始 Newnode 为 0 向量 { 每个 分量 都 为 u } ; 
 　 　 　 Repeat 
 　 　 　 　 Currentnode : = Newnode ; 
 　 　 　 　 For 每 一个 能 在 Currentnode 下 实施 的 ti ; 
 　 　 　 　 Begin 
 　 　 　 　 　 　 实施 ti 且 产生 直接 后继 标识 Mi ; 
 　 　 　 　 　 　 Newnode : = Max ( Newnode , Mi ) ; 
 　 　 　 　 End ; 
 　 　 　 Until ( Currentnode = Newnode ) ; 
 　 　 　 return ( Currentnode ) ; 
 　 　 End . 
 　 　 让 我们 举 一个 例子 来 显示 上述 算法 . 
 　 　 例 3 : 对于 图 2 中 的 Petri 网 模型 , 其可达 标识 的 不动点 计算 过程 如下 : 
 　 　 
 　 　 最后 可 达 标识 即 为 模型 标识 的 不动点 . 
 　 　 定理 1 .   算法 1 求得 的 模型 最后 可 达 标识 , 即 为 模型 对应 子句 集 L 的 逻辑 推演 的 不动点 . 
 　 　 证明 : 因为 M ［ ti ＞ M ′ → M ′ = Max ( M , Oti ) , 又 因为 M ［ ti ＞ M ′ 且 M ［ tj ＞ M ″ → Newnode = Max ( M ′ , M ″ ) , 所以 , M 与 Newnode 的 可达 关系 符合 逻辑 推演 关系 . 
 　 　 由于 M0 = 0 且 事实 变迁 都 是 源 变迁 , 因此 事实 状态 可达 . 
 在 算法 1 中 , Newnode 的 值 在 所有 可能 发生 变迁 实施 下 不能 再 增加 , 即 Currentnode = Newnode , 亦 即 表明 , Currentnode 为 逻辑 推演 的 不动点 . 
 　 　 现对 算法 1 的 复杂性 进行 分析 . 假定 Petri 网 模型 有 n 个 变迁 和 m 个 位置 , 那么 , 每 一个 标识 最小 上界 的 计算 量 为 m , 在 每个 标识 下 最 多 可能 有 n 个 变迁 实施 . 可达集 最多 包含 n 个 标识 , 因此 , 算法 1 的 计算 复杂性 为 O ( n2 * m ) . 
 　 　 为了 进一步提高 算法 的 效率 , 我们 可以 改进 算法 1 . 当 子句 集合 本身 存在 矛盾 时 , 命题 一经 赋值 就 不再 改变 . 换句话说 , 在 我们 的 子句 Petri 网 模型 的 推演 中 , 一个 变迁 的 一次 实施 就 固定 了 它 输出 位置 命题 的 值 , 在 以后 的 推演 中 不再 改变 . 因此 , 在 固定点 的 求解 中 , 每一 变迁 实施 后 , 就 可 从 变迁 集 T 中 删除 . 
 　 　 算法 2 . 
 　 　 输入 : 一个 没有 相互 逻辑 冲突 和 矛盾 的 子句 Petri 网 模型 . 
 　 　 输出 : 模型 可 达 标识 的 不动点 . 
 　 　 Begin 
 　 　 　 初始 Newnode 为 0 向量 { 每个 分量 为 u } ; 
 　 　 　 Repeat 
 　 　 　 　 Currentnode : = Newnode ; 
 　 　 　 　 For 每 一个 能 在 Currentnode 下 实施 的 ti ∈ T ; 
 　 　 　 　 Begin 
 　 　 　 　 　 　 实施 ti 且 产生 直接 后继 标识 Mi ; 
 　 　 　 　 　 　 T : = T - ti ; 
 　 　 　 　 　 　 Netwnode : = Max ( Newmode , Mi ) ; 
 　 　 　 　 End ; 
 　 　 　 Until ( Currentnode = Newnode ) ; 
 　 　 　 Return ( Currentnode ) ; 
 　 　 End . 
 　 　 算法 2 的 复杂性 可 降低 为 O ( n * m ) , 与 Onaga 等 人 的 子 标识 可 达 算法 （ 其 算法 复杂性 为 O ( m * 2n ) 或 O ( m2 * n ) ) ［ 9 ］ 相比 , 获得 的 信息 更 多 , 算法 更为 简单 . 
 例 3 的 计算 过程 可简化 为 : 
 　 　 
 　 　 （ 2 ）   当 模型 中 包含 相互 逻辑 冲突 变迁 时 , 我们 可 将 模型 分解成 多个 不 含 相互 逻辑 冲突 变迁 的 模型 , 然后 再 使用 算法 1 或 算法 2 计算 模型 标识 的 不动点 . 
 　 　 例 4 : 图 4 包括 了 两个 分解 后 的 Petri 网 模型 , 它们 的 不动点 计算结果 如下 : 
 
 　 　 在 以上 求解 不动点 的 过程 中 , 我们 采用 的 是 向前 推演 算法 , 从 初始 标识 M0 = 0 出发 , 推出 标识 的 不动点 . 我们 也 可以 颠倒 Petri 网 模型 所有 弧 的 方向 , 给 求证 的 目标 命题 位置 设置 标记 值 , 然后 采用 相同 的 算法 进行 向 后 推演 模型 的 不动点 计算 . 当 求得 的 不动点 有关 事实 命题 的 赋值 与 已知 事实 的 真值 有 偏序 关系 且 小于 等于 已知 值时 , 目标 得证 , 否则 , 目标 不 成立 . 
 　 　 例 5 : 图 2 的 子句 Petri 网 模型 的 向 后 推演 模型 及 不动点 计算 过程 可如图 5 所示 . 
 
 图 5 
 　 　 获得 的 不动点 中 的 A 和 B 命题 赋值 与 已知 事实 值 相同 , 因此 结论 D 得证 . 
 在 一般 情况 下 , 向 后 推演 比 向前 推演 更 有效 . 在 推理 系统 比较 巨大 和 复杂 时 , 亦 即 事实 和 推理 规则 比较 多时 , 这种 差异 就 更 明显 . 究其原因 , 在 向前 推演 中 , 事前 我们 并不知道 哪些 事实 和 规则 与 问题 有关 , 只能 从大 范围 的 事实 出发 进行 推演 , 势必 造成 冗余 计算 ; 而 在 向 后 推演 中 , 可以 从 相关 的 目标 出发 进行 推演 , 无关 的 推演 规则 和 事实 不必 索引 , 这样 可以 减少 不必要 的 计算 . 换句话说 , 向前 推演 盲目性 大 , 向 后 推演 目的性 强 . 
 4 　 结   论 
 　 　 本文 展示 了 子句 Petri 网 模型表示 逻辑 推演 不动点 的 两种 推演 执行 方法 : 向前 推演 和 向 后 推演 以及 它们 的 算法 和 例子 . 本文 是 文献 ［ 1 ］ Horn 子句 Petri 网 模型 逻辑 推演 工作 的 继续 , 其 主要 贡献 是 : （ 1 ）   提供 了 子句 Petri 网 模型 逻辑 推演 的 不动点 方法 ; （ 2 ）   提供 了 不动点 求解 的 有效 算法 ; （ 3 ）   给出 了 向前 推演 和 向 后 推演 的 模型表示 和 推演 方法 . 本文 的 研究成果 对 一阶 谓词 逻辑 的 推演 也 是 适用 的 , 限于 篇幅 , 这里 不再 加以 描述 . 
 * 　 本文 研究 得到 国家自然科学基金 资助 . 
 本文 通讯联系 人 : 林闯 , 北京   100045 , 北京 三里河 路 58 号 国家信息中心 经济 与 技术 研究所 
 作者简介 　 林闯 , 1948 年生 , 博士 , 研究员 , 主要 研究 领域 为 系统 性能 评价 , 随机 Petri 网 , 计算机网络 , 逻辑推理 . 
 　 　 　 　 　 吴建平 , 1953 年生 , 博士 , 教授 , 博士生 导师 , 主要 研究 领域 为 计算机网络 与 协议 测试 , Internet . 
 作者 单位 ： 林闯 ( 国家信息中心 经济 与 技术 研究所   北京   100045 ) 
 　 　 　 　 　 吴建平 ( 清华大学 计算机科学 与 技术 系   北京   100084 ) 
 参考文献 
 　 1 　 Lin   C ,   Chandhury   A ,   Whinston   A   B   et   al .   Logical   inference   of   Horn   clauses   in   Petri   net   models .   IEEE   Transactions   on   Knowledge   and   Data   Engineering ,   1993 , 5 ( 3 ) : 416 ～ 425 
 　 2   林闯 . Petri 网 用于 Horn 子句 的 逻辑 推演 . 软件 学报 , 1993 , 4 ( 4 ) : 32 ～ 37 
 ( Lin   Chuang .   Application   of   Petri   nets   to   logical   inference   of   Horn   clauses .   Journal   of   Software ,   1993 , 4 ( 4 ) : 32 ～ 37 ) 
 　 3   Murata   T ,   Subrahmanian   V   S ,   Wakayama   T .   A   Petri   net   model   for   reasoning   in   the   presence   of   inconsistency .   IEEE   Transactions   on   Knowledge   and   Data   Engineering ,   1991 , 3 ( 3 ) : 281 ～ 292 
 　 4   Peterka   G ,   Murata   T .   Proof   procedure   and   answer   extraction   in   Petri   net   model   of   logic   programs .   IEEE   Transactions   on   Software   Engineering ,   1989 , 15 ( 2 ) : 209 ～ 217 
 　 5   Chardhury   A ,   Marinescu   D   C ,   Whinston   A   B .   Net - based   computational   models   of   knowledge   processing   systems .   IEEE   Expert ,   April   1993 .   79 ～ 86 
 　 6   Lin   C ,   Murata   T .   A   Petri   net   model   for   nonmonotonic   reasoning   based   on   annofafed   logic   programs .   EIECE   Transactions   on   Fundamentals ,   1994 , E77 - A ( 10 ) : 1579 ～ 1587 
 　 7   Murata   T .   Petri   nets :   proPetries ,   analysis   and   applications .   Proceedings   of   the   IEEE ,   1989 , 77 ( 4 ) : 541 ～ 580 
 　 8   Sandewell   E .   A   functional   approach   to   non - monotonic   logic .   Computer   Intelligence ,   1985 , ( 1 ) : 80 ～ 87 
 　 9   Watanabe   T ,   Mizobata   Y ,   Onata   K .   A   Petri   net - based   algorithm   for   proofs   in   Horn   clause   prepositional   logic .   In :   Proceedings   of   the   ISCAS ' 90 .   May   1990 
 本文 1997 - 04 - 14 收到 原稿 , 1998 - 03 - 16 收到 修改稿 
