软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 1 期   No.1   1999 
 
 
 
 底层 通信协议 中 内存 映射 机制 的 设计 与 实现 *   
 刘 　 炜 　 郑纬民 　 申 　 俊 　 鞠 大鹏   
 　 　 摘要 　 在 底层 网络通信 协议 中 使用 内存 映射 机制 为 用户 层 应用 提供 了 虚拟 网络 界面 , 使 用户 层 能够 方便 地 访问 快速 通信 设备 ; 通过 减少 系统软件 的 协议 处理 开销 , 有效 地 减少 了 网络通信 的 延迟 . 讨论 了 通信协议 中 的 内存 映射 机制 的 设计 思想 和 实现 过程 , 提出 了 通信 区 的 概念 , 利用 通信 区 有效 地 完成 核心 与 用户 之间 的 数据交换 . 同时 给出 一个 实例 , 对 其 实现 与 性能 进行 了 分析 . 
 　 　 关键词 　 内存 映射 , 延迟 , 通信 区 , 协议 , 底层 通信 . 
 　 　 中图法 分类号 　 TP393 
 Design   and   Implementation   of   Memory   Map   Mechanism   in   Underlying   Communication   
 LIU   Wei 　 ZHENG   Wei - min 　 SHEN   Jun 　 JU   Da - peng   
 　 　 Abstract 　 In   underlying   communication ,   using   memory   map   provides   user - level   applications   with   a   virtual   network   interface   to   enable   user   level   access   high   speed   communication   devices ,   efficiently   reduces   the   overhead   of   system   protocol   software   and   the   latency   in   communication .   In   this   paper ,   the   design   idea ,   the   implementation   process   and   the   concept   of   communication   area   are   discussed ,   by   which   the   data   can   be   exchanged   between   the   kernel   and   user   space   efficiently .   A   sample   and   performance   analyses   are   provided   at   last . 
 　 　 Key   words 　 Memory   map ,   latency ,   communication   area ,   protocol ,   underlying   communication . 
 　 　 随着 机群系统 的 迅速 发展 , 机群系统 所 进行 的 高速度 、 低 耗费 的 高性能 计算 越来越 多地 受到重视 . 机群系统 通常 用 高速 局域网络 将 高性能 的 工作站 互连 , 可以 实现 其 扩展性 好 、 性能 价格比 高等 优点 . 其中 的 高速 局域网络 广泛 使用 了 普通 的 商用 网络 技术 , 如 快速 以太网 、 ATM 等等 . 高速 局域网络 技术 的 迅速 提高 , 能够 提供 高带宽 、 低 差错 的 物理 链路 , 这 就 使 局域网 通信 中 的 瓶颈 从 物理 信道 上 转移 到 了 系统软件 协议 处理 上 . ［ 1 ］ 如何 使 高速 网络 的 物理 特性 充分 地 在 用户 应用层 得以 体现 , 正是 本文 所 探寻 的 目标 之一 . 
 　 　 我们 设计 建立 了 一套 面向用户 的 底层 通信协议 , 它 利用 内存 映射 机制 , 将 网络 界面 提供 给 上层 协议 所 拥有 , 用户 层 应用 占有 虚拟 网络 界面 , 可以 为 自己 的 特殊 应用 定制 专门 的 通信协议 , 并且 使 通信协议 得以 在 应用层 而 不是 传统 的 核心层 实现 . 研究 表明 ［ 2 ］ , 在 应用层 实现 通信协议 可以 减少 操作系统 核心 的 干预 和 开销 , 提高 通信 效率 . 有 了 网络通信 性能 的 改进 （ 包括 软件 和 硬件 ） , 才能 使 强大 的 物理 通信 能力 在 应用 中 得到 体现 . ［ 3 , 4 ］ 我们 在 底层 通信协议 中 所 使用 的 内存 映射 技术 , 具有 效率高 、 灵活性 好 、 协议 层次 简单 等 优点 , 但 也 有 难于 管理 、 缺乏 保护 机制 等 缺点 , 这 将 在 我们 的 设计 中 加以克服 . 在 实际 的 设计 中 , 我们 提出 了 通信 区 的 概念 , 利用 通信 区 有效 地 完成 核心 和 用户 之间 的 数据交换 . 
 1 　 目 　 标 
 　 　 在 机群系统 中 , 通信 速度 的 高低 是 影响 计算 性能 的 关键因素 , 建立 低 延迟 、 高带宽 的 可靠 通信协议 是 我们 的 机群系统 研究 的 主要 目标 之一 . 充分利用 现有 高速 网络 的 成熟技术 , 使 通信协议 的 层次 更趋 简明 , 减少 消息传递 途径 中 经过 多层 协议 时 的 额外 开销 , 我们 在 面向用户 的 通信协议 中 所 使用 的 内存 映射 机制 正是 朝着 这一 方向 所 作出 的 努力 . 充分 地 发挥 底层 网络 的 物理 带宽 , 尽可能 地 减少 消息传递 途径 中 的 冗余 开销 是 实现 低 延迟 、 高带宽 的 有效 方法 . 
 　 　 内存 映射 机制 的 实现 可以 采取 两种 途径 ： 一是 利用网络 硬件 来 支持 映射 功能 , 二是 利用 操作系统 的 协助 来 完成 映射 机制 . 前者 要 进行 专门 的 硬件 设计 或是 选择 专门 的 支持 硬件 , 而 后者 则 可以 利用 现有 的 一些 商用 网络 硬件 , 将 系统核心 中 的 网络 界面 部分 映射 到 用户 空间 中 , 从而 实现 面向用户 的 通信 控制 . 本文 讨论 后者 的 设计方案 . 
 　 　 重新 编写 的 驱动程序 将 充分 支持 内存 映射 机制 的 实现 . 我们 要 达到 两个 目标 ： ( 1 )   灵活 方便 地 访问 底层 通信 网络 ； ( 2 )   实现 高效 的 通信 区 管理机制 . 
 2 　 内存 映射 机制 的 设计 与 实现 
 2.1 　 原 　 理 
 　 　 传统 的 设备 驱动程序 总是 通过 操作系统 内核 来 完成 所有 的 硬件 支持 与 协议 软件 处理 的 任务 , 操作系统 要 干预 所有 消息传递 中 的 发送 与 接收 处理 , 并且 负责 它们 的 缓冲 管理 和 通信协议 的 实现 . 在 面向用户 的 驱动程序 中 , 我们 利用 了 内存 映射 技术 , 使 用户 层 可以 拥有 一定 的 网络 界面 , 减少 操作系统 的 干预 过程 , 使 用户 层 可以 有 更 大 的 灵活性 , 并且 在 消息 的 发送 与 接收 处理 中 有效 地 减少 了 数据 拷贝 . 图 1 中 的 模型 给出 了 两者 的 比较 . 
   
 图 1 　 两种 通信模型 的 比较   
 　 　 在 传统 的 通信协议 中 , 消息 发送 过程 要 经过 应用程序 到 系统核心 的 数据 拷贝 , 系统核心 中 消息 数据 的 各种 处理过程 （ 包括 数据 封装 、 顺序控制 等等 ） , 最后 将 封装 的 报文 分组 发 向 通信 网络 中 ； 消息 的 接收 过程 则 基本上 是 上述 过程 的 逆 过程 . 消息 在 不同 的 系统 空间 中要 进行 多次 拷贝 , 在 协议 的 不同 层次 之间 也 要 进行 数据 的 拷贝 . 在 面向用户 的 通信协议 模型 中 , 应用程序 可以 直接 控制 通信 区 的 数据 存取 , 而 通信 区域 与 NI （ network   interface ） 之间 是 可以 直接 传递数据 的 . 
 　 　 专门 的 驱动程序 负责 网卡 硬件 的 初始化 、 通信 区 的 建立 与 维护 等 工作 . 作为 核心 进程 的 驱动程序 , 它 建立 了 网络接口 与 通信 区 的 连接 . 网络接口 与 通信 区 能够 直接 交换 数据 , 从而 减少 了 消息传递 的 环节 , 降低 了 系统 开销 . 
 2.2 　 通信 区 的 结构设计 
 　 　 处于 内存 映射 机制 的 实现 核心 地位 的 是 通信 区 的 设计 . 通信 区 是 一块 由 用户 层 和 核心层 共享 的 物理 内存 , 它 采用 由 用户 空间 与 系统核心 空间 共享内存 的 方法 , 避免 了 在 不同 的 系统 空间 之间 的 数据 拷贝 . 通信 区 的 设计 要 考虑 其 共享 特性 , 在 用户 层 与 核心层 之间 均 可以 方便 地 存取数据 . 通信 区 与 网络 界面 之间 的 数据交换 依赖于 网络 控制器 的 支持 , 所以 , 选择 能够 支持 DMA 方式 的 网卡 是 必要条件 之一 . 通信 区 是 连接 网络 界面 与 用户 层 应用 的 桥梁 , 它 的 实现 就 像 缓存 一样 , 用来 存放 用户 数据 和 网络 数据 . 接收 过程 中 , 核心 进程 从 网络 界面 中 取得 数据 , 放入 通信 区 的 适当 区域 ； 用户 进程 从 通信 区中取 走 接收 到 的 数据 ； 发送 过程 中 , 用户 进程 把 待 发送数据 放入 通信 区 , 由 核心 进程 从 通信 区中 取得 数据 , 发送 入 网络 界面 . 通信 区 通过 UNIX 的 系统 调用 mmap 由 核心 空间 映射 至 用户 进程 空间 , 为 两者 所 共有 , 通信 区中 包含 了 消息 发送 与 接收 的 缓冲区 , 在 其中 维护 了 发送 、 接收 和 空闲 三个 循环 队列 , 图 2 给出 了 通信 区 的 结构 示意 . 
   
 图 2 　 通信 区 结构 示意图   
 2.3 　 通信 机制 实现 的 实例 
 　 　 我们 在 Linux2.0 . 0 的 操作系统 平台 上 , 使用 DECchip21140 芯片 的 网络适配器 进行 了 实例 设计 . DECchip21140 网络适配器 支持 DMA 传送 方式 , 它 将 接收 到 的 网络 以太 帧 通过 DMA 通道 直接 送到 主机 内存 中 ； 相应 地 , 它 将 内存 中 指定 区域 的 待 发送数据 通过 DMA 通道 送到 网络接口 中 . 通信 区 的 具体 形式 如图 3 所示 . 其中 Send － Ring , Free － Ring , Recv － Ring 中 每一项 描述符 的 数据结构 如下 ： 
 　 　 struct   comm － send － desc { 
 　 　 　 　 　 u － int 　 　 buf － offset ; 　 　 　 　 　 　 　 / *   发送缓冲区 相对 于 通信 区 的 偏移 地址   * / 
 　 　 　 　 　 int 　 　 　 len ; 　 　 　 　 　 　 　 　 　 　 　 / *   待 发送数据 的 长度   * / 
 　 　 　 　 　 char 　 　 　 header ［ HEADER － LEN ］ ； 　 / *   用户 通信协议 的 协议 头   * / 
 　 　 } 
 　 　 struct   comm － free － desc { 
 　 　 　 　 　 u － int 　 　 buf － offset ; 　 　 　 　 　 　 / *   接收缓冲区 中 的 空闲 块   * / 
 　 　 } 
 　 　 struct   comm － recv － desc { 
 　 　 　 　 　 u － int 　 　 buf － offset ［ PAYLOAD ］ ; 　 / *   接收缓冲区 的 偏移 地址   * / 
 　 　 　 　 　 int 　 　 　 len ; 　 　 　 　 　 　 　 　 　 　 / *   接收 到 的 数据 长度   * / 
 　 　 } 
   
 图 3 　 通信 区 的 分配   
 　 　 发送 队列 中 保存 着 发送数据 以及 其 协议 头 数据 , 这些 数据 将 在 网络接口 中 封装 成 以太 帧 形式 发送到 物理 网络 中 去 ; 而 接收 队列 的 每 一个 描述符 则 对应 了 一个 接收 到 的 消息 , 通过 其 buf － offset ［ PAYLOAD ］ 数组 , 可以 将 不同 块 中 的 数据 重新 组成 消息 本身 , 作为 优化 过程 , 小于 PAYLOAD * 4 字节 的 消息 会 直接 存于 其中 而 避免 了 缓存 分配 的 开销 . 
 　 　 在 通信 区 描述 头 中 维护 了 3 个 队列 , 其中 的 buf － offset 分别 指向 了 各自 的 数据 缓冲区 的 偏移 地址 , 这 就 保证 了 无论是 核心 程序 还是 应用程序 都 可以 方便 地 将 其 视为 自身 存储空间 的 一部分 而 进行 操作 . 
 　 　 在 发送 过程 中 , 用户 层 应用 将 准备 好 的 待 发送数据 和 目的 地址 复制到 通信 区中 的 适当 区域 , 并 填写 Send － Ring 中 的 相应 描述符 . 发送 过程 紧接着 就 通知 设备 驱动程序 进行 发送 , 驱动程序 在 进行 了 发送 过程 的 管理 手续 之后 , 通过 DMA 方式 把 数据 发送到 网络 中去 . 在 接收 过程 中 , DEC21140 控制器 会 通过 DMA 方式 主动 地 将 接收 到 的 数据 存放 到 驱动程序 中 所 指定 的 缓冲区 中 , 然后 发出 中断 信号 通知 驱动程序 进行 接收 处理 . 在 驱动程序 的 接收 过程 中 , 驱动程序 将 接收 到 的 数据 提交 到 通信 区中 的 适当 区域 , 并 填写 Recv － Ring 中 的 相应 描述符 . 对于 用户 而言 , 他 可以 选择 中断 方式 或者 查询 方式 来 接收数据 . 在 中断 方式 中 , 驱动程序 负责 向 用户 进程 发送 一个 数据 已 接收 到 的 信号 , 请求 进入 用户 接收 处理过程 ； 在 用户 的 查询 方式 下 , 用户 每隔 一段时间 就 查询 接收 队列 的 状态 , 当 接收 队列 不为 空时 , 用户 主动 地 从 通信 区中 提取 数据 . 发送 与 接收 过程 中 的 消息 流如图 4 所示 . 
   
 图 4 　 发送 与 接收 过程 的 消息 流   
 　 　 在 发送 过程 中要 进行 一次 数据 拷贝 , 在 接收 过程 中要 进行 两次 数据 拷贝 . 而 在 传统 的 驱动程序 的 设计 中 , 存在 着 不可避免 的 多次 数据 拷贝 ： 发送 过程 中 , 用户 到 通信接口 （ 如 Socket ） 、 通信接口 到 设备 驱动程序 , 至少 发生 了 两次 数据 拷贝 ； 接收 过程 中 , 接收 缓存 到 设备 驱动程序 、 设备 驱动程序 到 通信接口 、 通信接口 到 用户 空间 , 至少 发生 了 3 次 数据 拷贝 . 从这一点 上 看 , 内存 映射 机制 在 数据 拷贝 次数 的 减少 上 是 有 其 优越性 的 . 
 3 　 实验 结果 分析 
 　 　 为了 对 内存 映射 机制 的 性能 作 进一步 的 分析 , 我们 对 所 实现 的 实例 进行 了 性能 测试 , 性能 测试 是 在 Linux2.0 . 0 的 操作系统 上 , 使用 100 兆 快速 以太网卡 来 进行 的 , 并且 进行 了 内存 映射 机制 与 TCP / IP 和 UDP / IP 的 性能 比较 . 以下 是 我们 的 实验 测试 结果 . 
 3.1 　 通信 往返 延迟时间 
 　 　 在 用于 并行计算 的 机群系统 中 , 通信 延迟 是 一个 十分 重要 的 性能指标 , 从图 5 中 可以 看出 , 采用 了 内存 映射 机制 的 通信 系统 的 通信 延迟 远远 低于 TCP / IP 和 UDP / IP 协议 的 通信 延迟 . 其 主要 原因 是 : 前者 在 数据 拷贝 和 缓冲 管理 等 方面 作 了 简化 , 从而 实现 了 较 好 的 通信 性能 ; 而后 两者 的 多次 的 数据 拷贝 和 复杂 的 缓冲 管理 , 占用 了 较 多 的 系统 开销 , 影响 了 通信 性能 . 由于 在 并行计算 中 , 小 消息 包 用作 控制 信息 的 传递 , 它 的 延迟 性能 直接 影响 系统 的 计算速度 , 在 我们 使用 了 内存 映射 机制 的 通信 中 , 有 64 字节 的 消息 包 的 用户 层 往返 延迟 约 为 58 μ s . 这比 TCP / IP 协议 所 提供 的 270 μ s 要 好得多 . 
   
 图 5 　 几种 协议 通信 延迟时间 的   
 3.2 　 网络 峰值 带宽 
 　 　 图 6 中 所示 为 内存 映射 机制 与 TCP / IP 的 带宽 比较 . 在 我们 实现 的 发送 - 接收 （ Send - Recieve ） 简单 通信接口 上 , 采用 滑动 窗口 协议 进行 流量 测试 , 本 机制 也 取得 了 较 好 的 性能 . 对于 1K 字节 的 消息 包 , 可以 达到 86.6 Mbps 的 传输率 , 高于 TCP / IP 协议 所 取得 的 77.1 Mbps 的 传输率 . 在 这里 , 我们 可以 看出 , 带宽 性能 的 改进 幅度 不如 通信 延迟 的 改进 幅度 大 , 这 是因为 带宽 性能 主要 受限于 缓冲区 的 大小 和 流控 协议 的 性能 . 我们 的 底层 通信协议 主要 针对 通信 延迟 的 性能 作出 了 一些 改进 , 对 小 消息 包 进行 优化 处理 , 减少 了 数据 的 拷贝 , 而 没有 在 流量 控制 方面 作出 改进 . 在 带宽 的 测试 中 , 我们 仍然 采用 了 传统 的 滑动 窗口 协议 , 其 性能 的 改进 主要 是 由于 通信 延迟 减少 而 带来 相应 的 带宽 的 改善 . 在 改善 网络流量 方面 , 我们 仍 需作 进一步 的 研究 工作 . 
   
 图 6 　 内存 映射   
 4 　 结束语 
 　 　 在 底层 通信协议 的 设计 中 采用 内存 映射 技术 , 可以 提高 访问 网络 界面 的 灵活性 和 效率 , 实现 了 灵活 高效 的 网络接口 , 降低 了 消息传递 中 的 处理 环节 , 减少 了 软件 开销 , 提高 了 通信 效率 , 这 对于 设计 低 延迟 、 高带宽 的 通信 系统 有着 重要 的 意义 . 
 作者 介绍 ： 刘炜 , 1974 年生 , 博士生 , 主要 研究 领域 为 并行 / 分布 计算机系统 , 网络通信 环境 . 
 　 　 　 　 　 郑纬民 , 1946 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 并行 / 分布 处理 . 
 　 　 　 　 　 申俊 , 1969 年生 , 博士生 , 主要 研究 领域 为 并行 机群系统 , 通信 系统 . 
 　 　 　 　 　 鞠 大鹏 , 1967 年生 , 讲师 , 主要 研究 领域 为 并行 / 分布式 网络 计算环境 . 
 本文 通讯联系 人 ： 刘炜 , 北京   100084 , 清华大学 计算机科学 与 技术 系 应用 教研组 
 作者 单位 ： 刘 　 炜 　 郑纬民 　 申 　 俊 　 鞠 大鹏 　 清华大学 计算机科学 与 技术 系 　 北京 　 100084 
 E - mail :   lw @ est4 . cs . tsinghua . edu . cn 
 参考文献 
 　 ［ 1 ］   Blumrich   M ,   Dubnicki   C ,   Felten   E   W   et   al .   Virtual - memory - mapped   network   interfaces .   IEEE   Micro ,   Feb .   1995 , 15 ( 1 ) : 21 ～ 28 
 　 ［ 2 ］   Eicken   T   V ,   Basu   A ,   Bush   V   et   al .   U - Net :   a   user - level   network   interface   for   parallel   and   distributed   computing .   In :   Proceedings   of   the   15th   ACM   Symposium   on   Operating   Systems   Principles .   December   1995 .   40 ～ 53 .   http ： ∥ WWW . cs . cornell . edu / u - net / papers / sosp . pdf 
 　 ［ 3 ］   Welsh   M ,   Basu   A ,   Eicken   T   V .   Low - latency   communication   over   fast   Ethernet .   In :   Proceedings   of   EuroPar ' 96 .   Lyon ,   France ,   August   1996 .   http :   ∥ WWW . cs . cornell . edu / u - net / papers / europar . pdf 
 　 ［ 4 ］   Chang   Sheue - ling ,   David   Hung - Chang   Du ,   Jenwei   Hsieh   et   al .   Enhanced   PVM   communications   over   a   high - speed   LAN .   IEEE   Parallel   and   Distributed   Technology ,   1995 , 3 ( 3 ) : 20 ～ 32 
 
 本文 1997 - 11 - 04 收到 原稿 , 1998 - 01 - 23 收到 修改稿   
