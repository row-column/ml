信息 与 控制 
 INFORMATION   AND   CONTROL 
 1999 年   第 28 卷   第 2 期   Vol.28   No.2   1999 
 
 
 
 解 Job - shop 调度 问题 的 混合 模拟退火 进化 规划 
 翁妙凤 
 　 　 摘要 　 提出 运用 混合 模拟退火 进化 规划 ( SAEP ) 求解 Job - shop 调度 问题 . 首先 介绍 了 SAEP 和 进化 规划 ( EP ) 的 不同 选择 方法 以及 他们 的 变异 算子 , 最后 给出 了 仿真 实例 , 并 比较 了 这 两种 算法 的 优劣 . 
 　 　 关键词 　 模拟退火 法 ， 进化 规划 ， 调度 问题 
 SAEP   ALGORITHM   OF   SOLVING   JOB - SHOP   SCHEDULING   PROBLEM 
 WENG   Miaofeng 
 ( East   China   Shipbuilding   Institute , Zhenjiang , 212003 ) 
 　 　 Abstract 　 In   this   paper , a   combined   evolutionary   programming   ( SAEP )   with   simulated   annealing   is   presented   to   solve   Job - shop   scheduling   problem . Two   different   selected   methods   between   SAEP   and   EP   and   their   mutation   operators   are   discussed , and   simulation   results   are   given   to   illustrate   the   efficiency   of   the   presented   algorithm , and   a   comparison   between   the   two   algorithms   is   also   presented . 
 　 　 Key   words 　 simulated   annealing   algorithm , evolutionary   programming , scheduling   problem 
 　 　 1 　 引言 
 　 　 文中 研究 的 Job - shop 调度 问题 ( 记为 JSSP ) 为 ： ( 1 ) 设有 n 个 工件 分为 r 类 ： J = { J1 , J2 , … , Jn } , Ji ∈ [ 1 , r ] ； 每 类 工件 有 各自 特定 的 不可 改变 的 操作 顺序 ； ( 2 ) 有 m 台 机器 ， M = { M1 , M2 , … , Mm } ； 每台 机器 可 加工 若干 操作 , 不同 的 机器 能 加工 的 操作 不全 相同 且 完成 相同 操作 的 加工 时间 也 不 相同 ; ( 3 ) 机器 加工 各 操作 所 需 的 安装时间 与 此 机器 加工 前 一 操作 有关 . 文中 的 安装时间 是 指 刀具 更换 时间 ； ( 4 ) 当 机器 最初 和 加工 结束 后 处于 空闲 等待 状态 时 , 视为 0 操作 ； 空闲 等待 时 可以 先换 刀具 ； ( 5 ) 每 类 工件 有 各自 的 交货 期限 要求 ； ( 6 ) 工件 在 零 时刻 都 可得且 当 工件 的 每 一 操作 加工 完 了 没有 自动 活动 车辆 调度 . 
 　 　 求   合理 地 将 工件 的 各 操作 分配 到 可 加工 的 机器 上 , 在 满足 各 工件 的 操作 顺序 和 交货 期限 的 约束条件 下 ， 使 n 个 工件 的 加工 时间 最短 . 
 　 　 2 　 JSSP 混合 模拟退火 进化 规划 实现 
 　 　 2.1 　 个体 表示 
 　 　 文中 用 二维 矩阵 S = [ sij ] m × L 表示 个体 , sij ∈ 整数 闭 区间 [ 0 , L ] , 其中 m 表示 机器 数 , L 表示 n 个 工件 的 总 操作数 . 除 零 矩阵 元素 ( 称 零 元素 ) 外 , 任一 矩阵 元素 值均 不 相等 , 且 每 一非 零 矩阵 元素 ( 称非 零 元素 ) 值 表示 n 个 工件 的 所有 工序 统一 编号 . 如 文中 的 仿真 实例 , 将 10 个 工件 的 总 33 个 工序 统一 编号 ( 见表 1 ) . 
 表 1 　 10 个 工件 的 总 33 个 工序 统一 编号 
 
 123456789101112131415161718192021222324252627282930313233 
 A1C1B1D1A2C2B2D2A3C3B3D3B4D4E4B5D5E5B6D6E6B7A7F7B8A8F8B9A9F9B10A10F10 
 
 ( 注 ： 表中 字母 A ～ F 表示 操作 类型 ， 其 右上角 数字 表示 工件 号 ) 
 　 　 在 矩阵 S 中 , 无用 零 元素 都 在 行右 , 即 siki ≠ 0 , 有 siu = 0 ( i = 1 , 2 , … , m ； u = ki + 1 , … , L ) , = L ( di 为 S 中 第 i 行上 非 零 元素 个数 ) . 
 　 　 个体 满足 可行 解 的 约束条件 为   ① 机器 约束 ： 每一 操作 必须 在 可供使用 的 机器 上 加工 ； 零 元素 满足 机器 约束 ( 可 在 任何 机器 上 加工 ) . ② 操作 顺序 约束 ： 对 任一 工件 , 其 第 1 个 工序 在 矩阵 中 的 列 号 小于 第 2 个 工序 的 列 号 , 中间 工序 的 列 号 大于 前 一 工序 的 列 号 而 小于 后 一 工序 的 列 号 , 最后 工序 的 列 号 大于 前 一 工序 的 列 号 ( 本文 所述 工序 次序 , 皆 指 同一 工件 而言 ) . 
 　 　 设 sij , skt ( j ≠ t ) 为 一 工件 的 两个 工序 . 当 sij - 1 = 0 时 , 称 sij 有 空闲 等待 ； 当 skt = sij - 1 且 t < j 时 , 称 skt 为 sij 的 前 一 工序 ； 当 skt = sij + 1 且 t > j 时 , 称 skt 为 sij 的 后 一 工序 . 
 　 　 2.2 　 初始 群体 的 设定 
 　 　 ( 1 ) 先给 任 一个 体矩阵 S 置 零 , 然后 按 如下 步骤 随机 给 L 个 矩阵 元素 置 不同 ( 1 ～ L ) 的 整数 值 , 且 满足 可行 解 的 约束条件 
 for   p : = 1   to   L 　 do 
 　 　 查表 ( 如表 1 ) 判 p 在 工件 中 的 工序 次序 ； if   p 是 第 1 个 工序   then   { 根据 p 的 操作 类型 , 随机 产生 可供使用 的 行号 ( 机器 )   i 并 在 ( 1 , 10 ) 内 随机 产生 列号 j , 置 sij : = p } 
 　 　 else   ( 即 p 为 中间 工序 或 最后 工序 )   { 根据 p 的 操作 类型 , 随机 产生 可供使用 的 行号 ( 机器 ) k , 并 在 S 中 找到 p 的 前 一 工序 的 列 号 g , 在 [ g + 1 , L ] 中 随机 产生 一列 号 t ( g + 1 ≤ t ≤ L ) , 置 skt : = p } . 
 　 　 endfor 
 　 　 在 建立 初始 群体 时 , 由于 顺序 将 1 到 L 个 工序 给 个体 的 基因 置 初值 , 每个 工序 的 后 一 工序 必定 在 该 工序 之后 出现 , 故 不必 找后 一 工序 的 列 号 . 
 　 　 ( 2 ) 通过 立体 搜索 ， 前移 个体 矩阵 中 的 非 零 元素 
 　 　 对 个体 矩阵 S 逐行 ( 行号 i 从 1 到 ( i + 1 )   mod   m ) 逐列 ( 列号 j 从 1 或 断点 到 L ) 扫描 非零 元素 sij , 若 sij 是 第 1 个 工序 则 前移 到 本行 的 第 1 个 零 元素 处 ( 互换 ) 并 置 前移 标志 , 否则 { 判 工序 sij 的 前 一 工序 ( sij - 1 ) 是否 前移 过 , 若 前移 过则 由 j 向 左 找 ( sij - 1 ) 的 列 号 t ( t < j ) , 将 sij 前移 到 i 行 t 列后 的 第 1 个 零 元素 处 ( 互换 ) ； 若 ( sij - 1 ) 未 前移 过则 把 sij 作 断点 , 扫描 下 一行 } 等 直到 S 中 的 L 个 非 零 元素 全部 前移 , 而 无用 零移 到 行右 . 
 　 　 2.3 　 适应 值 的 计算 
 　 　 在 通过 立体 搜索 , 前移 个体 的 非 零 元素 过程 中 求得 其 适应 值 . 设 a ( s ′ ij - 1 , s ′ ij ) , t ( sij ) 和 L ( sij ) 分别 为 个体 S 中 工序 sij 在 机器 i 上 的 安装时间 , 运行 时间 和 完工 时间 ； s ′ ij - 2 , s ′ ij - 1 和 s ′ ij 分别 为 sij - 2 , sij - 1 和 sij 的 操作 类型 ； a ( A , B ) 为 操作 A 变为 操作 B 的 安装时间 ( 换刀 时间 ) ； 令当 j - 1 = 0 时 , s ′ ij - 1 = 0 , L ( sij - 1 ) = 0 ； 当 j - 2 = 0 时 , sij - 2 = 0 , s ′ ij - 2 = 0 , L ( sij - 2 ) =   0 . 
 　 　 ( 1 ) 求 任一 工序 sij 的 完工 时间 L ( sij ) 
 　 　 ① sij 为 第 1 个 工序 ： L ( sij ) = L ( sij - 1 ) + a ( s ′ ij - 1 , s ′ ij ) + t ( sij ) ； ② sij 为 非 第 1 个 工序 ： ( a ) 当 sij - 1 = 0 ( 有 空闲 等待 ) 时 , 若 L ( sij - 2 ) + min [ a ( s ′ ij - 2 , 0 ) + a ( 0 , s ′ ij ) , a ( s ′ ij - 2 , s ′ ij ) ] > L ( sij - 1 ) 且 sij - 2 ≠ 0 则 L ( sij ) = L ( sij - 2 ) + min [ a ( s ′ ij - 2 , 0 ) + a ( 0 , s ′ ij ) , a ( s ′ ij - 2 , s ′ ij ) ] + t ( sij ) , 否则 L ( sij ) = L ( sij - 1 ) + t ( sij ) ； ( b )   sij - 1 ≠ 0 ( 无 空闲 等待 ) 时 , L ( sij ) = max [ L （ sij - 1 ） + a ( s ′ ij - 1 , s ′ ij ) , （ sij - 1 ） ] + t ( sij ) . 
 　 　 ( 2 ) 求 任一 机器 i 上 最右 ( 后 ) 一个 操作 ( 非零 元素 ) 的 完工 时间 Ti 和 任一 工件 k 的 完工 时间 LL ( k ) 
 
 　 　 由 工序 统一 编号 表中查 得 任一 工件 k 的 最后 一个 工序 x , 求出 x 的 完工 时间 L ( x ) , 置 LL ( k ) = L ( x ) . 
 　 　 ( 3 ) 求 个体 S 的 适应 值 f 
 
 　 　 其中 β 为 合适 的 惩罚 系数 , D ( k ) 为 工件 k 的 交货 时间 . 群体 中 求得 的 个体 最小 适应 值 , 即为 n 个 工件 的 加工 时间 . 
 　 　 2.4 　 EP 的 选择 算子 
 　 　 置 初始 群体 规模 为 偶数 , 将 每代 群体 按 适应 值 升序 排序 . 取排 在 前 50% ( 最佳 ) 的 个体 复制到 下一代 , 余下 的 个体 进行 变异 , 若 变异 不 成功 , 则 作为 下一代 保存 , 否则 将 产生 的 子 个体 经 立体 搜索 , 前移 非零 元素 后 保存 到 下一代 . 
 　 　 2.5 　 SAEP 选择 机制 
 　 　 由于 模拟退火 法 ( SA ) 在 搜索 过程 中 , 随机 地 接受 某些 劣 化解 , 因而 具有 较强 的 全局 搜索 能力 , 能够 跳出 局部 极小 点 ； 而 上 EP 最佳 个体 保存 选样 算子 会 导致 局部 最优 个体 急速 增加 , 进化 有 可能 过早 收敛 , 陷入 局部 最优 解 ； 因此 文中 混合 使用 SA 和 EP ( 称 SAEP ) 来 改善 上 EP 变异 后 的 选择 机制 . 文中 的 仿真 实例 中 ， 初始 温度 T0 = 1 , Tt + 1 = 0.9 Tt , ( 每代 降温 率为 0.9 ) , 由于 收敛 判据 为 1000 代 , 故 没有 设置 终止 温度 . 接受 概率 依 Metrolis 准则 : y2 < y1 或 exp ( - ( y2 - y1 ) / T ) > ρ 时子 个体 替换 其父 个体 ( y1 是 父 个体 的 适应 值 , y2 是子 个体 的 适应 值 , T 是 温度 系数 , ρ 是 0 和 1 之间 均匀分布 的 随机数 ) . 在 变异 中 , 设 i1 变异 为 i2 , 若 i2 的 适应 值比 i1 的 适应 值 小 , 则 用 i2 替换 i1 , 否则 i2 按 概率 替换 i1 . 
 　 　 将 变异 后 替换 过 的 父 个体 进行 立体 搜索 , 前移 非零 元素 , 然后 将 全部 父 个体 保存 到 下一代 . 
 　 　 2.6 　 变异 算子 
 　 　 进化 规划 只有 变异 算子 而 没有 用 交叉 算子 . 文中 SAEP 和 EP 采用 相同 的 6 种变 算子 . 为了 使 个体 经 变异 后能 满足 操作 顺序 约束 要求 , 须 先求 需要 移动 的 工序 之 移动 区 . 
 　 　 ( 1 ) 个体 中非 零 元素 移动 区 的 确定 
 　 　 设 个体 S 中 元素 sij 的 移动 区为 开区间 ( wt , wr ) ； wt 为 sij 的 前 一 工序 ( sij - 1 ) 在 S 中 的 列 号 , wr 为 sij 的 后 一 工序 ( sij + 1 ) 在 S 中 的 列 号 . 只有 wr - wt > 2 时 才能 对 该 个体 进行 变异 , 否则 重选 待 移动 的 非 零 元素 , 直到 该 非 零 元素 移动 区 的 长度 > 2 时 为止 . 当 sij = 0 时 , sij 的 移动 区为 ( 0 , L + 1 ) , 故 不用 求零 元素 的 移动 区 . 
 　 　 ( 2 ) 变异 算子 
 　 　 将 需要 变异 的 个体 ， 随机 选样 如下 6 种 变异 算子 中 的 一种 进行 变异 
 　 　 ① win ( 互换 个体 同行 上 的 两个 矩阵 元素 ) 
 　 　 在 个体 S 中 , 随机 选择 一个 非零 元素 sij ， 获 sij 的 移动 区 ( a1 , a2 ) . 在 ( a1 , a2 ) 内 随机 产生 一列 号 k ( a1 < k < a2 ) , 若 求得 sij 的 移动 区 ( a3 , a4 ) 包含 sij ( a3 < j < a4 ) , 则 可 互换 sij 和 sik ( sik 值可为 0 ) . 
 　 　 ② Wbt ( 互换 个体 两个 不同 行上 的 矩阵 元素 ) 
 　 　 ( a ) 在 个体 S 中 , 随机 找 一个 非零 元素 sij ； ( b ) 获得 其 移动 区 ( a1 , a2 ) , 在 ( a1 , a2 ) 内 随机 产生 一列 号 t , 并 随机 产生 一可 加工 sij 的 操作 类型 之 行号 ( 机器 ) k ( k ≠ i . 若 k = i 重新 产生 k , 或 只有 k = i , 重找 sij , 转 ( b ) . 若 求得 skt 的 移动 区 ( a3 , a4 ) 包含 sij ( a3 < j < a4 ) , 且 行号 ( 机器 ) i 可 加工 skt 的 操作 类型 , 则 可 互换 sij 与 skt ( skt 值可为 零 ) . 
 　 　 ③   Sin ( 将 个体 中 的 一个 非零 元素 与其 移动 区内 同行 零 元素 互换 , ( Win  Sin ) . 
 　 　 ④   Sbt ( 将 个体 中 操作 数最多 行上 的 一个 非零 元素 与其 移动 区内 的 另 一 可 加工 其 操作 类型 行上 的 零 元素 互换 ) . 
 　 　 ⑤ Tin ( 将 引起 个体 中 某行 最右 一个 有 空闲 等待 工序 的 前 一 工序 移到 其 移动 区内 同行 的 零 元素 处 ) . 
 　 　 在 个体 S 中 , 随机 产生 一行 号 i . 在 i 行上 找 最右 一个 有 空闲 等待 的 工序 sij = 0 , sij - 1 = 0 . 找到 sij 的 前 一 工序 ( sij - 1 ) 的 行号 k , 列号 t , 移动 区 ( a1 , a2 ) ； 将 skt 前移 到 k 行上 的 ( a1 , t ) 内 的 第一个 零 元素 处 ( 互换 ) . 
 　 　 ⑥ Tbt ( 将 引起 个体 中 某行 最右 一个 有 空闲 等待 工序 的 前 一 工序 移到 其 移动 区内 并 可 加工 其 操作 类型 另 一行 上 的 第一个 零 元素 处 ( 互换 ) . 
 　 　 上述 变异 算子 产生 的 子 个体 均 满足 可行 解 的 约束条件 . 
 　 　 3 　 仿真 结果 
 　 　 设有 10 个 工件 在 四台 机器 上 加工 ； J1 ～ J3 为 第 1 类 工件 , J4 ～ J6 为 第 2 类 工件 , J7 ～ J10 为 第 3 类 工件 . 各类 工件 所 需 的 操作 为 第 1 类 ： A , C , B , D ； 第 2 类 ： B , D , E ； 第 3 类 ： B , A , F . 这 3 类 工件 的 交货 期限 分别 为 190 , 95 , 181.10 个 工件 的 工序 总数 为 33 ； 其 统一 编号 见表 1.4 台 机器 加工 各 操作 所 需 安装时间 见表 2 , 各 操作 在 机器 上 的 运行 时间 见表 3 . 表 3 还 反映 了 四台 机器 各自 能 加工 的 操作 类型 . 
 表 2 　 四台 机器 加工 各 操作 所 需 安装时间 
 
 　 M1M2M3M4 
 0ABCF0BCDE0BDF0EF 
 002.52 . 01.82 . 101.51 . 41.82 . 201.31 . 71.201 . 92.1 
 A1.400 . 41.51 . 8 
 B1.31 . 700.60 . 91.701 . 82.00 . 81.801 . 51.8 
 C1.81 . 62.101 . 91.31 . 901.51 . 2 
 D 　 0.41 . 01.801 . 51.62 . 001.5 
 E1.51 . 51.41 . 30 　 1.802 . 1 
 F2.21 . 61.31 . 10 　 0.41 . 61.701 . 41.60 
 
 表 3 　 各 操作 在 机器 上 的 运行 时间 
 
 　 ABCDEF 
 M117.2524 . 4518.68 　 　 13.88 
 M2 　 18.9515 . 7217.4518 . 67 
 M317.54 　 21.45 　 19.76 
 M4 　 15.4319 . 45 
 
 　 　 仿真 实例 的 群体 规模 = 100 , 收敛 判据 = 1000 代 ， 惩罚 系数 β = 2000 ( 实验 得到 ) . 采用 SAEP 和 EP 两种 算法 的 调度 结果 见图 1 和 图 2 . 两种 算法 的 仿真 结果 比较 见表 4 ( CPU 时间 = 算法 得到 最优 解 ( 收敛 时 ) 在 奔腾 586 机上 所 需 时间 ( s ) ) . 
 
 图 1 　 采用 SAEP 所得 调度 结果 
 
 图 2 　 采用 EP 所得 调度 结果 
 表 4 　 SAEP 和 EP 的 结果 比较 
 
 　 SAEPEP 
 最佳 适应 值 180.72187 . 01 
 收敛 代数 869772   
 CPU 时间 260 ( S ) 150 ( S ) 
 
 （ 注 ： 表 2 和表 3 中 无 数字 的 表项 为 无 意义 、 非法 表项 ） 
 　 　 从 仿真 结果 , SAEP 得到 的 加工 时间 为 180.72 , 而 EP 得到 的 加工 时间 为 187.01 . 这 两种 算法 均 能 找到 较为 满意 的 调度 结果 , 且 各 工件 的 完工 时间 均 能 满足 交货 期限 要求 . 但 相比之下 SAEP 的 解 优于 EP , 收敛 代数 比 EP 多 97 代 , 但 CPU 时间 ( 收敛 速度 ) 比 EP 慢得 多 , SAEP 的 CPU 时间 为 EP 的 1.73 倍 . 
 　 　 4 　 结论 
 　 　 ( 1 )   SAEP 和 EP 两种 算法 求解 JSSP 都 是 有效 可行 的 . 
 　 　 ( 2 ) 由于 SA 以 一定 的 概率 接受 较差 的 个体 , 改进 了 GA 的 选择 机制 , 所以 SAEP 可以 搜索 整个 空间 , 不易 陷入 局部 最优 解 , 不 受 搜索 空间 的 限制性 假设 的 约束 , 可 优化 多峰 函数 , 克服 了 EP 的 “ 过早 收敛 ” 问题 , 但 EP 收敛 速度 比 SAEP 快得多 . 
 　 　 ( 3 ) 在 两种 算法 中 , 文中 用 惩罚 函数 法 处理 了 工件 的 交货 期限 约束 ； 用 抛弃 不 可行 解法 处理 了 机器 约束 和 操作 顺序 约束 , 虽然 一般 抛弃 不 可行 解法 的 搜索 效率 较 低 , 但本 算法 在 个体 进行 变异 时 , 使 需要 移动 的 矩阵 元素 只能 在 其 移动 区内 移动 , 进行 数对 互换 , 大大 地 减少 了 不 可行 解 的 数目 , 从而 表明 算法 设计 的 个体 表示 和 变异 算子 在 解决 JSSP 上 是 成功 和 有效 的 . 
 作者简介 ： 翁妙凤 ， 女 ， 58 岁 ， 副教授 ． 研究 领域 为 计算机软件 及 人工智能 ． 
 作者 单位 ： 华东 船舶工业 学院 　 镇江 　 212003 
 参考文献 
 　 1 　 Yip   P , Yoh - han   Pao . Combinatorial   Optimization   With   Use   of   Guided   Evolutionary   　 Simulated   Annealing . IEEE   Trans . Neural   Networks , 1995 , 6 ( 2 )   :   290 ～ 295 
 　 2 　 姚新 ， 陈国良 等 . 进化 算法 研究进展 . 计算机 学报 , 1995 , 18 ( 9 ) , 694 ～ 705 
 　 3 　 方剑 等 . 基于 事件驱动 的 Job - Shop 仿真 调度 系统 . 系统 仿真 学报 , 1997 , 9 ( 4 )   :   42 ～ 50 
 1998 - 08 - 18 收稿 
