微型机 与 应用 
 WEIXINGJI   YU   YINGYONG 
 1999 年 3 月   第 18 卷   第 3 期   vol.18   No.3 
 
 
 
 基于 WWW 技术 对 传统 信息系统 改造 的 对策 和 方法 
 裘 江南 　 金玉 玲 
 　 　 摘 　 要 ： 对 基于 WWW 技术 的 信息系统 和 传统 信息系统 进行 了 比较 ，   并 对 传统 信息系统 向 Intranet 迁移 过程 中 存在 的 问题 进行 了 分析 ， 提出 了 对策 和 改进 方法 。   
 　 　 关键词 ： Internet 　 Intranet 　 客户机 / 服务器 　 信息系统   
 1 　 Intranet 的 特点 
 　 　 基于 WWW 技术 的 Intranet 的 模式 与 传统 的 客户机 / 服务器 模式 相 比较 具有 以下 特点 ： 
 　 　 1 . 只 需为 所有 的 客户端 平台 编写 1 个 客户端程序 。 Intranet 模式 可以 使用 与 平台 无关 的 相同 软件 模块 ， 这些 客户端程序 不必 考虑 运行 在 Wind   ows 和 Unix 操作系统 的 区别 。 从而 节约 了 客户端 的 软件 费用 ， 避免 软件开发 的 重复 投资   。 
 　 　 2 . 减少 系统维护 的 工作量 。 Intranet 模式 具有 很 高 的 集中性 ， 所有 的 应用程序 和 数据库 均 放在 服务器端 ， 客户端 只 安装   浏览器 。 系统维护 的 工作 全部 集中 在 服务器端 ， 从而 真正 实现 客户端 的 零 维护 。 
 　 　 3 . 减少 客户端 硬件 的 投资 。 传统 的 客户机 / 服务器 的 方式 中 客户机 硬件 的 配置 要求 很 高 ， 而 在 Intranet 模式 下 ， 只要 客   户 机能 运行 浏览器 即可 。 这样 ， 就 可以 降低 每台 客户机 在 硬件 上 的 费用 。 
 　 　 4 . 无须 对 用户 进行 特殊 培训 。 在 基于 Intranet 模式 的 系统 中 ， 将 全部 采用 浏览器 作为 用户界面 ， 所以 ， Intranet 模式 下系   统的 用户界面 更具 友好 性 和 一致性 ， 从而 可以 节省 用户 的 培训 费用 。 
 　 　 5 . 易于 实现 企业 间 的 连接 。 由于 网络 的 传输 协议 采用 TCP / IP 协议 和 WWW 技术 ， 使 之 很 容易 构筑 连接 多个 企业 系统 的 应用   ， 同时 易于 在 网上 发布 各种类型 的 信息 。 
 2 　 系统 改造 方法 
 　 　 综上所述 基于 Intranet 模式 的 信息系统 具有 很多 的 优势 ， 但 将 传统 的 信息系统 改造 成 Intran   et 模式 并 不是 轻而易举 的 。 为了 有效 地 保护 已有 的 投资 ， 必须 充分利用 企业 原有 的 信息系统   资源 ， 如 数据库 、 硬件 等 ， 同时 把 Intranet 与 原有 系统 做 无缝 集成 。 
 　 　 可以 采用 Internet 的 WWW 技术 的 三层 体系结构 作为 新 的 企业 信息系统 框架 ， 即 在 原有 的 客户   机和 服务器之间 ， 逻辑 上 插入 1 个 中间 机构 ， 该 机构 可以 包括 多个 物理 上 的 服务器 ， 这些 服   务器 可 称为 集成 服务器 ， 它 是 具有 连接功能 的 新型 Web 服务器 ， 是 整个 系统 的 核心 。 在 这样   一个 体系 中 ， 原来 由 客户机 承担 的 数据库 存取 和 复杂 计算 等 工作 转移 到 了 位于 第 2 层 的 集成   服务器 上 ， 客户机 只 负责 提供 用户界面 ， 从而 减轻 了 客户机 的 沉重负担 。 这种 三层 体系结构   是 对 传统 客户机 / 服务器 二层 体系结构 的 扩展 。 它 的 运作 方式 是 ， 装有 浏览器 的 第 1 层 客户机   ， 首先 访问 第 2 层 的 网络 集成 服务器 ， 位于 第 2 层 的 集成 服务器 为 客户机 提供 访问 处于 第 3   层 的 客户服务器 、 文件 服务器 或 主机 系统 时 所 需 的 通信软件 。 新 增加 的 第 2 层 服务器   不仅   能够 连接 已有 的 服务器 ， 而且 它 还是 处理 关键 任务 的 服务器 。 由于 它 介于 客户机 和 数据库 服   务器 之间 ， 使得 两者 不 直接 相连 ， 并 将 事务处理 逻辑 模块 集中 在 集成 服务器 上 ， 使得 用户 不   能 非法 侵入 ， 从而 加强 了 系统 的 安全性 ； 第 2 层 服务器 还 具有 均衡 分配 网络资源 的 功能 ， 使   网络 的 分布式 处理 成为 可能 。 由于 有 了 这样 1 个 中间 服务器 ， 使 整个 系统 具有 良好 的 稳定性   和 可扩展性 。 
 　 　 网络 集成 服务器 的 一项 关键 任务 是 实现 与 已有 客户服务器 、 文件 服务器 或 主机 系统 中 的 数据   库 的 连接 ， 目前 一般 可以 采用 2 种 做法 ： 一种 是 在 Web 服务器端 提供 中间件 来 连接 Web 服务器   和 数据库 服务器 ， 中间件 负责管理 Web 服务器 和 数据库 服务器之间 的 通信 并 提供 应用程序 服   务 ， 它 能够 直接   访问 数据库 ， 或者 调用 外部 程序 或 脚本 代码 来 访问 数据库 ， 因此 可以 提供 与 数据库 相关 的 动   态 HTML 页面 ， 或 执行 用户 查询 ， 并 将 查询 结果 格式化 成 HTML 页面 ， 通过 Web 服务器返回 给 用   户 浏览器 。 另 一种 是 把 应用程序 从 Web 服务器端 下载 到 客户端 并 在 客户端 浏览器 中 运行 下载   程序 直接 访问 数据库 ， 如 Java   Applet 。 但 这种 方法 对 浏览器 有 特殊要求 ， 且 安全性 较差 。 
 3 　 Intranet 的 不足 和 改进 
 　 　 基于 WWW 技术 的 Intranet 模式 的 信息系统 也 存在 不足 ， 下面 是 在 开发 时应 注意 的 问题 ： 
 　 　 1 . 事务处理 。 
 　 　 HTTP 是 非常简单 的 无态 协议 ， 它 响应 来自 WWW 浏览器 的 请求 ， 传送 处于 所 指定 URL 处 的 文件 。   每 传送 1 次 文件 ， 会话 就 被 中断 ， 所以 不能 保证 事务处理 的 连续性 。 而 传统 的 客户机 / 服务器   使用 有态 协议 ， 一旦 客户端 启动 ， 它 一直 和 服务器端 保持 多种 联系 ， 其中 的 状态 信息 存储 数   据库 系统 和 所有 客户端 交互 的 上下文 信息 ， 所以 能 保证 事务处理 的 连续性 。 为了 克服 HTTP 协   议 的 这 一 弱点 ， 弥补 其会话 管理 功能 的 不足 ， 可 采用 以下 2 种 方法 ： 一种 是 将 客户端 用户 标   识 嵌入 到 HTTP 中 管理 会话 ； 另 一种 是 使用 独自 的 通信协议 。 
 　 　 将 客户端 用户 标识 嵌入 到 HTTP 中 的 方式 简单 易用 。 在 初始 访问 时 ， 浏览器 经由 Web 服务器 来   访问 数据库 软件 ， 在 这个 阶段 ， 连接 中间件 发放 客户端 用户 标识 ， 并 将 客户端 用户 标识 通知   浏览器 。 在 第 2 次 以后 的 访问 中 ， 就 把 这个 客户端 用户 标识 嵌入 到 URL 中 。 只要 客户端 用户 标   识 一致 ， 连接 中间件 就 判定 为 连续 会话 。 这种 方式 叫做 模拟 会话 方式 。 由于 对 HTTP 未 做 任何   改动 ， 所以 通用性 很 好 。 不管 是 何种 浏览器 ， 也 不管 在 通信 路径 上 有无 防火墙 ， 都 可以 采用   这种 方式 。 但是 ， 用 这种 方式 所 实现 的 会 话 管理 功能 毕竟 是 模拟式 的 ， 当 网络 发生 错误 ， 客   户端 用户 标识 中 产生 了 伪 字符 时 ， 会话 就 会 中断 。 目前 在 Internet 上 使用 的 Cookie 技术 就是   采用 这种 方式 。 
 　 　 实现 会话 的 另 一种 方法 是 在 Web 服务器 和 浏览器 的 通信 中 ， 使用 独自 的 协议 。 在 最初 访问 时   ， 一旦 从 Web 服务器 上 下载 了 在 浏览器 上 运行 的 程序模块 ， 此后 小 程序 Applet 和 网关 软件 就   用 独自 的 协议 进行 通信 。 由于 使用 独自 的 协议 ， 所以 可 避免 HTML 所 存在 的 问题 。 
 　 　 2 . CGI 网关 。 
 　 　 Web 服务器 每 得到 1 个 请求 ， CGI 网关 就 在 服务器端 产生 1 个 过程 ， Web 服务器 同时 收到 的 请   求越 多 ， 服务器端 运行 的 进程 就 越 多 ， 而 为 每 一个 请求 创建 1 个 进程 都 需要 占用 大量 系统 资   源 ， 因而 可能 导致系统 崩溃 ， 此外 浏览器 客户端 还 必须 长时间 等待 ( 通常 是 不能 忍受 的 ) 才能   得到 对 其 请求 的 响应 。 不同于 浏览器 处理 1 个 HTTP 请求 ， 在 客户机 / 服务器 系统 中 ， 标准 客户   端 请求 处理 之间 不用 等待 进程 的 启动 ， 客户端 能够 以 异步 方式 向 服务器端 发送 请求 ， 在 请求   被 处理 的 同时 ， 又 可 做 其它 工作 。 而 以 Web 为 基础 的 客户机 必须 等待 每 一个 请求 被 处理 ， 处   理 结束 才能 启动 另 一个 任务 。 这样 往往 会 降低 系统 响应速度 。 
 　 　 解决 这些 问题 的 方法 是 采用 改进 的 CGI 网关 ， 如 微软 的 ISAPI 。 ISAPI 方法 使用 动态链接库 ( DL   L ) ， 这样 就 避免 了 在 CGI 中为 产生 并发 进程 所 需 的 额外 开销 ， 1 个 DLL 可以 在 第 1 次 收到 对 它 的   请求 时 装入 ， 然后 留在 内存 中 等待 其它 请求 以 提供 服务 ， 和 CGI 进程 模型 不同 ， ISAPI   DLL 和   Web 服务器 装载 在 同一 地址 空间 。 DLL 可以 常驻 在 内存 中 ， 服务器 知道 DLL 在 等待 服务 请求 。   
 　 　 3 . 只用 HTML 语言 不能 模拟 所有 客户机 / 服务器 系统 的 功能 。 
 　 　 只 利用 HTML 语言 难以 模拟 通常 的 客户 功能 ， 包括 GUI 、 外部 工具 的 调用 、 库函数 的 调用 、 对   设备 的 操作 和 系统 服务 的 调用 ， 这 可以 用 以下 方法 来 解决 ： 
 　 　 ( 1 ) 用 集成 服务器 上 的 软件 中间件 来 模拟 。 由 中间件 根据 浏览器 的 请求 执行 所有 以前 在 客户端 执行 的 程序 ， 把 显示 结果 返回 客户端 。 
 　 　 ( 2 ) 采用 新 的 MIME 类型 和 MIME 句柄 。 这种 情况 下 必须 在 客户端 设置 MIME 类型 的 驱动程序 ， 当 浏览器 接收 该 类型 时 将 启动 和 该 类型   相关 的 应用程序 。 
 　 　 ( 3 ) 采用 下载 软件 构件 方法 。 编写 适合 浏览器 运行 的 特定 软件 构件 ， 由 中间件 下载 到 浏览器 中 运行 ， 如 ActiveX 控件 和 Jav   a   Applet 。 
 4 　 系统 改造 的 原则 
 　 　 在 对 传统 信息系统 进行 Intranet 改造 时 必须 遵照 以下 原则 ： 
 　 　 1 . 能够 实现 已有 系统 的 大部分 功能 ； 
 　 　 2 . 充分利用 已有 系统 的 软件 构件 ， 对 已 存在 的 系统 做 最小 的 改动 ； 
 　 　 3 . 不要 改变 HTTP 和 HTML ； 
 　 　 4 . 客户端 浏览器 应 使用 流行 的 标准 浏览器 ， 如 Netscape   Navigator 或 Internet   Explorer 。   
 　 　 对 传统 信息系统 的 改造 同 开发 一个 新 系统 一样 ， 是 一项 复杂 的 系统工程 ， 必须 做好 充分 的 前   期 准备 工作 ， 应对 现有 系统 进行 全面 细致 的 分析 ， 做好 对系统 进行 改造 的 可行性 分析 ， 选择   适合 原有 系统 的 改造 方法 和 工具 ， 最好 采用 现有 成熟 的 技术 ， 既 能够 保护 原有 的 投资 ， 又 能   够 使 改造 后 的 系统 在技术上 具有 先进性 ， 并 达到 预期 的 目标 ， 取得 事半   功倍 的 效果 。   
 作者 单位 ： 大连理工大学 图书馆 ( 116023 ) 
 参考文献 
 　 1 　 Dossick   S   E , Kaiser   G   E . WWW   accers   legacy   client / server   app   lication . Computer   Networks   and   ISDN   System , 1996 ； 28 
 　 2 　 Robertson   P . Integration   legacy   systems   with   modern   corporate   applications . C   ommunication   of   ACM , 1996 ; 40 
 　 3 　 赵洪彪 ， 周 立柱 . 数据库系统 与 WWW 的 集成 途径 . 计算机科学 ， 1997 ； ( 6 ) 
 　 4 　 安秋顺 . 企业 新型 信息系统 . 计算机 世界 ， 1997 ； 27 
 　 5 　 安秋顺 . Intranet 的 三年 实践 . 计算机 世界 ， 1997 ； 33 
 ( 收稿 日期 ： 1998 - 09 - 10 ) 
