微型机 与 应用 
 MICROCOMPUTER   &   ITS   APPLICATIONS 
 2000   Vol.19   No.2   P.20 - 21 
 
 
 
 
 手工 恢复 被 CIH 病毒破坏 的 硬盘 
 齐玉斌 
 摘   要 ：   硬盘 基本 分区 和 逻辑 分区 的 控制 机制 ， 介绍 了 被 CIH 病毒破坏 硬盘 的 主 分区表 和 逻辑 分区表 的 手工 恢复 办法 。 
 关键词 ：   CIH 病毒   基本 分区   逻辑 分区 s 
 　 　 CIH 病毒 发作 后 对 微机 的 破坏 主要 有 2 种 方式 ： 一是 修改 某些 主板 的 BIOS 内容 ， 造成 微机 彻底 瘫痪  这 也 是 CIH 病毒 之所以 厉害 的 主要 原因 ， 它 打破 了 病毒 不能 破坏 硬件 的 界限  ； 二是 破坏 硬盘 的 主 引导 记录 、 分区表 ， 使 微机 不能 从 C 驱 启动  即使 从 A 驱 启动 也 不 承认 C盘 的 存在  ， 使 硬盘数据 完全 丢失 ， 给 用户 造成 很大 损失 。 硬盘 主 引导 记录 、 分区表 是 使用 FDISK 命令 时 形成 的 。 FDISK 命令 执行 后 ， 在 硬盘 0 面 0 道 1 扇区 建立 硬盘 主 引导 记录 和 分区表  PBB  ， 分区表 描述 了 各个 分区 的 起止 地址 等 信息 。 
 1   PBB 表中 各项 的 含义 
 　 　 PBB 表 中共 有 4 个 表项 ， 每个 表项 为 16B 。 另外 ， 还有 PBB 结束 标志 2B ， 故 整个 分区表 为 66 个 字 。 图 1 所示 为 1 个 PBB 表 的 实例 。 
 
 图 1 　 个 具体 的 硬盘分区 表 
 　 　 如前所述 ， 从 03BE ～ 03CD 是 第 1 表项 ， 从 03CE ～ 03DD 是 第 2 表项 ， … … 。 下面 分别 叙述 分区表 项中 各个 参数 的 意义 （ 以 第 1 个 分区表 项为例 ） 。 
 　 　 （ 1 ） 引导 指示 符 （ 80H 为 可 引导 的 活动 分区 ， 00H 为 非 引导 分区 ） 。 
 　 　 （ 2 ） 该 分区 的 起始 地址 （ 面号 、 扇区 号 、 柱面 号 ） 。 
 　 　 （ 3 ） 操作系统 指示 符 。 其值 ： 00H 表示 不 识别 的 （ 没有 指定 的 ） ； 01H 为 12bit ／ FAT 项 的 DOS 系统 ； 02H 为 XENIX 系统 ； 03H 为 XENIX 系统 ； 04H 为 16bit ／ FAT 项 的 DOS 系统 ； 05H 为 扩展 DOS （ EXT － DOS ） 系统 ； ≥ 06H 为 非 DOS （ NON － DOS ） 系统 。 
 　 　 （ 4 ） 分区 结束 地址 （ 面号 、 扇区 号 、 柱面 号 ） 。 
 　 　 （ 5 ） 该 分区 之前 的 扇区 总数 。 
 　 　 （ 6 ） 该 分区 占用 扇区 数 。 
 　 　 （ 7 ） ～ （ 12 ） 含义 与 （ 1 ） ～ （ 2 ） 的 含义 类似 。 
 　 　 （ 13 ） 主 引导 记录 结束 标志 。 
 2   硬盘 上 数据 的 组织 方法 
 2 ． 1   硬盘分区 区域 的 划分 方法 
 　 　 利用 FDISK 命令 对 硬盘 进行 分区 后 ， 各 分区 的 区域 的 划分 是 以 硬盘 的 盘面 还是 以 柱面 为主 对 其 进行 分区 划分 ？ 笔者 经过 对 PBB 表 的 深入研究 ， 发现 硬盘分区 是 以 柱面 为主 进行 的 。 
 　 　 设 硬盘 只有 C 、 D2 个 分区 ， 则 C 分区 和 D 分区 的 区域 如图 2 所示 ， A 处 各 柱面 为 C 分区 ， B 处 各 柱面 为 D 分区 。 可见 ， C 区 是从 低 序号 柱面 连续 向 高 序号 柱面 分布 ， 到 满足 其 容量 的 柱面 处 结束 ； D 区 从 C 区 结束 处 的 下 一个 柱面 开始 ， 又 连续 向 高 序号 柱面 分布 。 这样 对 硬盘 进行 分区 区域 的 划分 ， 其 优点 是 ： 即将 分区 划分 在 一段 连续 的 柱面 区域 ， 在 使用 该 分区 时 ， 减少 了 磁头 的 运动 次数 ， 从而 使 存取数据 的 时间 进一步 缩短 ， 提高 了 用户 操作速度 。 
 
 图 2 　 硬盘 
 2 ． 2   硬盘 上 数据 的 组织 顺序 
 　 　 为了 有效 地 对 硬盘 上 的 数据 进行 组织 、 管理 ， 操作系统 在 设计 时 将 硬盘 上 的 信息 进行 了 分类 ， 一部分 是 控制 信息 ， 另 一部分 是 数据 信息 。 控制 信息 包括 硬盘 主 引导 记录 （ MBR ） 、 硬盘分区 表 （ PBB ） 、 DOS 引导 记录 （ DBR ） 、 文件 分配 表 （ FAT ） 、 文件目录 表 （ FDT ） 等 。 数据 信息 则 是 具体 的 程序 、 数据 。 控制 信息 和 数据 信息 在 硬盘 上 的 组织 顺序 如下 ： 
 　 　 MBR （ 0 面 0 柱 1 扇区 ） → DBR （ 1 面 0 柱 1 扇区 ） → FAT （ 1 面 0 柱 2 扇区 ） → FDT （ 1 面 0 柱 33 扇区 ） → 硬盘数据 区 
 2 ． 3   DOS 逻辑 分区 的 管理 
 　 　 DOS 操作系统 允许 为 硬盘 设置 多个 分区 ， 除了 分区 C 外 ， 其它 的 分区 （ 如 分区 D 、 E 等 ） 通称 为 逻辑 分区 。 操作系统 是 通过 1 个 分区表 链 （ PBB 链 ） 来 完成 对 各 逻辑 分区 管理 的 ， 这个 PBB 链 的 头 结点 是 MBR 中 的 PBB 。 
 　 　 在 MBR 里 的 PBB 表中 ， 除了 可以 对 基本 分区 C 进行 定义 外 ， 还 可以 有 1 个 表项 对 DOS 的 扩展 分区 进行 说明 ， 而 这个 扩展 分区表 项则 是 PBB 链 的 头 结点 。 操作系统 在 使用 硬盘 的 逻辑 分区 时 ， 将 从 PBB 的 头 结点 获取 下 一个 逻辑 分区表 的 地址 ， 如此 下去 ， 操作系统 就 获得 了 各 逻辑 分区 的 起止 地址 ， 可以 对 逻辑 分区 中 的 数据 进行 存取 管理 。 图 3 为 PBB 链 柱面 0 、 磁头 0 、 扇区 1 ： MBR 。 
 
 图 3 　 1 个 PBB 链 的 示例 
 3   PBB 表中 各项 的 规则 与 计算 
 　 　 笔者 经过 多次 实验 、 分析 ， 对 PBB 表中 各项 的 规则 与 计算方法 进行 探讨 ， 得出 了 如下 结论 ： 　 　 　 1 ． 在 主 PBB 表 的 4 个 分区表 项中 ， 有且 只有 1 个 为 可 引导 分区 ； 
 　 　 2 ． 基本 DOS 分区 起始 的 面 、 柱 、 扇区 号 应 是 1 、 0 、 1 ； 
 　 　 3 ． PBB 表 必须 以 55AAH 结束 。 
 　 　 PBB 表中 各项 的 计算方法 如下 （ 参照 图 1 ） ： 
 　 　 1 ． （ 5 ） 处为 分区 C 之前 的 扇区 数 ， 该数 与 CMOS 中 每 磁道 扇区 数 相一致 。 这 是因为 0 面 0 柱 所有 扇区 都 给 了 MBR ； 
 　 　 2 ． （ 6 ） 处为 分区 C 总共 使用 的 扇区 数 ， 该 数值 可以 从 （ 2 ） 、 （ 4 ） 计算 得到 ， 即 
 ［ （ 180 － 0 ＋ 1 ） * 10 － 1 ］ * 34 ＝ 61506S 
 　 　 这个 数据 还 可以 由 另 一种 途径 获得 ： 用 CHKDSK 命令 对 C盘 进行 检查 ， 可知 C盘 数据 区 总 容量 为 31412224B ， 该 数值 除以 512B ／ S ， 得 51352S ， 再 加上 控制 信息 （ 1S 的 DBR 、 121S 的 FAT 、 32S 的 FDT ） ， 即 
 61325 ＋ 1 ＋ 121 ＋ 32 ＝ 61506S   
 　 　 DBR 、 FAT 、 FDT 所 占用 的 扇区 数 ， 可 由 工具软件 NU 获得 。 
 　 　 3 ． （ 8 ） 处 是 逻辑 分区 的 首 地址 ， 其中 的 柱面 号 是  4  中 柱面 号 的 继续 ， 如  4  中是 B4 ， 则 该处 为 B5 。 
 　 　 4 ． （ 11 ） 处 表示 D 分区 之前 的 总 扇区 数 ， 是 （ 5 ） 、 （ 6 ） 二 部分 的 和 。 
 　 　 5 ． （ 12 ） 处 是 D 分区 占用 的 总 扇区 数 。 如 2 ． 说明 ， 也 可以 有 2 种 方法 计算出来 。 
 4   实践 与 应用 
 　 　 在 对 硬盘分区 及 硬盘数据 组织 情况 有 了 深入 的 了解 后 ， 就 可以 用 手工 方法 恢复 被 CIH 病毒破坏 的 引导 记录 和 分区表 了 。 下面 结合 1 个 实例 阐述 手工 恢复 控制 信息 的 方法 。 
 　 　 例 ： 1 台 微机 CIH 病毒 发作 后 不认 硬盘 ， 从 A 驱 启动 后 ， 不能 将 当前 盘 转变 为 C盘 ， 提示 ： Invalid   drive   specification ． 
 　 　 处理 ： 从 A 驱 启动 微机 ， 然后 运行 NU 软件 ， 发现 C 仍为 不 可见 ， 只好 使用 DEBUG 命令 。 从 A 驱 启动 DEBUG 
 　 － A 
 　 　 　 　 MOV   AX ， 0201 
 　 　 　 　 MOV   BX ， 0200 
 　 　 　 　 MOV   CX ， 0001 
 　 　 　 　 MOV   DX ， 0080 
 　 　 　 　 INT   13 
 　 　 　 　 INT   20 
 　 　 － G 
 　 　 － D200 ； 观察 分区表 ， 发现 已 完全 受损 ， 按照 上面 介绍 的 原则 ， 先对 C 区 分区表 进行 修复 ， 修复 后 的 分区表 如下 ：   
 
 　 　 重新启动 微机 ， 此时 已 可以 从 C盘 引导 ， 但 D盘 仍 不 可见 。 再 按 如下 方法 恢复 D盘 上 的 数据 ： 运行 CHKDSK ， 检查 C盘 数据 区 空间 为 31412224B ， 即 61352S ， 运行 NU ， 观察 C盘 上 DBR 、 FAT 、 FDT 所 占 扇区 个数 ， 分别 为 1S 、 18S 、 14S ， 这 说明 C 区共 占用 了 61506 个 扇区 ， 61506 ／ 34 ／ 10 ＝ 181 ， 即 C 区共 占用 了 181 个 磁道 ， 也 就 是从 1 面 0 柱 开始 ， 到 9 面 181 柱 结束 。 按此 数值 ， 利用 NU 修改 分区表 为 ： 
 
 　 　 重新启动 微机 ， 则 C 、 D 分区 均 已 可见 ， 其上 数据 完整 恢复 。 对于 D 区 的 分区表 项 ， 也 可用 上述 方法 进行 精确 设置 。 
 　 　 对 其它 逻辑 分区  如 E 、 F 等  也 可 按 此 方法 进行 恢复 。 
 齐玉斌 （ 秦皇岛 河北 职业 技术 师范学院 教务处  066600 ） 
 收稿 日期 ： 1999 － 09 － 01 
