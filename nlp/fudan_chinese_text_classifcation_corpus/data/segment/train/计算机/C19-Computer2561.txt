软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 19 卷   第 3 期     Vol.19   No.3   1999 
 
 
 
 以 项目 为 中心 的 面向对象 复用 支持 
 陈小群 　 邵维忠 　 梅宏 　 杨芙清 
 摘 　 要 　 现有 的 软件 复用技术 通常 是 围绕 着 库来 组织 利用 标准 的 和 通用 的 可 复用 资源 . 例如 ， 面向对象编程 环境 中 的 类库 和 通用 构件 库 . 然而 ， 这种 以库 为 中心 的 复用 方式 在 一定 程度 上 忽略 了 可 复用 资源 的 项目 相关 信息 ， 而 项目 相关 信息 记录 了 可 复用 资源 的 应用 语境 ( Application   Context ) . 应用 语境 有利于 可 复用 资源 的 理解 和 使用 . 为此 ， 提出 了 一种 围绕 着 一个 项目 的 文档 来 组织 和 利用 可 复用 资源 的 复用 途径 ， 即以 项目 为 中心 的 文档 复用 ， 用以 支持 在 相同 应用领域 中一族 软件 的 开发 . 探讨 了 当前 的 面向对象 方法 在 支持 文档 复用 方面 的 一些 局限性 ， 提出 了 一种 增强 文档 的 方案 . 针对 文档 中 可 复用 资源 的 浏览 和 维护 ， 探讨 和 提出 了 对 在 文档 中 导航 的 需求 . 
 关键词 　 复用 ， 面向对象 ， 面向对象 方法 . 
 中图法 分类号 　 TP311 
 Supporting   Project - centered   Object - oriented   Reuse 
 CHEN   Xiao - qun   SHAO   Wei - zhong   MEI   Hong   YANG   Fu - qing 
 ( Department   of   Computer   Science   and   Technology   Beijing   University   Beijing   100871 ) 
 Abstract 　   Current   software   reuse   techniques   usually   utilize   a   repository   to   organize   standard   and   generic   reusable   assets ,   such   as   class   libraries   and   generic   component   repository   in   object - oriented   programming   environments .   However ,   this   repository - centered   reuse   ignores   the   project   related   information   to   some   extent ,   which   describes   application   context   of   reusable   assets .   Application   context   is   useful   to   the   understanding   and   utilization   of   the   assets .   In   this   paper ,   an   alternative   object - oriented   reuse   approach   is   presented ,   which   utilizes   the   documentation   of   a   project   to   organize   reusable   assets .   This   so - called   project - centered   documentation   reuse   is   very   useful   to   the   development   of   a   family   of   software   in   the   same   domain .   In   the   paper ,   some   limitations   of   current   object - oriented   methods   for   supporting   documentation   reuse   are   discussed   and   a   new   method   for   enhancing   documentation   for   reuse   is   provided   and   analyzed .   Then ,   aiming   at   browsing   and   maintaining   reusable   assets   in   documentation ,   the   needs   for   navigation   in   documents   are   discussed   and   enumerated . 
 Key   words 　 Reuse ,   object - orientation ,   object - oriented   method . 
 　 　 软件 复用 是 提高 软件生产率 和 软件 质量 的 有效途径 . 由于 面向对象 方法 中 的 封装 和 继承 机制 ， 在 软件开发 中 采用 面向对象 范型 被 普遍认为 可以 提高 软件 的 可 复用 性 ， 包括 代码 的 可 复用 性 以及 分析 和 设计 的 可 复用 性 . 目前 在 学术界 和 工业界 ， 大家 的 注意力 大都 放在 标准 的 和 通用 的 可 复用 资源 的 提取 和 利用 上 . 例如 ， 面向对象 的 编程 环境 中 的 通用 类库 ， 是 在 面向对象编程 中 复用 代码 的 一个 有效 的 手段 . 设计模式 ( design   pattern ) ［ 1 ］ 和 框架 ( framework ) ［ 2 ］ 的 研究 探讨 了 在 面向对象 软件设计 中 反复 使用 的 设计 知识 的 表示 和 利用 ， 它们 可以 表示 为 由 一组 相关 的 类 构成 的 结构 ， 是 一种 面向对象 的 设计 复用 . 这些 通用 的 可 复用 资源 ， 包括 类 、 模式 和 框架 等 ， 通常 是 放在 一个 库中 ， 并 按照 某种 分类 方法 进行 分类 . 软件 开发人员 围绕 着 库 ， 浏览 和 查找 可 复用 资源 ， 并 将 资源 应用 在 软件开发 中 . 我们 将 这种 复用 方式 称为 以库 为 中心 的 软件 复用 . 然而 ， 这种 以库 为 中心 的 复用 支持 在 一定 程度 上 忽略 了 可 复用 资源 的 项目 相关 信息 ， 而 项目 相关 信息 记录 了 可 复用 资源 的 应用 语境 ( application   context ) ， 应用 语境 有利于 可 复用 资源 的 理解 和 使用 . 
 　 　 良好 地 组织 软件 文档 ， 包括 分析 文档 、 设计 文档 、 实现 文档 和 测试 文档 等 ， 可以 有效 地 提高 软件生产率 和 质量 ， 并 降低 软件维护 的 开销 . 根据 应用 开发 经验 ， 我们 发现 一个 应用 项目 的 文档 ， 特别 是 由 复用 专家 开发 的 项目 的 文档 ， 对 在 相同 应用领域 中 类似 应用 开发 还 具有 很 高 的 复用 价值 . 与 库 机制 对比 ， 一个 软件 项目 的 文档 可以 看成 是 另 一种 组织 可 复用 资源 的 方式 ， 其中 包含 着 更 多 的 可 复用 资源 的 应用 语境 . 一个 可 复用 资源 的 应用 语境 包括 该 资源 与 应用 系统 中 其他 部分 的 接口 ; 该 资源 的 使用 是否 还 需要 其他 的 可 复用 资源 等等 . 此类 信息 可以 用来 理解 和 指导 文档 中 的 局部 可 复用 资源 （ 类 和 结构 ） 的 使用 . 此外 ， 项目 文档 本身 作为 一个 整体 也 是 一种 可 复用 资源 . 文档 中 的 可 复用 资源 的 应用 语境 能 对 在 相同 应用领域 中 的 应用 开发 项目 提供 更好 的 复用 支持 . 因此 ， 本文 探讨 了 围绕 着 一个 项目 的 所有 文档 来 组织 和 利用 可 复用 资源 的 技术 ， 我们 称之为 以 项目 为 中心 的 文档 复用 ， 强调 应用 项目 的 文档 对 相同 应用领域 中 应用 开发 的 复用 支持 . 
 　 　 “ 以 项目 为 中心 ” 并 不是 一个 新 的 概念 ， 例如 ， 现有 的 编程 环境 大都 是 以 项目 为 中心 的 ， 即以 应用 系统 的 开发 项目 为 管理 单位 ， 组织 和 管理 开发人员 的 活动 以及 开发 过程 中 的 产物 （ 文档 、 程序代码 等 ） . 在 应用程序 的 编写 过程 中 ， 编程人员 需要 创建 一个 项目 文件 （ project   file ） ， 并 基于 该 文件 编辑 、 编译 、 调试 、 运行 应用程序 . 
 　 　 以 项目 为 中心 的 软件 复用 途径 就是 通过 项目 的 文档 来 组织 和 管理 可 复用 资源 ， 并 利用 文档 中 的 语境 信息 理解 和 浏览 这些 资源 ， 以便 在 相似 的 应用 系统 开发 中 复用 它们 . 该 途径 的 价值 体现 在 以下 几个 方面 ： 
 　 　 ( 1 )   通过 例子 学习 . 一个 项目 的 所有 文档 提供 了 一个 完整 的 实例 . 
 　 　 ( 2 )   支持 相同 应用领域 中 软件产品 族 的 开发 . 同一 领域 中 的 两个 软件产品 ， 从 需求 到 设计 和 实现 存在 大量 的 相同之处 . 
 　 　 ( 3 )   支持软件 开发周期 中 各 阶段 的 复用 . 不仅 代码 文档 ， 分析 和 设计 文档 也 是 有效 的 可 复用 资源 . 
 　 　 ( 4 )   为 可 复用 资源 提供 了 充分 的 上下文 相关 信息 . 这些 信息 可用 来 理解 和 指导 软件 复用 . 可 复用 资源 ， 比如 对象 类 ， 其 上下文 相关 信息 包括 ： 与 系统 中 其他 部分 的 接口 ; 该类 的 修改 对系统 的 影响 等 . 
 　 　 ( 5 )   对 领域 分析 ［ 3 ］ 提供 支持 . 领域 分析 需要 对 特定 领域 中 的 多个 项目 进行 分析 ， 提取 通用 的 领域 模型 和 软件 的 体系结构 . 项目 文档 是 必不可少 的 素材 . 
 大致 上 ， 我们 可以 将 软件开发 与 棋类 活动 做个 比较 ， 一个 软件 项目 对应 于 一盘棋 . 在 下棋 的 时候 ， 我们 常常 会 用到 各种 定式 ， 这些 定式 可以 看作 是 软件 复用 中 的 通用 可 复用 资源 . 然而 ， 要 成为 下棋 的 高手 只 记住 了 一些 定式 是 不够 的 ， 还 必须 学会 灵活 地 运用 它们 . 为此 ， 棋手 们 的 一项 必不可少 的 功课 就是 研究 高手 的 棋谱 . 这些 棋谱 可以 看作 是 软件 项目 的 文档 . 
 作为 一项 工程 活动 ， 软件开发 比 下棋 要 复杂 得 多 . 有效 的 文档 复用 要求 文档 本身 易于 理解 ， 在 项目 开发 中 采用 复用技术 ， 并 在 文档 中显式 地 记录 可 复用 资源 ， 以及 有效 地 从 文档 中 获取 可 复用 资源 的 手段 . 在 文档 中以 良好 的 结构 显式 地 表示 可 复用 资源 及 相关 信息 可以 有效 地 提高 文档 的 可 复用 性 . 另一方面 ， 如果 不能 高效 和 有效 地 从 文档 中 获取 可 复用 资源 ， 文档 复用 的 好处 也 会 丧失 掉 . 本文 对 这 两个 方面 的 问题 进行 了 探讨 . 第 1 节 介绍 如何 在 面向对象 的 文档 中显式 地 表示 可 复用 资源 . 第 2 节 探讨 了 为 获取 和 维护 文档 中 的 可 复用 资源 而 需要 的 导航 机制 . 第 3 节 总结 了 文档 复用 的 优点 ， 并 介绍 了 有关 下 一步 工作 的 设想 .   
 1 　 在 软件 项目 的 文档 中 表示 可 复用 资源 
 　 　 软件 项目 文档 中 的 信息 包括 图形 和 正文 两个 部分 . 图形 方式 适用 于 表示 一些 简单 的 信息 ， 而 复杂 的 细节 需要 用 正文 来 表述 . 
 　 　 软件 项目 的 文档 记录 了 软件 的 分析模型 、 设计 模型 、 程序代码 以及 其他 相关 的 信息 ， 其中 ， 分析 文档 记录 分析模型 ， 设计 文档 记录 设计 模型 . 这些 文档 又 分为 两个 部分 ： 应用 系统 的 文档 和 可 复用 资源 的 文档 . 可 复用 资源 的 文档 （ 如 框架 的 文档 ） 记录 了 可 复用 资源 的 模型 、 代码 和 相关 信息 . 对于 像 设计模式 和 框架 这样 复杂 的 可 复用 资源 ， 其 文档 可能 包含 大量 的 复杂 内容 ， 这些 内容 没有 必要 也 不 应该 放在 应用 系统 的 文档 中 . 例如 ， 文献 ［ 1 ］ 给出 的 设计模式 的 描述 模板 包括 问题 、 解 、 可用性 、 实现 、 例子 等 许多 部分 ， 如果 把 整个 描述 放在 应用 系统 的 文档 中 ， 将 使得 文档 十分 庞大 和 重复 . 
 　 　 文档 中 的 可 复用 资源 包括 构件 类 、 设计模式 、 框架 以及 它们 的 模型表示 . 例如 ， 构件 类 在 设计 模型 中 表示 为类 规约 （ specification ） ， 在 程序 中 表示 为 代码 . 为了 更好 地 支持 文档 （ 或 模型 ） 的 复用 ， 现有 的 面向对象 方法 应该 增强 在 以下 几 方面 的 支持 . 
 　 　 ( 1 )   OOA ( object - oriented   analysis ) 和 OOD ( object - oriented   design ) 的 区分 
 　 　 在 OOA 中 ， 重点 是 捕获 问题 域 的 语义 特性 ， 建立 需求 模型 ； 在 OOD 中 ， 重点 放在 捕获 求解 域 的 语义 特性 ， 建立 设计 模型 . 这样 建立 的 模型 有利于 分析 复用 和 设计 复用 . 某些 面向对象 方法 ［ 4 ］ 不 对 OOA 和 OOD 加以 严格 的 区分 . 
 　 　 ( 2 )   精确 的 语义 描述 
 　 　 精确 的 语义 描述 有助于 模型 的 理解 . 用 当前 的 面向对象 方法 ， 如 Coad - Yourdon ［ 5 , 6 ］ 方法 、 OOAD ( object - oriented   analysis   and   design ) ［ 7 ］ 和 OMT ( object   modeling   techniques ) ［ 8 ］ 等 建立 的 模型 中 ， 类及 对象 有 良好 的 语义 ， 甚至 可以 用 面向对象 程序设计 语言 一一对应 地 描述 它们 . 但是 ， 对类 及 对象 之间 的 关系 却 没有 标准 的 语义 和 用法 ［ 9 ］ . 当前 的 面向对象 方法 的 符号 体系 不 支持 显式 地 表示 多样 的 关系 语义 ， 通常 是 用 一个 简单 的 符号 表示 它们 ， 所 表达 的 概念 范围 太广而 不能 给出 精确 的 含义 . 特别 是 在 OOD 中 ， 绝大多数 的 面向对象 设计 方法 并 没有 真正 解释 类及 对象 之间 关系 的 含义 ， 许多 关系 的 语义 是 隐含 的 . 例如 ， 在 OOD 中 这些 方法 不 支持 可见 性 、 拥有 和 共享 等 语义 特性 的 显式 表示 . 一般 - 特殊 关系 是 个 例外 ， 它 具有 定义 良好 的 语义 规范 . 
 　 　 ( 3 )   “ 为什么 ” 的 描述 
 　 　 了解 设计 这些 关系 的 目的 或 用途 有助于 模型 的 理解 . 例如 ， 在 OOD 模型 中 引入 一个 关系 ， 其 目的 可能 是 为了 分隔 稳定 部分 和 易变 部分 ， 或 使 一个 对象 可以 访问 另 一个 对象 等 . 
 　 　 ( 4 )   设计 知识 的 表示 
 　 　 一般 的 面向对象 方法 着重于 应用 系统 的 建模 ， 较 少 支持 建模 过程 中 用到 的 知识 的 表示 . 面向对象 的 设计模式 和 框架 是 表示 开发人员 的 经验 和 知识 的 两种 有效 的 方式 ， 在 文档 中 标识 并 记录 这些 可 复用 资源 是 以 项目 为 中心 的 软件 复用 的 重要 方面 . 
 　 　 从 以上 分析 我们 可以 看出 ， 现有 的 面向对象 方法 对类 和 对象 之间 关系 的 描述 比较简单 ， 不利于 文档 和 可 复用 资源 的 理解 . 另一方面 ， 现有 的 方法 缺乏 对 软件 复用 的 支持 ， 尤其 缺乏 对 设计模式 和 框架 的 支持 . 为此 ， 我们 给出 一个 增强 应用 系统 的 文档 的 方案 ， 以 增强 模型 中 关系 和 可 复用 资源 的 描述 . 表 1 列出 了 文档 中 增加 的 特性 . 
 表 1 
 
 应用 系统 的 文档 关系 可 复用 资源 
 OOA 文档 领域 专有 的 术语 
 语义 特性 构件 类 
 OOD 文档 语义 特性 
 设计 目的 
 包含 关系 构件 类 
 设计模式 
 框架 
 程序 文档 包含 关系 构件 类 的 实现 
 设计模式 的 实现 
 框架 的 实现 
 文档 之间 OOA 模型 与 OOD 模型 之间 的 映射 
 OOD 模型 与 程序 之间 的 映射 
 
 　 　 在 OOA 中 ， 重点 放在 获取 问题 域 的 语义 特性 ， 构造 需求 模型 . 类及 对象 之间 的 关系 的 命名 采用 领域 所 特有 的 术语 ， 而 不是 用 像 “ 实例 连接 到 ” 、 “ 是 ... 的 部分 ” 这些 一般性 的 术语 ， 从而 更 准确 地 反映 连接 关系 的 问题 域 含义 . 例如 ， 对 车主 与 汽车 之间 的 关系 和 旅馆 与 客房 之间 的 关系 ， 我们 命名 为 “ 车主 拥有 汽车 ” 和 “ 旅馆 有 客房 ” ， 而 不是 “ 车主 连接 到 汽车 ” 和 “ 客房 是 旅馆 的 部分 ” . 此外 ， 我们 为 模型 中 的 关系 增加 一个 语义 特性 项 ， 用以 进一步 详细描述 关系 的 语义 特性 . 这些 特性 包括 ： 暂时 的 （ 如 房间 - 桌子 ） 、 元组 - 元素 （ 如 销售 （ 买主 ， 卖主 ， 商品 ) ) 、 组 - 成员 （ 如 旅馆 - 客房 ） 等 . 
 　 　 分析模型 中 需要 标识 的 可 复用 资源 是 构件 类 ， 这种 构件 类 具有 分析阶段 的 语义 ， 用于 静态 地 分析 类 模型 的 创建 . 
 　 　 在 OOD 中 ， 我们 在 关系 的 正文 描述 模板 中 添加 语义 特性 项 和 设计 目的 项 . 语义 特性 项 用以 细化 关系 的 设计 语义 ， 设计 目的 项 描述 为什么 引入 该 关系 . 
 　 　 设计 模型 中 的 可 复用 资源 包括 构件 类 、 设计模式 和 框架 ， 其中 ， 框架 可以 看成 是 组织 构件 类 和 设计模式 的 一种 机制 ， 构件 类 和 设计模式 属于 框架 描述 . 一个 框架 可以 包含 多个 构件 类 和 多个 设计模式 . 这种 包含 关系 可以 用来 浏览 和 追踪 可 复用 资源 . 
 　 　 分析模型 和 设计 模型 中 的 可 复用 资源 是 以 规约 的 形式 来 表示 的 . 在 程序代码 文档 分析模型 中 的 可 复用 资源 被 表示 为 代码 实现 . 与 设计 模型 类似 ， 在 程序代码 中 框架 与 构件 类 和 设计模式 之间 存在 着 包含 关系 . 
 　 　 OOA 模型 与 OOD 模型 之间 的 映射 关系 记录 了 OOA 模型 中 元素 （ 包括 可 复用 资源 ） 与 OOD 模型 中 元素 的 对应 关系 ， 即 OOD 模型 中 哪些 元素 实现 了 OOA 模型 中 哪些 元素 的 语义 . 通过 这种 映射 关系 ， 我们 可以 从 OOA 模型 跟踪 到 OOD 模型 中 的 对应 元素 ， 浏览 和 提取 可 复用 资源 ， 反之亦然 . 类似 地 ， OOD 模型 与 程序代码 之间 的 对应 关系 有助于 浏览 OOD 模型 和 程序代码 中 的 可 复用 资源 .   
 2 　 对 导航 的 需求 
 　 　 文档 复用 效果 的 好坏 ， 一方面 取决于 文档 的 组织 ， 详细 的 语义 、 设计 意图 以及 设计 知识 的 显式 表示 ; 另一方面 取决于 浏览 和 定位 可 复用 资源 的 便利 程度 . 没有 一个 高效 的 浏览 方法 , 文档 复用 的 好处 也 就 不 存在 了 . 面向对象 模型 是 由类 、 对象 和 它们 之间 的 关系 组成 的 复杂 的 网状结构 . 在 这样 一个 网状结构 中 ， 通过 沿着 关系 导航 来 浏览 面向对象 模型 ， 我们 可以 将 注意力 集中 在 相关 的 部分 ， 找到 完整 的 可 复用 资源 . 此外 ， 当 为了 达到 更 有效 的 复用 而 改动 模型 时 ， 例如 ， 将 子类 的 一些 特性 （ 即 属性 或 服务 ） 移到 较 一般 的 类 ， 或用 设计模式 改造 模型 中 的 某些 结构 ， 采用 导航 方式 可以 使 我们 跟踪 改动 所 影响 到 的 部分 ， 并 相应 地 对 这些 部分 进行 修改 . 
 　 　 面向对象 模型 通常 是 由 大量 的 小 实体 ， 而 不是 少量 的 大 实体 组成 的 . 要 理解 一个 实体 , 可能 需要 追踪 一串 实体 ， 以 定位 定义 该 实体 的 地方 . 对 这样 一个 复杂 的 系统 ， 明确 一个 实体 与 其他 实体 有 几种 语义 关联 ， 以及 一个 实体 的 改动 会 对 其他 实体 产生 何种 影响 ， 对 定位 和 维护 具有 完整 语义 的 可 复用 资源 是 必不可少 的 . 同时 ， 这 对 高效 导航 工具 的 设计 有 重要 的 指导作用 . 
 2.1   类 的 特性 的 定义 
 　 　 类 的 特性 ， 即 属性 和 服务 ， 有 5 种 定义 方式 ： ( 1 )   在 本类 中 定义 ; ( 2 )   通过 一般 - 特殊 关系 在 超类 中 定义 ; ( 3 )   通过 整体 - 部分 关系 ; ( 4 )   通过 消息 连接 关系 ; ( 5 )   通过 实例 连接 关系 . 通过 关系 定义 特性 有 一些 不同 的 情形 ， 并且 不 一定 是 在 直接 相关 的 类 中 定义 特性 . 例如 ， 通过 一般 - 特殊 关系 定义 特性 ， 一种 情况 是 ， 特性 在 超类 中 定义 ， 子类 中 不 改变 ； 另 一种 情况 是 ， 最初 特性 是 在 超类 中 定义 而 在 子类 中 改变 . 特性 可能 在 超类 的 超类 中 定义 . 因此 ， 要 得到 一个 类 的 完整 信息 , 仅 获取 该类 本身 的 定义 可能 是 不够 的 . 
 2.2   模型 的 改变 
 　 　 模型 的 改变 有 以下 几种 情形 : 类 特性 的 插入 、 删除 和 修改 ; 类 的 插入 和 删除 ; 类 的 合并 ; 类 的 分解 ; 关系 的 插入 和 删除 . 其中 ， 类 的 合并 和 分解 可以 由类 的 插入 和 删除 实现 . 
 2.3   改变 对模型 的 影响 
 　 　 类 特性 的 插入 、 删除 和 修改 ， 通过 一般 - 特殊 关系 ， 可能 影响 该类 与 子类 特性 的 语义 一致性 ， 例如 ， 子类 从 该类 继承 的 特性 被 修改 . 当 发生 不 一致 时 必须 分解 该类 或 在 子类 中 插入 自定义 的 特性 ， 使 子类 适应 变化 . 通过 消息 连接 关系 ， 类中 服务 的 改变 可能 影响 消息 连接 到 该类 的 类 ， 即 引用 该类 的 服务 的 类 . 实例 连接 和 整体 - 部分 关系 不 影响 类 的 封装 性 ， 因此 ， 类 的 内部 特性 的 改变 一般 不 影响 通过 这 两种 关系 关联 的 类 . 
 　 　 子类 特性 的 改变 也 可能 影响 到 超类 . 例如 ， 如果 一个 特性 在 所有 子类 中 定义 , 则 可以 在 超类 中 定义 它 , 以 避免 冗余 . 
 　 　 类 特性 的 改变 可能 导致 需要 删除 或 插入 某些 关系 . 例如 ， 一个 类 不再 从 其 直接 超类 继承 任何 特性 ， 在 这种 情况 下 需要 删除 该类 与 直接 超类 之间 的 一般 - 特殊 关系 ， 在 模型 中 找到 更 一般 的 类 ， 继承 其 特性 . 
 　 　 类 和 关系 的 插入 与 删除 需要 特别 当心 ， 否则 可能 破坏 模型 的 语义 完整性 . 仅仅 插入 类 不会 对模型 中 的 类 产生 影响 ， 除非 在 插入 的 类 与 模型 中 的 类 之间 插入 关系 . 共享 的 类 的 删除 会 影响 到 多个 类 . 具有 拥有 语义 关联 特性 的 类 ， 其中 一个 类 的 删除 导致 其他 类 也 必须 删除 . 一个 类 只有 当 它 没有 子类 的 时候 才能 被 删除 . 
 3 　 结   论 
 　 　 以 项目 为 中心 的 文档 复用 对 在 相同 应用领域 中一族 软件 的 开发 具有 特别 重要 的 意义 ， 为 通过 实例 学习 的 方式 提供 了 基础 . 一个 项目 的 文档 提供 了 丰富 的 上下文 相关 信息 ， 便于 我们 理解 可 复用 资源 是 如何 使用 的 . 
 　 　 文档 复用 效果 的 好坏 有 3 个 决定性 因素 ： 文档 编写 人员 （ 包括 分析 人员 、 设计 人员 和 编程人员 ） 的 经验 、 文档 中显式 记录 的 可 复用 资源 的 多少 、 浏览 和 提取 可 复用 资源 的 工具 的 效率 . 本文 论述 了 现有 的 面向对象 方法 在 表示 可 复用 资源 方面 的 不足 ， 以及 导航 对 高效 地 浏览 、 提取 和 维护 可 复用 资源 的 必要性 . 由于 篇幅 的 限制 ， 本文 简要地 介绍 了 一种 表示 可 复用 资源 的 方案 . 
 　 　 目前 ， 基于 一个 已经 实现 了 的 支持 面向对象 开发方法 的 工具 ， 我们 正在 开发 支持 文档 复用 的 原型 系统 . 该 原型 利用 工具 所 提供 的 建模 设施 ， 增加 了 一个 导航 工具 ， 并 利用 数据库 支持 可 复用 信息 的 记录 . 
 　 　 致谢   作者 感谢 王远宏 同志 、 刘晓丹 同志 和 陈兆良 同志 ， 感谢 他们 在 原型 实现 中所 做 的 工作 . 
 本文 研究 得到 国家自然科学基金 和 国家 “ 九五 ” 科技 攻关项目 基金 资助 . 作者 陈小群 , 1962 年生 , 博士 , 主要 研究 领域 为 软件工程 ， 面向对象 技术 ， 软件 复用 . 邵维忠 , 1946 年生 , 教授 ， 主要 研究 领域 为 软件工程 ， 面向对象 方法 和 技术 . 梅宏 , 1963 年生 , 博士后 ， 教授 ， 主要 研究 领域 为 软件工程 ， 软件开发 环境 ， 构件技术 ， 软件 复用 . 杨芙清 , 女 , 1932 年生 , 教授 , 博士生 导师 ， 中国科学院 院士 ， 主要 研究 领域 为 软件工程 ， 软件开发 环境 ， 软件 复用 ， 构件技术 . 
 　 　 本文 通讯联系 人 : 陈小群 ， 北京 100871 , 北京大学 计算机科学 与 技术 系 
 作者 单位 ： 北京大学 计算机科学 与 技术 系 　 北京 　 100871 
 参考文献 
 ［ 1 ］ Gamma   E   et   al .   Design   Patterns :   Elements   of   Reusable   Object - oriented   Software .   Reading ,   MA :   Addison - Wesley ,   1995 
 ［ 2 ］ Pree   W .   Active   guidance   of   framework   development .   Software   Concepts   and   Tools ,   1995 , 16 ( 3 ) : 136 ～ 145 
 ［ 3 ］ Ruben ,   Prieto - Diaz .   Domain   analysis :   an   introduction .   Software   Engineering   Notes ,   1990 , 15 ( 2 ) : 47 ～ 54 
 ［ 4 ］ Embley   D   et   al .   OO   systems   analysis :   is   it   or   isn ' t   it .   IEEE   Software ,   1995 , 12 ( 7 ) : 19 ～ 33 
 ［ 5 ］ Coad   P ,   Yourdon   E .   Object - oriented   Analysis .   Englewood   Cliffs ,   NJ :   Yourdon   Press .   1990 
 ［ 6 ］ Coad   P ,   Yourdon   E .   Object - oriented   Design .   Englewood   Cliffs ,   NJ :   Yourdon   Press .   1991 
 ［ 7 ］ Booch   G .   Object - oriented   Design   with   Applications .   Benjamin / Cummings ,   1991 
 ［ 8 ］ Rumbaugh   J   et   al .   Object - oriented   Modeling   and   Design .   Englewood   Cliffs ,   NJ :   Prentice - Hall ,   1991 
 ［ 9 ］ Civello   F .   Roles   for   composite   objects   in   object - oriented   analysis   and   design .   ACM   SIGPLAN   Notices ,   1993 , 28 ( 10 ) : 376 ～ 393 
 （ 1998 - 03 - 25 收稿 ） 
