软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 10 卷   第 7 期 　 No.7   Vol.10   1999 
 
 
 
 多媒体 对象 查询语言 及其 查询处理 
 田 增平 　 党华锐 　 周傲 英 　 施 伯乐 
 　 　 摘要 　 文章 研究 了 多媒体数据库 的 查询 需求 , 提出 结构化 的 多媒体 对象 查询语言 MOQL ( multi - media   object   query   language ) . 它 能够 支持 基于 类型 、 结构特征 、 同步 关系 、 时态 关系 和 内容 信息 的 多媒体 查询 . 以 DB2 数据库 为 存储 机制 , 定义 了 一组 代数 算子 和 变换 规则 , 利用 它们 可以 将 用户 定义 的 MOQL 查询 变换 为 代数 表达式 , 进行 代数 优化 , 并 将 代数 查询 表达式 转换 为 能够 在 DB2 数据库 上 运行 的 DB2SQL 和 C++ 查询 过程 . 
 　 　 关键词 　 多媒体数据库 , 查询语言 , 查询 优化 . 
 　 　 中图法 分类号 　 TP311 
 Multimedia   Object   Query   Language   and   Its   Query   Processing 
 TIAN   Zeng - ping   DANG   Hua - rui   ZHOU   Ao - ying   SHI   Bai - le 
 ( Department   of   Computer   Science   Fudan   University   Shanghai   200433 ) 
 　 　 Abstract 　   In   this   paper ,   the   authors   study   the   query   requirements   of   multimedia   database   and   propose   a   structured   multimedia   object   query   language   ( MOQL ) .   The   language   can   support   queries   based   on   type ,   structure ,   synchronous   relations ,   temporal   relations ,   and   contents   of   multimedia   data .   Taking   the   DB2   relational   database   system   as   a   storage   mechanism ,   they   define   a   set   of   algebraic   operators   and   some   transformation   rules ,   by   which   the   MOQL   queries   defined   by   the   users   can   be   transformed   into   a   set   of   algebraic   formula   and   optimized .   Finally ,   the   algebraic   formula   can   be   transformed   into   execution   plan   in   DB2SQL   and   C++   procedures ,   which   can   be   run   on   DB2   system . 
 　 　 Key   words 　 Multimedia   database ,   query   language ,   query   optimization . 
 　 　 自从 “ 多媒体 ” 概念 出现 以来 , 多媒体信息 查询 技术 就 成为 数据库 等 相关 领域 研究 的 重要 课题 , 取得 了 很多 成果 . 随着 研究 工作 的 进展 , 多媒体信息 的 查询 需求 以及 查询语言 的 功能 结构 也 逐渐 明确 起来 . D . Woelk [ 1 ] 和 C . Goble 等 人 [ 2 ] 指出 , 基于 结构 和 类型 的 查询 是 多媒体信息 查询 的 重要 特征 . T . D . Little [ 3 ] 和 A . Karmouch   等 人 [ 4 ] 提出 多媒体数据库 应当 支持 基于 多媒体 数据 表现 的 时间 同步 关系 的 查询 . 基于 结构 和 类型 的 多媒体 查询 使得 多媒体 数据组织 的 元 数据 可以 被 查询 , 为 用户 提供 了 更 大 的 信息 查询 空间 . 
 　 　 多媒体数据库 将 传统 数据库 基于 属性 值 的 查询 与 信息检索 系统 基于 内容 的 查询 结合 起来 . E . Bertino 等 人 的 MULTOS [ 5 ] 支持 对 图像 、 文本 、 声音 的 存在 性 条件 查询 . M . Flicker 等 人 [ 6 ] 开发 的 QBIC 系统 能 根据 图像 的 形状 、 纹理 、 颜色 等 内容 进行 查询 . A . Gupta 等 人 [ 7 ] 开发 的 VIMSYS 系统 能 根据 给定 的 特征 查询 图像 . Wu 等 人 [ 8 ] 开发 的 CORE 系统 能够 按 文本 的 相似 度 和 模糊 度 等 查询 图像 . E . Oomoto 等 人 [ 9 ] 研制 的 OVID 系统 能 根据 动态 视频 影像 的 描述 特征 进行 查询 . 内容 查询 使得 传统 数据库 的 确定 查询 变为 近似 或 模糊 查询 . 
 　 　 在 研究 前人 工作 时 我们 注意 到 , 以往 提出 的 各种 多媒体 查询语言 都 是 针对 专门 的 应用 , 使用 范围 较窄 , 而且 各种 语言 的 语法 形式 与 人们 熟悉 的 数据库 语言 如 SQL 差别 较大 , 不易 学习 和 使用 , 另外 , 各种 语言 的 描述 能力 也 不尽相同 . 本文 以 数字 图书馆 应用 为 背景 , 研究 了 多媒体数据库 查询 的 需求 , 提出 结构化 的 多媒体 对象 查询语言 MOQL ( multi - media   object   query   language ) . 它 能够 支持 基于 类型 、 结构特征 、 同步 关系 、 时态 关系 和 内容 信息 的 多媒体 查询 . 我们 以 DB2 数据库 为 存储 机制 , 定义 了 一组 代数 算子 和 变换 规则 . 利用 它们 可以 将 用户 定义 的 MOQL 查询 变换 为 代数 表达式 , 进行 代数 优化 , 最后 , 将 代数 查询 表达式 转换 为 能够 在 DB2 数据库 上 运行 的 查询 过程 . 本文 的 工作 已 用于 我们 开发 的 中国 历史 地图 数字 图书馆 系统 . 
 　 　 本文 第 1 节 讨论 多媒体 查询 的 需求 . 第 2 节 介绍 MOQL 语言 依赖 的 多媒体 对象 数据模型 . 第 3 节 给出 MOQL 语言 的 定义 . 第 4 节 讨论  MOQL 语言 的 查询处理 和 优化 技术 . 第 5 节 总结 全文 工作 , 提出 需要 进一步 研究 的 问题 . 
 1 　 多媒体信息 的 查询 需求 
 　 　 在 多媒体信息 查询 技术 的 研究 中 , 根据 系统 目标 和 应用 类型 的 不同 , 提出 了 各种 不同 的 需求 . 概括 来说 , 多媒体数据库 系统 应当 支持 基于 类型 、 结构 、 多媒体 数据 表现 的 同步 关系 、 多媒体 对象 内容 及时 态 信息 的 查询 . 
 　 　 ( 1 )   基于 类型 和 结构 的 查询 , 支持 用户 按照 对象 类型 和 内部结构 特征 查询 多媒体 对象 . 在 多媒体数据库 中 , 描述 多媒体 数据组织 的 类型 和 结构 信息 是 用户 所 关心 的 , 对 查询 多媒体 对象 具有 重要 作用 . 例如 , “ 查询 所有 历史 地图 ” 和 “ 查询 所有 含有 声音 的 历史 地图 ” 等 是 基于 类型 和 结构 的 多媒体 查询 . 
 　 　 ( 2 )   基于 同步 关系 的 查询 是 以 多媒体 对象 表现 的 时间 特性 或 不同 属性 表现 的 时序 关系 为 条件 的 查询 . 多媒体 对象 表达 的 信息 不但 取决于 各种 属性数据 的 内容 , 还 取决于 这些 数据 表现 的 时序 关系 . 因而 , 支持 基于 同步 关系 的 查询 是 多媒体 查询 特有 的 要求 . 例如 , “ 查询 伴音 解释 先于 动态 视频 影像 结束 的 电视 片断 ” 等 均 属于 同步 关系 查询 . 
 　 　 ( 3 )   基于 内容 的 查询 根据 非 结构化 数据 , 如 图像 、 动态 视频 影像 和 文本 等 的 语义 信息 查询 多媒体 对象 . 传统 数据库 查询 基于 对 属性 值 谓词 布尔 组合 的 准确 计值 . 在 多媒体数据库 中 , 用户 希望 根据 图像 、 视频 影像 和 文本 等 非 结构化 对象 所 富含 的 语义 信息 进行 查询 . 
 　 　 ( 4 )   基于 时态 信息 的 查询 能够 根据 某些 时间 条件 查询 多媒体 对象 . 我们 研究 的 多媒体数据库 用于 存储 有关 历史 地图 的 多媒体信息 , 因而 , 支持 基于 时态 信息 的 查询 是 必不可少 的 功能 . 
 　 　 多媒体数据库 的 查询 需求 多种多样 , 而且 随 新型 应用 的 出现 在 不断 发展 和 变化 , 因此 , 它们 是 无法 完全 列举 的 . 本文 根据 数字 图书馆 应用 的 需要 , 结合 前人 的 研究成果 , 提出 上列 4 种 主要 功能 要求 , 并 设计 了 能够 满足 这些 要求 的 MOQL 语言 . 
 2 　 多媒体 对象 数据模型 
 　 　 MOQL 语言 基于 我们 设计 的 多媒体 对象 数据模型 , 该 模型 具有 如下 特点 ： 
 　 　 ( 1 )   多媒体信息 的 内容 和 行为 建模 . 多媒体 对象 、 类型 、 类 以及 类 层次 和 方法 等 是 多媒体 对象 数据模型 的 主要 概念 . 一个 多媒体 对象 由 对象 标识符 ( OID ) 、 一个 元组 类型 值 、 各 同步 表现 属性 的 时间 调度 及 一个 有效 历史 时间 区间 组成 . 类型 、 类及 类 层次 是 多媒体 对象 的 组织 概念 . 类型定义 一组 具有 相似 结构 的 多媒体 对象 的 公共 结构 . 类 是 一组 对象 的 集合 . 类 层次 是 类 的 组织 形式 , 系统 中 所有 的 类 形成 一个 有 向 无 环图 . 子类 继承 父类 的 结构 、 行为 和 表现 特征 . 方法 描述 了 多媒体 对象 的 行为 特征 . 系统 中 支持 两类 方法 , 即 服务器 方法 和 平台 无关 方法 . 服务器 方法 与 一般 对象 系统 的 方法 相似 , 任何 用户 对 方法 的 调用 都 会 使 相应 方法 在 服务器 上 执行 . 平台 无关 的 方法 主要 是 多媒体 对象 的 表现 过程 . 任何 用户 对 多媒体 对象 的 表现 要求 都 导致 相应 方法 在 用户 机器 执行 . 
 　 　 ( 2 )   多媒体信息 的 表现 特征 建模 . 表现 特征 建模 主要 体现 在 表现 的 空间 和 时间 特性 建模 方面 . 为了 实现 表现 的 平台 无关 性 , 我们 引入 Java 语言 定义 多媒体 对象 的 表现 过程 . 以 Java 语言 定义 对象 方法 , 实现 对象 方法 的 跨平台 执行 , 是 数据库 与 Internet 网络 相结合 的 新 的 尝试 . 
 　 　 ( 3 )   在 表现 的 空间 和 时间 建模 方面 , 也 做 了 有益 的 尝试 . 多媒体 对象 表现 的 空间 特征 由 Java 语言 定义 的 表现 方法 描述 , 即用 过程 而 不是 用 数据 来 表达 空间 特征 . 用户 可以 利用 具有 完全 计算 功能 的 Java 语言 ( 而 不是 某种 Form ) 来 安排 多媒体 对象 的 表现 空间 . 对 多媒体 对象 表现 的 时间 特性 采用 数据 描述 而 不是 过程 方式 建模 . 多媒体 对象 创建者 不但 要 定义 多媒体 对象 的 内容 , 还要 定义 内容 表现 的 时间 顺序 关系 . 
 3 　 多媒体 对象 查询语言 MOQL 
 3.1   3 种 数据库 访问 形式 
 　 　 MOQL 支持 3 种 数据库 访问 形式 , 即 按 OID 查询 、 按 名称 查询 以及 SELECT 查询 . 
 　 　 ( 1 )   按 OID 查询 
 　 　 在 多媒体数据库 系统 中 , 每个 对象 、 类型定义 、 类 定义 以及 类 的 外延 都 被 视为 内部 对象 . 每个 内部 对象 都 由 一个 唯一 的 OID 标识 . 用户 可以 通过 OID 直接 检索 所 要 查询 的 对象 信息 , 例如 , # 130 , # 208 . 
 　 　 ( 2 )   按 名称 检索 
 　 　 在 多媒体数据库 系统 中 , 允许 显式 地 给 对象 、 类 外延 、 类型 或类 的 定义 命名 , 这个 名字 与 对象 取值 无关 . 一个 对象 可以 有 1 个 或 多个 名字 , 但是 , 一个 名字 只能 赋予 一个 对象 . 用户 可以 根据 对象 的 名称 获得 对象 的 有关 信息 . 例如 , “ M - QuanTu ” 如果 是 明代 全图 对象 的 名字 , 则 用户 利用 它 就 可 获得 明代 全图 的 有关 信息 . 
 　 　 ( 3 )   SELECT 语句 
 　 　 SELECT 语句 支持 用户 基于 内容 、 时间 信息 、 结构 和 同步 关系 的 多媒体 查询 . 例如 , 下列 查询 ： “ 找出 文字 解释 中 含有 ‘ 历史悠久 ’ 且 图像 颜色 与 sampmap 的 颜色 的 相似 度 大于 0.7 的 清代 历史 地图 , 要求 它们 不但 含有 动画 ( animClass 为 动画 数据类型 ) , 而且 声音 解释 与 文字 解释 同时 开始 表现 , 查询 结果 按照 与 sampmap 图像 颜色 的 相似 度 , 从大至 小 输出 前 5 个 对象 ” , 可以 写成 如下 的 MOQL 语句 ： 
 　 　 SELECT   m 
 　 　 FROM   m   IN   mapClass 
 　 　 WHERE   SUBSTRING   ( m . exptxt , “ 历史悠久 ” )   
 　 　 　 　 　 and   Grade ( m . map . color ,   sampmap . color ) > 0.7 
 　 　 WHEN   INt ( m , ‘ qingDynasty ’ )   
 　 　 STRUCT   m   CONTAINS   { animClass }   
 　 　 SYNCH   m . exptxt   STARTS   m . expvoc 
 　 　 ORDER   [ 5 ]   ASC   ( Grade ) 
 其中 SELECT , FROM , WHERE , WHEN , STRUCT , SYNCH 和 ORDER 为 保留字 ； SUBSTRING 和 Grade 为 用户 或 系统 定义 的 谓词 和 函数 ； INt , CONTAINS 和 STARTS 为 内部 谓词 . 
 3.2   SELECT 语句 
 　 　 SELECT 语句 是 用户 访问 多媒体数据库 的 主要 形式 . 它 支持 基于 内容 、 时间 信息 、 结构 和 同步 关系 的 查询 , 其 形式 如下 ： 
 　 　 SELECT   { 路径 表达式 } 
 　 　 FROM   变量 名称 IN 类 名称 
 　 　 [ WHERE   内容 条件 ] 
 　 　 [ WHEN 时间 条件 ] 
 　 　 [ STRUCT 结构 条件 ] 
 　 　 [ SYNCH 同步 条件 ] 
 　 　 [ ORDER [ 返回 结果 数目 ] 结果 排序 条件 ] 
 其中 SELECT   FROM 子句 说明 查询 的 目标 及 范围 , WHERE , WHEN , STRUCT 和 SYNCH 分别 说明 查询 结果 应当 满足 的 内容 条件 、 时间 条件 、 结构 条件 和 同步 条件 . 
 　 　 ( 1 )   SELECT 及 FROM 子句 
 　 　 SELECT 及 FROM 子句 说明 查询 的 结果 及 查询 范围 . 查询 结果 可以 由 一个 或 多个 路径 表达式 描述 . 
 　 　 定义 1 . 路径 表达式 定义 如下 ： 
 　 　 ① 若 X 为 具有 类 T 的 对象 变量 , 则 X 为 路径 表达式 , T 为 其 类型 . 
 　 　 ② 若 A0 , A1 , ... , Ai ( i ≥ 0 ) 为 路径 表达式 , Ai 是 取值 类型 为 T 的 属性 , A 是 类型 T 的 属性 , 则 A0 , A1 , A2 , ... , Ai . A 亦 为 路径 表达式 , 其 类型 为 A 的 类型 . 
 　 　 ③ 若 A0 , A1 , ... , Ai ( i ≥ 0 ) 为 路径 表达式 , Ai 是 值域 为类 C 的 属性 , f 是 类 C 上 的 方法 , f 的 参数 类型 为 T1 , ... , Tn , 而 a1 , ... , an 分别 是 具有 类型 T1 , ... , Tn 的 值 , 则 A0 , A1 , ... , Ai . f ( a1 , ... , an ) 亦 为 路径 表达式 , f 的 返回值 类型 为 其 类型 . 
 　 　 ( 2 )   WHERE 及 ORDER 子句 
 　 　 WHERE 及 ORDER 子句 说明 查询 目标 应当 满足 的 内容 条件 以及 返回 给 用户 的 查询 结果 数目 及其 顺序 . 
 　 　 定义 2 .   内容 条件 式 定义 如下 ： 
 　 　 ① 若 P1 和 P2 为 路径 表达式 , op ∈ { > , < , ≠ , = , ≥ , ≤ } 为 一 算术 比较 符 , a 为 常量 , 则 P1 ( op ) a , a ( op ) P1 和 P1 ( op ) P2 均 为 内容 条件 式 ( a 与 P1 的 类型 兼容 ) ； 
 　 　 ② 若 P1 和 P2 为 路径 表达式 , a 为 常量 , Q 为 用户 定义 谓词 或 系统 谓词 , 则 Q ( P1 , a ) 和 Q ( P1 , P2 ) 为 内容 条件 式 . MOQL 支持 DB2SQL 所 支持 的 所有 内部 谓词 ； 
 　 　 ③ 若 C1 和 C2 为 内容 条件 式 , 则 C1   and   C2   , C1   or   C2 和 not   C1 都 为 内容 条件 式 . 
 　 　 ORDER 子句 的 结构 为 
 　 　 ORDER   [ k ]   ASC ｜ DESC   ( f1 , f2 , ... , fn ) , 其中 ： 
 　 　 .   k 为 返回 给 用户 的 结果 对象 数目 ； 
 　 　 .   ASC 或 DESC 分别 说明 按 f1 , f2 , ... , fn 函数 值 的 增序 或 降序 输出 结果 ； 
 　 　 .   f1 , f2 , ... , fn 为 出现 在 WHERE 子句 中 的 模糊 度 或 相似 度 函数 . 
 　 　 在 查询 模型 中 , 内容 相关 的 模糊性 及 相似性 度量 函数 作为 相应 类上 的 方法 , 因而 , 它们 蕴含 于 路径 表达  式 中 . 
 　 　 ( 3 )   WHEN 子句 
 　 　 WHEN 子句 说明 用户 对 查询 结果 的 时间 条件 要求 . MOQL 仅 支持 历史 时间 信息 的 查询 . 为了 表达 和 操作 时间 信息 , 定义 下列 算子 ： 
 　 　 BeginOf ( 一元 ) , EndOf ( 一元 ) , Extend ( 二元 ) , SameTime ( 二元 ) . 
 其 直观 解释 如下 ： 
 　 　 .   BeginOf ( a ) ： 给出 a 的 开始 年代 , 例如 , BeginOf ( ‘ qingDynasty ’ ) = 1618 ； 
 　 　 .   EndOf ( a ) ： 给出 a 的 结束 年代 ； 
 　 　 .   a   Extend   b ： a 与 b 的 时间 区间 的 并 ； 
 　 　 .   a   SameTime   b ： a 与 b 的 时间 区间 的 交 . 
 定义 时间 项 如下 ： 
 　 　 ① 对象 变量 和 时间 常量 , 如 ‘ Now ’ , ‘ qingDynasty ’ 等 为 时间 项 ； 
 　 　 ② 若 t1 , t2 为 时间 项 , f ∈ { BeginOf , EndOf } , g ∈ { Extend , SameTime } , 则 f ( t1 ) , g ( t1 , t2 ) 为 时间 项 . 
 　 　 MOQL 中 提供 4 个 二元 时间 谓词 , BEFOREt , AFTERt , INt , OVERLAPt ： 
 　 　 . BEFOREt ( a , b ) ： a 的 时间 区间 先于 b 的 时间 区间 ； 
 　 　 . AFTERt ( a , b ) ： a 发生 的 时间 区间 后于 b 的 时间 区间 ； 
 　 　 . OVERLAPt ( a , b ) ： a 的 时间 区间 与 b 的 时间 区间 重迭 ； 
 　 　 . INt ( a , b ) ： a 的 时间 区间 包含 于 b 的 时间 区间 . 
 　 　 定义 3 .   时间 条件 式 定义 如下 ： 
 　 　 ① 若 a 和 b 为 时间 项 P ∈ { BEFOREt , AFTERt , INt , OVERLAPt } , 则 P ( a , b ) 为 时间 条件 式 ； 
 　 　 ② 若 S 和 Q 为 时间 条件 式 , 则 S   and   Q , S   or   Q 及 not   Q 为 时间 条件 式 . 
 　 　 ( 4 )   STRUCT 子句 
 　 　 MOQL 语言 中 引入 STRUCT 子句 来 说明 查询 目标 的 结构特征 . 它 仅 定义 了 一个 结构 谓词 CONTAINS 来 描述 结构 条件 . 
 　 　 定义 4 .   结构 条件 式 定义 如下 ： 
 　 　 ① 若 P 为 路径 表达式 , T1 , ... , Tn 为类 或 类型 名称 , 则 P   CONTAINS { T1 , T2 , ... , Tn } 为 结构 条件 式 ； 
 　 　 ② 若 S1 , S2 为 结构 条件 式 , 则 S1   and   S2 , S1   or   S2 及 not   S1 亦 为 结构 条件 式 . 
 　 　 ( 5 )   SYNCH 子句 
 　 　 根据 基于 时间 间隔 ( TIB ) 的 同步 关系 表示 方法 , 多媒体 数据 表现 的 同步 关系 可 表示 为 时间 间隔 的 时序 关系 .  J . F . Allen 指出 [ 10 ] , 两个 时间 间隔 之间 有 7 种 不 重复 关系 , 分别 是 BEFORE , MEETS , OVERLAPS , DURING , STARTS , FINISHES 和 EQUALS . MOQL 语言 支持 基于 这些 同步 关系 的 多媒体 查询 . 
 　 　 定义 5 .   同步 条件 式 定义 如下 ： 
 　 　 ① 若 P1 和 P2 为 路径 表达式 , R ∈ { BEFORE , MEETS , OVERLAPS , DURING , STARTS , FINISHES 和 EQUALS } , 则 P1 ( R ) P2 为 同步 条件 式 ； 
 　 　 ② 若 P1 和 P2 为 路径 表达式 , N 为 正整数 , op ∈ { > , < , ≠ , = , ≤ , ≥ } , 则 Length ( P1 ) ( op ) Length ( P2 ) ,   Length ( P1 ) ( op ) N 和 N ( op ) Length ( P1 ) 为 同步 条件 式 ； 
 　 　 ③ 若 S1 和 S2 为 同步 条件 式 , 则 S1   and   S2 ,   S1   or   S2 及 not   S1 为 同步 条件 式 . 
 　 　 上述 定义 中 , Length 为 系统 定义 函数 , 它 返回 多媒体 对象 的 表现 时间 长度 ( 该 对象 在 表现 调度 中 定义 的 表现 时间 长度 ) . 
 4 　 查询处理 
 　 　 MOQL 查询处理 系统 以 DB2   V2 为 存储 机制 , 利用 关系 表格 存储 结构化 数据 , 以 文件 机制 存储 非 结构化 的 对象 数据 , 如 图像 、 文字 和 声音 等 , 利用 用户 定义 函数 （ UDF ） 实现 相似 或 模糊 测度 函数 , 支持 基于 内容 的 多媒体 查询 . 它 以 MOQL 语言 为 源语言 , 以 DB2   SQL 及 C++ set 语言 为 表达 数据 存取 方案 的 目标语言 . 查询处理 由 以下 7 部分 组成 ： 语法 检查 、 命名 变换 、 查询 改写 、 代数 变换 、 优化 处理 、 生成 存取 方案 和 执行 存取 方案 . 
 4.1   语法 检查 
 　 　 语法 检查 具有 3 种 功能 ： ( 1 )   对 用户 基于 OID 的 查询 , 获取 OID 的 类 信息 并 生成 查询 结果 描述 结构 , 将 OID 及 查询 结果 描述 结构 送给 OID 检索 模块 的 结果 输出 过程 ； ( 2 )   对 用户 基于 对象 名称 的 查询 , 查询 “ OID - 对象 名称 ” 对照表 , 获取 对象 的 OID 及其 类 信息 , 生成 查询 结果 描述 结构 , 将 其 与 OID 送给 结果 输出 过程 ； ( 3 )   对 用户 的 SELECT 查询 , 检查用户 查询 语句 是否 合乎 MOQL 的 语法 . 它 交给 命名 变换 的 SELECT 查询 应当 符合 MOQL 语法 定义 . 
 4.2   命名 变换 
 　 　 命名 变换 的 功能 是 消除 变量 , 并 使 所有 路径 表达式 都 以类 名称 开始 . 
 4.3   查询 改写 
 　 　 查询 改写 生成 查询 结果 的 描述 结构 , 并 将 SELECT 查询 的 目标 改写 为 路径 表达式 公共 类 的 对象 . 
 4.4   代数 变换 
 　 　 代数 变换 将 上述 改写 的 查询 结果 变换 为 一个 代数 表达式 . 由于 已有 的 对象 代数 不 便于 表达 MOQL 查询 , 不易 被 DB2   SQL 语言 实现 , 而 传统 的 关系 代数 又 不能 充分体现 DB2   SQL 的 能力 , 因而 , 我们 定义 下列 一组 代数 算子 , 作为 查询 的 内部 表达 语言 . 
 　 　 . 投影 PJ [ A ] ： PJ [ A ] ( R ) = Π A ( R ) ； 
 　 　 . 选择 SL [ P ] ： SL [ P ] ( R ) = σ p ( R ) ； 
 　 　 . 自然 连接 NJ [ A1 , A2 ] ： NJ [ A1 , A2 ] ( R1 , R2 ) = R1A1 = A2   R2 ； 
 　 　 . 并 UN ：   UN ( R1 , R2 ) = R1 ∪ R2 ； 
 　 　 . 交 INT ： INT ( R1 , R2 ) = R1 ∩ R2 ； 
 　 　 . 差 DF ： DF ( R1 , R2 ) = R1 － R2 ； 
 　 　 . 扩充 EXTEND [ A1 , ... , An ; f1 , ... , fn ] ( R ) 将 R 扩充 列 A1 , ... , An , 其 取值 为 函数 f1 , ... , fn 作用 于 R 元组 的 结果 ( f1 , ... , fn 定义 在 R 的 属性 上 ) ； 
 　 　 . 查找 LOOKUP [ A1 , A2 , ... , A2k , P ] ：   
 　 　 　 　 　 　 　 　 　 　 LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , R2 , ... , Rk + 1 ) 
 　 　 　 　 　 　 　 　 　 　 = Π R1 ( R1 
 　 　 . 排序 ORDER [ A , K , ASC ｜ DESC ] 是 一个 过程 . ORDER [ A , K , ASC ｜ DESC ] ( R ) 将 R 中 元组 按 属性 A 的 升序 ( ASC ) 或 降序 ( DESC ) 排序 , 并 只取 其前 K 个 元组 . 它 将 一个 关系 变成 一个 有序 表 . 虽然 这 破坏 了 查询 结果 的 封闭性 , 但是 , 由于 用户 对 内容 查询 的 结果 具有 一定 的 倾向性 , 因此 , 要求 结果 按 某种 顺序 输出 是 必要 的 . 
 　 　 对于 MOQL 中 定义 的 谓词 , 可以 由 DB2   SQL 语句 定义 如下 ： 
 　 　 . BEFOREt , AFTERt , INt , OVERLAPt   定义 为 BtP , AtP , ItP , OtP ； 
 　 　 . CONSTAINS 定义 为 CoP ； 
 　 　 . BEFORE , MEETS , OVELAPS , DURING , STARTS , FINISHES 和 EQUALS 定义 为 BsP , MsP , OsP , DsP , SsP , FsP 和 EsP . 
 4.5   优化 处理 
 　 　 代数 优化 基于 下列 变换 规则 ： 
 　 　 ( 1 )   PJ [ A ] ( OP ( R1 , R2 ) ) OP ( PJ [ A ] ( R1 ) , PJ [ A ] ( R2 ) ) , OP ∈ { INT , UN , DF } ； 
 　 　 ( 2 )   UN ( SL [ P1 ] ( R ) , SL [ P2 ] ( R ) SL [ P1   or   P2 ] ( R ) ； 
 　 　 ( 3 )   INT ( SL [ P1 ] ( R ) , SL [ P2 ] ( R ) ) SL [ P1   and   P2 ] ( R ) ； 
 　 　 ( 4 )   SL [ P ] ( OP ( R1 , R2 ) ) OP ( SL [ P ] ( R1 ) , SL [ P ] ( R2 ) ) ； 
 　 　 ( 5 )   PJ [ S ] ( SL [ P ] ( R ) ) SL [ P ] ( PJ [ S ] ( R ) ) , S 含有 P 中 所有 属性 ； 
 　 　 ( 6 )   PJ [ S ] ( NJ [ A1 , A2 ] ( R1 , R2 ) ) NJ [ A1 , A2 ] ( PJ [ S ] ( R1 ) , PJ [ S ] ( R2 ) ) , A1 和 A2 同 属于 S ； 
 　 　 ( 7 )   EXTEND [ U , f ] ( PJ [ S ] ( R ) ) PJ [ S , U ] ( EXTEND [ U , f ] ( R ) ) , f 函数 使用 的 属性 在 S 中 ； 
 　 　 ( 8 )   EXTEND [ U , f ] ( SL [ P ] ( R ) ) SL [ P ] ( EXTEND [ U , f ] ( R ) ) ； 
 　 　 ( 9 )   EXTEND [ U , f ] ( OP ( R1 , R2 ) ) OP ( EXTEND [ U , f ] ( R1 ) , EXTEND [ U , f ] ( R2 ) ) ； 
 　 　 ( 10 )   EXTEND [ U , f ] ( LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , R2 , ... , Rk + 1 ) ) LOOKUP   [ A1 , A2 , ... , A2k , P ] ( EXTEND [ U , f ] ( R1 ) , R2 , ... , Rk + 1 ) ； 
 　 　 ( 11 )   PJ [ S ] ( LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , ... , Rk + 1 ) ) LOOKUP [ A1 , A2 , ... , A2k , P ]   ( PJ [ S ] ( R1 ) , R2 , ... , Rk + 1 ) ) , S 包含 A1 ； 
 　  ( 12 ) SL [ Q ] ( LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , R2 , ... , Rk + 1 ) ) LOOKUP [ A1 , A2 , ... , A2k , P ]   ( SL [ Q ] ( R1 ) , R2 , ... , Rk + 1 ) ) . 
 　 　 定理 1 .   根据 各个 算子 的 定义 , 上 列 规则 是 正确 的 . 
 　 　 证明 ： 见 附录 . 
 4.6   生成 存取 方案 
 　 　 存取 方案 生成 过程 将 代数 表达式 中 的 代数 算子 翻译成 含有 动态 SQL 语句 和 C++ set 过程 的 DB2 数据库 访问 过程 . 
 　 　 各 算子 对应 的 SQL 语句 过程 如下 ： 
 　 　 . PJ [ A ] ( R ) ： SELECT   A   FROM   R ； 
 　 　 . SL [ P ] ( R ) ： SELECT   *   FROM   R   WHERE   P ； 
 　 　 . NJ [ A1 , A2 ] ( R1 , R2 ) ： SELECT   *   FROM   R1   r1 ,   R2   r2   WHERE   r1 . A1 = r2 . A2 ； 
 　 　 . UN ( R1 , R2 ) ： R1   UNION   R2 ； 
 　 　 . INT ( R1 , R2 ) ： R1   INTESECT   R2 ； 
 　 　 . DF ( R1 , R2 ) ： R1   EXCEPT   R2 ； 
 　 　 . EXTEND [ A1 , ... , An ; f1 , ... , fn ] ( R ) ： SELECT   * , f1 ( B1 )   AS   A1 , ... , fn ( Bn )   AS   An   FROM   R ； ( B1 , ... , Bn 为 R 的 属性 ) 
 　 　 . LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , ... , Rk + 1 ) ： 
 　 　 　 　 SELECT   * 
 　 　 　 　 FROM   R1 
 　 　 　 　 WHERE   A1   IN   ( SELECT   A2 
 　 　 　 　 　 　 　 　 　 　 FROM   R2 
 　 　 　 　 　 　 　 　 　 　 WHERE   A3   IN   ( ... ( SELECT   A2kFROM   Rk + 1WHERE   P ) ... ) ) 
 　 　 ORDER [ A1 , K , ASC ｜ DESC ] ( R ) ： 是 一个 含有 动态 SQL 语句 的 C语言 过程 . 
 4.7 　 执行 存取 方案 
 　 　 将 上述 生成 的 含有 动态 SQL 语句 的 查询 方案 在 DB2 系统 中 运行 , 得到 满足条件 的 对象 OID . 
 5 　 小结 与 讨论 
 　 　 本文 主要 讨论 多媒体数据库 查询 的 需求 、 MOQL 语言 及其 查询处理 . MOQL 语言 能够 支持 类型 、 结构 、 同步 关系 、 时间 关系 及 内容 查询 的 、 简单 的 多媒体数据库 查询语言 . 本文 讨论 了 以 DB2 数据库 作为 存储 机制 的   MOQL 语言 查询处理 技术 . 查询处理 过程 中 , 以 用户 定义 的 MOQL 查询 作为 源语言 , 以 DB2 数据库 上 运行 的 含有 动态 SQL 语句 的 DB2 查询 过程 作为 目标语言 , 定义 了 一组 代数 算子 作为 查询 优化 的 内部 表现 机制 , 给出 了 一组 变换 规则 以便 进行 代数 优化 . 
 　 　 未来 的 工作 包括 ： ( 1 )   提高 MOQL 语言 的 表达能力 . ( 2 )   定义 更 完备 的 代数 算 子集 和 优化 规则 集 . ( 3 )   基于 代价 模型 的 优化 技术 . ( 4 )   研究 各种 非 结构化 媒体 的 内容 查询方法 . 
 　 　 本文 研究 得到 国家自然科学基金 、 国家 863 高科技 项目 基金 和 国家教育部 博士点 基金 资助 . 作者 田 增平 , 1968 年生 , 博士 , 讲师 , 主要 研究 领域 为 面向对象 数据库 , 多媒体数据库 . 党华锐 , 1964 年生 , 博士 , 副教授 , 主要 研究 领域 为 数据库 , 网络通信 . 周傲 英 , 1965 年生 , 博士 , 教授 , 博士生 导师 , 主要 研究 领域 为 数据库 理论 及 应用 . 施 伯乐 , 1936 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 数据库 理论 及 应用 . 
 　 　 本文 通讯联系 人 : 田 增平 , 上海 200433 , 复旦大学 计算机科学 系 
 　 　 作者 单位 ： 复旦大学 计算机科学 系 　 上海 　 200433 
 参考文献 
 　 1 　 Woelk   D ,   Kim   W .   An   extensible   framework   for   multimedia   information   management .   Data   Engineering ,   1987 , ( 3 ) : 115 ～ 121 
 　 2 　 Goble   C ,   Docherty   M   O   et   al .   The   Manchester   multimedia   information   system . In :   Goos   G ,   Hartmanis   J   eds .   Proceedings   of   the   International   Conference   Extending   Database   Technology .   Berlin :   Springer - Verlag ,   1992 .   39 ～ 55 
 　 3 　 Little   T   D .   A   frame   work   for   synchronization   delivery   of   time - dependent   multimedia   data .   Multimedia   Systems ,   1993 , 1 ( 1 ) : 87 ～ 94 
 　 4 　 Karmouch   A ,   Emery   J .   A   playback   schedule   model   for   multimedia   documents .   IEEE   Multimedia ,   1996 , ( 3 ) : 50 ～ 61 
 　 5 　 Megalni   C ,   Rabitli   F   et   al .   Conceptual   modeling   of   multimedia   documents .   IEEE   Computer ,   1991 , 24 ( 10 ) : 23 ～ 29 
 　 6 　 Flicker   M ,   Sawhney   H   et   al .   Query   by   image   and   video   content :   the   QBIC   system .   IEEE   Computer ,   1995 , 28 ( 9 ) : 22 ～ 31 
 　 7 　 Gupta   A ,   Weymouth   T   E ,   Jain   R .   Semantic   queries   with   pictures :   the   VIMSYS   model .   In :   Lohman   M ,   Sernadas   A ,   Camps   R   eds .   Proceedings   of   the   17th   International   Conference   Very   Large   Databases .   Barcelona :   Morgan   Kaufmann   Publishers ,   Inc . ,   1991 .   69 ～ 79 
 　 8 　 Wu   J   K   et   al .   CORE :   a   content - based   retrieval   engine   for   multimedia   information   systems .   Multimedia   Systems ,   1995 , 3 ( 1 ) : 43 ～ 52 
 　 9 　 Oomoto   E ,   Tanaka   K .   OVID :   design   and   implementation   of   a   video - object   database   system .   IEEE   Transactions   on   Knowledge   and   Data   Engineering ,   1993 , 5 ( 4 ) : 629 ～ 643 
 　 10 　 Allen   J   F .   Maintaining   knowledge   about   temporal   intervals .   Communications   of   ACM ,   1983 , 26 ( 11 ) : 832 ～ 843 
 
 
 附录 ： 
 　 　 定理 1 的 证明 : 
 　 　 ( 1 )   由 关系 代数 理论 知 变换 规则 ( 1 ) ～ ( 6 ) 是 正确 的 . 下面 主要 证明 规则 ( 7 ) ～ ( 12 ) 的 正确性 . 
 　 　 ( 2 )   规则 ( 7 ) 左部 ： EXTEND [ U , f ] ( PJ [ S ] ( R ) ) = EXTEND [ U , f ] ( { s ｜ s = Π S ( r ) ∧ r ∈ R } ) = { ( s , u ) ｜ s = Π S ( r ) ∧ r ∈ R ∧ u = f ( r ) } , 
 　 　 　 　 规则 ( 7 ) 右部 ： PJ [ S , U ] ( EXTEND [ U , f ] ( R ) ) = Π [ S , U ] ( { ( r , u ) ｜ r ∈ R ∧ u = f ( r ) } ) = { ( s , u ) ｜ s = Π s ( r ) ∧ r ∈ R ( u = f ( r ) } , 
 故 规则 ( 7 ) 成立 . 
 　 　 ( 3 )   规则 ( 8 ) 左部 ： EXTEND [ U , f ] ( SL [ P ] ( R ) ) = EXTEND [ U , f ] ( { r ｜ P ( r ) ∧ r ∈ R } ) = { ( r , u ) ｜ P ( r ) ∧ r ∈ R ∧ u = f ( r ) } , 
 　 　 　 　 规则 ( 8 ) 右部 ： SL [ P ] ( EXTEND [ U , f ] ( R ) ) = σ p { ( r , u ) ｜ r ∈ R ∧ u = f ( r ) } = { ( r , u ) ｜ P ( r ) ∧ r ∈ R ∧ u = f ( r ) } , 
 故 规则 ( 8 ) 成立 . 
 　 　 ( 4 )   这里 仅 证明 OP 为 UN 时 的 情况 , 其他 情况 由 下列 证明 易得 . 
 　 　 　 　 规则 ( 9 ) 左部 ： EXTEND [ U , f ] ( UN ( R1 , R2 ) ) = EXTEND [ U , f ] ( { r ｜ r ∈ R1 ∨ r ∈ R2 } ) = { ( r , u ) ｜ ( r ∈ R1 ∧ u = f ( r ) ) ∨ ( r ∈ R2 ∧ u = f ( r ) ) } , 
 　 　 　 　 规则 ( 9 ) 右部 ： UN ( EXTEND [ U , f ] ( R1 ) , EXTEND [ U , f ] ( R2 ) ) = UN ( { ( r , u ) ｜ r ∈ R1 ∧ u = f ( r ) } , { ( r , u ) ｜ r ∈ R2 ∧ u = f ( r ) } ) = { ( r , u ) ｜ ( r ∈ R1 ∧ u = f ( r ) ) ∨ ( r ∈ R2 ∧ u = f ( r ) ) } , 
 故 规则 ( 9 ) 成立 . 
 　 　 ( 5 )   规则 ( 10 ) 左部 ： EXTEND [ U , f ] ( LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , R2 , ... , Rk + 1 ) ) 
 　 　 　 　 
 　 　 　 　 规则 ( 10 ) 右部 ： LOOKUP [ A1 , A2 , ... , A2k , P ] ( EXTEND [ U , f ] ( R1 ) , R2 , ... , Rk + 1 ) 
 　 　 　 　 
 故 规则 ( 10 ) 成立 . 
 　 　 ( 6 )   规则 ( 11 ) 左部 ： PJ [ S ] ( LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , ... , Rk + 1 ) ) 
 　 　 　 　 
 　 　 　 　 规则 ( 11 ) 右部 ：   LOOKUP [ A1 , A2 , ... , A2k , P ] ( PJ [ S ] ( R1 ) , R2 , ... , Rk + 1 ) ) 
 　 　 　 　 
 故 规则 ( 11 ) 成立 . 
 　 　 ( 7 )   规则 ( 12 ) 左部 ： SL [ Q ] ( LOOKUP [ A1 , A2 , ... , A2k , P ] ( R1 , R2 , ... , Rk + 1 ) ) 
 　 　 　 　 
 　 　 　 　 = LOOKUP [ A1 , A2 , ... , A2k , P ] ( SL [ Q ] ( R1 ) , R2 , ... , Rk + 1 ) 
 　 　 　 　 = 规则 ( 12 ) 右部 . 
 　 　 由 ( 1 ) ～ ( 7 ) 知 , 定理 1 成立 . 　 　 □ 
 1998 - 04 - 16 收到 原稿   
 1998 - 08 - 04 收到 修改稿 
