软件 学报 
 JOURNAL   OF   SOFTWARE 
 2000 　 Vol.11 　 No.3 　 P.334 - 341 
 
 
 
 数据流 分析 中 的 区域 覆盖 技术 
 胡世亮 　 臧斌宇 　 凌冰 　 朱传琪 
 摘要 　 用 计算 函数 模型 进行 精确 的 数据流 分析 , 条件 谓词 之间 的 逻辑关系 被 转化 为 空间 区域 之间 的 覆盖 关系 . 该文 讨论 在 各种 常见 的 程序 构造 下 如何 表示 、 计算 和 传递 Ω 区域 、 Φ 区域 ， 并 在 数据流 分析 过程 中 , 利用 Ω 区域 、 Φ 区域 之间 的 覆盖 关系 消除 条件 分支 语句 带来 的 不确定性 , 以 得到 更 精确 的 数据流 信息 . 
 关键词 　 Ω 区域 , Φ 区域 , 数组 数据流 分析 , 数组 私有化 , 符号分析 . 
 中图法 分类号 　 TP311 
 Region   Coverage   Method   in   Dataflow   Analysis 
 HU   Shi - liang   ZANG   Bin - yu   LING   Bing   ZHU   Chuan - qi 
 ( Parallel   Processing   Institute   Fudan   University   Shanghai   200433 ) 
 Abstract 　 For   a   precise   dataflow   analysis   within   the   framework   of   the   computation   function   model , the   logical   relationship   of   branch   conditions   is   represented   as   the   coverage   relationship   of   regions . In   this   paper , the   authors   discuss   how   to   represent , compute   and   propagate   the   Ω   region , Φ   region   of   the   conditional   reference . Meanwhile , the   methods   of   resolving   the   nondeterminism   caused   by   conditional   branch   statements   are   also   presented   in   order   to   get   more   precise   dataflow   information . 
 Key   words 　 Ω   region , Φ   region , array   dataflow   analysis , array   privatization , symbolic   analysis . 
 　 　   区域 覆盖 的 概念 源自 数组 数据流 分析 . 并行 化 编译器 的 编译 对象 主要 是 高性能 计算 领域 中 的 科学计算 程序 . 该类 程序 普遍 的 特点 之一 是 , 数据结构 简单 , 数组 和 标量 构成 了 数据 集 的 主体 . 因此 ， 数组 数据流 分析 是 并行 化 编译器 的 关键技术 . 数组 区域 ( array   region ) 的 表示 、 运算 及其 相互之间 的 覆盖 关系 是 数组 数据流 分析 中 的 主要 问题 . 
 文献 ［ 1 ］ 提出 的 相关 - 覆盖 方法 就是 利用 数组 区域 的 覆盖 技术 和 相关性 测试 来 解决 数组 私有化 的 判定 问题 . 实验 测试表明 , 相关 - 覆盖 判定 法是 实效 最好 的 数组 私有化 方法 之一 . 但是 该 方法 目前 还 不能 处理 条件 分支 语句 所 产生 的 流 不确定性 . 鉴于 数组 私有化 是 众多 并行 化 变换 中 最 有效 的 方法 之一 ［ 1 , 2 ］ , 有 必要 扩充 相关 - 覆盖 方法 , 使 之 能够 处理 条件 分支 语句 产生 的 流 不确定性 . 
 　 　 在 计算 函数 模型 ［ 3 ］ 下 , 条件 读写 引用 的 语义 可以 表示 为 或 Φ 区域 , 形式 上 是 数组 区域 在 概念 上 的 一个 拓广 . 利用 区域 、 区域 的 覆盖 关系 , 可以 在 既有 数组 数据流 分析 的 框架 下 处理 条件 分支 语句 产生 的 流 不确定性 , 增强 传统 的 数组 数据流 分析 . 此外 , Ω 区域 的 覆盖 技术 还 可以 应用 在 符号分析 等 问题 上 . 
 　 　 本文 第 1 节 介绍 在 数据流 分析 的 过程 中 如何 表示 、 计算 条件 读写 的 Ω 区域 和 Φ 区域 . 第 2 节 阐述 利用 Ω 区域 、 Φ 区域 的 覆盖 关系 得到 更 精确 的 数据流 信息 , 并 给出 典型 的 实例 . 第 3 节同 国外 的 相关 工作 进行 比较 . 最后 得出结论 . 
 1   Ω 区域 、 Φ 区域 的 表示 与 计算 
 　 　 在 最 一般 的 意义 下 , 条件 谓词 的 Ω 区域 在 Dom ( P ) 空间 中 可能 是 非常复杂 的 空间 区域 , 因而是 难以 计算 的 ， 判定 其 相互之间 的 覆盖 关系 在 一般 意义 下 是 NP 问题 . 令人 却步 的 复杂度 源于 程序逻辑 语义 本身 的 潜在 复杂性 . 
 　 　 值得 庆幸 的 是 , 编译器 的 分析 优化 并不需要 处理 所有 可能 的 情况 , 而 只 需 处理 好 实际 情况 中 常见 的 、 影响 并行 化 变换 的 情形 . 对 SPEC95fp , PERFECT 等 测试 程序包 的 分析表明 : 条件 谓词 的 Omega 区域 在 其 直接 出现 的 变量 集 ( t1 , t2 , ... , tk ) 上 通常 可以 表示 为 线性 凸 区域 . 把 Ω T ( t1 , t2 , ... , tk ) 视为 Omega 区域 的 参数 形式 . 当 需要 判定 覆盖 关系 的 Omega 区域 处在 不同 的 参数 空间 时 , 进行 参数 的 反向 替代 , 以 使 它们 处于 同一 参数 空间 , 并 进行 覆盖 关系 的 比较 , 如果 参数 替换 过程 产生 过于 复杂 的 表达式 或 过于 复杂 的 Omega 区域 , 使得 判定 Omega 区域 之间 的 覆盖 关系 变得 过于 复杂 , 可以 视为 静态 不可判定 的 问题 . 对于 程序段 P , 参数 的 替代 最终 只能 进行 到 所有 的 参数 全部 替换 为 In ( P ) 中 的 变量 , 所以 这个 替换 过程 可行 , 并且 一定 结束 . 
 　 　 并行 化 编译器 主要 分析 结构化 的 程序段 , 它们 一般 由 表达式 、 赋值 语句 、 条件 分支 语句 、 各种 循环 语句 以及 顺序 结构 构成 . 并行 化 变换 主要 优化 确定 次数 的 循环 , 例如 FORTRAN 中 的 DO 循环 , 因为 它们 是 最 具有 并行性 的 程序 构造 . DOWHILE 和 REPEAT - UNTIL 类型 的 循环 本质 上 是 递归计算 , 难以 有效 地 并行计算 , 因此 这里 不再 考虑 . 
 1.1   条件 谓词 的 Omega 区域 表示 
 　 　 条件 分支 语句 的 逻辑 谓词 主要 有 这样 几种 常见 的 基本 形式 : 数值 关系 的 比较 , 如 = , ≤ , ≥ , ≠ , ＜ , ＞ ; 整型 变量 的 MOD 运算 ; 绝对值 运算 以及 在 此基础 上 的 逻辑运算 . 由 文献 ［ 3 ］ 中 的 引理 1.1 可知 , 逻辑 谓词 可以 直接 表示 为 Omega 区域 的 特征函数 表达式 . 
 　 　 ( 1 )   数值 关系 的 比较 , 整型 变量 的 MOD 运算 直接 化为 空间 区域 的 约束方程 、 不等式 . 例如 , 
 　 　 　 　 IF   ( X ＞ 4 ) 化为   Ω = { Dom ( P ) | X ＞ 4 } ， 
 　 　 　 　 IF   ( MOD ( X , 2 ) = 0 ) 化为   Ω = { Dom ( P ) | mod ( X , 2 ) = 0 } . 
 　 　 ( 2 )   绝对值 运算 化为 线性方程组 . 例如 , 
 　 　 　 　 IF   ( | X | ＜ 1.0 ) 化为   Ω = { Dom ( P ) | X ＜ 1.0 ; X ＞ - 1.0 } . 
 　 　 ( 3 )   逻辑运算 化为 区域 之间 的 交 并 补 运算 : 
 　 　 　 　 IF   ( C1   . and . C2 ) 化为   Ω = Ω 1 ∩ Ω 2 , 
 　 　 　 　 IF   ( C1   . OR . C2 ) 化为   Ω = Ω 1 ∪ Ω 2 , 
 　 　 　 　 IF   ( . NOT . C1 ) 化为   Ω = ( Ω 1 ) . 
 例如 : 
 　 　 　 　 　 IF   ( . NOT . ( X ＞ 4 ) ) 化为 　 Ω = Ω 1 = { Dom ( P ) | X ≤ 4 } , 
 　 　 　 　 　 IF   ( ( X ＞ 2 ) . AND . ( Y ＞ 1 ) )   化为   Ω = Ω 1 ∩ Ω 2 = { Dom ( P ) | X ＞ 2 ; Y ＞ 1 } , 
 以下 简记 { Dom ( P ) | p ( x1 , x2 , ... , xn ) } 为 { p ( x1 , x2 , ... , xn ) } , “ ; ” 表示 与 关系 . 
 1.2   嵌套 在 条件 分支 语句 下 的 情形 
 　 　 设 嵌套 在 条件 分支 语句 if 内部 的 Omega 区域 为 Ω i , 则 在 if 之外 其 相应 的 Omega 区域 Ω 0 是 Ω i 与其 所在 if 分支 之 条件 谓词 Omega 区域 的 交 . 
 　 　 由 Φ 区域 的 定义 : Φ xP = Ω px × SetP ( x ) , Φ 区域 的 计算 只是 相应 Ω 区域 的 计算 . 
 　 　 例 1 : 
 　 　 Step   1 . 　 IF   ( X ＞ 4 )   THEN 
 　 　 Step   2 . 　 　 IF   ( Y ＞ 0 )   THEN 
 　 　 Step   3 . 　 　 　 DO   I = 1 , 10 
 　 　 Step   4 . w   　 　 　 　 A ( I ) = ... 
 　 　 Step   5 . 　 　 　 ENDDO 
 　 　 Step   6 . 　 　 ENDIF 
 　 　 Step   7 . 　 ENDIF 
 　 　 在 程序段 Step   3 ～ Step   5 中 , w 的 数组 引用 区域 是 A ( 1 : 10 ) ; 在 程序段 Step   2 ～ Step   6 中 , Step   2 的 条件 谓词 的 Omega 区域 是 Ω 2 = { Y ＞ 0 } . 数组 定义 点 w 在 程序段 Step   2 ～ Step   6 范围 中 的 Φ 区域 为 
 Φ 2 ～ 6 ( w ) = Ω 2 × Set2 ～ 6 ( w ) = { Y ＞ 0 } × { A ( φ ) | φ = 1 , ... , 10 } . 
 在 程序段 Step   1 ～ Step   7 下 , 嵌套 的 Omega 区域 是 Ω = Ω 1 ∩ Ω 2 = { X ＞ 4 ; Y ＞ 0 } , 数组 定义 点 w 的 Φ 区域 为 
 Φ 1 ～ 7 ( w ) = Ω × Set1 ～ 7 ( w ) = { X ＞ 4 ; Y ＞ 0 } × { A ( φ ) | φ = 1 , ... , 10 } . 
 1.3   嵌套 在 DO 语句 中 的 情形 
 　 　 嵌套 在 DO 语句 中 的 IF 语句 , 其 计算 语义 可以 非常复杂 . 这里 只 需 考虑 对 数据流 分析 有利 的 几种 常见 情形 . 其他 复杂 情形 可以 用 文献 ［ 3 ］ 中 提出 的 忽略 值 不确定性 IF 语句 的 方法 排除 在 分析 范围 之外 . 
 　 　 嵌套 在 DO 语句 中 的 逻辑 条件 可以 含有 标量 或 数组 变量 . 
 　 　 如果 嵌套 在 DO 语句 中 的 IF 语句 , 其 条件 中仅 含 标量 , 而且 是非 递归 标量 , 则 该 IF 语句 为 循环 不变 条件 分支 语句 , 可以 提到 DO 循环 之外 , 用 1.2 节 所述 方式 来 处理 . 
 　 　 如果 含 递归 标量 ( induction   variable ) , 那么 该 逻辑 条件 是 对 循环 的 迭代 空间 进行 约束 的 逻辑 谓词 . 设 条件 引用 x 嵌套 在 程序段 P 的 n 重 DO 循环 中 , 相应 的 循环 变量 为 i1 , i2 , ... , in , t1 , t2 , ... , tk 是 直接 出现 在 谓词 P ( t1 , t2 , ... , tk ) 中 的 变量 , 该 谓词 确定 的 DT = Dt1 × Dt2 × ... × Dtk 中 的 区域 Ω T , 可以 表示 为 i1 , i2 , ... , in 和 In ( P ) 上 的 方程 和 不等式 组 . 当 需要 考虑 X 在 n 重 循环 之外 的 数据流 关系 时 , 需要 把 Omega 区域 投射 到 循环 外 程序段 P 的 定义 变量 集 In ( P ) 上 . 投射 过程 把 循环 变量 i1 , i2 , ... , in 从 Omega 区域 表达式 中 消去 , 事实上 , 消去 的 过程 与 数组 引用 区域 向 DO 循环 外扩 的 过程 对应 . 循环 变量 的 语义 作用 从 逻辑 条件 约束 转变 为 数组 区域 的 约束 . 
 　 　 例 2 : 
 　 　 Step   1 . 　 DO   LL = 1 , 31 
 　 　 Step   2 . 　 　 N = LL - 2 
 　 　 Step   3 . 　 　 DO   I = 1 , 31 
 　 　 Step   4 . 　 　 　 N = N + 1 
 　 　 Step   5 . 　 　 　 IF   ( N > = 31 )   THEN 
 　 　 Step   6 . w   　 　 　 　 Y ( I , LL ) = Y ( I , LL ) + S ( I , LL ) + TEM ( I , LL ) 
 　 　 Step   7 . 　 　 　 ENDIF 
 　 　 Step   8 . 　 　 ENDDO 
 　 　 Step   9 . 　 ENDDO 
 　 　 在 循环体 中 ( 语句 Step   4 ～ Step   7 ) , w 的 区域 为 
 Φ w4 ～ 7 = Ω w4 ～ 7 × Set4 ～ 7 ( w ) = { N ≥ 31 } × { Y ( φ 1 , φ 2 ) | φ 1 = LL ; φ 2 = I } 
 = { 1 ≤ LL , I ≤ 31 ; LL + I - 2 ≥ 31 } × { Y ( φ 1 , φ 2 ) | φ 1 = LL ; φ 2 = I } 
 = { Y ( φ 1 , φ 2 ) | φ 1 = LL ; φ 2 = I ; 1 ≤ LL , I ≤ 31 ; LL + I - 2 ≥ 31 } , 
 出 循环 后 , w 在 整个 程序段 P 中 的 区域 为 
 Φ wP = Ω wP × SetP ( w ) 
 = Dom ( P ) × { Y ( φ 1 , φ 2 ) | φ 1 + φ 2 - 2 ≥ 31 ; 1 ≤ φ 1 , φ 2 ≤ 31 } 
 = { Y ( φ 1 , φ 2 ) | 1 ≤ φ 1 , φ 2 ≤ 31 ; φ 1 + φ 2 - 2 ≥ 31 } , 
 在 语句 Step   1 ～ Step   9 中 的 条件 区域 是 P 的 定义域 
 Ω w = Dom ( P ) . 
 　 　 如果 嵌套 在 DO 循环 中 的 IF 语句 , 其 逻辑 条件 含有 数组 变量 , 并且 数组 引用 的 下标 表达式 中 含有 递归 标量 ( 否则 视为 标量 处理 ) , 此时 的 逻辑 条件 是 关于 该 数组 特定 区域 的 向量 式 的 逻辑 条件 , 需要 对 逻辑 条件 进行 向 量化 扩展 . 理论 上 , 向 量化 的 逻辑 条件 可以 蕴含 相当 丰富 和 复杂 的 语义 , 但 在 并行 化 常见 的 科学计算 类 程序 时 , 特别 需要 处理 好 以下 两种 常见 的 模式 . 
 　 　 ( 1 )   向量 式 逻辑 条件 的 条件 归约 . 此时 数组 的 下标 表达式 一般 是 严格 单调 的 , 设 循环 的 迭代 空间 大小 为 n , 则 根据 各个 被 判定 数组 元素 相对 该 逻辑 条件 是否 成立 可以 有 2n 种 情形 , 但 在 编译器 里 通常 只 需 考虑 全部 成立 或 全部 不 成立 的 情形 . 条件 全部 成立 时 , 归约 变量 进行 一般 的 归约 运算 , 相应 的 Ω 区域 为 各个 分量 满足 逻辑 条件 时 的 联立 ; 条件 全部 不 成立 时 , 归约 变量 不变 . 相应 的 Ω 区域 为 各个 分量 不 满足 逻辑 条件 时 的 联立 . 参见 例 3 . 
 　 　 ( 2 )   向量 式 逻辑 条件 对应 下 的 向量 引用 . 此时 ， 逻辑 条件 和 向量 引用 中 的 数组 下标 表达式 一般 都 是 严格 单调 的 , 根据 逻辑 条件 中 数组 元素 的 取值 决定 是否 对 相应 的 引用 数组 元素 进行 读写 引用 . 这里 也 只 需 考虑 向量 式 逻辑 条件 全部 成立 或 全部 不 成立 的 情形 , 并且 相应 的 Ω 区域 计算方法 同 上 , 而 被 引用 的 数组 区域 同一 般的 数组 区域 计算方法 相同 . 参见 例 4 . 
 　 　 例 3 : 
 　 　 Step   1   KC = 0 
 　 　 Step   2   DO   K = 1 , 9 , 1 
 　 　 Step   3   　 　 IF   ( RS ( K ) . GT . CUT2 )   THEN 
 　 　 Step   4   　 　 　 KC = KC + 1 
 　 　 Step   5   　 　 ENDIF 
 　 　 Step   6   ENDDO 
 　 　 Step   3 中 的 条件 是 RS ( 1 : 9 ) 的 向 量化 逻辑 条件 . KC 定义 在 Step   1 ～ Step   6 的 范围 是 值 不确定性 定义 . 如果 KC 是 符号 变量 , 则 需要 对 其 进行 符号分析 . KC 对 向量 条件 : RS ( K ) . GT . CUT2 , K = 1 , ... , 9 进行 了 条件 归约 . 因此 KC 的 取值 范围 为 0 ≤ KC ≤ 9 . 
 　 　 KC = 0 对应 条件 Step   3 全部 不 成立 的 Dom ( P ) 中 的 一个 区域 
 
 　 　 KC = 9 对应  K , 1 ≤ K ≤ 9 条件 Step   3 都 成立 的 区域 
 
 　 　 例 4 : 
 　 　 Step   1   DO   K = 2 , 5 , 1 
 　 　 Step   2   IF   ( RS ( 4 + K ) . LE . CUT2 )   THEN 
 　 　 Step   3   RL ( 4 + K ) = SQRT ( RS ( 4 + K ) ) 
 　 　 Step   4   ENDIF 
 　 　 Step   5   ENDDO 
 　 　 从 Step   1 ～ Step   5 中 的 IF 语句 导致 了 程序段 P 中 的 一个 条件 写 , RL ( 6 : 9 ) 的 定义 和 RS ( 6 : 9 ) 满足 ( RS ( 4 + K ) . LE . CUT2 ) 的 情况 是 一致 的 . 当 条件 全部 成立 时 , , 数组 区域 RL ( 6 : 9 ) 也 全部 被 定义 , 条件 全部 不 成立 时 , 数组 区域 RL ( 6 : 9 ) 也 全部 没有 被 定义 . 
 　 　 需要 指出 的 是 , 在 上述 两例 中 , 由于 Ω 区域 的 表达式 中 出现 了 数组 元素 , 并且 是 对 一定 范围 中 的 每个 元素 都 成立 , 例如 , 等 , 因此 , 有 必要 对 现有 的 区域 运算 系统 在 表示 和 运算 方法 上 进行 相应 的 扩充 . 
 1.4   过程 间 的 传递 
 　 　 当 被 分析 的 程序段 P 含有 过程 调用 时 , 需要 在 调用 过程 和 被 调用 过程 之间 传递 数据流 信息 . 条件 谓词 的 Ω 区域 主要 是 关于 标量 的 约束 关系 , 找出 虚 参数 和 实 参数 之间 的 对应 关系 并 进行 标量 的 替换 即可 . 数组 引用 区域 的 跨 过程 传递 则 复杂 得 多 , 此时 ， 虚 参数 组与 实参 数组 可以 有 不同 的 形状 定义 , 实参 数组 也 无须 从 一个 数组 的 首 元素 开始 , 因此 ， 这里 要 解决 数组 区域 的 RESHAPE 问题 ［ 4 ］ . 
 1.5   区域 运算 及 区域 覆盖 关系 的 判定 
 　 　 区域 之间 的 基本 运算 包括 交 、 并 、 减 . 
 　 　 n 维空间 中 任意 两个 点集 之间 的 集合 运算 和 覆盖 关系 判定 是 很 困难 的 . 但 在 实际 应用程序 中 , 逻辑 条件 的 Ω 区域 经常 是 线性 凸 区域 , 甚至 是 各维 之间 相互 独立 的 正则 区域 . 文献 ［ 5 ］ 中有 关于 Diophantine 方程 、 不等式 组 的 Omega 测试法 , 可以 用来 测试 整 系数 区域 的 相交 和 覆盖 关系 , 特别 是 线性 凸 区域 内 整数 点集 之间 的 相交 和 覆盖 关系 判定 . 在 文献 ［ 5 ］ 列出 的 参考文献 中 , 有 一般 情形 下 线性 凸 区域 之间 的 运算 和 覆盖 关系 判定 的 方法 , 这里 不再 赘述 . 当 需要 判定 覆盖 关系 的 两个 空间 区域 非常复杂 时 , 问题 的 复杂性 源自 逻辑 谓词 之间 逻辑关系 的 复杂性 . 
 2   区域 覆盖 技术 在 数据流 分析 中 的 应用 
 2.1   数组 数据流 分析 中 的 区域 覆盖 技术 
 　 　 在 数组 数据流 分析 中 可以 利用 Ω 区域 和 Φ 区域 的 覆盖 关系 来 消解 由 条件 分支 语句 导致 的 数据流 不确定性 . 由 文献 ［ 3 ］ 中 的 覆盖 定理 可以 导出 如下 原理 . 
 　 　 流 不确定性 消解 原理 . 对于 程序段 P 中 特定 的 读 r 和 所有 可能 为 r 提供 数据源 的 写集 W : W = NaWrP , 判定 W 的 一个 特定 的 子集 W * 是否 满足 可以 通过 判定 以下 条件 来 确定 : Φ rP Φ P ( W * ) . 判定 单独 一个 写 能否 覆盖 读时 , 只 需 判定 Ω r Ω w   and   SetP ( r ) SetP ( w ) . 
 　 　 区域 覆盖 技术 可以 增强 数组 私有化 的 判定 . 
 　 　 如果 把 数组 引用 区域 从 单纯 的 数组 区域 推广 到 Φ 区域 , 文献 ［ 1 ］ 中 的 相关 - 覆盖 方法 可以 推广 到 能够 处理 条件 分支 语句 产生 的 、 静态 可 消解 的 流 不确定性 . 下面 约定 : BL 表示 循环 的 次数 , Li 表示 第 i 次 循环 迭代 , Lv 表示 任意 的 Li , 2 ≤ i ≤ BL . 其他 符号 的 含义 与 文献 ［ 1 ］ 相同 , 并且 约定 读写 都 是 针对 当前 被 考察 数组 的 . 限于 篇幅 , 证明 从略 . 
 　 　 定理 2.1 . 对于 程序段 
 　 　 定义 2.1 . 数组 在 循环 L 中是 写 自 覆盖 的 , 如果 1 ≤ i ≤ BL - 1 ; Φ Li ( W ) Φ Li + 1 ( W ) . 
 基本 判定 准则 . 循环 L 中 , 如果 k , 2 ≤ k ≤ BL : UELk , 该 数组 可以 私有化 . 
 　 　 判定 准则 1 . 循环 L 中 , r ∈ RLv , 如果 Φ Lv ( r ) Φ Lv ( NaWrLv ) , r 不 妨碍 私有化 . 如果 任意 r ∈ RLv 均 不 妨碍 私有化 , 数组 在 循环 L 中是 可 私有化 的 . 
 　 　 判定 准则 2 . 循环 L 中 , r ∈ RLv , 如果 数组 在 L 中写 自 覆盖 : 且 Φ Lv ( WLv ) Φ Lv ( NaWrLv ) , 那么 r 不 妨碍 私有化 . 如果 任意 r ∈ RLv 均 不 妨碍 私有化 , 数组 在 循环 L 中是 可 私有化 的 . 
 2.2   符号分析 中 的 区域 覆盖 技术 
 　 　 在 计算 函数 模型 下 , 条件 分支 语句 定义 的 符号 变量 , 其 符号 值 可以 表示 为 
 
 　 　 Ω p1 , ... , Ω pn , Ω other 是 Dom ( P ) 的 一个 划分 . 我们 称 这种 表示法 为 区域 函数 法 . 
 　 　 程序段 P 中 , 对 符号 变量 Symbol 的 读 引用 r : , r 能够 读到 ExpVali 的 充要条件 是 : Ω pr ∩ Ω pi ≠ ; 特别 地 , 如果 Ω pr Ω pi , 则 r 读到 的 一定 是 ExpVali ; 如果 , 则 R 读到 的 一定 是 { ExpVali | i ∈ D } 中 的 某个 数值 . 我们 用 Symbol ( Ω pr ) 表示 在 状态 条件 Ω pr 下读 符号 变量 Symbol 所 读取 的 变量值 表达式 . 
 　 　 例 5 : 
 　 　 Step   1   IF   ( I . LE.6 )   THEN   NB = 1 
 　 　 Step   2   ELSEIF   ( I . GT.6   . AND . I . LE.26 )   THEN   NB = 2 
 　 　 Step   3   ELSEIF   ( I . GT.26   . AND . I . LE.64 )   THEN   NB = 3 
 　 　 Step   4   ELSE   NB = 4 
 　 　 Step   5   ENDIF 
 　 　  … 
 　 　 Step   10   IF   ( I . GT.32 )   ... = ... NB ... 
 　 　 NB ( I > 32 ) 读到 的 数值 可以 确定 为 3 或 4 , 如果 I ＞ 64 , 则 可以 进一步 明确 为 4 . 
 文献 ［ 6 ］ 中 推广 的 Φ - function 表示法 对应 于 区域 函数 表示法 在 n = 1 时 的 情形 . 因此 , 文献 ［ 6 ］ 中 介绍 了 表示法 的 运算 可以 推广 到 区域 函数 表示法 上 , 例如 , 求 符号 变量 的 极值 ： 
 max ( Symbol ) ≤ max ( ExpVal1 , ... , ExpValn , ExpValo ) , 
 min ( Symbol ) ≥ min ( ExpVal1 , ... , ExpValn , ExpValo ) . 
 　 　 定义 两个 符号 表达式 是 相容 的 , 如果 经过 变量 的 反向 替换 后 , 一个 表达式 的 非常 数项 是 另 一个 表达式 非常 数项 的 子集 . 比较 两个 相容 符号 变量 的 分配律 : 
 
 Ω ( 2 ) i 和 ExpVal ( 2 ) i 表示 第 2 个 符号 变量 Sym2 中 第 i 个 相应 的 Omega 区域 和 表达式 . 
 当 区域 之间 的 覆盖 关系 过于 复杂 时 , 用 近似 的 判定 规则 : 
 ( min ( Sym1 ) ＞ max ( Sym2 ) ) ( Sym1 ＞ Sym2 ) . 
 　 　 区域 函数 表示法 还 可以 方便 地 表示 Index   Array . 
 　 　 例 6 : 
 　 　 Step   1   DO   J = 1 , JMAX 
 　 　 Step   2   JPLUS ( J ) = J + ！ 
 　 　 Step   3   ENDDO 
 　 　 Step   4   JPLUS ( JMAX ) = 1 
 　 　 可以 表示 为 : 
 2.3   区域 覆盖 技术 的 应用 范例 
 　 　 本例 出自 Perfect   Benchmarks 的 MDG . 其子 程序 INTERF 中 的 循环 DO   1000 占 MDG 总 运行 时间 的 90% 以上 , 由于 传统 的 数据流 方法 无法 确定 数组 RL 是否 可以 私有化 , 使得 该 循环 没有 被 并行执行 . 本例 对 该 循环 有 保持 问题 本质 的 简化 . 
 　 　 Step 　 1 　 DO   I = 1 , NMOL - 1 , 1 
 　 　 Step 　 2 　 　 DO   J = I + 1 , NMOL , 1 
 　 　 Step 　 3 　 　 　 KC = 0 
 　 　 Step 　 4 　 　 　 DO   K = 1 , 9 , 1 
 　 　 Step 　 5 　 　 　 　 RS ( K ) = XL ( K ) * XL ( K ) + YL ( K ) * YL ( K ) + ZL ( K ) * ZL ( K ) 
 　 　 Step 　 6 　 　 　 　 IF   ( RS ( K ) . GT . CUT2 )   THEN 
 　 　 Step 　 7 　 　 　 　 　 KC = KC + 1 
 　 　 Step 　 8 　 　 　 　 ENDIF 
 　 　 Step 　 9 　 　 　 ENDDO 
 　 　 Step   10 　 　 　 IF   ( KC . NE.9 )   THEN 
 　 　 Step   11 　 　 　 　 DO   K = 2 , 5 , 1 
 　 　 Step   12 　 　 　 　 　 IF   ( RS ( 4 + K ) . LE . CUT2 )   THEN 
 　 　 Step   13 　 　 　 　 　 　 RL ( 4 + K ) = SQRT ( RS ( 4 + K ) ) 
 　 　 Step   14 　 　 　 　 　 ENDIF 
 　 　 Step   15 　 　 　 　 ENDDO 
 　 　 Step   16 　 　 　 　 IF   ( KC . EQ.0 )   THEN 
 　 　 Step   17 　 　 　 　 　 DO   K = 11 , 14 , 1 
 　 　 Step   18 　 　 　 　 　 　 FTEMP = AB2 * EXP ( - B2 * RL ( K - 5 ) ) / RL ( ( - 5 ) + K ) 
 　 　 Step   19 　 　 　 　 　 　 FF ( ( - 5 ) + K ) = FF ( ( - 5 ) + K ) + FTEMP 
 　 　 Step   20 　 　 　 　 　 ENDDO 
 　 　 Step   21 　 　 　 　 ENDIF 
 　 　 Step   22 　 　 　 ENDIF 
 　 　 Step   23 　 　 ENDDO 
 　 　 Step   24 　 ENDDO 
 　 　 在 这个 例子 里 , 我们 希望 确定 数组 RL 是否 对于 外层 循环 是 可 私有化 的 . 因此 , 我们 考虑 的 当前 程序段 P 是从 Step   3 ～ Step   22 . 
 　 　 Step   3 ～ Step   9 定义 的 标量 KC 在 Step   10 和 Step   16 中 被 读 引用 , 因此 KC 是 典型 的 IF 语句 下 的 符号 变量 定义 . 需要 推测 其值 的 情况 , 参见 第 1.3 节中 的 例 3 . 
 　 　 Step   11 ～ Step   15 中 的 条件 写 参见 第 1.3 节中 的 例 4 . 
 　 　 Step   16 ～ Step   21 中 的 IF 语句 导致 了 程序段 P 中 的 条件 读 引用 区域 : RL ( 6 : 9 ) . 
 　 　 由 条件 读 的 条件 谓词 KC = 0 可知 , RL ( 6 : 9 ) 的 读 Omega 区域 是 KC = 0 所 对应 的 区域 , 该 条件 读 的 数组 引用 区域 SetP ( r ) = RL ( 6 : 9 ) 被 Step   11 ～ Step   15 的 条件 写 的 全写 区域 SetP ( w ) = RL ( 6 : 9 ) 所 覆盖 : SetP ( r ) = SetP ( w ) , 且 Ω r Ω w . 
 
 　 　 由 前面 提出 的 流 不确定性 消解 原理 可知 , 此处 条件 读 的 确切 数据源 其 根据 是 Step   11 ～ Step   15 的 条件 写 , 因此 不会 产生 跨 循环 的 流 相关 , 由 第 2.1 节中 数组 私有化 的 判定 准则 1 可知 , 数组 RL 可以 私有化 . 
 　 　 在 SGI   Challenge   4L ( 4 处理器 ) SMP 计算机 上 的 实测 表明 , 本例 的 分析 变换 使得 MDG 的 加速 比 从 1.0 提高 到 了 3.7 . 
 3   相关 工作 比较 
 　 　 由于 逻辑 条件 在 语义上 的 复杂性 , 即 有 的 并行 化 编译器 , 例如 , SUIF ［ 7 ］ , AFT ［ 8 ］ 在 进行 数据流 分析 时 一般 忽略 条件 分支 语句 的 逻辑 条件 . 在 传统 的 科学计算 程序 中 , 控制流 比较简单 . 在 影响 程序 性能 的 关键 代码段 中 , 只有 为数不多 的 条件 分支 语句 , 而且 语义 一般 是 值 不确定性 的 , 上述 忽略 对 数据流 分析 的 精度 影响 不大 . 随着 科学计算 程序 的 日益 复杂 以及 并行 化 编译器 潜在 应用 范围 的 扩大 , 人们 开始 注意 到 如何 处理 条件 分支 语句 . 
 　 　 Parafrase - 2 中 的 Join - function 以及 Wolfe 提出 的 φ - function , 事实上 并 没有 利用 条件 分支 语句 的 逻辑 条件 . 文献 ［ 2 , 6 ］ 对 φ - function 进行 了 扩充 , 使 之 能够 携带 逻辑 条件 , 并 在 Polaris ［ 9 ］ 并行 化 编译器 上 应用 于 符号分析 等 问题 . 文献 ［ 10 ］ 提出 的 GAR ( guarded   array   region ) , 是 对 数组 区域 在 概念 上 进行 扩充 的 一个 尝试 . 但是 在 GAR 中 , 作溪 Guard 的 逻辑 谓词 , 其 运算 采用 逻辑推理 系统 ; 而 数组 区域 表示 为 数组 数据 空间 中 的 凸 区域 , 运算 是 集合 运算 系统 . 两个 不同 的 运算 系统 运用 在 同一个 对象 上 , 使得 GAR 在 理论 和 实现 上 都 相当 复杂 . 此外 , 完备 的 逻辑推理 系统集成 到 实用 的 编译器 中 , 目前 还是 令人 怀疑 的 . 
 　 　 本文 在 计算 函数 模型 的 框架 下 , 把 逻辑 条件 的 语义 运算 转化 为 空间 区域 的 集合 运算 , 其 形式 与 数组 区域 的 运算 是 一致 的 . 因此 Φ 区域 与 GAR 相比 是 一个 更加 自然 的 对 数组 区域 的 概念 拓广 . Φ 区域 的 运算 无需 再 实现 一个 新 的 运算 系统 , 而 只 需 在 数组 区域 运算 系统 的 基础 上 予以 增强 和 扩充 . 通过 本文 的 示例 可知 , Φ 区域 覆盖 法 简洁 、 有效 . 此外 , 把 符号 变量 的 值 表示 为 区域 函数 的 形式 , 并 利用 区域 覆盖 的 关系 进行 符号分析 , 其 分析 能力 不亚于 文献 ［ 6 ］ 中 所 提出 的 方法 . 
 4   结   论 
 　 　 引入 计算 函数 模型 后 , 可以 对 数组 区域 进行 概念 上 的 拓广 , 提出 数组 引用 的 Φ 区域 这 一新 概念 . Φ 区域 同时 包含 了 数组 引用 的 引用 元素 区域 的 信息 和 引用 的 逻辑 条件 信息 , 因此 , 通过 Φ 区域 的 覆盖 关系 可以 解决 数组 数据流 分析 中 由 条件 分支 语句 导致 的 流 不确定性 . 此外 , 由 逻辑 条件 的 Omega 区域 还 可 导出 符号 变量 的 取值 信息 . 
 　 　 区域 覆盖 技术 在 数组 数据流 分析 中是 比较 成熟 的 技术 . 本文 阐述 了 如何 在 实际 程序 中 常见 的 程序 构造 下 计算 逻辑 条件 的 Ω 区域 和 数组 引用 的 Φ 区域 , 并 利用 Ω 区域 和 Φ 区域 的 覆盖 关系 在 相对 小 的 代价 之下 获得 更 精确 的 数据流 信息 . 
 本文 研究 得到 国家自然科学基金 ( No.69633030 ) 、 国家 863 高科技 项目 基金 ( No.863 - 306 - ZT01 - 02 - 01 ) 、 教育部 科学技术 项目 基金 和 国防科技 重点 实验室 基金 ( No.97 JS76.5 . 2 . JW0701 ) 资助 . 
 胡世亮 , 1972 年生 , 硕士生 , 主要 研究 领域 为 并行 与 分布式计算 . 
 臧斌宇 , 1965 年生 , 副教授 , 主要 研究 领域 为 并行处理 , 高性能 计算 . 
 凌冰 , 1974 年生 , 硕士生 , 主要 研究 领域 为 并行 编译 . 
 朱传琪 , 1943 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 并行处理 , 高性能 计算 . 
 胡世亮 ( 复旦大学 并行处理 研究所 　 上海 　 200433 ) 
 臧斌宇 ( 复旦大学 并行处理 研究所 　 上海 　 200433 ) 
 凌冰 ( 复旦大学 并行处理 研究所 　 上海 　 200433 ) 
 朱传琪 ( 复旦大学 并行处理 研究所 　 上海 　 200433 ) 
 参考文献 
 1 ， Chen   Tong , Zang   Bin - yu , Zhu   Chuan - qi . A   new   method   for   array   privatization . In : Tan   Chee   Klow   ed . Proceedings   of   High   Performance   Computing   Conference ' 94 . Singapore : National   Supercomputing   Research   Center ;   National   University   of   Singapore , 1994.43 ～ 50 
 2 ， Tu   Peng , Padua   D . Automatic   array   privatization . In : Proceedings   of   the   6th   International   Workshop   on   Languages   and   Compilers   for   Parallel   Computing . Berlin : Springer - Verlag , 1993.500 ～ 521 
 3 ， Hu   Shi - liang , Zang   Bin - yu , Zhu   Chuan - qi . Enhancing   dataflow   analysis   with   computation   function   model . Journal   of   Software , 2000 , 11 ( 2 ) : 187 ～ 194 
 ( 胡世亮 , 臧斌宇 , 朱传琪 . 用 计算 函数 模型 增强 数据流 分析 . 软件 学报 , 2000 , 11 ( 2 ) : 187 ～ 194 ) 
 4 ， Creusillet   B , Irigoin   F . Interprocedural   array   region   analysis . In : Huang   C - H   et   al   eds . Proceedings   of   the   8th   International   Workshop   on   Languages   and   Compilers   for   Parallel   Computing . Columbus , Ohio : Springer - Verlag , 1995.46 ～ 60 
 5 ， Pugh   W . A   practical   algorithm   for   exact   dependence   analysis . Communication   of   the   ACM , 1992 , 35 ( 8 ) : 102 ～ 114 
 6 ， Tu   Peng , Padua   D . Gated   SSA - based   demand - driven   symbolic   analysis   for   paralleling   compilers . In : Wolfe   M , Nicole   D   et   al   eds . Proceedings   of   the   International   Conference ' 95   on   Supercomputing . Bacelona : ACM   Press , July   1995.414 ～ 423 
 7 ， Wilson   R , French   R , Wilson   C   et   al . SUIF : an   infrastructure   for   research   on   paralleling   and   optimizing   compilers . ACM   SIGPLAN   Notices , 1994 , 29 ( 12 ) : 31 ～ 37 
 8 ， Zhu   Chuan - qi , Zang   Bin - yu , Chen   Tong . An   automatic   parallelizer . Journal   of   Software , 1996 , 7 ( 3 ) : 180 ～ 186 
 ( 朱传琪 , 臧斌宇 , 陈彤 . 程序 自动 并行 化 系统 . 软件 学报 , 1996 , 7 ( 3 ) : 180 ～ 186 ) 
 9 ， Blume   B , Eigenmann   R , Faigin   K   et   al . Polaris : the   next   generation   in   paralleling   compilers . In : Proceedings   of   the   7th   International   Workshop   on   Languages   and   Compilers   for   Parallel   Computing . New   York : Springer - Verlag , 1994.141 ～ 154 
 10 ， Trung   Nguyen , Gu   Jun - jie , Li   Zhi - yuan . An   interprocedural   paralleling   compiler   and   its   support   for   memory   hierarchy   research . In : Huang   C - H   et   al   eds . Proceedings   of   the   8th   International   Workshop   on   Languages   and   Compilers   for   Parallel   Computing . Columbus , Ohio : Springer - Verlag , 1995.90 ～ 104 
 收稿 日期 ： 1998 - 09 - 21 
 修稿 日期 ： 1999 - 03 - 09 
