软件 学报 
 JOURNAL   OF   SOFTWARE 
 1999 年   第 1 期   No.1   1999 
 
 
 
 一种 基于 检查点 的 卷回恢复 与 进程 迁移 系统 * 
 汪 东升 　 沈美明 　 郑纬民 　 裴 　 丹 
 　 　 摘要 　 ChaRM 是 一种 并行程序 后 向 故障 恢复 与 进程 迁移 系统 . 它 不仅 实现 了 对 工作站 机群系统 瞬时 故障 的 恢复 , 而且 通过 检查点 设置 时 的 Mirror 存储技术 和 进程 迁移 技术 , 实现 了 对 机群系统 结点 永久 故障 的 恢复 , 并 支持系统 软硬件 的 在线 维护 、 处理机 资源 的 排 他 / 限时 使用 和 动态 负载平衡 等 功能 . 文章 主要 介绍 ChaRM 系统 的 检查点 设置 与 回卷 恢复 、 进程 迁移 等 实现 技术 , 并 给出 了 部分 性能 评测 结果 . 
 　 　 关键词 　 检查点 , 回卷 恢复 , 进程 迁移 , 工作站 机群 . 
 　 　 中图法 分类号 　 TP393 
 A   Checkpoint - based   Rollback   Recovery   and   Process   Migration   System   
 WANG   Dong - sheng   SHEN   Mei - ming   ZHENG   Wei - min   PEI   Dan   
 　 　 Abstract 　 ChaRM   is   a   checkpoint - based   backward   fault   recovery   and   process   migration   system .   It   is   designed   to   recovery   the   fault   of   NOWs   ( networks   of   workstations )   by   checkpointing   and   rollback   recovery .   It   offers   functions   of   on - line   software   and   hardware   maintenance ,   process   migration   and   load   balance ,   etc .   ChaRM   is   able   to   run   on   NOWs   that   change   over   time   due   to   failure ,   load   or   availability .   As   long   as   there   is   at   least   one   node   alive   in   the   cluster ,   the   computation   will   complete   in   an   efficient   manner .   The   checkpointing ,   rollback   recovery   and   process   migration   techniques ,   and   some   performance   evaluation   results   are   discussed   in   this   paper . 
 　 　 Key   words 　 Checkpointing ,   rollback   recovery ,   process   migration ,   NOWs   ( networks   of   workstations ) . 
 　 　 现代 航天 、 航空 、 邮电 、 石油 等 应用领域 对 计算机系统 的 性能 和 可靠性 提出 了 越来越 高 的 要求 . 并行处理 是 提高 计算能力 、 满足 不断 增长 的 应用 需求 的 有效途径 . 而 容错 技术 是 提高 计算 可靠性 的 重要 保证 . 工作站 机群 NOW ( networks   of   workstations ) 是 利用 现有 的 工作站 资源 , 通过 高速 网络 以 某种 结构 连接起来 而 构成 的 并行 系统 . 由于 它 具有 用户 投资 风险 小 、 结构 可扩展性 好 、 用户 可 继承 原有 的 软件资源 、 编程 方便 并且 构造 简单 等 特点 , 目前 已 成为 并行处理 发展 的 主流 方向 之一 . 而 NOW 随着 规模 的 不断扩大 , 它 在 计算 过程 中 发生 故障 的 几率 也 会 呈 指数 增长 , 同时 由于 NOW 通常 为 多用户 使用 , 结点 等 资源 此时 可用 , 而 另 一 时刻 则 可能 不再 可用 , 具有 较大 的 可变 特性 . 系统 在 发生 下列 异常 事件 时会 导致 本次 并行计算 的 彻底 失败 , 此前 的 大量 计算 不再 可用 , 如 ： ① 运行 不同 应用程序 的 其他 用户 发生 的 异常 事件 ； ② 某 机器 所有者 需要 独占 CPU 资源 , 禁止 其他 用户 共享 该 结点 资源 ； ③ 异常 关机 ； ④ 结点 ( 瞬时 / 间歇 / 永久 ) 故障 ； ⑤ 系统软件 升级 , 结点 更换 等 维护 操作 等等 . 
 　 　 大规模 科学 工程 计算 任务 执行 时间 都 较长 , 一旦 某 计算 结点 发生 上述 异常 事件 , 将 导致系统 运行 失败 , 程序 不得不 从头开始 执行 . 为了 避免 系统 在 发生 上述 事件 后 由于 从头开始 执行 而 引起 计算 上 的 大量 浪费 , 充分 提高 机群系统 的 可用性 , 在 系统 正常 运行 的 适当 时刻 设置 检查点 ( Checkpoint ) , 保存 系统 当时 的 规范 状态 , 并 对 各 进程 进行 相关性 跟踪 和 记录 . 系统 发生 故障 后 , 将 相关 进程 回卷 ( Rollback ) 到 故障 前 系统 一致性 状态 ( 检查点 ) , 经过 状态 恢复 后 从 该 检查点 处 重新 执行 , 而 不是 从 程序 开始 执行 , 从而 节省 了 大量 重复 计算 时间 , 充分体现 机群系统 的 并行 性能 . 这种 基于 检查点 的 后 向 恢复 技术 不仅 可以 对系统 瞬时 / 间歇 故障 进行 自动 恢复 , 也 是 恢复 未知 故障 — — 在 某 一 应用 设计 过程 中 未预料到 的 故障 的 唯一 手段 . ［ 1 ］ 
 　 　 ChaRM ( checkpoint - based   rollback   recovery   and   process   migration ) 是 为了 实现 工作站 机群系统 的 容错性 能 和 实现 负载平衡 而 研制 的 并行程序 运行 回卷 恢复 及 进程 迁移 软件 . ChaRM 不仅 实现 了 对 机群系统 瞬时 故障 的 恢复 , 而且 通过 检查点 设置 时 的 Mirror 存储技术 和 进程 迁移 技术 , 实现 了 对 机群系统 结点 永久 故障 的 恢复 并 支持系统 在线 维护 、 处理机 资源 的 排 他 或 限时 使用 和 动态 负载平衡 . 
 1   基本 设计 思想 与 设计 目标 
 　 　 实现 并行 / 分布 系统 容错 的 方法 有 多种 : 使用 特殊 的 容错 硬件 是 有效 的 , 但 不 易于 加 到 现有 的 机群系统 中 去 ； 与 应用 相关 的 方法 和 原子 事物 处理 需要 特殊 程序设计 模型 ( 可能 与 消息传递 模型 不 兼容 ) 来 支持 ； 活动 冗余 的 方法 适用 于 实时 系统 , 但 它 需要 使用 额外 的 处理器 , 因此 这些 方法 都 不能 有效 地 应用 于 工作站 机群系统 . 检查点 设置 与 回卷 恢复 CRR ( checkpointing   and   rollback   recovery ) 技术 作为 一种 后 向 恢复 技术 , 通过 在 系统 正常 运行 过程 中 设置 检查点 , 保存 系统 运行 时 的 一致性 状态 , 并 通过 程序 的 回卷 ( 到 最近 的 检查点 ) 来 实现 对 系统故障 的 恢复 . 同时 , 检查点 机制 也 是 实现 进程 迁移 、 作业 交换 、 并行 程序调试 的 有效 手段 . 
 　 　 现有 的 并行 / 分布 系统 CRR 技术 大致 可以 分为 独立 方式 和 协调 方式 两类 ［ 2 ～ 4 ］ , 在 前 一种 方式 中 , 各 进程 独立设置 检查点 而 不 需要 相互间 的 协调 , 最大 限度 地 满足 各 进程 的 自主 特性 , 但易 引起 多米诺 效应 . 消息 记录 （ Message - logging ) 是 避免 多米诺 效应 的 有效 手段 . 它 利用 分段 确定性 模型 PDM ( piecewise   deterministic   model ) , 通过 消息 记录 和 确定性 重 放 机制 避免 了 多米诺 效应 的 发生 . 协调 方式 可以 避免 多米诺 效应 , 但是 系统 为了 建立 检查点 , 需要 许多 控制 消息 , 同步 建立 检查点 的 通信 代价 较大 . 对于 一般 系统 来说 , 通常 认为 在 系统 正常 操作过程 中 基于 记录 的 独立 检查点 设置 方式 比 协调 的 检查点 设置 方式 代价 小 , 因为 它 避免 了 为 建立 系统 一致性 状态 而 导致 的 同步 代价 . 对于 通信 速度 较慢 的 系统 来说 , 情况 确实 如此 , 因为 此时 系统 在 正常 操作 时 的 消息 记录 代价 相对 较 小 . 而 对于 并行 机群系统 来说 , 由于 网络通信 速度 的 不断 提高 , 用于 消息 记录 的 代价 反而 比 协调 建立 检查点 的 代价 要 大 . 对于 计算 密集型 并行 应用 来说 , 许多 研究 和 实验 表明 , 协调 检查点 设置 方法 显示 出较 好 的 性能 , 并且 具有 回卷 距离 短 、 实现 简单 、 不 需要 对 进程 执行 的 分段 确定性 假设 , 且 同时 能 容忍 多个 进程 故障 的 优点 . 当 系统 发生 故障 而 需要 回卷 恢复 时 , 系统 相关 结点 只 需 回卷 到 其 上 一个 检查点 , 由于 系统 各 结点 只 需 保存 一个 检查点 , 因此 , 空间 回收 ( Garbage   Collection ) 算法 简单 . 
 　 　 由于 协调 的 检查点 设置 方式 具有 回卷 深度 小 、 恢复 算法 简单 、 存储 开销 小 、 空间 回收 简单 等 优点 , CoCheck ［ 5 ］ , MIST ( migration   and   integrated   scheduling   tools ) ［ 6 ］ 等 系统 都 选用 了 这种 方式 . ChaRM 也 采用 了 协调 的 检查点 设置 技术 . ChaRM 系统 具有 以下 功能 和 特点 : 
 　 　 . 自动 恢复 结点 瞬时 / 永久 故障 ; 
 　 　 . 采用 并行 和 增益 的 检查点 设置 方式 , 减小 系统 正常 运行 代价 ; 
 　 　 . 同时 支持 容错 与 进程 迁移 ; 
 　 　 . 在 用户 级 实现 , 使用 标准 UNIX 系统 调用 , 不 修改 UNIX 内核 , 不 需要 额外 硬件 支持 , 适用 于 不同 UNIX 版本 ; 
 　 　 . 对 用户程序 透明 , 系统 以 运行库 形式 提供 给 用户 . 用户 使用 时 只 需 将 其 应用程序 目标 文件 与 ChaRM 提供 的 运行库 链接 , 即可 用 命令 方式 或 自动 方式 使用 系统 的 容错 及 进程 迁移 等 功能 ; 
 　 　 . 在 并行计算 环境 通信 库 之上 实现 , 具有 一定 可移植性 .   
 2 　 ChaRM 系统 总体 结构 
 　 　 为了 与 并行 机群系统 其他 子系统 相吻合 , 程序运行 回卷 恢复 系统 选用 PVM 作为 并行程序 开发 环境 . 系统 由 4 个 模块 构成 ： 
 　 　 . 总控 模块 ( ChaRM - manager ) ： 负责 协调 管理系统 检查点 设置 、 系统 监测 、 进程 迁移 与 程序 回卷 等 工作 ； 
 　 　 . 检查点 设置 与 回卷 恢复 模块 ( CRR ) ： 定时 地 协调 并行 进程 设置 检查点 , 保存 系统 当时 的 全局 一致性 状态 , 在 系统 发生 异常 事件 时 , 负责 并行程序 的 回卷 恢复 ； 
 　 　 . 系统 监测 模块 ( WatchD ) ： 通过 周期性 协议 , 检测 虚拟机 各种 异常 以及 各 daemon 进程 状态 , 并 及时 向 ChaRM - manager 报告 , 以便 由 ChaRM - manager 进行 决策 并 进行 相应 处理 ； 
 　 　 . 进程 迁移 与 文件 镜像 模块 ( Mig & Mir ) ： 负责 系统 的 进程 迁移 , 检查点 文件 的 存储 镜像 等 工作 . 
 　 　 系统 总体 结构 如图 1 所示 . 系统 在 正常 操作 时 , 通过 计时 （ Timer ） 机制 周期性地 通知 系统 执行 检查点 设置 操作 , 由 ChaRM - manager 协调系统 各 进程同步 设置 检查点 . 当 WatchD 检测 到 故障 时 , 由 error 事件 触发 程序 回卷 到 故障 前 保存 的 检查点 位置 , 通过 信息 的 恢复 ( Restore ) 和 程序 的 重放 ( Replay ) 以及 必要 时 的 进程 迁移 , 达到 故障 恢复 的 目的 . msg - filter 用于 监测 在 建立 检查点 过程 中 传输 通道 中 的 消息 ( in - Transit ) , 并 对 其 进行 消息 记录 ( Message - logging ) . 
 
 图 1 　 ChaRM 系统 逻辑 结构 
 3   ChaRM 系统 CRR 技术 与 进程 迁移 机制 
 3.1   ChaRM 系统 检查点 设置 和 回卷 恢复 
 　 　 由于 ChaRM 系统 在 通信协议 之上 实现 , 满足 通信 通道 可靠 的 假设 , 其 检查点 设置 时 必须 考虑 消除 引起 系统 状态 不 一致 的 孤儿消息 和 中途 消息 . 为此 , 一个 可能 的 方案 是 选择 适当 的 发起 时机 来 避开 包含 中途 消息 的 通信 通道 状态 . 但 由于 对 通信 通道 状态 的 监测 无法 在 通信 库 之上 实现 , 而且 我们 采用 定时 的 检查点 插入方式 , 发起 时机 的 选择 无法 确定 . 另 一个 可能 的 方案 是 在 检查点 设置 之外 辅以 对 中途 消息 的 记录 , 回卷 恢复 时 对 这些 消息 进行 重放 . 但 在 检查点 发起 时刻 , 这些 中途 消息 可能 停留 在 物理 网络 、 操作系统 缓冲 、 通信 库 缓冲器 之中 的 任何 一处 , 在 不 介入 操作系统 和 通信 库 的 前提 下 , 直接 访问 这些 地方 以 获取 中途 消息 是 不 可能 的 . 
 　 　 ChaRM 系统 的 解决方案 是 , 在 检查点 发起 时刻 , 若 通信 通道 状态 包含 中途 消息 , 我们 将 利用 通信 机制 本身 “ 驱赶 ” 中途 消息 , 同时 延迟 真正 的 检查点 设置 , 最终 达到 在 无 孤儿消息 和 丢失 消息 的 全局 状态 下 建立 检查点 的 目的 . 在 实现 上 就是 利用 PVM 通信 通道 的 FIFO   性质 , 在 通信 库 之上 实现 一种 特殊 的 两步 协议 . 系统 以 不 依赖于 任何 并行计算 环境 的 专用 进程 cinit 作为 协议 的 管理 进程 , 更好 地 支持 了 在 不同 并行 环境 间 的 可移植性 . 协议 如下 . 
 　 　 第 1 步 ： 同步 
 　 　 ( 1.1 )   cinit 进程 　 检查点 设置 的 协调 进程 cinit 向 所有 应用 进程 发出 同步 启动 信号 CKPT － SIG , 
 　 　 ( 1.2 )   应用 进程 　 每个 应用 进程 收到 CKPT － SIG 后 , 向 其他 所有 应用 进程 发送 “ 准备就绪 ” 消息 
 　 　 　 　 　 RDY －   MSG , 
 　 　 ( 1.3 )   应用 进程 　 每个 应用 进程 暂停 计算 , 持续 接收 向 它 发送 的 消息 , 直至 收到 来自 其他 所有 应用 进程 的 RDY － MSG . 在 此 过程 中 , 如果 收到 除 RDY － MSG 以外 的 其他 消息 ( 被 “ 驱赶 ” 而来 的 中途 应用 消息 ) , 则 将 它 保存 到 预先指定 的 接收 缓冲 中 , 
 　 　 ( 1.4 )   应用 进程 　 退出 PVM . 
 　 　 第 2 步 ： 设置 检查点 . 其 组成 的 全局 检查点 状态 具有 一致性 . 
 　 　 ( 2.1 )   应用 进程 　 设置 检查点 , 
 　 　 ( 2.2 )   应用 进程 　 重新加入 PVM , 
 　 　 ( 2.3 )   应用 进程 　 向 cinit 发送 RJN － MSG ( old - tid , new - tid ) 消息 , 
 　 　 ( 2.4 )   cinit 进程 　 根据 各 进程 的 RJN － MSG , 重新 组织 任务 匹配 表 ( mapping - table ) , 
 　 　 ( 2.5 )   cinit 进程 　 向 各 应用 进程 广播 mapping - table , 
 　 　 ( 2.6 )   应用 进程 　 接收 到 mapping - table 后 , 调整 其 各自 的 任务 匹配 表 , 进入 正常 计算 阶段 . 
 　 　 由于 协议 利用 协调 进程 cinit 向 所有 应用 进程 发出 同步 启动 信号 CKPT － SIG , 以 协调 进行 各 进程 检查点 的 同步 设置 , 根据 通信 通道 的 FIFO 语义 , 不会 存在 孤儿消息 . 同时 , 当 收到 来自 某个 应用 进程 的 RDY － MSG 时 , 可以 推断 从 彼 进程 到 本 进程 的 单向 通信 通道 已 被 清空 , 其上 的 所有 中途 消息 （ 若 存在 ） , 已 被 驱赶 至本 进程 并 已 妥善 保存 . 因此 , 当 ( 1.3 ) 步 结束 后 , 各 应用 进程 可以 肯定 所有 从 其他 应用 进程 至本 进程 的 通信 通道 上 的 中途 消息 已 被 驱赶 而 提前 接收 , 全局 状态 则 为 各个 应用 进程 状态 ( 检查点 ) 组成 的 集合 . 因此 , 可以 证明 该 两步 协议 设置 的 检查点 是 一致性 全局 检查点 . ChaRM 也 采用 类似 的 两步 协议 实现 了 同步 回卷 , 此处 从略 . 
 3.2 　 ChaRM 系统 进程 迁移 机制 
 　 　 进程 从源机 迁移 至 目的 机 的 过程 , 实质 上 是 利用 CRR 机制 实现 的 进程 在 源机 的 挂 起 和 在 目的 机 的 恢复 过程 . 迁移 发起 时 , 系统 首先 在 目的 机上 为源 机上 迁移 进程 创建 一个 骨架 进程 , 接着 , 迁移 进程 设置 检查点 , 并 将 检查点 内容 直接 通过 UNIX 中套 接字 （ Socket ） 通道 传给 骨架 进程 . 随后 , 迁移 进程 自动 终止 . 骨架 进程 从 通道 中 读出 检查点 内容 , 即刻 将 自身 状态 恢复 为 检查点 保存 的 状态 , 并 从此 继续 运行 . 这样 , 从 总体 效果 来看 , 迁移 进程 从源机 迁移 到 了 目的 机上 执行 . 
 　 　 为了 保证系统 在 迁移 过程 中 的 状态 一致性 , 应该 避免 迁移 发起 时 各 应用 进程 发 往 迁移 进程 的 中途 消息 , 同时 避免 迁移 期间 非 迁移 进程 发 往 迁移 进程 的 应用 消息 . 迁移 过程 简单 描述 如下 ： 
 　 　 第 1 步 ： 同步 . 迁移 发起 时 , 为 避免 发 往 迁移 进程 的 中途 消息 , 我们 使用 驱赶 机制 将 这些 消息 驱赶 至 迁移 进程 并 对 其 提前 接收 . 由于 只有 各非 迁移 进程 NMP ( non - migration   process ) 至 迁移 进程 MP ( migration   process ) 的 消息 通道 需要 清空 , 方法 与 协调 式 检查点 设置 略有 差异 . 
 　 　 ( 1.1 )   各 NMP 向 所有 MP 进程 发送 RDY － MSG 消息 ； 
 　 　 ( 1.2 )   各 MP 等待 来自 所有 应用 进程 的 RDY － MSG . 在此期间 , 若 接收 到 非 RDY － MSG 的 消息 , 则 表明 它 是 被 驱赶 而来 的 应用 消息 , 将 它 保存 到 特定 缓冲 中 . 各 NMP 进程 则 照常 计算 . 
 　 　 第 2 步 ： 迁移 . 此时 , 发往 MP 的 中途 消息 已 全部 被 提前 接收 . 各 MP 建立 检查点 , 并 将 检查点 信息 通过 socket 直接 传送 到 目的 机 , 在 目的 机上 恢复 . 各 NMP 则 照常 执行 . 迁移 完毕 后 , 恢复 进程 将 任务 号 变化 通知 cinit , cinit 将 指导 所有 进程 更新 其 任务 号 映射 表 . 
 　 　 在 此 两步 协议 中 , 各 NMP 除了 在 迁移 发起 时向 所有 MP 发送 RDY － MSG 消息 , 以及 在 迁移 结束 时 在 cinit 指导 下 更新 映射 表外 , 一直 处于 正常 的 计算 过程 中 . 
 　 　 一般 为了 实现 进程 迁移 , 要 引入 十分复杂 的 消息 转发 和 排序 机制 , 并 为此 修改 PVM   daemon 进程 的 实现 来 解决 消息 丢失 问题 , 而 ChaRM 使用 了 “ 延迟 发送 ” 策略 来 支持 异步 迁移 . 可见 , 迁移 期间 发 向 迁移 进程 的 应用 消息 , 由于 延迟 到 映射 表 更新 后 再 实际 发送 , 将 被 正确 地 发往 目的 机上 的 恢复 进程 . 并且 , 延迟 发送 因 消息 延误 给 应用程序 的 运行 带来 的 附加 开销 很小 , 这是 由于 : 一方面 , 发送 消息 并 不 在 执行 的 关键 路径 上 , 因此 发送 延迟 对 发送 进程 （ NMP ） 的 计算 过程 无 直接 影响 ； 另一方面 , 由于 接收 进程 （ MP ） 直到 迁移 完毕 映射 表 更新 后 , 才 继续 计算 过程 , 接收 应用 消息 , 因此 , 将 发送 延迟 到 迁移 完毕 后 立即 执行 , 不会 因为 等待 消息 而 明显增加 执行 时间 . 
 3.3 　 检查点 镜像 与 结点 永久 故障 恢复 
 　 　 通过 改变 检查点 存放 的 位置 , 我们 可以 实现 不同 的 容错 模式 . 将 检查点 保存 到 本地 磁盘 上 只能 容忍 瞬时 故障 或 间歇 故障 . 而 借用 冗余 磁盘阵列 RAID （ redundant   arrays   of   inexpensive   disks ） 技术 的 容错 思想 , 我们 可以 灵活 选择 检查点 存放 位置 而 恢复 单个 或 多个 永久 故障 . 我们 在 检查点 设置 时 采用 了 镜像 平均 存储 策略 , 即 各 结点 除 将 其 上 进程 的 检查点 保存 到 本地 磁盘 外 , 同时 还 启动 后台 进程 , 将 这些 检查点 文件 信息 均衡 地 镜像 到 其他 结点 磁盘 上 . 这样 , 如果 某 结点 发生 永久 故障 , 其上 正在 执行 的 应用程序 的 检查点 信息 可 在 其他 正常 结点 上 获得 , 并 从 检查点 处重 加载 该 应用 程序运行 . 若要 容忍 m （ m ＞ 1 ） 个 结点 故障 , 需且 仅 需 将 每个 结点 上 每个 进程 的 检查点 信息 除 存在 本地 磁盘 外 , 还 镜像 到 其他 m 结点 的 磁盘 上 . 可见 , 容忍 m 个 结点 永久 故障 的 检查点 镜像 方式 比 一般 的 检查点 本地 存放 方式 增加 了 m 倍 的 空间 开销 . 这种 平均 镜像 存储技术 不仅 保证 了 系统对 结点 永久 故障 的 恢复 , 而且 避免 了 恢复 后 引起 的 负载 不 平衡 现象 . 
 4 　 性能 测试 及 与 相关 工作 比较 
 　 　 在 这里 , 我们 对 4 个 有 代表性 的 科学计算 应用 进行 检查点 设置 和 回卷 恢复 性能 测试 . 我们 使用 的 测试 平台 是 由 4 台 SUN   SPARC20 工作站 ( 32M 内存 , 1G 硬盘 , Solaris2.4 操作系统 ) 通过 10M   Ethernet 连接 而 构成 的 机群系统 . 我们 用来 考察 ChaRM 系统 的 性能指标 主要 是 检查点 设置 的 时间 开销 和 空间 开销 ( 平均 每次 检查点 设置 各 进程 建立 的 检查点 文件大小 的 总和 ) . 同时 , 为了 考察 检查点 保存 的 主要 优化 方式 — — 写时 拷贝 对 性能 的 改善 , 我们 还 测出 了 以上 各 程序 在 使用 写时 拷贝 优化 方式 下 的 检查点 设置 时间 开销 . 表 1 比较 了 在 使用 相同 的 检查点 间隔 和 建立 了 相同 个数 的 检查点 的 情况 下 , 非 优化 方式 与 写 时 拷贝 优化 的 时间 开销 . 可见 , 写时 拷贝 优化 由于 使 检查点 写入 本地 磁盘 与 计算 并行 , 不同 程度 地 减少 了 检查点 设置 的 时间 开销 . 测试 结果表明 , 在 4 个 应用程序 的 不同 运行 情况 下 , 回卷 恢复 到 不同 的 检查点 都 能 得到 正确 的 计算结果 ； 检查点 设置 带来 的 运行 时间 增加 都 小于 5% , 平均 每次 检查点 设置 的 时间 开销 小于 1% ； 平均 每次 检查点 设置 的 空间 开销 随 应用程序 和 其 规模 的 不同 而 变化很大 . 
 表 1   非 优化 检查点 设置 与 写 时 拷贝 检查点 设置 开销 比较   
 程序 名称 无 检查点 时 4 台 运行 时间 
 ( s ) 检查点 间隔 / 空间 开销 
 ( s / M 字节 ) 非 优化 检查点 设置 写时 拷贝 检查点 设置 
 4 台 运行 时间 
 ( s ) 运行 时间 增加 
 ( % ) 检查 
 点个 
 数 单位 检查点 设置 时 
 开销 
 ( ‰ ) 4 台 运行 时间 
 ( s ) 运行 时间 增加 
 ( % ) 检查 
 点个 
 数 单位 检查点 设置 时间 开销 ( ‰ ) 
 矩阵 幂 
 180 * 180 , 300718.43100 / 8.9744 . 913.6975 . 27726.581 . 1371.62 
 矩阵 幂 
 512 * 512 , 502883.83300 / 27.92970 . 243.0093 . 332933.661 . 7391.92 
 偏 微分方程 
 N = 28 , T = 100001248.34100 / 13.11281 . 062.62122 . 181270.211 . 75121.46 
 偏 微分方程 
 N = 29 , T = 1000519.33100 / 31.7535 . 203.0556 . 11530.302 . 1154.22 
 哈达 玛 变换 
 100008774.11600 / 9.58939 . 601.89141 . 358848.050 . 84140.60 
 EMBAR ( 167 ) 709.21100 / 6.4716 . 891.0871 . 55709.910 . 1070.14 
 　 　 我们 将 基于 检查点 设置 的 并行程序 回卷 恢复 和 进程 迁移 系统 ChaRM , CoCheck ［ 5 ］ , MIST ［ 6 ］ 进行 了 比较 . 如表 2 所示 , ChaRM 不仅 继承 了 CoCheck 和 MIST 对 用户 透明 、 在 用户 级 实现 、 采用 协调 的 检查点 设置 技术 等 有利 的 设计 和 功能 特点 , 而且 结合 了 CoCheck 在 通信 库 之上 实现 以及 MIST 支持 异步 迁移 的 优点 . 同时 , ChaRM 的 CRR 机制 管理 进程 不 依赖于 并行计算 环境 实现 , 更好 地 支持 了 在 不同 并行 环境 之间 的 可移植性 . 并且 ChaRM 系统 实现 了 对 结点 N - 永久 故障 的 容忍 和 容忍 系统 在 检查点 设置 和 故障 恢复 过程 中 出现 的 故障 ( 简称 CRR 故障 ) 的 功能 .   
 表 2   基于 检查点 设置 的 并行程序 回卷 恢复 和 进程 迁移 系统 比较   
 
 　 ChaRMCoCheckMIST 
 　   对 用户 透明 √ √ √ 
 　   在 用户 级 实现 √ √ √ 
 　   在 通信 库 之上 实现 √ √ 　 
 　   协调 式 检查点 设置 √ √ √ 
 　   异步 进程 迁移 √ × √ 
 　   容忍 CRR 故障 √ × × 
 　   结点 N - 永久 故障 的 容忍 √ × × 
 　   管理 进程 不 依赖于 并行计算 环境 √ × × 
 
 本文 研究 得到 国家 863 高科技 项目 基金 资助 。 
 作者 介绍 ： 汪 东升 , 1966 年生 , 博士后 , 副教授 , 主要 研究 领域 为 并行处理 , 容错 计算 . 
 　 　 　 　 　 沈美明 , 女 , 1938 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 并行 / 分布 与 智能 计算机系统 . 
 　 　 　 　 　 郑纬民 , 1946 年生 , 教授 , 博士生 导师 , 主要 研究 领域 为 并行 / 分布 系统 , 并行 编译 . 
 　 　 　 　 　 裴丹 , 1973 年生 , 硕士生 , 主要 研究 领域 为 进程 迁移 , 后 向 故障 恢复 技术 . 
 本文 通讯联系 人 ： 汪 东升 , 北京   100084 , 清华大学 计算机科学 与 技术 系 
 作者 单位 ： 汪 东升 　 沈美明 　 郑纬民 　 裴 　 丹 　 清华大学 计算机科学 与 技术 系 　 北京 　 100084 
 E - mail :   wds @ tsinghua . edu . cn   
 参考文献 
 　 ［ 1 ］ Plank   J   S ,   Kim   Y   et   al .   Fault - tolerant   matrix   operations   for   networks   of   workstations   using   diskless   checkpointing .   Journal   of   Parallel   and   Distributed   Computing ,   1997 , 43 ( 2 ) : 125 ～ 138 
 　 ［ 2 ］ Plank   J   S ,   Beck   M ,   Kinsley   G .   Libckpt :   transparent   checkpointing   under   Unix .   http :   ∥ www . cs . utk . edu / ～ plank / plank / papers / USEUIX - 95w . html 
 　 ［ 3 ］ Chandy   K   M ,   Lamport   L .   Distributed   snapshots :   determining   global   states   of   distributed   systems .   ACM   Transactions   on   Computer   Systems ,   1985 , 3 ( 1 ) : 63 ～ 75 
 　 ［ 4 ］ Koo   R ,   Toueg   S .   Checkpointing   and   rollback - recovery   for   distributed   systems .   IEEE   Transactions   on   Software   Engi - neering ,   1987 , 13 ( 1 ) : 23 ～ 31 
 　 ［ 5 ］ Stellner   G ,   Pruyne   J .   Resource   management   and   checkpointing   for   PVM .   In :   Hermes   P   P   eds .   Proceedings   of   the   2nd   Europe   PVM   User   Group   Meeting .   1995 .   131 ～ 136 
 　 ［ 6 ］ Casas   J ,   Clark   D   et   al .   MIST :   PVM   with   transparent   migration   and   checkpointing .   http :   ∥ www . cse . ogi . edu / DISC / projects / mist / 
 本文 1997 - 10 - 06 收到 原稿 , 1998 - 01 - 19 收到 修改稿   
