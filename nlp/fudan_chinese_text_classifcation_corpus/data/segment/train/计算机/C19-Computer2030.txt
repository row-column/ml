微型 电脑 应用 
 MICROCOMPUTER   APPLICATIONS 
 2000 　 Vol.16 　 No.1 　 P.16 - 18 
 
 
 
 基于 微内核 的 嵌入式 实时 OS 设计 
 毛卫良 　   盛焕烨   　 郝琴 　 徐 险峰 
 摘 　 要 ： 本文 主要 阐述 了 微内核 操作系统 用于 嵌入式 实时 应用 中 存在 的 问题 的 基础 上 ， 从 性能 、 扩展性 和 灵活性 方面 提出 了 改进 的 思路 ， 并 最终 给出 了 一个 适合 于 嵌入式 实时 应用 的 微内核 操作系统 的 模型 。 
 关键词 ： 操作系统 　 微内核 　 嵌入式 　 实时 
 Abstract ： This   paper   at   first   discusses   the   problems   of   Mi   crokernel - based   Operating   Systems   ( OSs ) in   the   real - time   applications   and   then   pr   oposes   the   ideas   of   their   improvement   in   view   of   their   performances ,   scalability   ,   and   flexibility .   In   the   end   of   this   paper ,   a   Microkernel - based   OS   model   is   giv   en ,   which   proves   suitable   in   real - time   applications . 
 Keywords ： OS 　 Micro - kernel 　 embedded 　 real - time ▲ 
 一 、 引言 
 　 　 近年来 ， 随着 微处理器 技术 的 迅速 发展 ， 嵌入式 系统 被 应用 到 越来越 多 领域 中 。 特别 是 随着 掌上 型 PC 、 WebTV 等 的 出现 和 消费 电子 类 设备 智能化 趋势 的 发展 ， 嵌入式 系统 的 应用 市场 更是 得到 了 空前 的 繁荣 。 面对 竞争 激烈 的 市场 ， 嵌入式 系统 设计者 希望 能 通过 缩短 应用 开发 的 超前 时间 ( Lead   Time ) ， 并 满足 嵌入式 系统 高性能 的 要求 来 提高 产品 的 市场 竞争力 。 因此 ， 嵌入式 实时操作系统 的 利用 早 已经 成为事实 。 但 面对 当前 越来越 广 的 嵌入式应用 领域 ， 一个 嵌入式 实时操作系统 能否 尽可能 适用 于 各种各样 的 嵌入式应用 ( 应用 的 多样性 ) 成 了 嵌入式 系统 设计者 特别 关心 的 问题 ， 这 就 对 嵌入式 实时操作系统 的 灵活性 、 可扩展性 提出 了 更 高 的 要求 ， 它们 与 嵌入式 实时操作系统 的 性能 一样 ， 成为 衡量 嵌入式 实时操作系统 的 重要 因素 。 
 　 　 操作系统 的 体系结构 是 影响 操作系统 灵活性 和 可扩展性 的 关键因素 ， 而 微内核 结构 以 其 精练 的 内核 功能 ， 为 实现 操作系统 的 高度 灵活性 和 扩展性 提供 了 一个 理想 的 解决方案 。 
 　 　 但 微内核 结构 在 带来 了 操作系统 高 灵活性 和 扩展性 的 同时 ， 也 带来 了 操作系统 性能 的 降低 ， 这 对于 嵌入式 实时 应用 来说 是 不能允许 的 ， 这 就 在 实现 上 需要 对 微内核 结构 作出 改进 ， 使 其 在 性能 上能 满足 当前 嵌入式 实时 应用 的 要求 。 同时 ， 对 微内核 结构 在 灵活性 和 扩展性 上 的 实现 也 需要 作 进一步 的 改进 ， 以 适应 嵌入式应用 领域 的 不断 拓展 。 本文 正是 围绕 着 这些 内容 而 展开 的 ， 并 最终 给出 了 一个 适合 于 嵌入式 实时 应用 的 微内核 框架 模型 。 
 二 、 微内核 结构 及其 带来 的 问题 
 1 . 微内核 结构 
 　 　 如图 1 ， 微内核 与 传统 的 内核 体系结构 ( 以 UNIX 分层 结构 为 代表 ) 不同 ， 它 通常 只 保留 了 进程 间通信 ( IPC ) ， 进程 调度 等 几项 功能 。 它 依据 客户机 - 服务器 的 模型 概念 ， 把 所有 的 传统 内核 中 的 其他 部分 以 服务器 进程 的 形式 运行 在 微内核 的 外层 ， 而 用户 进程 则 被 当作 客户机 。 客户 要 用到 操作系统 时 ， 就 通过 微内核 和 服务器 进程 进行 通信 以 获取 服务 ， 从 这个 意义 上 看 ， 微内核 仅仅 成 了 传递 消息 的 工具 。 同时 ， 微内核 验证 消息 的 有效性 ， 并 核准 对 硬件资源 的 存取 ， 也 就是 在 微内核 中 实现 对 资源 的 保护 。 
 
 图 1   微内核 体系结构 
 　 　 这种 体系结构 大大提高 了 嵌入式操作系统 的 模块化 程序 ， 使 系统 更加 容易 被 裁剪 和 扩充 ， 因为 操作系统 的 裁剪 和 扩充 工作 已经 成为 服务器 进程 的 删除 和 添加 。 同时 ， 由于 操作系统 中 与 硬件 有关 的 细节 都 包含 在 小小的 微内核 中 ， 这样 整个 操作系统 很 容易 实现 CPU 之间 的 移植 。 此外 ， 服务器 进程 作为 用户 态 进程 运行 ， 有 自己 的 内存保护 空间 ， 以 标准 的 IPC 方式 通信 ， 一个 服务器 出错 ， 不会 导致 整个 系统 的 瘫痪 ， 加强 了 操作系统 强壮 性 。 微内核 的 体系结构 还 使 用户 只 需要 通过 增加 服务器 就 可以 对 操作系统 进行 扩展 ， 并且 不 影响 原 系统 的 可靠性 。 最后 ， 这种 体系结构 还 适合 应用 于 多处理机 和 分布式系统 。 因此 ， 微内核 是 一种 开放 ， 灵活 的 构建 操作系统 的 内核 结构 ， 它 使 操作系统 具有 高度 的 灵活性 和 扩展性 。 
 　 　 2 . 微内核 结构 带来 的 问题 
 　 　 系统 划分 的 粒度 越 精细 ， 必然 会 造成 系统 整体 性能 的 下降 ， 这 对 微内核 体系结构 来说 也 是 如此 。 从图 1 中 可以 看出 ， 相对 于 传统 的 单一 操作系统 ， 微内核 的 模块化 程度 得到 的 很大 提高 ， 但 导致 了 模块 间通信 代价 的 提高 ： 无论是 用户 进程 还是 服务器 进程 ， 要 获得 微内核 的 服务 ， 必须 使用 远程 过程 调用 ( RPC ) ， 在 这里 通过 两个 IPC 实现 ； 用户 进程 要 获取 服务器 的 服务 ， 更是 需要 四个 IPC 才能 实现 ； 同时 ， 需要 对应 的 进程 上下文 切换 。 而 在 传统 的 内核   结构 中 ， 只 需要 一个 简单 的 过程 调用 即可 实现 ， 能常 只是 微内核 通信 代价 的 1 / 5 。 因此 微内核 结构 带来 的 性能 下降 问题 成为 影响 其 应用 于 实时 领域 的 主要 障碍 。 同时 ， 由于 同样 的 原因 限制 了 微内核 结构 中 原本 良好 扩展性 。 
 　 　 微内核 中 的 另外 一个 问题 是 其 资源管理 问题 。 微内核 结构 在 体系结构 上 先进 于 传统 的 操作系统 ， 但 在 资源管理 方面 并未 有 明显 的 改进 ： 都 是 只有 有 特权 的 服务器 和 内核 才能 管理 计算机 资源 ， 而 不 被 信任 的 用户 进程 则 被 限制 于 内核 和 特权 服务器 提供 的 接口 ， 无法 直接 管理 计算机 资源 。 因此 ， 用户 进程 无法 根据 具体 的 应用 实现 对 资源 的 优化 管理 ， 从而 限制 了 操作系统 对 应用 多样性 的 适应能力 ， 而 嵌入式应用 正是 呈现 多样性 的 特征 。 
 　 　 因此 ， 为了 充分利用 微内核 体系结构 的 优点 ， 并 实现 其 在 嵌入式 实时 应用领域 中 的 应用 ， 针对 上述 的 问题 ， 应该 对 微内核 体系结构 进行 改进 。 
 三 、 微内核 结构 的 改进 
 　 　 1 . 性能 的 改进 
 　 　 如上所述 ， 降低 微内核 操作系统 性能 的 最 主要 原因 就是 IPC 的 开销 ， 因此 性能 的 改进 主要 是 围绕 IPC 而 进行 。 
 　 　 由于 IPC 的 实现 主要 是 通过 消息 机制 来 实现 ， 因此 ， 通过 对 消息 机制 的 改进 可以 降低 IPC 的 通信 代价 。 消息 机制 的 改进 可以 从 以下 几个 方面 考虑 ： 
 　 　 . 消息 长度 ： 消息 长度 是 影响 消息传递 代价 的 重要 因素 ， 因此 在 微内核 设计 时 ， 应当 即 可能 的 减少 传递 消息 的 长度 ， 传输 低 数量级 的 消息 ( 轻量级 消息 ) 本身 就 意味着 低 的 通信 的 代价 ， 例如 ， QNX 中 就 采用 了 的 20 字节 数量级 的 消息 。 同时 ， 短消息 还 可以 被 映射 到 寄存器 中 进行 传输 ， 寄存器 的 直接 访问 将 提高 2 倍 的 性能 。 
 　 　 . 重量级 消息 的 处理 ： 正如 前面 对 微内核 体系结构 中 的 问题 的 描述 ， 用户 进程 和 服务器 进程 之间 传递 的 消息 需要 经过 两次 拷贝 ， 首先 从 用户 进程 到 微内核 、 再 从 微内核 到 服务器 进程 ， 这 对于 传递 重量级 消息 来说 ， 代价 就 相当 大 。 因此 一般 都 要 建立 消息 缓存 以 降低 双重 拷贝 的 代价 。 但 当 消息 缓存 命中 失败 时 ， 这种 消息传递 方式 在 传递 重量级 消息 依然 将 大大 影响 系统 的 性能 。 同时 ， 这种 消息传递 方式 对 不 需要 缓存 的 消息 来说 又 是 多余 的 。 因此 ， 在 处理 重量级 消息 的 问题 上 ， 可以 在 消息 发送 时 让 发送者 临时 共享 目标 进程 的 空间 或 采用 其他 的 内存 共享方法 ， 这样 就 直接 将 消息 拷贝到 目标 进程 ， 这种 办法 对 消息传递 来说 理论 上 也 将 提高 2 倍 的 性能 。 其他 IPC 服务 ( 例如 管道 、 消息 队列 ) 也 是 可以 在 这种 最 基本 消息传递 服务 的 基础 上 实现 。 QNX 操作系统 中 就 使用 了 它 的 MULTI - PART 消息传递 机制 来 实现 消息 的 直接 传递 ， 事实证明 ， MULTI - PART 消息传递 机制 是 QNX 高性能 的 基础 。 
 　 　 . 其它 ： 改进 消息 机制 还 可以 ， 接受 或 发送 进程 只 需 读写 一个 消息 中 消息 头 部分 ， 同时 直接 读写 已经 为 消息 分配 的 缓冲区 ， 避免 了 消息 中 数据 段 的 传送 和 缓冲区 的 分配 。 同时 ， 为了 避免 接受 挂 起 消息 时 的 不必要 等待 ， 在 需要 的 进程 中 可以 实现 对 消息 的 直接 读出 ， 这种 机制 对 高速 进行 设备 轮询 的 进程 中 十分 有用 。 此外 ， 还有 设置 进程 优先级 以 优先 某些 重要 消息 的 传送 等等 。 
 　 　 除了 在 消息 机制 进行 改进 以 提高 微内核 操作系统 的 性能 外 ， 还 可以 改进 进程 / 线程 的 调度 策略 来 提高 操作系统 的 性能 。 
 　 　 一种 方法 是 ， 对 请求 进程 来说 ， 发送 请求 消息 按照 优先级 进行 ， 而 服务器 进程 则 根据 接受 到 的 消息 优先级 来 安排 执行 顺序 ， 也 就是 服务器 实现 优先级 的 “ 消息 驱动 ” 。 同时 ， 当有 高 优先级 的 进程 阻塞 在 忙碌 的 服务器 上时 ， 服务器 进程 就 会 提高 自己 的 优先级 ， 从而 原来 正在 得到 服务 的 低优先级 的 进程 就 不能 请求 优先级 已经 高于 自己 的 服务器 进程 ， 只能 放弃 正在 进行 的 请求 ， 高 优先级 进程 就 可以 立刻 得到 所要 的 服务 ， 实现 高 优先级 进程 的 抢先 式 服务 。 
 　 　 还有 一种 方法 是 采用 “ 惰性 调度 ” 策略 。 传统 的 IPC 实现 时 ， 由于 会 引起 重新 调度 ， 因此 需要 更新 进程 / 线程 的 调度 队列 。 由于 微内核 体系结构 中 IPC 十分 频繁 ， 因此 进程 / 线程 调度 队列 的 更新 也 是 影响 性能 的 一个 因素 。 “ 惰性 调度 ” 就是 直到 进程 / 线程 队列 被 查询 时才 对 它们 进行 更新 。 在 实现 时 可以 在 进程 / 线程 控制 块 设置 特殊 标志 位 ， 当 进行 队列 查询 时 ， 根据 标志 位 将 需要 移动 的 进程 / 线程 更新 到 相应 的 队列 中 。 这种 调度 策略 虽然 有时 会 造成 大量 的 队列 操作 ， 但 从 整体 上 来说 ， 能 提高 操作系统 的 性能 。 
 　 　 2 . 扩展性 的 改进 
 　 　 微内核 操作系统 的 扩展 会 引起 性能 的 下降 ， 从而 限制 了 微内核 原本 结构 上 优越 的 扩展性 的 利用 ， 因此 以 微内核 为 基础 的 扩展 在 实现 上 需要 综合 对 性能 的 考虑 。 这里 主要 介绍 SPIN 系统 中 采用 的 方法 来 分析 微内核 扩展性 的 改进 。 
 　 　 SPIN 使用 语言 和 链接 机制 来 动态 实现 微内核 服务 功能 的 动态 扩展 。 应用 为 使用 新 的 操作系统 服务 能够 不载 代码 到 内核 中 ， 这样 就 为 满足 他们 特定 的 需要 实现 了 一个 细粒度 的 、 易 裁剪 的 操作系统 界面 。 操作系统 的 扩展 部分 被 内核 的 编译器 翻译 后 动态 的 链接 到 内核 中 ， 在 内核 的 虚拟地址 空间 中 执行 。 同时 ， 在 具体 实现 时 ， 为了 确保 用户 代码 的 安全性 ， SPIN 使用 了 安全 型 的 语言 Modula - 3 ， 内核 中 的 编译器 对 Modula - 3 代码 进行 静态 分析 ， 同时 插入 运行 时 检查 代码 ， 从而 保证 了 编译 后 的 代码 不会 破坏 内核 的 完整性 ， 也 不会 和 其他 模块 或 用户 级 的 代码 冲突 。 SPIN 的 内核 提供 了 一套 用于 内存 和 处理器 资源管理 的 核心 服务 ， 内核 的 扩展 模块 可以 使用 这些 服务 来 实现 任意 的 计算 。 
 　 　 SPIN 这种 动态 下载 代码 的 形式 ， 给 实现 微内核 的 扩展性 提供 了 良好 的 思路 。 同时 ， 由于 这种 思想 是 将 代码 直接 下载 到 内核 中 ， 在 系统 获得 良好 扩展性 的 同时 并未 增加 内核 和 应用 进程 之间 IPC 的 数量 ， 因此 就 不会 对系统 性能 造成 很大 的 影响 ， 但 同时 也 可以 看出 ， 这种 思想 将 使 原来 功能 简单 的 微内核 变 的 复杂 ， 内核 中 的 编译器 的 编译 性能 不仅 影响 着 微内核 操作系统 的 性能 ， 而且 增加 了 微内核 的 大小 ， 这 对 实现 嵌入式应用 是 很 不利 的 。 因此 ， 在 设计 嵌入式 微内核 实时操作系统 时 ， 应当 采用 这种 动态 下载 代码 的 方法 来 解决 微内核 扩展性 和 性能 之间 的 矛盾 ， 但 同时 也 考虑 到 它 的 负面影响 ， 应当 采取 一定 的 措施 ， 例如 将 编译器 移 到 内核 外部 ， 为 编译 代码 建立 缓存 等 。 
 　 　 3 . 资源管理 的 改进 
 　 　 操作系统 的 功能 就是 抽象 和 保护计算机 资源 ， 向上 提供 一致 的 接口 。 但 如上所述 ， 微内核 体系结构 在 实现 资源管理 时 ， 并未 给 应用 进程 于 很大 的 自由 ， 这种 情形 对 具有 应用 多样性 特征 的 嵌入式 领域 来说 是 不 合适 的 ， 因此 需要 在 微内核 操作系统 中 引进 新 的 思想 。 
 　 　 嵌入式 领域 应用 的 多样性 特征 使 微内核 操作系统 提供 统一 而 又 合适 的 资源 控制 接口 提出 了 难题 ， 而 最好 的 解决 的 办法 只能 是 让 用户 自己 去 实现 对 资源 的 管理 和 控制 ， 因为 只有 用户 才 最 清楚 进行 资源管理 的 目标 。 因此 ， 这种 思路 实际上 就是 要 实现 资源管理 和 保护 的 分离 ： 用户 进程 被 给予 尽可能 多 的 资源管理 控制权 ， 处于 用户 态 的 服务器 进程 不再 具有 特权 ， 而 微内核 则 实现 对 资源 的 保护 ， 作为 操作系统 中 的 唯一 可 信任 部分 。 
 　 　 这种 思想 使得 微内核 在 实现 时 尽可能 的 将 不 需要 保护 的 、 原来 具有 特权 的 内核 和 服务器 变成 没有特权 的 应用程序 。 例如 ， 在 实现 虚拟内存 管理 时 ， 微内核 只要 实现 对 物理 页面 和 用于 换页 的 盘块 的 保护 ， 但 将 换页 、 分配 、 错误处理 等 功能 可以 设置 到 用户 的 应用 层次 中 。 因此 实现 资源管理 的 用户 层 将 具有 很强 的 功能 ， 同时 也 是 很 复杂 。 
 　 　 虽然 嵌入式应用 有 其 多样性 的 特征 ， 但 不是 所有 的 应用 都 需要 重新 对 资源管理 作出 设计 和 实现 ， 毕竟 全部 实现 用户 层 的 资源管理 并 不是 一件 轻松 的 事 。 因此 在 微内核 提供 的 接口 之上 提供 一个 相对 通用 的 应用 公共 库 ， 供 大多数 真正 的 应用程序 调用 显得 很 有 必要 。 例如 ， 在 公共 库中 实现 虚拟内存 、 文件系统 、 网络 、 进程 等等 ， 这样 用户 就 可以 以 在 传统 操作系统 中 使用 的 方式 在 此 公共 库 的 上层 实现 应用 ， 将 大大 加快 开发 的 速度 ， 这 正是 嵌入式应用 设计者 愿意 看到 的 。 但 要 强调 的 是 ， 该 公共 库 的 实现 并 无 微内核 的 特权 ， 用户 可以 任意 修改 和 替代 公共 库中 的 内容 。 
 　 　 其实 这种 思想 就是 MIT   Exokernel 的 主要 思想 ， Exokernel 就是 上述 的 微内核 ， 而 公共 库则 被 称之为 LibOS ， Exokernel 为 实现 微内核 和 LibOS 的 资源管理 和 保护 提供 了 一套 完整 的 原则 和 方法 。 因此 ， 它 可以 用来 解决 微内核 在 资源管理 上 存在 的 问题 ， 提高 微内核 操作系统 在 面队 嵌入式应用 的 多样性 时 的 灵活性 。 
 　 　 4 . 适合 嵌入式 实时 应用 的 微内核 操作系统 模型 
 　 　 通过 以上 的 讨论 ， 我们 不难 形成 一个 适合 嵌入式 实时 应用 的 微内核 操作系统 的 模型 ： 
 　 　 由于 图 1 中 微内核 体系结构 良好 的 模块性 和 灵活性 ， 在 体系结构 可以 仍然 采用 图 1 所示 的 结构 。 但 考虑 到 原 微内核 体系结构 应用 到 嵌入式 实时 领域 而 带来 的 问题 ， 对 该 体系结构 中 的 各个 模块 的 功能 及 实现 思想 应作 一 修改 — — 主要 就是 引入 前面 讨论 改进 中 的 各种 思想 ， 最终 使 其 适合 于 嵌入式 实时 应用 。 
 　 　 . 在 IPC 的 实现 上 ， 尽量 采用 轻量级 的 消息传递 方式 ， 同时 考虑 到 消息传递 ， 特别 是 重量级 在 进程 间 传送 时 的 通信 代价 ， 可以 采用 直接 传送 的 方式 。 另外 还要 尽可能 考虑 采用 其他 技术 ， 象 调度 处理 、 消息 缓冲 处理 等等 ， 用来 减少 IPC 的 代价 ， 因为 IPC 通信 代价 是 影响 微内核 操作系统 实时 性能 的 主要 原因 。 
 　 　 . 与 SPIN 思想 和 Exokernel 思想 的 结合 。 为 解决 微内核 体系结构 中 扩展性 和 性能 之间 的 矛盾 问题 ， 引入 SPIN 思想 中 的 代码 动态 下载 思想 。 但 为了 维护 微内核 的 精练 性 ， 在 这个 模型 中 ， 微内核 中 保留 的 功能 应 按照 Exokernel 资源管理 原则 和 方法 的 进行 确定 。 同时 ， 引用 Exokernel 的 思想 ， 微内核 中 的 服务器 进程 已经 不再 具有 同 微内核 一样 的 特权 ， 用户 可 进行 修改 和 替换 ， 也 就是 Exokernel 思想 中 LibOS 以 一系列 应用层 的 、 无 特权 的 服务器 进程 的 形式 存在 ， 用户 真正 的 应用 进程 依然 以 客户机 的 形式 获取 所 需要 的 服务 。 对于 代码 的 动态 下载 ， 在 这个 模型 中 主要 表现 在 进程 的 下载 ， 无论是 用户 进程 还是 服务器 进程 在 运行 时 都 可以 被 调入 内核 运行 ， 这种 下载方式 显然 将 大大降低 进程 与 微内核 ， 进程 之间 的 IPC 通信 代价 。 为 方便 用户 的 扩展 和 维护 内核 的 完整性 ， 同时 又 不 影响 系统 的 性能 ， 安全 类型 的 语言 可以 考虑 Modula - 3 等 安全 型 语言 ， 同时 ， 编译系统 具有 良好 的 性能 。 但 编译器 按照 Exokernel 的 思想 ， 应当 作为 一个 服务器 进程 设置 在 微内核 的 外层 。 
 四 、 结论 
 　 　 适合 于 嵌入式 实时 应用 的 微内核 操作系统 应当 在 性能 、 扩展性 和 灵活性 上 作出 改进 ， 才能 真正 适合 于 当前 竞争 激烈 的 嵌入式应用 领域 ， 因此 提出 了 本文 的 改进 模型 。 但 实现 一个 完整 的 操作系统 是 一件 很 复杂 的 工作 ， 本文 的 模型 只是 为 基于 微内核 的 嵌入式 实时操作系统 的 设计 从 框架 上 提供 了 一些 思路 ， 要 实现 一个 操作系统 还有 很多 具体 的 问题 需要 讨论 和 解决 。 ■ 
 作者 单位 ： 毛卫良 （ 上海交通大学 计算机科学 与 工程系   上海   200030 ） 
 　 　 　 　 　 盛焕烨 （ 上海交通大学 计算机科学 与 工程系   教授   博士生 导师   上海   200030 ） 
 参考文献 ： 
 ［ 1 ］ QNX   Arohitecture ,   QNX   Software   Systems   Ltd 　 1999 
 ［ 2 ］ Dawson   R .   Engler ,   The   Microkernel   Operating   System   Architecture ,   Mas   sachusetts   Institute   of   Technology 　 QCT 　 1998 
 ［ 3 ］ 刘松强 编著 　 《 实时 计算机系统 》 　 学苑 出版社 　 1994 
 ［ 4 ］ Michel   Gien ,   Micro - kernel   Architecture :   Key   to   Modern   Operating   Syst   em , Chorus   System   1991 
 ［ 5 ］ 许 　 玲 　 计算机 性能 评价 方法 及 在 性能 改进 中 的 应用 　 《 微型 电脑 应用 》 　 1998 年 11 月 　 第 6 期 
 收稿 日期 ： 1999 - 09 - 06 
