宇航学 报   
 JOURNAL   OF   ASTRONAUTICS 
 1998 年   第 19 卷   第 1 期   No1   Vol.9   1998 科技期刊 
 
 　 从 计算机系统 角度 分析 软件可靠性  
 饶 　 岚 
 ( 清华大学 计算机系 设计 自动化 教研组 * 北京 * 100084 ) 
 王占林 　 李沛琼 　 姚一平 
 ( 北京航空航天大学 * 北京 * 100083 ) 
 　 　 摘 　 要 　 从 硬 / 软件 综合 的 角度 对 计算机 进行 可靠性 研究 具有 非常 重要 的 意义 。 本文 作者 对 硬 、 软件 相互作用 进行 了 明确 的 划分 和 定义 。 并 指出 , 是 现行 的 软件可靠性 黑箱 分析方法 禁锢 了 人们 从 更 深层次 对于 硬 / 软件系统 可靠性 进行 研究 。 基于 上述 认识 , 本文 提出 了 解决 软件 分解 单元 之间 耦合 问题 的 办法 。 进而 提出 了 一种 新 的 软件可靠性 分析方法 , 为 对 计算机系统 进行 可靠性 分析 时 , 考虑 硬 、 软件 之间 的 复杂 的 相关 作用 提供 了 基础 , 从而 为 更 准确 地 评估 计算机系统 的 可靠性 提供 了 可能 。 文中 分析 了 一个 飞行 控制系统 实例 。 
 　 　 主题词 　 软件系统 可靠性 　 硬 / 软件 相关性 　 阶段 任务 性 　 建模 
 NALYZING   SOFTWARE   RELIABILITY   FROM   THE   
 POINT   VIEW   OF   COMPUTER   SYSTEM 
 ao   Lan 
 ( Tsinghua   University * Beijing * 100084 ) 
 Wang   Zhanlin 　 Li   Peiqiong 　 Yao   Yiping 
 ( Beijing   University   of   Aeronautics   &   Astronautics * Beijing * 100083 ) 
 　 　 Abstract 　 It   is   significant   to   perform   reliability   analysis   of   computer   systems   from   the   point   view   of   integrated   hardware   and   software . In   this   paper , interplay   types   of   hardware   and   software   are   patitioned   and   defined   explicitly . It   is   also   pointed   that   it   is   the   current   software   reliability   analysis   methods   that   restrains   deeply   study   of   hardware / software   reliability . Based   on   cognition   above , a   methodology   to   solve   coupling   in   decomposed   units   of   software   in   reliability   analysis   is   presented   firstly , then   a   new   methodology   to   analyze   software   reliability   is   presented . It   enables   considerating   the   complex   interplay   in   hardware   and   software , and   then   assessing   computer   systems   more   accurately . A   real   Flying - By - Wire   system   is   analyzed   using   the   method . 
 　 　 Key   words 　 Software   system   reliability 　 Hardware / Software   interplay 　 Phased - mission 　 Modeling 
 1 　 引 　 言 
 　 　 计算机系统 具有 极强 的 实时性 和 动态性 , 且 大多 用 在 可靠性 要求 极高 的 、 具有 重大 经济 价值 的 、 甚至 性命攸关 的 地方 。 因此 对 其 进行 准确 地 可靠性 评估 和 预计 具有 非常 重要 的 意义 。 
 　 　 国际 上 对 硬 / 软件系统 可靠性 的 研究 已 进行 十多年 , 大都 是 将 硬件 部分 和 软件 部分 当做 一般 的 两个 硬件 部件 串联 处理 的 水平 , 对于 在 硬 、 软件 之间 存在 的 各种 复杂 关系 仅 有 片面 的 论及 ［ 9 ］ , ［ 12 ］ 考虑 了 在 软件 故障 计数 阶段 硬件 的 冗余 和 软件 的 多 元件 情况 , 但 它 并 没有 对 软件可靠性 建模 方法 提出 根本 的 解决办法 。 90 年 美国 空间 合作 机构 举办 的 关于 计算机系统 可靠性 建模 评估 的 Workshop ［ 7 ］ 上 指出 , 开发 “ 更 复杂 的 分析 硬 、 软件 之间 , 系统 运行 与 可靠性 之间 的 相关 关系 的 建模 技术 ” 是 当前 的 “ major   need ” 。 
 　 　 文章 第二 部分 通过 对 硬 、 软件 之间 相互作用 类型 的 分析 , 结合 对 现有 计算机系统 可靠性 模型 的 分析 , 指出 了 现有 模型 的 不足 , 以及 本文 的 着眼点 。 第三 部分 提出 了 基于 软件工程 的 软件可靠性 系统化 分析方法 。 通过 对 一个 FBW 系统 实例 的 分析 , 证明 了 它 将 运行剖面 结合 在 模型 中 的 能力 及 实用性 。 文章 最后 对本 方法 进行 了 讨论 。 
 2 　 通过 对 硬 、 软件 之间 相互作用 的 分析 看 现有 模型 的 不足 
 2.1 　 硬件 与 软件 的 相互作用 
 　 　 为了 更好 地 描述 硬件 与 软件 的 相互作用 , 笔者 归纳 其间 存在 四种 相互作用 类型 : 功能 相关 型 , 运行 相关 型 , 故障 相关 型 以及 维修 相关 型 。 
 　 　 硬 / 软件系统 的 相关性 从 设计 初期 就 表现 出来 了 。 硬 、 软件 的 功能 分配 是 在 系统 需求 分配 阶段 进行 的 。 首先 , 它们 之间 是 相互依存 的 , 但 现今 硬 、 软件 各自 所 能 完成 的 功能 又 是 互相 渗透 的 。 因此 系统 功能 分配 不仅 必须 将 功能 完整 地 分配 给 硬 、 软件 , 且 必须 严格 区分 它们 之间 的 功能 界限 。 同时 也 必须 协调 好 它们 之间 的 各种 匹配 关系 。 这些 特点 组成 了 硬 、 软件 之间 的 功能 相关性 。 
 　 　 如果 在 系统分析 及 功能 分配 阶段 , 系统 的 任务 完整 而 又 有 严格 界限 地 分配 给 硬 、 软件 , 且 如果 接口协议 匹配 得当 , 那么 对 硬件 功能 的 违背 就是 硬件 错误 , 对 软件 功能 的 违背 就是 软件 错误 , 不会 有 其它 错误 。 但 这 与 要求 软件设计 完善 一样 不 现实 。 因此 , 应当 承认 第三类 错误 的 存在 , 并 将 它 放在 与 硬件 错误 和 软件 错误 等同 的 地位 上 。 为 明确 划分 标准 , 我们 将 系统 需求 分配 时 造成 的 硬 、 软件 功能 缺陷 和 错误 , 称为 接口 错误 。 具体表现 为 对 它 的 改正 是 对 硬 、 软件 需求 说明书 的 修正 ; 而 硬件 在 设计 制造 时 对 设计 需求 说明书 的 违背 称作 硬件 错误 ; 软件 在 设计 编制 时 对 软件设计 需求 说明书 的 违背 称作 软件 错误 。 接口 错误 导致 故障 的 例子 有 : 系统 功能 分配 不 完全 , 硬 、 软件 的 时序 匹配 协议 问题 等 。 
 　 　 硬 、 软件 的 运行 状态 也 是 相互依存 、 相互影响 的 , 体现 了 它们 之间 的 运行 相关性 。 
 　 　 另外 , 有时 一个 故障 可以 引发 多重 故障 ; 有时 有 的 故障 会 使 系统 的 其它 故障 趋势 发生变化 ; 硬件 在 软件 工作 或 不 工作 时 都 可能 发生 故障 , 而 软件 的 工作 和 故障 活动 会因 硬件 的 故障 而 时时 中断 。 这些 体现 了 硬 、 软件 之间 的 故障 相关性 。 
 　 　 维修 一个 故障 常会 产生 新 错误 , 也 会 使 某些 故障 的 发生 概率 改变 , 同样 , 它 不仅 可能 发生 在 硬件 或 软件 内部 , 也 会 在 它们 之间 发生 。 如此等等 , 体现 了 它们 之间 的 维修 相关性 。 
 2.2 　 现有 计算机系统 可靠性 建模 方法 分析 
 　 　 一般 地 , 计算机系统 可靠性 模型 可以 分成 三大类 : 
 　 　 一是 时序 逻辑 模型 , 即 黑箱 模型 。 它 的 根据 是 系统 的 工作 - 故障 - 维修 行为 的 随机 特性 可以 按照 某一 随机 规律 建立 一定 的 时序 函数 关系 。 现在 实用 的 软件可靠性 模型 , 硬件 部件 可靠性 模型 和 硬件 可靠性 增长 模型 都 属于 这 类 模型 。 现在 实用 的 硬 / 软件系统 可靠性 模型 则 是 上述 的 一个 软件 黑箱 与 一个 硬件 黑箱 按 某种 方式 组合 建立 起来 的 。 
 　 　 二是 组合 逻辑 模型 。 它 认为 系统 状态 是 系统 组成 部件 状态 的 逻辑 组合 。 硬件 系统 模型 大都 采用 这 类 模型 描述 。 
 　 　 黑箱 模型 和 组合 模型 都 有 各自 的 优势 和 不足 。 黑箱 模型 能 考虑 系统 状态 随 时间 变化 的 特性 , 能 提供 系统 未来 的 可靠性 发展 信息 和 未来 状态 的 可靠性 水平 , 为 系统 改进 、 可靠性 增长 管理 和 用户 决策 提供 依据 。 但 它 对 大型 复杂 的 难以 用 常用 随机 分布 处理 的 系统 乏术 , 且 不能 反映 系统 在 不同 时间段 , 不同 任务 中 的 结构 变化 ; 组合 逻辑 模型 能 体现 系统 的 组成部分 在 实现 系统 功能 中 对 可靠性 的 不同 影响 , 但 它 无法 描述 系统 的 动态 过程 对 可靠性 的 影响 。 
 　 　 上述 方法 对于 象 计算机系统 这样 的 强 动态 、 强 实时性 的 系统 来说 , 显然 是 不够 用 的 。 现在 在 分析 硬件 系统可靠性 方面 出现 了 第三类 方法 : 即 时序 、 组合 逻辑 建模 方法 。 70 年代 兴起 的 任务 阶段性 ( phased - mission ) 可靠性 建模 方法 ［ 1 - 3 ］ 就是 这方面 的 一种 尝试 。 它 可以 考虑 硬件 部件 在 实现 系统 功能 时 出现 的 硬件 可靠性 组成 结构 在 不同 的 任务 阶段 会 发生变化 的 事实 。 但 这类 方法 并未 在 软件可靠性 建模 上 应用 , 原因 是 并 无 实用 的 软件可靠性 分解 建模 的 方法 。 这样 就 禁锢 了 人们 从 更深 的 层次 对于 硬 / 软件系统 性 的 认识 。 而 没有 正确 的 认识 自然 难以 得到 正确 的 结论 。 因此 从根本上 改变 现有 的 计算机系统 可靠性 分析方法 势在必行 。 
 3 　 软件 的 系统化 可靠性 分析 
 　 　 通过 对 大量 资料 的 研究 , 可以 发现 目前 绝大多数 软件可靠性 模型 都 是 黑箱 模型 , 仅 有 的 几个 例外 中 , 有 Shooman 的 运行 路径 频率 模型 ［ 4 ］ , Littlewood 的 模块 动态 过程 马氏 模型 和 考虑 模块 执行 时间 变化 的 半马氏 模型 ［ 5 ］ 和 Cheung 的 类似 假设 模块 马氏链 模型 ［ 6 ］ 等 。 但 它们 并 不能 直接 应用 于 实际 软件系统 , 因为 : 
 　 　 ① 它们 没有 考虑 软件系统 各 模块 之间 的 耦合 ; 
 　 　 ② 软件 模型 的 状态 空间 往往 很大 , 难以 处理 。 
 　 　 本 部分 基于 软件工程 对 软件 分解 建模 , 从而 为 软件 阶段性 任务 可靠性 建模 铺平 了 道路 。 
 3.1 　 概念 与 定义 
 　 　 软件 的 结构化 模块化 设计 为 直观 上 对 其 进行 分解 提供 了 方便 。 程序控制 结构 本身 可以 提供 软件 分解 单元 , 程序 路径 和 系统 成功 之间 的 逻辑关系 。 ［ 8 ］ 给出 了 软件 可能 的 六个 分解 等级 。 
 　 　 软件 错误 的 分类 方法 很多 ［ 11 ］ 。 许多 错误 可以 在 不同 的 分解 单元 之间 存在 , 所以 象 以前 的 微观 模型 那样 只 考虑 分解 单元 的 错误 是 不够 的 。 为了 克服 上述 问题 , 本文 采取 了 一个 重要 步骤 , 即将 软件 故障 分成 分别 是 由 两类 错误 导致 的 : 各 分解 单元 的 内部 错误 , 其 影响 只 限于 本 单元 内部 ; 以及 系统 级 错误 。 系统 级 错误 是 指除 前 一类 错误 外 的 所有 错误 , 例如 , 需求 不 完善 , 数据结构 错误 , 控制 逻辑 错误 等 。 对 其 分别 处理 , 在 处理 分解 单元 内部 错误 导致 的 故障 时 , 单元 间 的 耦合 就 能 绕开 。 而且 因为 这种 分类 对 分解 层次 无 任何 限制 , 从 理论 上 说 任何 分解 层次 均 适用 , 且 软件 分解 单元 之间 可以 有 公共 部分 , 这 一点 与 其他 分解 建模 方法 不同 。 以后 可以 看到 这个 结论 是 非常 重要 的 。 
 3.2 　 基本 软件可靠性 模型 
 　 　 因 软件 错误 导致 的 软件系统 故障 只有 在 软件 执行 时才 会 发生 , 因而 软件 分解 单元 不同 的 执行 频率 造成 了 其 对 系统可靠性 影响 的 不同 。 不同 的 软件结构 在 控制流 图上 的 表现 实质 上 都 可以 用 控制流 传递 时间 分布 的 不同 来 代表 。 至此 可以 提出 以下 有 根据 的 假设 : 
 　 　 1 ) 待 分析 的 软件 是 基于 GJB437 - 88 的 要求 编制 的 , 即 软件 采用 五种 基本 语句 结构 编制 , 每个 程序 分解 单元 只有 一个 入口 和 一个 出口 ; 
 　 　 2 ) 软件 故障 分为 软件 分解 单元 内部 错误 导致 的 故障 和 系统 级 错误 导致 的 故障 两类 ; 
 　 　 3 ) 每个 分解 单元 的 故障 均 导致 软件 失效 , 软件 的 失效 状态 是 吸收 状态 ; 
 　 　 4 ) 沿用 许多 软件 黑箱 模型 的 类似 假设 , 即 软件 单元 的 故障 与其 内部 残留 错误 数 有关 。 对于 不可 修 系统 , 软件 单元 在 每 一次 运行 时 的 固有 故障率 是 不变 的 ; 
 　 　 5 ) 对于 特定 的 使用 环境 , 单元 执行 频率 Pij 总是 得到 的 ; 
 　 　 6 ) 内因 故障 过程 与 系统 级 原因 故障 过程 是 相互 独立 的 过程 。 
 　 　 将 每个 分解 单元 的 工作 状态 作为 一个 状态 , 并 定义 F 为 系统 的 失效 状态 , 则 系统 的 故障 过程 可以 被 分成 两个 共生 的 子 过程 , 分别 对应 内因 错误 故障 过程 和 系统 级 错误 故障 过程 。 
 3.2 . 1 　 内因 错误 失效 过程 子系统 的 可靠性 
 　 　 令 Fi ( t ) 为 第 i 单元 的 故障 时间 分布 函数 , F ( t ) = ［ … Fi ( t ) … ］ T ; 
 　 　 Pij ( t ) 为 控制流 独立 地 从 第 i 单元 向 第 j 单元 传递 的 时间 分布 函数 ; 
 　 　 Qij ( t ) 为 第 i 单元 成功 地 执行 并 将 控制 流传 给 第 j 单元 的 关节 转移 概率 , Q = { Qij ( t ) } ; 
 　 　 Gij ( t ) 为 控制流 成功 地 从 第 i 单元 传递 到 第 j 单元 的 一步 转移 时间 的 累积 分布 函数 。 
 　 　 注意 , 以上 所说 的 成功 只 指 无 内因 错误 导致 的 失效 。 那么 
 
 ( 1 ) 
 则 Gij ( t ) 的 更新 方程 为 
 
 ( 2 ) 
 * 指 卷积 。 这里 当 j = k 时 , Gkj ( t ) = 1 , 则 
 
 ( 3 ) 
 
 ( 4 ) 
 　 　 　 … 
 
 ( 5 ) 
 这里 ki , … , kn - 1 为 中间 转移 状态 , 令 G ( n ) ( t ) 为 矩阵 { Gik ( t ) } 的 n 重 卷积 , Q ( t ) = { Qij ( t ) } , 则 
 
 ( 6 ) 
 　 　 　 　 　 n 个 
 这里 B ( i ) 为 所有 的 i 步 转移 的 中间状态 空间 , 并 假定 系统 连续 工作 , 则 子系统 内因 错误 失效 过程 的 任务 可靠性 R ( 1 ) ( t ) 即 为 从 对 应该 任务 的 初始状态 i 到 成功 地 结束 工作 的 状态 j ( j 可以 是 一个 集合 C ) 的 所有 可能 的 转移 步骤 的 概率 之 和 ( Sij 为 S 的 第 i 行第 j 列 元素 ) 。 令 
 
 ( 7 ) 
 则 
 
 ( 8 ) 
 3.2 . 2 　 系统可靠性 
 　 　 从 对 软件系统 故障 过程 的 统计分析 , 可以 获取 系统 级 错误 失效 过程 子系统 的 可靠性 R ( 2 ) ( t ) , 方法 与 黑箱 法 一样 , 也 可以 作为 一个 随机 过程 来 分析 。 因为 以上 的 两个 失效 过程 是 共生 并 相互 独立 的 两个 过程 。 则 系统可靠性 为 
 R ( t ) = R ( 1 ) ( t ) * R ( 2 ) ( t ) 
 ( 9 ) 
 3.3 　 实例 分析 
 　 　 实例 系统 是 为 某 型飞机 按 软件工程 规范 所 设计 的 软件产品 , 将 安装 于 一 四余度 数字 电传 飞行 控制系统 中 , 完成 飞行 控制 和 余度 管理 任务 。 系统 实时 任务 周期 是 12.5 毫秒 。 尽管 软件 是 单套 无 冗余 系统 , 但是 由于 硬件 系统 可以 处于 不同 的 故障 降阶 等级 , 对应 的 余度 管理 部分 的 软件 原理 各不相同 , 投入 运行 的 软件 部分 就 不尽相同 。 但 在 获取 故障 数据 即 在 测试 过程 中 , 并 没有 区分 几种 余度 管理 部分 软件 运行 机会 的 不同 。 如果 用 黑箱 化 可靠 度 模型 , 将 不同 软件 部分 的 运行 概率 等同 看待 , 显然 是 不合 实际 的 。 实践 也 证明 了 黑箱 化 可靠 度 模型 分析 结果 过于 保守 。 
 3.3 . 1 　 软件 分解 及 系统 状态 转移 图 
 　 　 该 系统 包括 许多 功能块 。 将 系统 按 设计 模块 来 划分 很 麻烦 , 本文 提出 的 方法 也 不 需要 这样 做 。 从 系统 功能 描述 中 可以 看出 , 导致 软件 运行剖面 相对 于 测试 剖面 产生 变化 的 原因 主要 是 硬件 部件 余度 降阶 , 使得 运行 的 相应 的 余度 管理软件 部分 地 发生 改变 。 这里 我们 仅作 示意性 分析 。 假定 硬件 系统 是 全 系统 冗余 , 单 故障 工作 , 建立 如图 1 的 系统 运行 流程图 。 由于 余度 管理 周期 12.5 ms 远 小于 系统故障 间隔时间 , 因而 图 1 可以 简化 为 图 2 的 形式 。 建立 系统 状态 转移 图如图 3 所示 。 图中 , A4 为 四余度 管理 及 飞行 控制 部分 软件 子系统 工作 状态 , 其中 不 包括 在 一次 硬件 降阶 以后 投入 运行 的 软件 部分 ; A3 为 三余度 管理 及 飞行 控制 部分 软件 子系统 工作 状态 , 它 不 包括 二 、 三次 硬件 降阶后 投入 运行 的 软件 部分 , 还有 专门 用于 四余度 管理 的 部分 ; 但 这 几个 子系统 并 不 互相 独立 。 
 
 
 图 1 　 系统 运行 流程图 
 
 
 图 2 　 简化 的 系统 运行 流程图 
 
 
 图 3 　 系统 状态 转移 图 
 3.3 . 2 　 系统可靠性 评估 
 　 　 ( 1 ) 故障 记录 
 　 　 有关 该 系统 的 数据 是 某 型飞机 在 某个 硬 、 软件 综合测试 阶段 的 数据 。 系统 全部 的 故障 数据 如表 1 所示 。 故障 记录 中 包括 每个 故障 的 故障 原因 , 据此 可以 确定 每个 故障 属于 那 一个 软件 子系统 。 对表 1 进行 处理 , 得到 各 子系统 的 故障 数据 记录 : 表 2 , 表 3 和表 4 。 这样 做 从 理论 上 说 虽然 难以 十分 严格 , 但 在 系统 工程师 的 帮助 下 可以 做 得 很 好 。 
 　 　 ( 2 ) 可靠性 参数 预计 
 表 1 　 系统 的 全部 故障 数据 记录 
 
 累积 试验 
 时间 相邻 故障 
 间隔时间 瞬时 
 MTBF 故障 
 次数 
 0000 
 24242.410 
 4723231 
 70231.64314 
 25718723.388 
 3044715.673 
 31410101 
 40288881 
 41210101 
 9265145141 
 100680204 
 11831771771 
 17475645640 
 
 表 2 　 硬件 四余度 管理 及 飞行 控制 
 软件 子系统 的 故障 数据 记录 
 
 累积 试验 
 时间 相邻 故障 
 间隔时间 瞬时 
 MTBF 故障 
 次数 
 0000 
 24242.410 
 4723231 
 70232.09111 
 25718793.52 
 31457571 
 40288881 
 41210101 
 9265145141 
 100680402 
 17478218210 
 
 表 3 　 硬件 三余度 管理 及 飞行 控制 
 软件 子系统 的 故障 数据 记录 
 
 累积 试验 
 时间 相邻 故障 
 间隔时间 瞬时 
 MTBF 故障 
 次数 
 0000 
 24242.410 
 4723231 
 70231.64314 
 25718723.388 
 30447471 
 31410101 
 40288881 
 41210101 
 9265145141 
 100680402 
 11831771771 
 17475645640 
 
 表 4 　 系统 级 的 故障 数据 记录 
 
 累积 试验 
 时间 相邻 故障 
 间隔时间 瞬时 
 MTBF 故障 
 次数 
 0000 
 2572572571 
 3044723.51 
 10067023512 
 17477417410 
 
 　 　 由于 经过 划分 的 系统 仍 是 可 执行 系统 , 不妨 借用 黑箱 模型 如 Duane 模型 找出 这些 数据 的 拟合 模型 , 求 出 这些 组 数据 到 t = 1747 小时 时 的 分别 的 拟合 故障率 如下 : 
 
 　 　 全 系统 故障率 　 　 λ = 0.00462 
 　 　 硬件 四余度 管理 及 飞行 控制软件 子系统 故障率 　 　 λ s4 = 0.00302 
 　 　 硬件 三余度 管理 及 飞行 控制软件 子系统 故障率 　 　 λ s3 = 0.00418 
 　 　 系统 级 故障率 　 　 λ s = 0.00104 
 
 　 　 ［ 10 ］ 上 指出 , 单套 FBW 的 故障率 就 目前 水平 而言 是 1 × 10 - 3 / 小时 , 则 可以 推算出 系统 处于 四余度 硬件 都 正常 的 状态 时 硬件 系统 的 故障率 和 三余度 时 硬件 系统 的 故障率 。 
 　 　 根据 图 3 , 系统 的 运行 工作 状态 有 两个 : A4 和 A3 。 那么 从 对 应该 任务 的 初始状态 A4 到 成功 地 结束 工作 的 状态 C 的 所有 可能 的 转移 是 A4 = C 和 A4 → A3 = C 。 显然 此 系统 是 一个 马氏 系统 , 可以 用马氏 过程 理论 求得 当 系统 飞行 时间 为 1 小时 时 , 系统 与 内 、 外因 有关 的 可靠 度 R ( 1 ) ( 1 ) , R ( 2 ) ( 1 ) 和 系统 可靠 度 R ( 1 ) 为 
 R ( 1 ) = R ( 1 ) ( 1 ) * R ( 2 ) ( 1 ) = 0.9970 * 0.9990 = 0.9959 
 而用 黑箱 方法 得到 系统 的 Duane 模型 可靠 度 结果 是 
 R ( 1 ) = exp ( - λ * 1 ) = 0.9954 
 
 
 图 4 　 系统 任务 可靠 度 曲线 
 　 　 画出 系统 可靠 度 曲线 如图 4 所示 。 其中 , 曲线 1 为 本文 方法 的 计算结果 , 曲线 2 为 黑箱 模型 的 结果 。 这个 例子 说明 , 本文 提出 的 方法 在 一定 程度 上 可以 识别 运行 环境 与 测试环境 的 不同 。 而 黑箱 方法 则 无法 做到 。 由于 考虑 了 软件 各 部分 在 不同 的 环境 中 对 系统可靠性 的 不同 贡献 , 软件 可靠 度 分析 结果 更加 准确 。 窥 一斑 可见 全豹 , 如果 对系统 认识 更 全面 , 则 分析 结果 就 会 更 准确 。 
 4 　 结 　 论 
 　 　 本文 首次 对 硬 、 软件 在 组成 计算机系统 中 的 相互作用 关系 进行 了 明确 的 划分 和 定义 。 
 　 　 本文 提出 的 软件 分解 方法 , 可以 绕开 分解 单元 之间 的 耦合 , 而且 保证 了 软件 分解 可以 在 任意 水平 进行 。 本文 提出 的 软件可靠性 建模 方法 是 一种 在 软件可靠性 建模 中将 测试 剖面 与 使用 剖面 统一 起来 的 方法 。 软件 系统化 的 可靠性 分析方法 为 硬 / 软件 的 可靠性 分析 中 考虑 相关 作用 提供 了 可能 。 它 适用 于 对 现代 大规模 的 , 具有 任务 阶段性 , 容错性 , 并行性 以及 任务 多样性 等 性质 的 , 难以 被 黑箱 化 可靠性 模型 描述 的 , 按照 软件工程 规范 编制 的 软件 在 确认 、 测试阶段 进行 任务 ( 运行 ) 可靠 度 评估 和 对 使用 阶段 进行 任务 ( 运行 ) 可靠 度 评估 计 和 预计 。 
 　 　 本 方法 的 分析 结果 与 对系统 的 认识 程度 有关 , 与 环境 也 是 密切相关 的 。 在 对 实际 系统 建模 分析 时 , 应 根据 不同 的 实际 情况 有 选择地 综合 考虑 各种 主要 因素 。 
 参考文献 
 　 1 　 Joanne   Bechta   Dugan . Automated   Analysis   of   Phased - Mission   Reliability . IEEE   Trans . on   Reliability , 1991 , 40 ( 1 ) : 45 - 53 
 　 2 　 James   N . Yoo , Geoge   Smith   Ⅱ . Reliability   Modeling   for   System   Requiring   Mission   Reconfigurability.1990   ARMS.133 - 139 
 　 3 　 Alam . Quantitative   Reliability   Evaluation   of   Repairable   Phased - Mission   Systems   Using   Markov   Approach . IEEE   Trans . on   Rel . , 1986 , 35 ( 5 ) : 498 - 503 
 　 4 　 L . Shooman . Software   Engineering : Design , Reliability , and   Management , McGraw - Hill   Book   Company , 1983 
 　 5 　 Bev . Littlewood . Software   Reliability   Model   for   Modular   Program   Structure . IEEE   Tran . on   Rel . , 1979 , 28 ( 8 ) : 241 - 246 
 　 6 　 Roger   C . Cheung . A   User - Oriented   Software   Reliability   Model . IEEE   Trans . on   Software   Engineering , Mar.1980 . 6 ( 2 ) : 118 - 125 
 　 7 　 Joanne   Bechta   Dugan . On   Measurement   and   Modeling   of   Computer   Systems   Dependability : A   Dialog   Among   Experts . IEEE   Trans . on   Reliability , 1990 , 39 ( 4 ) : 506 - 509 
 　 8 　 Jean - Claude   Laprie . Dependability   Evaluation   of   Software   in   Operation . IEEE   Tran . on   Software   Engineering , 1984 , 10 ( 11 ) : 701 - 714 
 　 9 　 饶岚 等 . 硬 / 软件可靠性 研究进展 . 航天 控制 , 1994 , 11 ( 1 ) 
 　 10 　 姚一平 , 李沛琼 等 编著 . 可靠性 与 余度 技术 . 航空工业 出版社 , 1991 
 　 11 　 郑 人杰 . 计算机 软件测试 技术 . 清华大学出版社 , 1992 , 12 
 　 12 　 Stephen   R . Welke , B   W . Johnson , J   H . Aylor . Reliability   Modeling   of   Hardware / Software   System . IEEE   Trans . on   Reliability , 1995 , 44 ( 3 ) : 413 - 418 　 
 　 本文 于 1996 年 11 月 14 日 收到 
 　 　  本 课题 得到 中国 博士后 科研 基金 的 资助 
