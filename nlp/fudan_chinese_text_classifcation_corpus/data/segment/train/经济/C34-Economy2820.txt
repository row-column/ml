【   文献号   】 2 - 119 
 【 原文 出处 】 《 财会 研究 》 
 【 原刊 地名 】 兰州 
 【 原刊 期号 】 199912 
 【 分   类   号 】 F101 
 【 分   类   名 】 财务 与 会计 
 【 复印 期号 】 200004 
 【   标     题   】 会计 决策支持系统 开发方法 研究 
 【   作     者   】 李希富 / 田文淀 
 【   正     文   】 
         当前 ， 社会 信息化 问题 已 成为 摆在 世界 各国 面前 的 一个 重大 课题 ， 这是 触及 社会 经济 生活 所有 领域 的 一场 变革 ， 各级 各类 会计 信息系统 的 
 建设 和 应用 则 是 企业 管理 信息化 的 中心环节 。 
         事后 核算 、 事中 控制 和 事前 决策 是 会计 管理 的 三个 基本 组成部分 ， 它们 相互 联系 、 相互 补充 ， 而 事前 决策 是 会计 管理 的 最高 形式 。 而 无论 
 是 AIPS 阶段 还是 AMIS 阶段 ， 它们 仅 完成 了 例行 的 日常 会计 信息处理 任务 ， 只是 计算机 在 管理 中 发挥作用 的 初级阶段 。 现在 ， 会计 决策支持系统 
 （ AccountingDecision   Support   System , 简称 ADSS ） 已 成为 计算机 应用领域 中 最 引人注目 的 内容 之一 。 近些年来 国外 计算机 在 企业 管理 中 应用 
 的 重点 已 由 运算 转向 管理控制 、 计划 和 分析 等 高层 管理决策 和 策略 制定 ， 并 收到 了 良好 的 效果 。 而 在 国内 ， 计算机 在 会计 中 的 应用 还 仍停留 于 
 核算 领域 ， 对 ADSS 还是 一个 相当 薄弱 的 领域 ， 无论 从 理论 研究 上 ， 还是 实践 应用 上 来看 都 与 西方 发达国家 存在 很大 的 差距 。 为了 缩小 这一 差距 
 ， 我们 必须 在 借鉴 和 吸收 西方 在 ADSS 领域 研究 和 应用 方面 的 有益 成果 ， 学习 其 先进 技术 和 方法 的 同时 ， 提倡 和 鼓励 跨学科 的 合作 研究 ， 并 从 我 
 国 的 国情 出发 ， 加快 决策支持系统 的 研究 、 开发 与 应用 。 
         开发 一个 计算机 应用 系统 是从 分析 用户 的 需求 入手 的 ， 会计 决策支持系统 的 研制 也 不 例外 。 由于 ADSS 本身 的 性质 和 特点 ， 决定 了 开发 ADSS 
 需要 突破 原有 AIPS 或 AMIS 分析 与 设计 方法 的 框框 ， 建立 适应 于 ADSS 特点 的 系统分析 和 系统 设计 的 方法论 。 
         一 、 传统 系统 开发方法 的 局限性 
         从 方法论 的 角度 来看 ， 传统 的 系统 开发方法 都 是 基于 演绎法 — — 即 自顶向下 法 或 归纳法 — — 即 由 底向上 法 的 系统分析 原理 。 从 它们 应用 于 
 系统 研制 的 过程 来看 ， 一般 需 经过 需求 分析 、 系统 设计 、 系统 实现 、 系统 交付使用 及 维护 等 几个 紧密 相关 的 阶段 ， 因此 ， 通常 又 将 这些 方法 称 
 为 生命周期 法 。 传统 的 生命周期 法 常用 于 AMIS 和 其它 一些 大型软件 的 研制开发 ， 也 有人 用于 开发 ADSS 。 生命周期 法 的 优点 是 整个 开发 过程 和步 
 骤 清楚 ， 每一 阶段 和 步骤 均 有 明确 的 成果 ， 适用 于 一些 问题 领域 比较稳定 、 结构性 好 、 目标 明确 的 系统 ， 若 ADSS 的 开发 ， 则 存在 有 几 方面 的 局 
 限性 ： 
         ( 1 ) 前提 的 局限 ： 传统 的 方法 在 开发 一个 系统 时 一般 基于 这样 一个 前提 ， 用户 的 需求 （ 包括 信息 需求 、 处理 需求 的 目标 设计 等 ） 可以 在 分析 
 阶段 得到 很 好 地 定义 ， 用户 能 清楚 地 知道 并 能 表达 出 它们 要 做 什么 ， 是 如何 做 的 。 而 ADSS 主要 面对 的 是 半 结构化 和 非 结构化 的 会计 问题 ， 这些 
 试图 要 解决 的 问题 不能 事先 完全 而 清晰 的 定义 ， 用户 在 开发 的 初始 阶段 很难 明确 地 陈述 问题 、 提出 要求 。 因此 ， ADSS 难以 满足 这一 基本前提 。 
         ( 2 ) 目标 的 局限 ： 系统 开发方法 的 目标 是 尽量 降低 开发 费用 、 缩短 开发周期 ， 研制 出 最能 满足用户 需求 的 系统 ， 而 开发周期 长 、 开发 费用 高 
 、 维护 困难 是 生命周期 法 的 主要 缺陷 ， ADSS 的 特点 决定 了 对 它 的 开发 只能 是 一个 反复 迭代 的 过程 ， 迅速 而 有效 地 建立 一个 初始 系统 支持 所要 做 
 的 决策 就 显得 尤为重要 。 
         ( 3 ) 灵活性 的 局限 ： 传统 的 方法 强调 系统 生命周期 各 阶段 的 划分 ， 每一 阶段 的 目标 和 任务 是 唯一 确定 的 。 而 在 ADSS 的 研制 过程 中 ， 问题 本身 
 或 用户 对 问题 的 理解 可能 会 随 时间 而 改变 ， 并且 会 发生 在 生命周期 的 任何时刻 。 这种 变化 可能 是 由 环境 的 变化 或者 决策者 的 能力 提高 引起 的 。 
 在 ADSS 的 研制 过程 中 ， 这种 变化 是 经常 的 ， 而 不象 在 AMIS 中 那样 ， 需求 定义 或 处理过程 的 变化 被 认为 是 一种 例外 情形 。 因此 ， 生命周期 法 的 这 
 种 严格 阶段 划分 难以 适用 于 ADSS 的 研制 。 
         ( 4 ) 技术 的 局限 ： ADSS 是 模型 驱动 的 ， 是 面向 决策 的 ， 传统 方法 所 提供 的 描述 信息 需求 、 定义 处理 的 过程 的 工具 难以 用于 刻划 半 结构化 或非 
 结构化 决策 过程 的 方法 及 思路 ， 就是 在 数据组织 结构 的 设计 上 比 一般 的 AMIS 在技术上 难度 更高 。 
         综上所述 ， 传统 的 系统 开发方法 难以 用于 ADSS 场合 ， 这 就 意味着 我们 必须 找到 一种 适合 于 开发 ADSS 的 方法 。 
         二 、 ADSS 开发方法 的 特点 
         到 目前为止 ， 已有 许多 研制 ADSS 的 方法 问世 ， 如 雏型 法 ( Prototyping ) 、 增长 法 ( Increasing ) 、 ROMC 方法 等等 。 这些 方法 各有 侧重 ， 但 基本 
 思路 是 相同 的 ， 即 决策者 和 系统 研制者 先 在 一个 小 的 重要 问题 上 达成 一致意见 ， 以 快捷 的 方法 设计 和 建造 一个 初始 系统 ， 支持 所要 做 的 决策 ； 
 经过 短时间 使用 以后 ， 对系统 进行 评价 、 修改 和 扩展 ， 经过 反复 循环 ， 使 系统 成为 一个 相对 稳定 的 系统 ， 并 能 对 一组 决策 任务 提供 支持 。 这 就 
 是 说 将 典型 的 系统 开发 的 主要 阶段 合并 成 一种 反复 迭代 的 过程 。 从 一般 方法论 的 角度 来看 ， ADSS 的 研制 方法 具有 以下 几个 特别 。 
         ( 1 ) 交互 设计 
         ADSS 研制 方法 强调 分析 与 设计 的 动态性 ， 随着 决策问题 、 决策 环境 、 决策者 风格 的 变化 ， 分析 设计 也 要 不断 发展 、 演变 、 求精 。 交互 设计 
 强调 用户 、 系统 和 研制 人员 之间 的 相互作用 。 
         ( 2 ) 用户 的 参与 
         同 AMIS 的 研制 过程 相比 ， ADSS 更加 强调 用户 的 参与 。 在 ADSS 的 开发 过程 中 ， 用户 不仅 是 研制 任务 的 提出 者 、 系统 的 需求 定义 和 评价者 、 研 
 制 过程 的 参与 和 系统 的 使用者 （ AMLS 仅限于 此 ） ， 而且 是 ADSS 的 主要 设计者 和 管理者 。 
         ( 3 ) 适应 决策者 风格 
         决策者 希望 能 直接 经历 实践 ， 亲自 操作系统 ， 因此 ， 决策者 的 经验 、 知识 、 偏好 等 直接 影响 信息 需求 、 模型 构造 、 人机接口 和 输入输出 设 
 计 ， 因此 ， ADSS 应该 具备 相当 的 灵活性 以 适应 各种 不同 的 决策者 风格 。 
         ( 4 ) 尽可能 短 的 研制 周期 
         快速 研制 ， 尽早 交付使用 ， 尽快 见效 可 使 用户 树立 信心 。 研制 周期 过长 ， 不仅 会 使 用户 失去 耐心 ， 而且 时间 一长 ， 时过境迁 、 研制 出来 的 
 系统 可能 已 不能 适应 变化 了 的 环境 。 
         ( 5 ) 以 生成器 为 基础 的 积木 式 设计 要 满足 快速 多变 的 特点 ， 就 需要 有 一个 较 好 的 软件 环境 。 DSS 生成器 ( DSSG ) 正是 支持 快速 、 灵活 研制 DSS 的 
 软件 。 目前 ， 国外 多数 ADSS 都 是 在 DSS 生成器 上 开发 的 ， 而 交互式 财务计划 系统 ( IFPS ) 本身 就是 一种 DSS 生成器 。 
         ( 6 ) 学习 和 创造 对于 半 结构 和 非 结构化 的 问题 ， 决策者 和 研究者 都 需要 学习 ， 在 学习 中 寻找 新 的 更 完善 的 解决问题 的 途径 ， 因此 ， ADSS 研制 
 方法 注重 决策者 和 研制者 交互 过程 中 的 学习 以及 ADSS 系统 本身 的 辅助 学习 能力 。 
         三 、 ADSS 开发 的 三个 层次 
         从 系统 开发 的 角度 来看 ， ADSS 具有 三个 不同 的 技术 层次 ， 应用层 、 生成器 、 工具 层 ， 它们 面向 的 人员 不同 ， 所起 的 作用 也 不同 。 
         应用层 属于 最高层 ， 它 直接 面向用户 ， 可 由 ADSS 工具 构成 ， 亦 可以 由 生成器 产生 。 ADSS 生成器 是 用来 研制 ADSS 的 硬件 和 软件系统 ， 它 包括 
 数据管理 、 模型 管理 、 知识 管理 和 对话 管理所 需要 的 技术 以及 将 它们 有机 地 结合 起来 的 接口 。 利用 生成器 ， ADSS 研制者 可以 根据 决策者 的 要求 
 、 环境 和 任务 ， 迅速 构造 出来 ， 从而 大大缩短 ADSS 的 研制 周期 ， 降低 研制 费用 。 工具 层 由 一些 可用 来 构成 ADSS 或 生成器 的 硬件 或 软件 单元 。 如 
 净 现值 计算 程序 ， 彩色图像 工具 ， 线性 规则 软件包 ， 风险 分析 功能 等 。 
         半 结构化 和 非 结构化 的 决策 过程 常常 处于 不断 变化 的 环境 之中 ， 这 就 要求 ADSS 能 对 决策 过程 模型 、 参数 、 约束条件 、 内外部 影响 因素 等 及 
 时 予以 改变 或 扩充 。 从这一点 来看 ， 利用 ADSS 生成器 开发 ADSS 比 直接 由 ADSS 工具 来 开发 更能 灵活 的 适应 各种 变化 。 
         四 、 ROMC 方法 
         根据 以上 分析 ， 笔者 认为 ， ROMC 方法 是 开发 ADSS 比较 理想 的 方法 。 ROMC 方法 首先 是 由 Carison 提出 的 ， 它 的 基本原理 是 ： 根据 西蒙 的 决策 过 
 程 模型 ， 尽管 决策 过程 是 非常复杂 的 ， 但 决策 过程 中 决策者 从事 的 三个 基本 活动 （ 情报 、 设计 、 选择 ） 都 是 能够 识别 的 。 通过 区分 决策 的 基本 
 活动 ， 可以 了解 决策者 在 这些 活动 中 的 行为 ， 从而 确定 需要 的 支持 。 
         在 使用 ROMC 方法 时 ， 需要 对 各种各样 的 决策 过程 和 决策者 的 需要 进行 分析 ， 以 通过 用 ROMC 方法 减少 决策 支持 的 要求 与 系统 能力 之间 的 差别 
 。 从 用户 的 立场 来看 ， ADSS 的 能力 在于 以下 几个 方面 ： 
         ( 1 ) 提供 表达式 以 帮助 决策者 将 问题 概念化 以便 于 处理 和 交流 。 
         ( 2 ) 提供 对 这些 表达式 进行 分析 和 运算 的 某些 操作方法 。 
         ( 3 ) 提供 辅助 记忆 手段 。 
         ( 4 ) 提供 处理 和 使用 整个 系统 的 控制 机构 。 
         ROMC 方法 正是 建立 在 这 四个 方面 的 基础 之上 的 ， 它 主要 从 以下几点 进行 分析 ： ① 表达方式 ( Representation ) ： 使 问题 概念化 ； ② 操作 ( Opr 
 ation ) ： 对 表达 进行 加工 ； ③ 记忆 辅助 ( Memory   aid ) ： 表达 与 加工 的 存储 支持 ； ④ 控制 机制 ( Controlmachqnism ) ： 控制 、 协调 整个 系统 。 
         ROMC 方法 正是 这 四个 方面 的 缩写 ， 在 使用 ROMC 方法 时 ， 需要 对 各种各样 的 决策 过程 和 决策者 的 需要 进行 分析 ， 以求 通过 用 ROMC 方法 减少 决 
 策 支持 的 要求 与 系统 能力 的 差别 。 虽然 决策 过程 和 决策 的 需求 因 决策 种类 和 决策者 的 不同 而 变化 ， 但 也 存在 一些 共同 特征 ： 
         ( 1 ) 对于 半 结构化 的 非 结构化 的 决策问题 ， 要 决策者 清楚 地 描述 决策 过程 是 困难 的 ， 决策者 在 做 决策 或 在 解决 决策 时 一般 运用 某些 概念化 的 
 东西 ， 例如 图像 、 卡片 、 公式 、 模型 等 。 针对 于 此 ， ROMC 采取 了 过程 独立 的 方法 。 所谓 过程 独立 也 就是 它 避免 了 对 决策者 的 活动 的 描述 限制 于 
 按 某 一 顺序 进行 。 这 基于 数据 流程图 的 传统 系统分析 方法 有着 本质 和 不同 。 
         ( 2 ) 虽然 决策 过程 是 很 难 解释 的 ， 但 西蒙 的 情报 ， 设计 和 选择 对 决策 活动 的 分类 是 很 有用 的 。 ROMC 方法 依赖 表达式 （ 而 不仅仅 是 数据 ） 作为 
 联系 ADSS 各 部分 的 纽带 ， 它 是 通过 在 表达式 上 的 操作 来 支持 决策 过程 的 情报 、 设计 和 选择 活动 ； 各种 存储 又 去 支持 表达式 和 操作 ， 而 控制 则 是 
 为了 控制 表达式 、 操作 和 存储 。 识别 表达式 以及 关于 表达式 的 操作 比 识别 完整 的 决策 过程 要 容易 的 多 。 
         ( 3 ) ROMC 方法 为 分析 和 设计 ADSS 提供 了 框架 ， 但 并 没有 提供 实现 ADSS 的 具体 技术 。 ROMC 方法 需要 ADSS 生成器 的 支持 。 
   
